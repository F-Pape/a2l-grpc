{% macro padding(indent) %}{% if indent == 1 %}1___{% elif indent == 2 %}2_______{% elif indent == 3 %}3___________{% elif indent == 4 %}4_______________{% elif indent == 5 %}5___________________{% elif indent == 6 %}6_______________________{% endif %}{% endmacro %}
{%- macro dump_a2ml_node(t, currentIndex=0, lastIndex=0, indent=0) -%}
{%- if t.Type == 'root' -%}
{%- for declaration in t.Declaration -%}
{{ dump_a2ml_node(declaration, 0, 0, indent) }};
{% endfor -%}
{%- elif t.Type == 'type_definition' -%}
{{ dump_a2ml_node(t.TypeName, 0, 0, indent) }}
{%- elif t.Type == 'block_definition' -%}
{{padding(indent)}}block "{{ t.Tag }}" {{ dump_a2ml_node(t.TypeName, 0, 0, indent) }}
{%- elif t.Type == 'predefined_type_name' -%}
{{padding(indent)}}{{ t.Name }}
{%- elif t.Type == 'struct_type_name' -%}
{{padding(indent)}}struct{% if t.Identifier %} {{ t.Identifier }}{% endif %}{% if t.Members %} {% templatetag openbrace %}
{%- for member in t.Members %}
{{ dump_a2ml_node(member, 0, 0, indent+1) }}
{%- endfor %}
{% templatetag closebrace %}{% endif %}
{%- elif t.Type == 'struct_member' -%}
{{ dump_a2ml_node(t.Member, 0, 0, indent) }};
{%- elif t.Type == 'member' -%}
{{ dump_a2ml_node(t.TypeName, 0, 0, indent) }}{% for specifier in t.ArraySpecifier %}[{{ specifier }}]{% endfor %}
{%- elif t.Type == 'tagged_struct_type_name' -%}
{{padding(indent)}}taggedstruct{% if t.Identifier %} {{ t.Identifier }}{% endif %}{% if t.Members %} {% templatetag openbrace %}
{%- for member in t.Members %}
{{ dump_a2ml_node(member, 0, 0, indent+1) }}
{%- endfor %}
{% templatetag closebrace %}{% endif %}
{%- elif t.Type == 'tagged_struct_member' -%}
{% if t.Star %}({% endif %}{{ dump_a2ml_node(t.Member, 0, 0, indent) }}{% if t.Star %})*{% endif %};
{%- elif t.Type == 'tagged_struct_definition' -%}
{% if t.Star %}({% endif %}{% if t.Tag %}"{{ t.Tag }}" {% endif %}{% if t.Member %}{{ dump_a2ml_node(t.Member, 0, 0, indent) }}{% endif %}{% if t.Star %})*{% endif %}
{%- elif t.Type == 'tagged_union_type_name' -%}
{{padding(indent)}}taggedunion{% if t.Identifier %} {{ t.Identifier }}{% endif %}{% if t.Members %} {% templatetag openbrace %}
{%- for member in t.Members %}
{{ dump_a2ml_node(member, 0, 0, indent+1) }}
{%- endfor %}
{% templatetag closebrace %}{% endif %}
{%- elif t.Type == 'tagged_union_member' -%}
{{padding(indent)}}{% if t.Tag %}"{{t.Tag}}" {% endif %}{{ dump_a2ml_node(t.Member, 0, 0, indent) }};
{%- elif t.Type == 'enum_type_name' -%}
{{padding(indent)}}enum{% if t.Identifier %} {{ t.Identifier }}{% endif %}{% if t.Enumerators %} {% templatetag openbrace %}
{%- for enumerator in t.Enumerators %}
{{ dump_a2ml_node(enumerator, forloop.Counter, t.Enumerators|length, indent+1) }}
{%- endfor %}
{{padding(indent)}}{% templatetag closebrace %}{% endif %}
{%- elif t.Type == 'enumerator' -%}
{{padding(indent)}}"{{ t.Keyword }}"{% if t.HasConstant %} = {{ t.Constant|integer }}{% if currentIndex < lastIndex %},{% endif %}{% endif %}
{%- else -%}
not implemented... {{ t }}
{%- endif -%}
{%- endmacro -%}
{%- macro dump_if_data_node(t) -%}
{%- if t.Type == 'if_data' -%}
/begin IF_DATA {{ t.Name }}
{% for blob in t.Blob -%}
{{ dump_if_data_node(blob) }}
{% endfor -%}
/end IF_DATA
{%- elif t.Type == 'generic_node' -%}
/begin {{ t.Name }}
{% for blob in t.Blob -%}
{{ dump_if_data_node(blob) }}
{% endfor -%}
/end  {{ t.Name }}
{%- elif t.Type == 'generic_parameter' -%}
{{ dump_if_data_node(t.Value) }}
{%- elif t.Type == 'tag' -%}
{{ t }}
{%- elif t.Type == 'string' -%}
{{ t }}
{%- elif t.Type == 'identifier' -%}
{{ t }}
{%- elif t.Type == 'numeric' -%}
{{ t }}
{%- elif t.Type == 'string' -%}
{{ t }}
{%- else -%}
not implemented... {{ t }}
{%- endif -%}
{%- endmacro -%}
/* generated from gomodparser */
{%- if asap2_version %}
ASAP2_VERSION {{ asap2_version.VersionNo }} {{ asap2_version.UpgradeNo }}
{% endif -%}
{%- if a2ml_version %}
A2ML_VERSION {{ a2ml_version.VersionNo }} {{ a2ml_version.UpgradeNo }}
{% endif -%}
{%- if project %}
/begin PROJECT {{ project.Name }} "{{ project.LongIdentifier }}"
    {%- if project.Header %}
    /begin HEADER "{{ project.Header.Comment }}"
        {%- if project.Header.Version %}
        VERSION "{{ project.Header.Version }}"
        {%- endif %}
        {%- if project.header.projectNo %}
        PROJECT_NO {{ project.Header.ProjectNo  }}
        {%- endif %}
    /end HEADER
    {%- endif -%}
    {%- if project.Module -%}
    {% for module in project.Module %}
    /begin MODULE {{ module.Name }} "{{ module.LongIdentifier }}"
        {%- if module.A2ML %}
        /begin A2ML
{{ dump_a2ml_node(module.A2ML, 0, 0, 3) }}
        /end A2ML
        {%- endif %}
        {%- if module.ModPar %}
        /begin MOD_PAR "{{ module.ModPar.Comment }}"
            {%- if module.ModPar.AddrEpk %}
            ADDR_EPK {{ module.ModPar.AddrEpk }}
            {%- endif %}
            {%- if module.ModPar.Epk %}
            EPK "{{ module.ModPar.Epk }}"
            {%- endif %}
            {%- for memorySegment in module.ModPar.MemorySegment %}
            /begin MEMORY_SEGMENT
            {{memorySegment.Name}} "{{memorySegment.LongIdentifier}}"
            {{memorySegment.PrgType}} {{memorySegment.MemoryType}} {{memorySegment.Attribute}} {{memorySegment.Address}} {{memorySegment.Size}}{% for offset in memorySegment.Offset %} {{offset}}{% endfor %}
            {%- for ifData in memorySegment.IfData %}
{{ dump_if_data_node(ifData) }}
            {%- endfor %}
            /end MEMORY_SEGMENT
            {%- endfor %}
        /end MOD_PAR
        {%- endif %}
        {%- if module.ModCommon %}
        /begin MOD_COMMON "{{ module.ModCommon.Comment }}"
            {%- if module.ModCommon.ByteOrder %}
            BYTE_ORDER {{ module.ModCommon.ByteOrder }}
            {%- endif %}
        /end MOD_COMMON
        {%- endif %}
        {%- for ifData in module.IfData %}
{{ dump_if_data_node(ifData) }}
        {%- endfor %}
        {%- for axisPts in module.AxisPts %}
        /begin AXIS_PTS {{ axisPts.Name }} "{{ axisPts.LongIdentifier }}"
            {{ axisPts.Address }} {{ axisPts.InputQuantity }} {{ axisPts.Deposit }} {{ axisPts.MaxDiff }} {{ axisPts.Conversion }} {{ axisPts.MaxAxisPoints }} {{ axisPts.LowerLimit }} {{ axisPts.UpperLimit }}
            {%- if axisPts.Format %}
            FORMAT "{{ axisPts.Format }}"
            {%- endif %}
            {%- if axisPts.ByteOrder %}
            BYTE_ORDER {{ axisPts.ByteOrder }}
            {%- endif %}
            {%- if axisPts.CalibrationAccess %}
            CALIBRATION_ACCESS {{ axisPts.CalibrationAccess }}
            {%- endif %}
            {%- if axisPts.HasEcuAddressExtension %}
            ECU_ADDRESS_EXTENSION {{ axisPts.EcuAddressExtension }}
            {%- endif %}
        /end AXIS_PTS
        {%- endfor %}
        {%- for measurement in module.Measurement %}
        /begin MEASUREMENT {{ measurement.Name }} "{{ measurement.LongIdentifier }}"
            {{ measurement.DataType }} {{ measurement.Conversion }} {{ measurement.Resolution }} {{ measurement.Accuracy }} {{ measurement.LowerLimit }} {{ measurement.UpperLimit }}
            {%- if measurement.Format %}
            FORMAT "{{ measurement.Format }}"
            {%- endif %}
            {%- if measurement.ArraySize %}
            ARRAY_SIZE {{ measurement.ArraySize }}
            {%- endif %}
            {%- if measurement.BitMask %}
            BIT_MASK {{ measurement.BitMask }}
            {%- endif %}
            {%- if measurement.ByteOrder %}
            BYTE_ORDER {{ measurement.ByteOrder }}
            {%- endif %}
            {%- if measurement.EcuAddress %}
            ECU_ADDRESS {{ measurement.EcuAddress }}
            {%- endif %}
            {%- for ifData in measurement.IfData %}
{{ dump_if_data_node(ifData) }}
            {%- endfor %}
            {%- if measurement.MatrixDim %}
            MATRIX_DIM {{ measurement.MatrixDim.XDim }} {{ measurement.MatrixDim.YDim }} {{ measurement.MatrixDim.ZDim }}
            {%- endif %}
            {%- if measurement.HasEcuAddressExtension %}
            ECU_ADDRESS_EXTENSION {{ measurement.EcuAddressExtension }}
            {%- endif %}
        /end MEASUREMENT
        {%- endfor %}
        {%- for compuMethod in module.CompuMethod %}
        /begin COMPU_METHOD {{ compuMethod.Name }} "{{ compuMethod.LongIdentifier }}"
            {{ compuMethod.ConversionType }} "{{ compuMethod.Format }}" "{{ compuMethod.Unit }}"
            {%- if compuMethod.CompuTabRef %}
            COMPU_TAB_REF {{ compuMethod.CompuTabRef }}
            {%- endif %}
            {%- if compuMethod.Coeffs %}
            COEFFS {{ compuMethod.Coeffs.A }} {{ compuMethod.Coeffs.B }} {{ compuMethod.Coeffs.C }} {{ compuMethod.Coeffs.D }} {{ compuMethod.Coeffs.E }} {{ compuMethod.Coeffs.F }}
            {%- endif %}
            {%- if compuMethod.RefUnit %}
            REF_UNIT {{ compuMethod.RefUnit }}
            {%- endif %}
        /end COMPU_METHOD
        {%- endfor %}
        {%- for unit in module.Unit %}
        /begin UNIT {{ unit.Name }} "{{ unit.LongIdentifier }}"
            "{{ unit.Display }}"
            {{ unit.Type }}
            {%- if unit.SiExponents %}
            SI_EXPONENTS {{ unit.SiExponents.Length }} {{ unit.SiExponents.Mass }} {{ unit.SiExponents.Time }} {{ unit.SiExponents.ElectricCurrent }} {{ unit.SiExponents.Temperature }} {{ unit.SiExponents.AmountOfSubstance }} {{ unit.SiExponents.LuminousIntensity }}
            {%- endif %}
            {%- if unit.RefUnit %}
            REF_UNIT {{ unit.RefUnit }}
            {%- endif %}
            {%- if unit.UnitConversion %}
            UNIT_CONVERSION {{ unit.UnitConversion.Gradient }} {{ unit.UnitConversion.Offset }}
            {%- endif %}
        /end UNIT
        {%- endfor %}
        {%- for compuTab in module.CompuTab %}
        /begin COMPU_TAB {{ compuTab.Name }} "{{ compuTab.LongIdentifier }}" {{ compuTab.ConversionType }} {{ compuTab.NumberValuePairs }}
            {%- for val in compuTab.Val %}
            {{ val.In }} {{ val.Out }}
            {%- endfor %}
            {%- if compuTab.DefaultValue %}
            DEFAULT_VALUE {{ compuTab.DefaultValue }}
            {%- endif %}
        /end COMPU_TAB
        {%- endfor %}
        {%- for compuVTab in module.CompuVTab %}
        /begin COMPU_VTAB {{ compuVTab.Name }} "{{ compuVTab.LongIdentifier }}" {{ compuVTab.ConversionType }} {{ compuVTab.NumberValuePairs }}
            {%- for val in compuVTab.Val %}
            {{ val.In }} "{{ val.Out }}"
            {%- endfor %}
            {%- if compuVTab.DefaultValue %}
            DEFAULT_VALUE {{ compuVTab.DefaultValue }}
            {%- endif %}
        /end COMPU_VTAB
        {%- endfor %}
        {%- for compuVTabRange in module.CompuVTabRange %}
        /begin COMPU_VTAB_RANGE {{ compuVTabRange.Name }} "{{ compuVTabRange.LongIdentifier }}" {{ compuVTabRange.NumberValueTriples }}
            {%- for val in compuVTabRange.Val %}
            {{ val.InMin }} {{ val.InMax }} "{{ val.Out }}"
            {%- endfor %}
            {%- if compuVTabRange.DefaultValue %}
            DEFAULT_VALUE {{ compuVTabRange.DefaultValue }}
            {%- endif %}
        /end COMPU_VTAB_RANGE
        {%- endfor %}
    /end MODULE
    {%- endfor %}
    {%- endif %}
/end PROJECT
{% endif -%}
