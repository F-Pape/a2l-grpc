// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.23.1
// source: protobufs/A2L.proto

package a2l

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AddrTypeType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *AddrTypeType) Reset() {
	*x = AddrTypeType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddrTypeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddrTypeType) ProtoMessage() {}

func (x *AddrTypeType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddrTypeType.ProtoReflect.Descriptor instead.
func (*AddrTypeType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{0}
}

func (x *AddrTypeType) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// typedef enum datatype { UBYTE, SBYTE, UWORD, SWORD, ULONG, SLONG, FLOAT32_IEEE, FLOAT64_IEEE }
//
// Enumeration for description of the basic data types in the ECU program.
type DataTypeType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *DataTypeType) Reset() {
	*x = DataTypeType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataTypeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataTypeType) ProtoMessage() {}

func (x *DataTypeType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataTypeType.ProtoReflect.Descriptor instead.
func (*DataTypeType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{1}
}

func (x *DataTypeType) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Enumeration for description of the axis point sequence in the memory.
//
// - INDEX_INCR: Increasing index with increasing address
// - INDEX_DECR: decreasing index with increasing address
type IndexOrderType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *IndexOrderType) Reset() {
	*x = IndexOrderType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexOrderType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexOrderType) ProtoMessage() {}

func (x *IndexOrderType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexOrderType.ProtoReflect.Descriptor instead.
func (*IndexOrderType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{2}
}

func (x *IndexOrderType) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type A2MLType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Declaration []*Declaration `protobuf:"bytes,1,rep,name=Declaration,proto3" json:"Declaration,omitempty"`
}

func (x *A2MLType) Reset() {
	*x = A2MLType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *A2MLType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*A2MLType) ProtoMessage() {}

func (x *A2MLType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use A2MLType.ProtoReflect.Descriptor instead.
func (*A2MLType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{3}
}

func (x *A2MLType) GetDeclaration() []*Declaration {
	if x != nil {
		return x.Declaration
	}
	return nil
}

type A2MLVersionType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VersionNo *IntType `protobuf:"bytes,1,opt,name=VersionNo,proto3" json:"VersionNo,omitempty"`
	UpgradeNo *IntType `protobuf:"bytes,2,opt,name=UpgradeNo,proto3" json:"UpgradeNo,omitempty"`
}

func (x *A2MLVersionType) Reset() {
	*x = A2MLVersionType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *A2MLVersionType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*A2MLVersionType) ProtoMessage() {}

func (x *A2MLVersionType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use A2MLVersionType.ProtoReflect.Descriptor instead.
func (*A2MLVersionType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{4}
}

func (x *A2MLVersionType) GetVersionNo() *IntType {
	if x != nil {
		return x.VersionNo
	}
	return nil
}

func (x *A2MLVersionType) GetUpgradeNo() *IntType {
	if x != nil {
		return x.UpgradeNo
	}
	return nil
}

// Address of the EPROM identifier
type AddrEpkType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Address of the EPROM identifier
	Address *LongType `protobuf:"bytes,1,opt,name=Address,proto3" json:"Address,omitempty"`
}

func (x *AddrEpkType) Reset() {
	*x = AddrEpkType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddrEpkType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddrEpkType) ProtoMessage() {}

func (x *AddrEpkType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddrEpkType.ProtoReflect.Descriptor instead.
func (*AddrEpkType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{5}
}

func (x *AddrEpkType) GetAddress() *LongType {
	if x != nil {
		return x.Address
	}
	return nil
}

// In complex objects (maps and axis) the alignment of a value may not coincide with the bit width of a value. This
// keyword is used to define the alignment in the case of bytes. Used in MOD_COMMON and RECORD_LAYOUT.
type AlignmentByteType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// describes the border at which the value is aligned to, i.e. its memory address must be dividable by the value
	// Alignment Border.
	AlignmentBorder *IntType `protobuf:"bytes,1,opt,name=AlignmentBorder,proto3" json:"AlignmentBorder,omitempty"`
}

func (x *AlignmentByteType) Reset() {
	*x = AlignmentByteType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlignmentByteType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlignmentByteType) ProtoMessage() {}

func (x *AlignmentByteType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlignmentByteType.ProtoReflect.Descriptor instead.
func (*AlignmentByteType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{6}
}

func (x *AlignmentByteType) GetAlignmentBorder() *IntType {
	if x != nil {
		return x.AlignmentBorder
	}
	return nil
}

// In complex objects (maps and axis) the alignment of a value may not coincide with the bit width of a value. This
// keyword is used to define the alignment in the case of 32bit floats.
//
// Used in MOD_COMMON and RECORD_LAYOUT.
type AlignmentFloat32IeeeType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// describes the border at which the value is aligned to, i.e. its memory address must be dividable by the value
	// Alignment Border.
	AlignmentBorder *IntType `protobuf:"bytes,1,opt,name=AlignmentBorder,proto3" json:"AlignmentBorder,omitempty"`
}

func (x *AlignmentFloat32IeeeType) Reset() {
	*x = AlignmentFloat32IeeeType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlignmentFloat32IeeeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlignmentFloat32IeeeType) ProtoMessage() {}

func (x *AlignmentFloat32IeeeType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlignmentFloat32IeeeType.ProtoReflect.Descriptor instead.
func (*AlignmentFloat32IeeeType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{7}
}

func (x *AlignmentFloat32IeeeType) GetAlignmentBorder() *IntType {
	if x != nil {
		return x.AlignmentBorder
	}
	return nil
}

// In complex objects (maps and axis) the alignment of a value may not coincide with the bit width of a value. This
// keyword is used to define the alignment in the case of 64bit floats.
//
// Used in MOD_COMMON and RECORD_LAYOUT.
type AlignmentFloat64IeeeType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// describes the border at which the value is aligned to, i.e. its memory address must be dividable by the value
	// Alignment Border.
	AlignmentBorder *IntType `protobuf:"bytes,1,opt,name=AlignmentBorder,proto3" json:"AlignmentBorder,omitempty"`
}

func (x *AlignmentFloat64IeeeType) Reset() {
	*x = AlignmentFloat64IeeeType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlignmentFloat64IeeeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlignmentFloat64IeeeType) ProtoMessage() {}

func (x *AlignmentFloat64IeeeType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlignmentFloat64IeeeType.ProtoReflect.Descriptor instead.
func (*AlignmentFloat64IeeeType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{8}
}

func (x *AlignmentFloat64IeeeType) GetAlignmentBorder() *IntType {
	if x != nil {
		return x.AlignmentBorder
	}
	return nil
}

// In complex objects (maps and axis) the alignment of a value may not coincide with the bit width of a value. This
// keyword is used to define the alignment in the case of longs.
//
// Used in MOD_COMMON and RECORD_LAYOUT.
type AlignmentLongType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// describes the border at which the value is aligned to, i.e. its memory address must be dividable by the value
	// Alignment Border.
	AlignmentBorder *IntType `protobuf:"bytes,1,opt,name=AlignmentBorder,proto3" json:"AlignmentBorder,omitempty"`
}

func (x *AlignmentLongType) Reset() {
	*x = AlignmentLongType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlignmentLongType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlignmentLongType) ProtoMessage() {}

func (x *AlignmentLongType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlignmentLongType.ProtoReflect.Descriptor instead.
func (*AlignmentLongType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{9}
}

func (x *AlignmentLongType) GetAlignmentBorder() *IntType {
	if x != nil {
		return x.AlignmentBorder
	}
	return nil
}

// In complex objects (maps and axis) the alignment of a value may not coincide with the bit width of a value. This
// keyword is used to define the alignment in the case of words. The alignment is 2 if the parameter is missing.
//
// Used in MOD_COMMON and RECORD_LAYOUT.
type AlignmentWordType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// describes the border at which the value is aligned to, i.e. its memory address must be dividable by the value
	// Alignment Border.
	AlignmentBorder *IntType `protobuf:"bytes,1,opt,name=AlignmentBorder,proto3" json:"AlignmentBorder,omitempty"`
}

func (x *AlignmentWordType) Reset() {
	*x = AlignmentWordType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlignmentWordType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlignmentWordType) ProtoMessage() {}

func (x *AlignmentWordType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlignmentWordType.ProtoReflect.Descriptor instead.
func (*AlignmentWordType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{10}
}

func (x *AlignmentWordType) GetAlignmentBorder() *IntType {
	if x != nil {
		return x.AlignmentBorder
	}
	return nil
}

// Assign a title to an annotation. Useful as a definition can contain more than one annotation. Recommendation : The
// ANNOTATION_LABEL shall describe the usecase of the ANNOTATION, e.g. „Calibration Note“.
type AnnotationLabelType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// label or title of the annotation
	Label *StringType `protobuf:"bytes,1,opt,name=Label,proto3" json:"Label,omitempty"`
}

func (x *AnnotationLabelType) Reset() {
	*x = AnnotationLabelType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnnotationLabelType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnnotationLabelType) ProtoMessage() {}

func (x *AnnotationLabelType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnnotationLabelType.ProtoReflect.Descriptor instead.
func (*AnnotationLabelType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{11}
}

func (x *AnnotationLabelType) GetLabel() *StringType {
	if x != nil {
		return x.Label
	}
	return nil
}

// To identify who or which system has created an annotation.
type AnnotationOriginType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// creator or creating system of the annotation
	Origin *StringType `protobuf:"bytes,1,opt,name=Origin,proto3" json:"Origin,omitempty"`
}

func (x *AnnotationOriginType) Reset() {
	*x = AnnotationOriginType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnnotationOriginType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnnotationOriginType) ProtoMessage() {}

func (x *AnnotationOriginType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnnotationOriginType.ProtoReflect.Descriptor instead.
func (*AnnotationOriginType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{12}
}

func (x *AnnotationOriginType) GetOrigin() *StringType {
	if x != nil {
		return x.Origin
	}
	return nil
}

// One ANNOTATION_TEXT may represent a multi-line ASCII description text (voluminous description). Its purpose is to be
// an application note which explains the function of an identifier for the calibration engineer.
type AnnotationTextType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Annotation text
	AnnotationText []*StringType `protobuf:"bytes,1,rep,name=AnnotationText,proto3" json:"AnnotationText,omitempty"`
}

func (x *AnnotationTextType) Reset() {
	*x = AnnotationTextType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnnotationTextType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnnotationTextType) ProtoMessage() {}

func (x *AnnotationTextType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnnotationTextType.ProtoReflect.Descriptor instead.
func (*AnnotationTextType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{13}
}

func (x *AnnotationTextType) GetAnnotationText() []*StringType {
	if x != nil {
		return x.AnnotationText
	}
	return nil
}

// One ANNOTATION may represent a voluminous description. Its purpose is to be e.g. an application note which explains
// the function of an identifier for the calibration engineer.
//
// Note: An ANNOTATION may occur several times within a definition (due to compatibility with MSR/MEDOC SW-DTD, the
// future ASAP2 V2.0).
type AnnotationType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ANNOTATION_LABEL  *AnnotationLabelType  `protobuf:"bytes,1,opt,name=ANNOTATION_LABEL,proto3,oneof" json:"ANNOTATION_LABEL,omitempty"`
	ANNOTATION_ORIGIN *AnnotationOriginType `protobuf:"bytes,2,opt,name=ANNOTATION_ORIGIN,proto3,oneof" json:"ANNOTATION_ORIGIN,omitempty"`
	ANNOTATION_TEXT   *AnnotationTextType   `protobuf:"bytes,3,opt,name=ANNOTATION_TEXT,proto3,oneof" json:"ANNOTATION_TEXT,omitempty"`
}

func (x *AnnotationType) Reset() {
	*x = AnnotationType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnnotationType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnnotationType) ProtoMessage() {}

func (x *AnnotationType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnnotationType.ProtoReflect.Descriptor instead.
func (*AnnotationType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{14}
}

func (x *AnnotationType) GetANNOTATION_LABEL() *AnnotationLabelType {
	if x != nil {
		return x.ANNOTATION_LABEL
	}
	return nil
}

func (x *AnnotationType) GetANNOTATION_ORIGIN() *AnnotationOriginType {
	if x != nil {
		return x.ANNOTATION_ORIGIN
	}
	return nil
}

func (x *AnnotationType) GetANNOTATION_TEXT() *AnnotationTextType {
	if x != nil {
		return x.ANNOTATION_TEXT
	}
	return nil
}

type ArraySizeType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number *IntType `protobuf:"bytes,1,opt,name=Number,proto3" json:"Number,omitempty"`
}

func (x *ArraySizeType) Reset() {
	*x = ArraySizeType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArraySizeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArraySizeType) ProtoMessage() {}

func (x *ArraySizeType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArraySizeType.ProtoReflect.Descriptor instead.
func (*ArraySizeType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{15}
}

func (x *ArraySizeType) GetNumber() *IntType {
	if x != nil {
		return x.Number
	}
	return nil
}

type ASAP2VersionType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VersionNo *IntType `protobuf:"bytes,1,opt,name=VersionNo,proto3" json:"VersionNo,omitempty"`
	UpgradeNo *IntType `protobuf:"bytes,2,opt,name=UpgradeNo,proto3" json:"UpgradeNo,omitempty"`
}

func (x *ASAP2VersionType) Reset() {
	*x = ASAP2VersionType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ASAP2VersionType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ASAP2VersionType) ProtoMessage() {}

func (x *ASAP2VersionType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ASAP2VersionType.ProtoReflect.Descriptor instead.
func (*ASAP2VersionType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{16}
}

func (x *ASAP2VersionType) GetVersionNo() *IntType {
	if x != nil {
		return x.VersionNo
	}
	return nil
}

func (x *ASAP2VersionType) GetUpgradeNo() *IntType {
	if x != nil {
		return x.UpgradeNo
	}
	return nil
}

type AxisDescrType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attribute         string              `protobuf:"bytes,1,opt,name=Attribute,proto3" json:"Attribute,omitempty"`
	InputQuantity     *IdentType          `protobuf:"bytes,2,opt,name=InputQuantity,proto3" json:"InputQuantity,omitempty"`
	Conversion        *IdentType          `protobuf:"bytes,3,opt,name=Conversion,proto3" json:"Conversion,omitempty"`
	MaxAxisPoints     *IntType            `protobuf:"bytes,4,opt,name=MaxAxisPoints,proto3" json:"MaxAxisPoints,omitempty"`
	LowerLimit        *FloatType          `protobuf:"bytes,5,opt,name=LowerLimit,proto3" json:"LowerLimit,omitempty"`
	UpperLimit        *FloatType          `protobuf:"bytes,6,opt,name=UpperLimit,proto3" json:"UpperLimit,omitempty"`
	READ_ONLY         *ReadOnlyType       `protobuf:"bytes,7,opt,name=READ_ONLY,proto3,oneof" json:"READ_ONLY,omitempty"`
	FORMAT            *FormatType         `protobuf:"bytes,8,opt,name=FORMAT,proto3,oneof" json:"FORMAT,omitempty"`
	ANNOTATION        []*AnnotationType   `protobuf:"bytes,9,rep,name=ANNOTATION,proto3" json:"ANNOTATION,omitempty"`
	AXIS_PTS_REF      *AxisPtsRefType     `protobuf:"bytes,10,opt,name=AXIS_PTS_REF,proto3,oneof" json:"AXIS_PTS_REF,omitempty"`
	MAX_GRAD          *MaxGradType        `protobuf:"bytes,11,opt,name=MAX_GRAD,proto3,oneof" json:"MAX_GRAD,omitempty"`
	MONOTONY          *MonotonyType       `protobuf:"bytes,12,opt,name=MONOTONY,proto3,oneof" json:"MONOTONY,omitempty"`
	BYTE_ORDER        *ByteOrderType      `protobuf:"bytes,13,opt,name=BYTE_ORDER,proto3,oneof" json:"BYTE_ORDER,omitempty"`
	EXTENDED_LIMITS   *ExtendedLimitsType `protobuf:"bytes,14,opt,name=EXTENDED_LIMITS,proto3,oneof" json:"EXTENDED_LIMITS,omitempty"`
	FIX_AXIS_PAR      *FixAxisParType     `protobuf:"bytes,15,opt,name=FIX_AXIS_PAR,proto3,oneof" json:"FIX_AXIS_PAR,omitempty"`
	FIX_AXIS_PAR_DIST *FixAxisParDistType `protobuf:"bytes,16,opt,name=FIX_AXIS_PAR_DIST,proto3,oneof" json:"FIX_AXIS_PAR_DIST,omitempty"`
	FIX_AXIS_PAR_LIST *FixAxisParListType `protobuf:"bytes,17,opt,name=FIX_AXIS_PAR_LIST,proto3,oneof" json:"FIX_AXIS_PAR_LIST,omitempty"`
	DEPOSIT           *DepositType        `protobuf:"bytes,18,opt,name=DEPOSIT,proto3,oneof" json:"DEPOSIT,omitempty"`
	CURVE_AXIS_REF    *CurveAxisRefType   `protobuf:"bytes,19,opt,name=CURVE_AXIS_REF,proto3,oneof" json:"CURVE_AXIS_REF,omitempty"`
}

func (x *AxisDescrType) Reset() {
	*x = AxisDescrType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AxisDescrType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AxisDescrType) ProtoMessage() {}

func (x *AxisDescrType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AxisDescrType.ProtoReflect.Descriptor instead.
func (*AxisDescrType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{17}
}

func (x *AxisDescrType) GetAttribute() string {
	if x != nil {
		return x.Attribute
	}
	return ""
}

func (x *AxisDescrType) GetInputQuantity() *IdentType {
	if x != nil {
		return x.InputQuantity
	}
	return nil
}

func (x *AxisDescrType) GetConversion() *IdentType {
	if x != nil {
		return x.Conversion
	}
	return nil
}

func (x *AxisDescrType) GetMaxAxisPoints() *IntType {
	if x != nil {
		return x.MaxAxisPoints
	}
	return nil
}

func (x *AxisDescrType) GetLowerLimit() *FloatType {
	if x != nil {
		return x.LowerLimit
	}
	return nil
}

func (x *AxisDescrType) GetUpperLimit() *FloatType {
	if x != nil {
		return x.UpperLimit
	}
	return nil
}

func (x *AxisDescrType) GetREAD_ONLY() *ReadOnlyType {
	if x != nil {
		return x.READ_ONLY
	}
	return nil
}

func (x *AxisDescrType) GetFORMAT() *FormatType {
	if x != nil {
		return x.FORMAT
	}
	return nil
}

func (x *AxisDescrType) GetANNOTATION() []*AnnotationType {
	if x != nil {
		return x.ANNOTATION
	}
	return nil
}

func (x *AxisDescrType) GetAXIS_PTS_REF() *AxisPtsRefType {
	if x != nil {
		return x.AXIS_PTS_REF
	}
	return nil
}

func (x *AxisDescrType) GetMAX_GRAD() *MaxGradType {
	if x != nil {
		return x.MAX_GRAD
	}
	return nil
}

func (x *AxisDescrType) GetMONOTONY() *MonotonyType {
	if x != nil {
		return x.MONOTONY
	}
	return nil
}

func (x *AxisDescrType) GetBYTE_ORDER() *ByteOrderType {
	if x != nil {
		return x.BYTE_ORDER
	}
	return nil
}

func (x *AxisDescrType) GetEXTENDED_LIMITS() *ExtendedLimitsType {
	if x != nil {
		return x.EXTENDED_LIMITS
	}
	return nil
}

func (x *AxisDescrType) GetFIX_AXIS_PAR() *FixAxisParType {
	if x != nil {
		return x.FIX_AXIS_PAR
	}
	return nil
}

func (x *AxisDescrType) GetFIX_AXIS_PAR_DIST() *FixAxisParDistType {
	if x != nil {
		return x.FIX_AXIS_PAR_DIST
	}
	return nil
}

func (x *AxisDescrType) GetFIX_AXIS_PAR_LIST() *FixAxisParListType {
	if x != nil {
		return x.FIX_AXIS_PAR_LIST
	}
	return nil
}

func (x *AxisDescrType) GetDEPOSIT() *DepositType {
	if x != nil {
		return x.DEPOSIT
	}
	return nil
}

func (x *AxisDescrType) GetCURVE_AXIS_REF() *CurveAxisRefType {
	if x != nil {
		return x.CURVE_AXIS_REF
	}
	return nil
}

type AxisPtsRefType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AxisPoints *IdentType `protobuf:"bytes,1,opt,name=AxisPoints,proto3" json:"AxisPoints,omitempty"`
}

func (x *AxisPtsRefType) Reset() {
	*x = AxisPtsRefType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AxisPtsRefType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AxisPtsRefType) ProtoMessage() {}

func (x *AxisPtsRefType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AxisPtsRefType.ProtoReflect.Descriptor instead.
func (*AxisPtsRefType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{18}
}

func (x *AxisPtsRefType) GetAxisPoints() *IdentType {
	if x != nil {
		return x.AxisPoints
	}
	return nil
}

type AxisPtsType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                  *IdentType               `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	LongIdentifier        *StringType              `protobuf:"bytes,2,opt,name=LongIdentifier,proto3" json:"LongIdentifier,omitempty"`
	Address               *LongType                `protobuf:"bytes,3,opt,name=Address,proto3" json:"Address,omitempty"`
	InputQuantity         *IdentType               `protobuf:"bytes,4,opt,name=InputQuantity,proto3" json:"InputQuantity,omitempty"`
	DepositR              *IdentType               `protobuf:"bytes,5,opt,name=DepositR,proto3" json:"DepositR,omitempty"`
	MaxDiff               *FloatType               `protobuf:"bytes,6,opt,name=MaxDiff,proto3" json:"MaxDiff,omitempty"`
	Conversion            *IdentType               `protobuf:"bytes,7,opt,name=Conversion,proto3" json:"Conversion,omitempty"`
	MaxAxisPoints         *IntType                 `protobuf:"bytes,8,opt,name=MaxAxisPoints,proto3" json:"MaxAxisPoints,omitempty"`
	LowerLimit            *FloatType               `protobuf:"bytes,9,opt,name=LowerLimit,proto3" json:"LowerLimit,omitempty"`
	UpperLimit            *FloatType               `protobuf:"bytes,10,opt,name=UpperLimit,proto3" json:"UpperLimit,omitempty"`
	DISPLAY_IDENTIFIER    *DisplayIdentifierType   `protobuf:"bytes,11,opt,name=DISPLAY_IDENTIFIER,proto3,oneof" json:"DISPLAY_IDENTIFIER,omitempty"`
	READ_ONLY             *ReadOnlyType            `protobuf:"bytes,12,opt,name=READ_ONLY,proto3,oneof" json:"READ_ONLY,omitempty"`
	FORMAT                *FormatType              `protobuf:"bytes,13,opt,name=FORMAT,proto3,oneof" json:"FORMAT,omitempty"`
	DEPOSIT               *DepositType             `protobuf:"bytes,14,opt,name=DEPOSIT,proto3,oneof" json:"DEPOSIT,omitempty"`
	BYTE_ORDER            *ByteOrderType           `protobuf:"bytes,15,opt,name=BYTE_ORDER,proto3,oneof" json:"BYTE_ORDER,omitempty"`
	FUNCTION_LIST         *FunctionListType        `protobuf:"bytes,16,opt,name=FUNCTION_LIST,proto3,oneof" json:"FUNCTION_LIST,omitempty"`
	REF_MEMORY_SEGMENT    *RefMemorySegmentType    `protobuf:"bytes,17,opt,name=REF_MEMORY_SEGMENT,proto3,oneof" json:"REF_MEMORY_SEGMENT,omitempty"`
	GUARD_RAILS           *GuardRailsType          `protobuf:"bytes,18,opt,name=GUARD_RAILS,proto3,oneof" json:"GUARD_RAILS,omitempty"`
	EXTENDED_LIMITS       *ExtendedLimitsType      `protobuf:"bytes,19,opt,name=EXTENDED_LIMITS,proto3,oneof" json:"EXTENDED_LIMITS,omitempty"`
	ANNOTATION            []*AnnotationType        `protobuf:"bytes,20,rep,name=ANNOTATION,proto3" json:"ANNOTATION,omitempty"`
	IF_DATA               []*IfDataType            `protobuf:"bytes,21,rep,name=IF_DATA,proto3" json:"IF_DATA,omitempty"`
	CALIBRATION_ACCESS    *CalibrationAccessType   `protobuf:"bytes,22,opt,name=CALIBRATION_ACCESS,proto3,oneof" json:"CALIBRATION_ACCESS,omitempty"`
	ECU_ADDRESS_EXTENSION *EcuAddressExtensionType `protobuf:"bytes,23,opt,name=ECU_ADDRESS_EXTENSION,proto3,oneof" json:"ECU_ADDRESS_EXTENSION,omitempty"`
}

func (x *AxisPtsType) Reset() {
	*x = AxisPtsType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AxisPtsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AxisPtsType) ProtoMessage() {}

func (x *AxisPtsType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AxisPtsType.ProtoReflect.Descriptor instead.
func (*AxisPtsType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{19}
}

func (x *AxisPtsType) GetName() *IdentType {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *AxisPtsType) GetLongIdentifier() *StringType {
	if x != nil {
		return x.LongIdentifier
	}
	return nil
}

func (x *AxisPtsType) GetAddress() *LongType {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *AxisPtsType) GetInputQuantity() *IdentType {
	if x != nil {
		return x.InputQuantity
	}
	return nil
}

func (x *AxisPtsType) GetDepositR() *IdentType {
	if x != nil {
		return x.DepositR
	}
	return nil
}

func (x *AxisPtsType) GetMaxDiff() *FloatType {
	if x != nil {
		return x.MaxDiff
	}
	return nil
}

func (x *AxisPtsType) GetConversion() *IdentType {
	if x != nil {
		return x.Conversion
	}
	return nil
}

func (x *AxisPtsType) GetMaxAxisPoints() *IntType {
	if x != nil {
		return x.MaxAxisPoints
	}
	return nil
}

func (x *AxisPtsType) GetLowerLimit() *FloatType {
	if x != nil {
		return x.LowerLimit
	}
	return nil
}

func (x *AxisPtsType) GetUpperLimit() *FloatType {
	if x != nil {
		return x.UpperLimit
	}
	return nil
}

func (x *AxisPtsType) GetDISPLAY_IDENTIFIER() *DisplayIdentifierType {
	if x != nil {
		return x.DISPLAY_IDENTIFIER
	}
	return nil
}

func (x *AxisPtsType) GetREAD_ONLY() *ReadOnlyType {
	if x != nil {
		return x.READ_ONLY
	}
	return nil
}

func (x *AxisPtsType) GetFORMAT() *FormatType {
	if x != nil {
		return x.FORMAT
	}
	return nil
}

func (x *AxisPtsType) GetDEPOSIT() *DepositType {
	if x != nil {
		return x.DEPOSIT
	}
	return nil
}

func (x *AxisPtsType) GetBYTE_ORDER() *ByteOrderType {
	if x != nil {
		return x.BYTE_ORDER
	}
	return nil
}

func (x *AxisPtsType) GetFUNCTION_LIST() *FunctionListType {
	if x != nil {
		return x.FUNCTION_LIST
	}
	return nil
}

func (x *AxisPtsType) GetREF_MEMORY_SEGMENT() *RefMemorySegmentType {
	if x != nil {
		return x.REF_MEMORY_SEGMENT
	}
	return nil
}

func (x *AxisPtsType) GetGUARD_RAILS() *GuardRailsType {
	if x != nil {
		return x.GUARD_RAILS
	}
	return nil
}

func (x *AxisPtsType) GetEXTENDED_LIMITS() *ExtendedLimitsType {
	if x != nil {
		return x.EXTENDED_LIMITS
	}
	return nil
}

func (x *AxisPtsType) GetANNOTATION() []*AnnotationType {
	if x != nil {
		return x.ANNOTATION
	}
	return nil
}

func (x *AxisPtsType) GetIF_DATA() []*IfDataType {
	if x != nil {
		return x.IF_DATA
	}
	return nil
}

func (x *AxisPtsType) GetCALIBRATION_ACCESS() *CalibrationAccessType {
	if x != nil {
		return x.CALIBRATION_ACCESS
	}
	return nil
}

func (x *AxisPtsType) GetECU_ADDRESS_EXTENSION() *EcuAddressExtensionType {
	if x != nil {
		return x.ECU_ADDRESS_EXTENSION
	}
	return nil
}

// Description of the number of axis points in an adjustable object
type AxisPtsXType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Position of the number of axis points in the deposit structure
	Position *IntType `protobuf:"bytes,1,opt,name=Position,proto3" json:"Position,omitempty"`
	// Data type of the number of axis points
	DataType *DataTypeType `protobuf:"bytes,2,opt,name=DataType,proto3" json:"DataType,omitempty"`
}

func (x *AxisPtsXType) Reset() {
	*x = AxisPtsXType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AxisPtsXType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AxisPtsXType) ProtoMessage() {}

func (x *AxisPtsXType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AxisPtsXType.ProtoReflect.Descriptor instead.
func (*AxisPtsXType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{20}
}

func (x *AxisPtsXType) GetPosition() *IntType {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *AxisPtsXType) GetDataType() *DataTypeType {
	if x != nil {
		return x.DataType
	}
	return nil
}

// Description of the number of axis points in an adjustable object
type AxisPtsYType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Position of the number of axis points in the deposit structure
	Position *IntType `protobuf:"bytes,1,opt,name=Position,proto3" json:"Position,omitempty"`
	// Data type of the number of axis points
	DataType *DataTypeType `protobuf:"bytes,2,opt,name=DataType,proto3" json:"DataType,omitempty"`
}

func (x *AxisPtsYType) Reset() {
	*x = AxisPtsYType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AxisPtsYType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AxisPtsYType) ProtoMessage() {}

func (x *AxisPtsYType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AxisPtsYType.ProtoReflect.Descriptor instead.
func (*AxisPtsYType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{21}
}

func (x *AxisPtsYType) GetPosition() *IntType {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *AxisPtsYType) GetDataType() *DataTypeType {
	if x != nil {
		return x.DataType
	}
	return nil
}

// Description of the number of axis points in an adjustable object
type AxisPtsZType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Position of the number of axis points in the deposit structure
	Position *IntType `protobuf:"bytes,1,opt,name=Position,proto3" json:"Position,omitempty"`
	// Data type of the number of axis points
	DataType *DataTypeType `protobuf:"bytes,2,opt,name=DataType,proto3" json:"DataType,omitempty"`
}

func (x *AxisPtsZType) Reset() {
	*x = AxisPtsZType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AxisPtsZType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AxisPtsZType) ProtoMessage() {}

func (x *AxisPtsZType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AxisPtsZType.ProtoReflect.Descriptor instead.
func (*AxisPtsZType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{22}
}

func (x *AxisPtsZType) GetPosition() *IntType {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *AxisPtsZType) GetDataType() *DataTypeType {
	if x != nil {
		return x.DataType
	}
	return nil
}

// Description of rescaling the axis values of an adjustable object. A rescale axis consists mainly of a number of
// rescaling axis points pairs (axis[i] , virtual[i]) which describe a rescale mapping between the axis points and a
// virtual axis that is used for the access of the table function values deposited in the control unit. Between two
// pairs the mapping is linear. Both, the axis points and the virtual axis points must be in ascending order.
type AxisRescaleXType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// position of the rescale axis point value pairs in the deposit structure (description of sequence of elements in the
	// data record).
	Position *IntType `protobuf:"bytes,1,opt,name=Position,proto3" json:"Position,omitempty"`
	// Data type of the rescale axis point values
	DataType *DataTypeType `protobuf:"bytes,2,opt,name=DataType,proto3" json:"DataType,omitempty"`
	// maximum number of rescaling axis point pairs (see NO_RESCALE_PTS_X/_Y/_Z)
	MaxNumberOfRescalePairs *IntType `protobuf:"bytes,3,opt,name=MaxNumberOfRescalePairs,proto3" json:"MaxNumberOfRescalePairs,omitempty"`
	// Decreasing or increasing index with increasing addresses
	IndexIncr *IndexOrderType `protobuf:"bytes,4,opt,name=IndexIncr,proto3" json:"IndexIncr,omitempty"`
	// Addressing of the table values (see enum addrtype).
	Addressing *AddrTypeType `protobuf:"bytes,5,opt,name=Addressing,proto3" json:"Addressing,omitempty"`
}

func (x *AxisRescaleXType) Reset() {
	*x = AxisRescaleXType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AxisRescaleXType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AxisRescaleXType) ProtoMessage() {}

func (x *AxisRescaleXType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AxisRescaleXType.ProtoReflect.Descriptor instead.
func (*AxisRescaleXType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{23}
}

func (x *AxisRescaleXType) GetPosition() *IntType {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *AxisRescaleXType) GetDataType() *DataTypeType {
	if x != nil {
		return x.DataType
	}
	return nil
}

func (x *AxisRescaleXType) GetMaxNumberOfRescalePairs() *IntType {
	if x != nil {
		return x.MaxNumberOfRescalePairs
	}
	return nil
}

func (x *AxisRescaleXType) GetIndexIncr() *IndexOrderType {
	if x != nil {
		return x.IndexIncr
	}
	return nil
}

func (x *AxisRescaleXType) GetAddressing() *AddrTypeType {
	if x != nil {
		return x.Addressing
	}
	return nil
}

// Description of rescaling the axis values of an adjustable object. A rescale axis consists mainly of a number of
// rescaling axis points pairs (axis[i] , virtual[i]) which describe a rescale mapping between the axis points and a
// virtual axis that is used for the access of the table function values deposited in the control unit. Between two
// pairs the mapping is linear. Both, the axis points and the virtual axis points must be in ascending order.
type AxisRescaleYType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// position of the rescale axis point value pairs in the deposit structure (description of sequence of elements in the
	// data record).
	Position *IntType `protobuf:"bytes,1,opt,name=Position,proto3" json:"Position,omitempty"`
	// Data type of the rescale axis point values
	DataType *DataTypeType `protobuf:"bytes,2,opt,name=DataType,proto3" json:"DataType,omitempty"`
	// maximum number of rescaling axis point pairs (see NO_RESCALE_PTS_X/_Y/_Z)
	MaxNumberOfRescalePairs *IntType `protobuf:"bytes,3,opt,name=MaxNumberOfRescalePairs,proto3" json:"MaxNumberOfRescalePairs,omitempty"`
	// Decreasing or increasing index with increasing addresses
	IndexIncr *IndexOrderType `protobuf:"bytes,4,opt,name=IndexIncr,proto3" json:"IndexIncr,omitempty"`
	// Addressing of the table values (see enum addrtype).
	Addressing *AddrTypeType `protobuf:"bytes,5,opt,name=Addressing,proto3" json:"Addressing,omitempty"`
}

func (x *AxisRescaleYType) Reset() {
	*x = AxisRescaleYType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AxisRescaleYType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AxisRescaleYType) ProtoMessage() {}

func (x *AxisRescaleYType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AxisRescaleYType.ProtoReflect.Descriptor instead.
func (*AxisRescaleYType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{24}
}

func (x *AxisRescaleYType) GetPosition() *IntType {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *AxisRescaleYType) GetDataType() *DataTypeType {
	if x != nil {
		return x.DataType
	}
	return nil
}

func (x *AxisRescaleYType) GetMaxNumberOfRescalePairs() *IntType {
	if x != nil {
		return x.MaxNumberOfRescalePairs
	}
	return nil
}

func (x *AxisRescaleYType) GetIndexIncr() *IndexOrderType {
	if x != nil {
		return x.IndexIncr
	}
	return nil
}

func (x *AxisRescaleYType) GetAddressing() *AddrTypeType {
	if x != nil {
		return x.Addressing
	}
	return nil
}

// Description of rescaling the axis values of an adjustable object. A rescale axis consists mainly of a number of
// rescaling axis points pairs (axis[i] , virtual[i]) which describe a rescale mapping between the axis points and a
// virtual axis that is used for the access of the table function values deposited in the control unit. Between two
// pairs the mapping is linear. Both, the axis points and the virtual axis points must be in ascending order.
type AxisRescaleZType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// position of the rescale axis point value pairs in the deposit structure (description of sequence of elements in the
	// data record).
	Position *IntType `protobuf:"bytes,1,opt,name=Position,proto3" json:"Position,omitempty"`
	// Data type of the rescale axis point values
	DataType *DataTypeType `protobuf:"bytes,2,opt,name=DataType,proto3" json:"DataType,omitempty"`
	// maximum number of rescaling axis point pairs (see NO_RESCALE_PTS_X/_Y/_Z)
	MaxNumberOfRescalePairs *IntType `protobuf:"bytes,3,opt,name=MaxNumberOfRescalePairs,proto3" json:"MaxNumberOfRescalePairs,omitempty"`
	// Decreasing or increasing index with increasing addresses
	IndexIncr *IndexOrderType `protobuf:"bytes,4,opt,name=IndexIncr,proto3" json:"IndexIncr,omitempty"`
	// Addressing of the table values (see enum addrtype).
	Addressing *AddrTypeType `protobuf:"bytes,5,opt,name=Addressing,proto3" json:"Addressing,omitempty"`
}

func (x *AxisRescaleZType) Reset() {
	*x = AxisRescaleZType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AxisRescaleZType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AxisRescaleZType) ProtoMessage() {}

func (x *AxisRescaleZType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AxisRescaleZType.ProtoReflect.Descriptor instead.
func (*AxisRescaleZType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{25}
}

func (x *AxisRescaleZType) GetPosition() *IntType {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *AxisRescaleZType) GetDataType() *DataTypeType {
	if x != nil {
		return x.DataType
	}
	return nil
}

func (x *AxisRescaleZType) GetMaxNumberOfRescalePairs() *IntType {
	if x != nil {
		return x.MaxNumberOfRescalePairs
	}
	return nil
}

func (x *AxisRescaleZType) GetIndexIncr() *IndexOrderType {
	if x != nil {
		return x.IndexIncr
	}
	return nil
}

func (x *AxisRescaleZType) GetAddressing() *AddrTypeType {
	if x != nil {
		return x.Addressing
	}
	return nil
}

type BitOperationType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LEFT_SHIFT  *LeftShiftType  `protobuf:"bytes,1,opt,name=LEFT_SHIFT,proto3,oneof" json:"LEFT_SHIFT,omitempty"`
	RIGHT_SHIFT *RightShiftType `protobuf:"bytes,2,opt,name=RIGHT_SHIFT,proto3,oneof" json:"RIGHT_SHIFT,omitempty"`
	SIGN_EXTEND *SignExtendType `protobuf:"bytes,3,opt,name=SIGN_EXTEND,proto3,oneof" json:"SIGN_EXTEND,omitempty"`
}

func (x *BitOperationType) Reset() {
	*x = BitOperationType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BitOperationType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BitOperationType) ProtoMessage() {}

func (x *BitOperationType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BitOperationType.ProtoReflect.Descriptor instead.
func (*BitOperationType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{26}
}

func (x *BitOperationType) GetLEFT_SHIFT() *LeftShiftType {
	if x != nil {
		return x.LEFT_SHIFT
	}
	return nil
}

func (x *BitOperationType) GetRIGHT_SHIFT() *RightShiftType {
	if x != nil {
		return x.RIGHT_SHIFT
	}
	return nil
}

func (x *BitOperationType) GetSIGN_EXTEND() *SignExtendType {
	if x != nil {
		return x.SIGN_EXTEND
	}
	return nil
}

type BitMaskType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mask *LongType `protobuf:"bytes,1,opt,name=Mask,proto3" json:"Mask,omitempty"`
}

func (x *BitMaskType) Reset() {
	*x = BitMaskType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BitMaskType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BitMaskType) ProtoMessage() {}

func (x *BitMaskType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BitMaskType.ProtoReflect.Descriptor instead.
func (*BitMaskType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{27}
}

func (x *BitMaskType) GetMask() *LongType {
	if x != nil {
		return x.Mask
	}
	return nil
}

type ByteOrderType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ByteOrder string `protobuf:"bytes,1,opt,name=ByteOrder,proto3" json:"ByteOrder,omitempty"`
}

func (x *ByteOrderType) Reset() {
	*x = ByteOrderType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ByteOrderType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ByteOrderType) ProtoMessage() {}

func (x *ByteOrderType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ByteOrderType.ProtoReflect.Descriptor instead.
func (*ByteOrderType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{28}
}

func (x *ByteOrderType) GetByteOrder() string {
	if x != nil {
		return x.ByteOrder
	}
	return ""
}

type CalibrationAccessType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
}

func (x *CalibrationAccessType) Reset() {
	*x = CalibrationAccessType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalibrationAccessType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalibrationAccessType) ProtoMessage() {}

func (x *CalibrationAccessType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalibrationAccessType.ProtoReflect.Descriptor instead.
func (*CalibrationAccessType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{29}
}

func (x *CalibrationAccessType) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// Definition of the calibration method specific. The interpretation of this data depends on the calibration method
// used. Used in CALIBRATION_METHOD
type CalibrationHandleType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Handle for the calibration method
	Handle []*LongType `protobuf:"bytes,1,rep,name=Handle,proto3" json:"Handle,omitempty"`
}

func (x *CalibrationHandleType) Reset() {
	*x = CalibrationHandleType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalibrationHandleType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalibrationHandleType) ProtoMessage() {}

func (x *CalibrationHandleType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalibrationHandleType.ProtoReflect.Descriptor instead.
func (*CalibrationHandleType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{30}
}

func (x *CalibrationHandleType) GetHandle() []*LongType {
	if x != nil {
		return x.Handle
	}
	return nil
}

// This keyword is used to indicate the different methods of access that are implemented in the ECU and that can be used
// regardless of the actual interface of the ECU. Used in MOD_PAR.
type CalibrationMethodType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the string identifies the calibration method to be used. A convention regarding the meaning of the calibration
	// methods. The following strings are already in use: ‘InCircuit’, ‘SERAM’, ‘DSERAP’, ‘BSERAP’
	Method *StringType `protobuf:"bytes,1,opt,name=Method,proto3" json:"Method,omitempty"`
	// Version number of the method used
	Version *LongType `protobuf:"bytes,2,opt,name=Version,proto3" json:"Version,omitempty"`
	// Contains the (method specific) arguments for the calibration method. The arguments themselves and their meaning are
	// dependent of the calibration method.
	CALIBRATION_HANDLE []*CalibrationHandleType `protobuf:"bytes,3,rep,name=CALIBRATION_HANDLE,proto3" json:"CALIBRATION_HANDLE,omitempty"`
}

func (x *CalibrationMethodType) Reset() {
	*x = CalibrationMethodType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalibrationMethodType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalibrationMethodType) ProtoMessage() {}

func (x *CalibrationMethodType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalibrationMethodType.ProtoReflect.Descriptor instead.
func (*CalibrationMethodType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{31}
}

func (x *CalibrationMethodType) GetMethod() *StringType {
	if x != nil {
		return x.Method
	}
	return nil
}

func (x *CalibrationMethodType) GetVersion() *LongType {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *CalibrationMethodType) GetCALIBRATION_HANDLE() []*CalibrationHandleType {
	if x != nil {
		return x.CALIBRATION_HANDLE
	}
	return nil
}

// Specification of the parameters for the processing of an adjustable object.
type CharacteristicType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unique identifier in the ECU program
	//
	//Note: The name of the adjustable object has to be unique within all measurement objects and adjustable objects of
	// the ASAP2 MODULE, i.e. there must not be another AXIS_PTS, CHARACTERISTIC or MEASUREMENT object with the the same
	// identifier in the MODULE.
	Name *IdentType `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	// comment, description
	LongIdentifier *StringType `protobuf:"bytes,2,opt,name=LongIdentifier,proto3" json:"LongIdentifier,omitempty"`
	// - VALUE
	// - CURVE
	// - MAP
	// - CUBOID
	// - VAL_BLK (array of values)
	// - ASCII (string)
	Type string `protobuf:"bytes,3,opt,name=Type,proto3" json:"Type,omitempty"`
	// address of the adjustable object in the emulation memory
	Address *LongType `protobuf:"bytes,4,opt,name=Address,proto3" json:"Address,omitempty"`
	// reference to the corresponding data record for description of the record layout (see RECORD_LAYOUT)
	Deposit *IdentType `protobuf:"bytes,5,opt,name=Deposit,proto3" json:"Deposit,omitempty"`
	// maximum float with respect to an adjustment of a table value
	//
	// Note: This value is interpreted as an absolute value, not as a percentage.
	MaxDiff *FloatType `protobuf:"bytes,6,opt,name=MaxDiff,proto3" json:"MaxDiff,omitempty"`
	// Reference to the relevant record of the description of the conversion method (see COMPU_METHOD). If there is no
	// conversion method, as in the case of CURVE_AXIS, the parameter ‘Conversion’ should be set to “NO_COMPU_METHOD”
	// (application systems must be able to handle this case).
	Conversion *IdentType `protobuf:"bytes,7,opt,name=Conversion,proto3" json:"Conversion,omitempty"`
	// plausible range of table values, lower limit
	LowerLimit *FloatType `protobuf:"bytes,8,opt,name=LowerLimit,proto3" json:"LowerLimit,omitempty"`
	// plausible range of table values, upper limit
	UpperLimit *FloatType `protobuf:"bytes,9,opt,name=UpperLimit,proto3" json:"UpperLimit,omitempty"`
	// Can be used as a display name (alternative to the ‘name’ attribute).
	DISPLAY_IDENTIFIER *DisplayIdentifierType `protobuf:"bytes,10,opt,name=DISPLAY_IDENTIFIER,proto3,oneof" json:"DISPLAY_IDENTIFIER,omitempty"`
	// With deviation from the display format specified with keyword COMPU_TAB referenced by parameter <Conversion> a
	// special display format can be specified to be used to display the table values.
	FORMAT *FormatType `protobuf:"bytes,11,opt,name=FORMAT,proto3,oneof" json:"FORMAT,omitempty"`
	// Where the standard value does not apply this parameter can be used to specify the byte order (Intel format,
	// Motorola format) if the standard value is not to be used.
	BYTE_ORDER *ByteOrderType `protobuf:"bytes,12,opt,name=BYTE_ORDER,proto3,oneof" json:"BYTE_ORDER,omitempty"`
	// This parameter can be used to specify a bit mask for the handling of single bits.
	BIT_MASK *BitMaskType `protobuf:"bytes,13,opt,name=BIT_MASK,proto3,oneof" json:"BIT_MASK,omitempty"`
	// This keyword can be used to specify a list of 'functions' to which the relevant adjustable object is allocated
	// (function orientation).
	//
	// Note: Since ASAP2 version 1.20 the keyword FUNCTION comprises some additional features to describe functional
	// structure and dependencies. The keyword FUNCTION_LIST is going to be canceled at ASAP2 version 2.00.
	FUNCTION_LIST *FunctionListType `protobuf:"bytes,14,opt,name=FUNCTION_LIST,proto3,oneof" json:"FUNCTION_LIST,omitempty"`
	// For the adjustable object types 'fixed value block' (VAL_BLK) and 'string' (ASCII), this keyword specifies the
	// number of fixed values and characters respectively.
	NUMBER *NumberType `protobuf:"bytes,15,opt,name=NUMBER,proto3,oneof" json:"NUMBER,omitempty"`
	// This keyword can be used to specify an extended range of values. In the application system, for example, when
	// leaving the standard range of values (lower limit...upper limit) a warning could be generated (extended limits
	// enabled only for "power user").
	EXTENDED_LIMITS *ExtendedLimitsType `protobuf:"bytes,16,opt,name=EXTENDED_LIMITS,proto3,oneof" json:"EXTENDED_LIMITS,omitempty"`
	// This keyword can be used to indicate that the adjustable object cannot be changed (but can be read only). This
	// keyword indicates the adjustable object to be read only at all (table values and axis points). The optional keyword
	// used at AXIS_DESCR record indicates the related axis points to be read only.
	READ_ONLY *ReadOnlyType `protobuf:"bytes,17,opt,name=READ_ONLY,proto3,oneof" json:"READ_ONLY,omitempty"`
	// This keyword is used to indicate that an adjustable CURVE or MAP uses guard rails. The Measurement and Calibration
	// System does not allow the user to edit the outermost values of the adjustable object (see GUARD_RAILS).
	GUARD_RAILS *GuardRailsType `protobuf:"bytes,18,opt,name=GUARD_RAILS,proto3,oneof" json:"GUARD_RAILS,omitempty"`
	// For the adjustable object type CUBOID which are `sliced', this keyword specifies the MAPs which comprise the
	// cuboid.
	MAP_LIST *MapListType `protobuf:"bytes,19,opt,name=MAP_LIST,proto3,oneof" json:"MAP_LIST,omitempty"`
	// Maximum refresh rate of this (adaptive) characteristic in the control unit. The existence of the keyword implies
	// that the value of the characteristic is changed by the control unit (adaptive characteristics).
	MAX_REFRESH *MaxRefreshType `protobuf:"bytes,20,opt,name=MAX_REFRESH,proto3,oneof" json:"MAX_REFRESH,omitempty"`
	// Describes the formula and references to characteristics, upon which this characteristic depends on.
	//
	// Note: The dependence graph described by the dependence relation must be acyclic. This must be ensured by the
	// producer of the ASAP2 file. This keyword is only valid for characteristics of type VALUE
	DEPENDENT_CHARACTERISTIC *DependentCharacteristicType `protobuf:"bytes,21,opt,name=DEPENDENT_CHARACTERISTIC,proto3,oneof" json:"DEPENDENT_CHARACTERISTIC,omitempty"`
	// Marks a characteristic as being virtual, i.e. not existing in the memory of the control unit. The address can
	// therefore be ignored for virtual characteristic. Initial value of the virtual characteristic depends on the values
	// of other characteristic.
	//
	// Note: The corresponding graph (in analogy to the dependence graph) must also be acyclic and each sink of the graph
	// must be a non virtual characteristic. This must be ensured by the producer of the ASAP2 file. This keyword is only
	// valid for characteristics of type VALUE.
	VIRTUAL_CHARACTERISTIC *VirtualCharacteristicType `protobuf:"bytes,22,opt,name=VIRTUAL_CHARACTERISTIC,proto3,oneof" json:"VIRTUAL_CHARACTERISTIC,omitempty"`
	// Reference to the memory segment which is needed if the address is not unique (this occurs in the case of lapping
	// address ranges (overlapping memory segments).
	REF_MEMORY_SEGMENT *RefMemorySegmentType `protobuf:"bytes,23,opt,name=REF_MEMORY_SEGMENT,proto3,oneof" json:"REF_MEMORY_SEGMENT,omitempty"`
	// Set of notes (represented as multi-line ASCII description texts) which are related. Can serve e.g. as application
	// note.
	ANNOTATION []*AnnotationType `protobuf:"bytes,24,rep,name=ANNOTATION,proto3" json:"ANNOTATION,omitempty"`
	// This keyword references a valid MEASUREMENT in the ASAP2 file. Semantic Interpretation (for a CURVE, a
	// CHARACTERISTIC with only one AXIS_DESC) : The conventional work point for a -CURVE has only one input quantity
	// (assigned to AXIS_DESCR) and moves on the CURVE. The 'free-moving' work point in an xy diagram of a CURVE is
	// described by two quantities (the conventional input quantity with the AXIS_DESC, the x axis, and an additional
	// comparison quantity described as an optional attribute directly with the CURVE, the y-axis).The 'free-moving'
	// work point does not move on the CURVE, but on the xy-diagram in which the CURVE is located. The crossing of the
	// free-moving work point and the CURVE would describe an EVENT. Such display is required by calibration engineers of
	// automatic transmission control (EVENT=gear shift). When this keyword with a CURVE is present, the work point
	// display of the MCD system shall apply the INPUT_QUANTITY and the COMPARISON_QUANTITY in the xy-diagram.
	COMPARISON_QUANTITY *ComparisonQuantityType `protobuf:"bytes,25,opt,name=COMPARISON_QUANTITY,proto3,oneof" json:"COMPARISON_QUANTITY,omitempty"`
	// Date record to describe the interface specific description data (BLOB:binary large object). The parameters
	// associated with this keyword are described in the ASAP2 metalanguage (in short A2ML) by the control unit supplier
	// or the interface module supplier.
	IF_DATA []*IfDataType `protobuf:"bytes,26,rep,name=IF_DATA,proto3" json:"IF_DATA,omitempty"`
	// This keyword is used to specify the parameters for the axis description (with characteristic curves and maps). The
	// first parameter block describes the X-axis, the second parameter block the Y-axis.
	AXIS_DESCR []*AxisDescrType `protobuf:"bytes,27,rep,name=AXIS_DESCR,proto3" json:"AXIS_DESCR,omitempty"`
	// This keyword specifies the access of the characteristic for calibration. Use it instead of the READ_ONLY Attribute.
	CALIBRATION_ACCESS *CalibrationAccessType `protobuf:"bytes,28,opt,name=CALIBRATION_ACCESS,proto3,oneof" json:"CALIBRATION_ACCESS,omitempty"`
	// Shows the size and dimension of a multidimensional characteristic (e.g. VAL_BLK). If the MATRIX_DIM keyword is
	// used, then the option NUMBER is not needed. However, if the keywords NUMBER and MATRIX_DIM are both used, the
	// resulting value in NUMBER must be the same as xDim * yDim * zDim for MATRIX_DIM. If the keyword is missing the
	// array has only one dimension with the size given at NUMBER.
	MATRIX_DIM *MatrixDimType `protobuf:"bytes,29,opt,name=MATRIX_DIM,proto3,oneof" json:"MATRIX_DIM,omitempty"`
	// This keyword is an additional address information. For instance it can be used, to distinguish different address
	// spaces of an ECU (multi-microcontroller devices).
	ECU_ADDRESS_EXTENSION *EcuAddressExtensionType `protobuf:"bytes,30,opt,name=ECU_ADDRESS_EXTENSION,proto3,oneof" json:"ECU_ADDRESS_EXTENSION,omitempty"`
}

func (x *CharacteristicType) Reset() {
	*x = CharacteristicType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharacteristicType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacteristicType) ProtoMessage() {}

func (x *CharacteristicType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacteristicType.ProtoReflect.Descriptor instead.
func (*CharacteristicType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{32}
}

func (x *CharacteristicType) GetName() *IdentType {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *CharacteristicType) GetLongIdentifier() *StringType {
	if x != nil {
		return x.LongIdentifier
	}
	return nil
}

func (x *CharacteristicType) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CharacteristicType) GetAddress() *LongType {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *CharacteristicType) GetDeposit() *IdentType {
	if x != nil {
		return x.Deposit
	}
	return nil
}

func (x *CharacteristicType) GetMaxDiff() *FloatType {
	if x != nil {
		return x.MaxDiff
	}
	return nil
}

func (x *CharacteristicType) GetConversion() *IdentType {
	if x != nil {
		return x.Conversion
	}
	return nil
}

func (x *CharacteristicType) GetLowerLimit() *FloatType {
	if x != nil {
		return x.LowerLimit
	}
	return nil
}

func (x *CharacteristicType) GetUpperLimit() *FloatType {
	if x != nil {
		return x.UpperLimit
	}
	return nil
}

func (x *CharacteristicType) GetDISPLAY_IDENTIFIER() *DisplayIdentifierType {
	if x != nil {
		return x.DISPLAY_IDENTIFIER
	}
	return nil
}

func (x *CharacteristicType) GetFORMAT() *FormatType {
	if x != nil {
		return x.FORMAT
	}
	return nil
}

func (x *CharacteristicType) GetBYTE_ORDER() *ByteOrderType {
	if x != nil {
		return x.BYTE_ORDER
	}
	return nil
}

func (x *CharacteristicType) GetBIT_MASK() *BitMaskType {
	if x != nil {
		return x.BIT_MASK
	}
	return nil
}

func (x *CharacteristicType) GetFUNCTION_LIST() *FunctionListType {
	if x != nil {
		return x.FUNCTION_LIST
	}
	return nil
}

func (x *CharacteristicType) GetNUMBER() *NumberType {
	if x != nil {
		return x.NUMBER
	}
	return nil
}

func (x *CharacteristicType) GetEXTENDED_LIMITS() *ExtendedLimitsType {
	if x != nil {
		return x.EXTENDED_LIMITS
	}
	return nil
}

func (x *CharacteristicType) GetREAD_ONLY() *ReadOnlyType {
	if x != nil {
		return x.READ_ONLY
	}
	return nil
}

func (x *CharacteristicType) GetGUARD_RAILS() *GuardRailsType {
	if x != nil {
		return x.GUARD_RAILS
	}
	return nil
}

func (x *CharacteristicType) GetMAP_LIST() *MapListType {
	if x != nil {
		return x.MAP_LIST
	}
	return nil
}

func (x *CharacteristicType) GetMAX_REFRESH() *MaxRefreshType {
	if x != nil {
		return x.MAX_REFRESH
	}
	return nil
}

func (x *CharacteristicType) GetDEPENDENT_CHARACTERISTIC() *DependentCharacteristicType {
	if x != nil {
		return x.DEPENDENT_CHARACTERISTIC
	}
	return nil
}

func (x *CharacteristicType) GetVIRTUAL_CHARACTERISTIC() *VirtualCharacteristicType {
	if x != nil {
		return x.VIRTUAL_CHARACTERISTIC
	}
	return nil
}

func (x *CharacteristicType) GetREF_MEMORY_SEGMENT() *RefMemorySegmentType {
	if x != nil {
		return x.REF_MEMORY_SEGMENT
	}
	return nil
}

func (x *CharacteristicType) GetANNOTATION() []*AnnotationType {
	if x != nil {
		return x.ANNOTATION
	}
	return nil
}

func (x *CharacteristicType) GetCOMPARISON_QUANTITY() *ComparisonQuantityType {
	if x != nil {
		return x.COMPARISON_QUANTITY
	}
	return nil
}

func (x *CharacteristicType) GetIF_DATA() []*IfDataType {
	if x != nil {
		return x.IF_DATA
	}
	return nil
}

func (x *CharacteristicType) GetAXIS_DESCR() []*AxisDescrType {
	if x != nil {
		return x.AXIS_DESCR
	}
	return nil
}

func (x *CharacteristicType) GetCALIBRATION_ACCESS() *CalibrationAccessType {
	if x != nil {
		return x.CALIBRATION_ACCESS
	}
	return nil
}

func (x *CharacteristicType) GetMATRIX_DIM() *MatrixDimType {
	if x != nil {
		return x.MATRIX_DIM
	}
	return nil
}

func (x *CharacteristicType) GetECU_ADDRESS_EXTENSION() *EcuAddressExtensionType {
	if x != nil {
		return x.ECU_ADDRESS_EXTENSION
	}
	return nil
}

// Specification of coefficients for the formula f(x) = (axx + bx + c) / (dxx + ex + f). This term describes the
// conversion from physical values to control unit internal values:
//
// INT = f(PHYS);
//
// Important: For these coefficients restrictions have to be defined because this general equation cannot always be
// inverted.
type CoeffsType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// a coefficient for the specified formula:
	//
	// f(x) = (axx + bx + c) / (dxx + ex + f)
	A *FloatType `protobuf:"bytes,1,opt,name=A,proto3" json:"A,omitempty"`
	// b coefficient for the specified formula:
	//
	// f(x) = (axx + bx + c) / (dxx + ex + f)
	B *FloatType `protobuf:"bytes,2,opt,name=B,proto3" json:"B,omitempty"`
	// c coefficient for the specified formula:
	//
	// f(x) = (axx + bx + c) / (dxx + ex + f)
	C *FloatType `protobuf:"bytes,3,opt,name=C,proto3" json:"C,omitempty"`
	// d coefficient for the specified formula:
	//
	// f(x) = (axx + bx + c) / (dxx + ex + f)
	D *FloatType `protobuf:"bytes,4,opt,name=D,proto3" json:"D,omitempty"`
	// e coefficient for the specified formula:
	//
	// f(x) = (axx + bx + c) / (dxx + ex + f)
	E *FloatType `protobuf:"bytes,5,opt,name=E,proto3" json:"E,omitempty"`
	// f coefficient for the specified formula:
	//
	// f(x) = (axx + bx + c) / (dxx + ex + f)
	F *FloatType `protobuf:"bytes,6,opt,name=F,proto3" json:"F,omitempty"`
}

func (x *CoeffsType) Reset() {
	*x = CoeffsType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoeffsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoeffsType) ProtoMessage() {}

func (x *CoeffsType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoeffsType.ProtoReflect.Descriptor instead.
func (*CoeffsType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{33}
}

func (x *CoeffsType) GetA() *FloatType {
	if x != nil {
		return x.A
	}
	return nil
}

func (x *CoeffsType) GetB() *FloatType {
	if x != nil {
		return x.B
	}
	return nil
}

func (x *CoeffsType) GetC() *FloatType {
	if x != nil {
		return x.C
	}
	return nil
}

func (x *CoeffsType) GetD() *FloatType {
	if x != nil {
		return x.D
	}
	return nil
}

func (x *CoeffsType) GetE() *FloatType {
	if x != nil {
		return x.E
	}
	return nil
}

func (x *CoeffsType) GetF() *FloatType {
	if x != nil {
		return x.F
	}
	return nil
}

type ComparisonQuantityType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *IdentType `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *ComparisonQuantityType) Reset() {
	*x = ComparisonQuantityType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComparisonQuantityType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComparisonQuantityType) ProtoMessage() {}

func (x *ComparisonQuantityType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComparisonQuantityType.ProtoReflect.Descriptor instead.
func (*ComparisonQuantityType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{34}
}

func (x *ComparisonQuantityType) GetName() *IdentType {
	if x != nil {
		return x.Name
	}
	return nil
}

// Specification of a conversion method
type CompuMethodType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier in the program for the conversion method
	//
	// Note: The name of the conversion method has to be unique within all conversion methods of the ASAP2 MODULE, i.e.
	// there must not be another COMPU_METHOD object with the same identifier in the MODULE.
	Name *IdentType `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	// Comment, description
	LongIdentifier *StringType `protobuf:"bytes,2,opt,name=LongIdentifier,proto3" json:"LongIdentifier,omitempty"`
	// - TAB_INTP: table with interpolation
	// - TAB_NOINTP: table without interpolation
	// - TAB_VERB: verbal conversion table
	// - RAT_FUNC: fractional rational function of the following type
	//   f(x)=(axx + bx + c)/(dxx + ex + f)
	//   for which:
	//   INT = f(PHYS)
	//   Coefficients a, b, c, d, e, f are specified by the optional COEFFS keyword.
	//   Important: For these coefficients restrictions have to be defined because this general equation cannot always
	//   be inverted.
	// - FORM: conversion based on the formula specified by the optional FORMULA keyword.
	ConversionType string `protobuf:"bytes,3,opt,name=ConversionType,proto3" json:"ConversionType,omitempty"`
	//  display format in %[length].[layout]; length indicates the overall length; layout indicates the decimal places.
	//  The format string should never be empty as "".
	Format *StringType `protobuf:"bytes,4,opt,name=Format,proto3" json:"Format,omitempty"`
	// Physical unit
	Unit *StringType `protobuf:"bytes,5,opt,name=Unit,proto3" json:"Unit,omitempty"`
	// Formula to be used for the conversion
	FORMULA *FormulaType `protobuf:"bytes,6,opt,name=FORMULA,proto3,oneof" json:"FORMULA,omitempty"`
	// This keyword is used to specify coefficients a, b, c, d, e, f for the fractional rational function of the following
	// type (axx + bx + c) / (dxx + ex + f)
	COEFFS *CoeffsType `protobuf:"bytes,7,opt,name=COEFFS,proto3,oneof" json:"COEFFS,omitempty"`
	// This keyword is used to specify a conversion table (reference to COMPU_TAB data record).
	COMPU_TAB_REF *CompuTabRefType `protobuf:"bytes,8,opt,name=COMPU_TAB_REF,proto3,oneof" json:"COMPU_TAB_REF,omitempty"`
	// This keyword is used to reference a measurement unit (e.g. an object of type UNIT). The string parameter Unit is a
	// redundant information because the record referenced by REF_UNIT contain it too. Just for the purpose of
	// compatibility with previous versions of ASAP2 the parameter REF_UNIT is optional. The string parameter Unit is
	// going to be canceled at ASAP2 version 2.00.
	REF_UNIT *RefUnitType `protobuf:"bytes,9,opt,name=REF_UNIT,proto3,oneof" json:"REF_UNIT,omitempty"`
}

func (x *CompuMethodType) Reset() {
	*x = CompuMethodType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompuMethodType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompuMethodType) ProtoMessage() {}

func (x *CompuMethodType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompuMethodType.ProtoReflect.Descriptor instead.
func (*CompuMethodType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{35}
}

func (x *CompuMethodType) GetName() *IdentType {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *CompuMethodType) GetLongIdentifier() *StringType {
	if x != nil {
		return x.LongIdentifier
	}
	return nil
}

func (x *CompuMethodType) GetConversionType() string {
	if x != nil {
		return x.ConversionType
	}
	return ""
}

func (x *CompuMethodType) GetFormat() *StringType {
	if x != nil {
		return x.Format
	}
	return nil
}

func (x *CompuMethodType) GetUnit() *StringType {
	if x != nil {
		return x.Unit
	}
	return nil
}

func (x *CompuMethodType) GetFORMULA() *FormulaType {
	if x != nil {
		return x.FORMULA
	}
	return nil
}

func (x *CompuMethodType) GetCOEFFS() *CoeffsType {
	if x != nil {
		return x.COEFFS
	}
	return nil
}

func (x *CompuMethodType) GetCOMPU_TAB_REF() *CompuTabRefType {
	if x != nil {
		return x.COMPU_TAB_REF
	}
	return nil
}

func (x *CompuMethodType) GetREF_UNIT() *RefUnitType {
	if x != nil {
		return x.REF_UNIT
	}
	return nil
}

// Reference to the data record which contains the conversion table (see keyword COMPU_TAB).
//
// Note: COMPU_TAB_REF may only refer to objects of type COMPU_TAB, COMPU_VTAB or COMPU_VTAB_RANGE.
type CompuTabRefType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reference to the data record which contains the conversion table (see COMPU_TAB).
	ConversionTable *IdentType `protobuf:"bytes,1,opt,name=ConversionTable,proto3" json:"ConversionTable,omitempty"`
}

func (x *CompuTabRefType) Reset() {
	*x = CompuTabRefType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompuTabRefType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompuTabRefType) ProtoMessage() {}

func (x *CompuTabRefType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompuTabRefType.ProtoReflect.Descriptor instead.
func (*CompuTabRefType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{36}
}

func (x *CompuTabRefType) GetConversionTable() *IdentType {
	if x != nil {
		return x.ConversionTable
	}
	return nil
}

// Conversion table for conversions that cannot be represented as a function.
type CompuTabType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unique identifier in the program for the conversion table
	//
	// Note: The name of the conversion table has to be unique within all conversion tables of the ASAP2 MODULE, i.e.
	// there must not be another COMPU_TAB, COMPU_VTAB or COMPU_VTAB_RANGE object with the the same identifier in the
	// MODULE.
	Name *IdentType `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	// comment, description
	LongIdentifier *StringType `protobuf:"bytes,2,opt,name=LongIdentifier,proto3" json:"LongIdentifier,omitempty"`
	// following types are possible:
	// - TAB_INTP: table with interpolation
	// - TAB_NOINTP: table without interpolation
	//
	// Note: This parameter is redundant information because the record defined with COMPU_METHOD also contains it.
	ConversionType string `protobuf:"bytes,3,opt,name=ConversionType,proto3" json:"ConversionType,omitempty"`
	// number of successive value pairs for this conversion table
	NumberValuePairs *IntType                        `protobuf:"bytes,4,opt,name=NumberValuePairs,proto3" json:"NumberValuePairs,omitempty"`
	InValOutVal      []*CompuTabType_InValOutValType `protobuf:"bytes,5,rep,name=InValOutVal,proto3" json:"InValOutVal,omitempty"`
	// string used as OutVal for display when the ECU value is out of any declared range. This string shall not be
	// selectable for calibration (when writing to the ECU).
	DEFAULT_VALUE *DefaultValueType `protobuf:"bytes,6,opt,name=DEFAULT_VALUE,proto3,oneof" json:"DEFAULT_VALUE,omitempty"`
}

func (x *CompuTabType) Reset() {
	*x = CompuTabType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompuTabType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompuTabType) ProtoMessage() {}

func (x *CompuTabType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompuTabType.ProtoReflect.Descriptor instead.
func (*CompuTabType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{37}
}

func (x *CompuTabType) GetName() *IdentType {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *CompuTabType) GetLongIdentifier() *StringType {
	if x != nil {
		return x.LongIdentifier
	}
	return nil
}

func (x *CompuTabType) GetConversionType() string {
	if x != nil {
		return x.ConversionType
	}
	return ""
}

func (x *CompuTabType) GetNumberValuePairs() *IntType {
	if x != nil {
		return x.NumberValuePairs
	}
	return nil
}

func (x *CompuTabType) GetInValOutVal() []*CompuTabType_InValOutValType {
	if x != nil {
		return x.InValOutVal
	}
	return nil
}

func (x *CompuTabType) GetDEFAULT_VALUE() *DefaultValueType {
	if x != nil {
		return x.DEFAULT_VALUE
	}
	return nil
}

// Conversion table for the assignment of display strings to a value range. In particular this is useful for ASAP2
// definitions with the data type ‘floating point’ (referred as FLOAT definitions).
//
// For FLOAT definitions, the declared string is displayed for InValMin <= ECU value < InValMax, with InValMin, InValMax
// as floating point values.
//
// For non-FLOAT definitions, the declared string is displayed for InValMin <= ECU value <= InValMax, with InValMin,
// InVal as integer values.
type CompuVTabRangeType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unique identifier in the program for the verbal range based conversion table
	//
	// Note: The name of the conversion table has to be unique within all conversion tables of the ASAP2 MODULE, i.e.
	// there must not be another COMPU_TAB, COMPU_VTAB or COMPU_VTAB_RANGE object with the the same identifier in the
	// MODULE.
	Name *IdentType `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	// comment, description
	LongIdentifier *StringType `protobuf:"bytes,2,opt,name=LongIdentifier,proto3" json:"LongIdentifier,omitempty"`
	// number of successive value triples for this verbal range based conversion table
	NumberOfValuesTriples  *IntType                                         `protobuf:"bytes,3,opt,name=NumberOfValuesTriples,proto3" json:"NumberOfValuesTriples,omitempty"`
	InValMinInValMaxOutVal []*CompuVTabRangeType_InValMinInValMaxOutValType `protobuf:"bytes,4,rep,name=InValMinInValMaxOutVal,proto3" json:"InValMinInValMaxOutVal,omitempty"`
	// string used as OutVal for display when the ECU value is out of any declared range. This string shall not be
	// selectable for calibration (when writing to the ECU).
	DEFAULT_VALUE *DefaultValueType `protobuf:"bytes,5,opt,name=DEFAULT_VALUE,proto3,oneof" json:"DEFAULT_VALUE,omitempty"`
}

func (x *CompuVTabRangeType) Reset() {
	*x = CompuVTabRangeType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompuVTabRangeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompuVTabRangeType) ProtoMessage() {}

func (x *CompuVTabRangeType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompuVTabRangeType.ProtoReflect.Descriptor instead.
func (*CompuVTabRangeType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{38}
}

func (x *CompuVTabRangeType) GetName() *IdentType {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *CompuVTabRangeType) GetLongIdentifier() *StringType {
	if x != nil {
		return x.LongIdentifier
	}
	return nil
}

func (x *CompuVTabRangeType) GetNumberOfValuesTriples() *IntType {
	if x != nil {
		return x.NumberOfValuesTriples
	}
	return nil
}

func (x *CompuVTabRangeType) GetInValMinInValMaxOutVal() []*CompuVTabRangeType_InValMinInValMaxOutValType {
	if x != nil {
		return x.InValMinInValMaxOutVal
	}
	return nil
}

func (x *CompuVTabRangeType) GetDEFAULT_VALUE() *DefaultValueType {
	if x != nil {
		return x.DEFAULT_VALUE
	}
	return nil
}

// Conversion table for the visualisation of bit patterns
type CompuVTabType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unique identifier in the program for the verbal conversion table
	//
	// Note: The name of the conversion table has to be unique within all conversion tables of the ASAP2 MODULE, i.e.
	// there must not be another COMPU_TAB, COMPU_VTAB or COMPU_VTAB_RANGE object with the the same identifier in the
	// MODULE.
	Name *IdentType `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	// comment, description
	LongIdentifier *StringType `protobuf:"bytes,2,opt,name=LongIdentifier,proto3" json:"LongIdentifier,omitempty"`
	// at present only the following types are possible:
	// - TAB_VERB: verbal conversion table
	//
	// Note: This parameter is a redundant information because the record defined with COMPU_METHOD also contains it.
	// Therefore this parameter is going to be canceled at ASAP2 version 2.00.
	ConversionType string `protobuf:"bytes,3,opt,name=ConversionType,proto3" json:"ConversionType,omitempty"`
	// number of successive value pairs for this conversion table
	NumberValuePairs *IntType                         `protobuf:"bytes,4,opt,name=NumberValuePairs,proto3" json:"NumberValuePairs,omitempty"`
	InValOutVal      []*CompuVTabType_InValOutValType `protobuf:"bytes,5,rep,name=InValOutVal,proto3" json:"InValOutVal,omitempty"`
	// string used as OutVal for display when the ECU value is out of any declared range. This string shall not be
	// selectable for calibration (when writing to the ECU).
	DEFAULT_VALUE *DefaultValueType `protobuf:"bytes,6,opt,name=DEFAULT_VALUE,proto3,oneof" json:"DEFAULT_VALUE,omitempty"`
}

func (x *CompuVTabType) Reset() {
	*x = CompuVTabType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompuVTabType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompuVTabType) ProtoMessage() {}

func (x *CompuVTabType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompuVTabType.ProtoReflect.Descriptor instead.
func (*CompuVTabType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{39}
}

func (x *CompuVTabType) GetName() *IdentType {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *CompuVTabType) GetLongIdentifier() *StringType {
	if x != nil {
		return x.LongIdentifier
	}
	return nil
}

func (x *CompuVTabType) GetConversionType() string {
	if x != nil {
		return x.ConversionType
	}
	return ""
}

func (x *CompuVTabType) GetNumberValuePairs() *IntType {
	if x != nil {
		return x.NumberValuePairs
	}
	return nil
}

func (x *CompuVTabType) GetInValOutVal() []*CompuVTabType_InValOutValType {
	if x != nil {
		return x.InValOutVal
	}
	return nil
}

func (x *CompuVTabType) GetDEFAULT_VALUE() *DefaultValueType {
	if x != nil {
		return x.DEFAULT_VALUE
	}
	return nil
}

// CPU identification
type CpuTypeType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CPU identifier
	Cpu *StringType `protobuf:"bytes,1,opt,name=Cpu,proto3" json:"Cpu,omitempty"`
}

func (x *CpuTypeType) Reset() {
	*x = CpuTypeType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CpuTypeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CpuTypeType) ProtoMessage() {}

func (x *CpuTypeType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CpuTypeType.ProtoReflect.Descriptor instead.
func (*CpuTypeType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{40}
}

func (x *CpuTypeType) GetCpu() *StringType {
	if x != nil {
		return x.Cpu
	}
	return nil
}

type CurveAxisRefType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurveAxis *IdentType `protobuf:"bytes,1,opt,name=CurveAxis,proto3" json:"CurveAxis,omitempty"`
}

func (x *CurveAxisRefType) Reset() {
	*x = CurveAxisRefType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurveAxisRefType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurveAxisRefType) ProtoMessage() {}

func (x *CurveAxisRefType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurveAxisRefType.ProtoReflect.Descriptor instead.
func (*CurveAxisRefType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{41}
}

func (x *CurveAxisRefType) GetCurveAxis() *IdentType {
	if x != nil {
		return x.CurveAxis
	}
	return nil
}

// Customer number as string.
type CustomerNoType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// customer number
	Number *StringType `protobuf:"bytes,1,opt,name=Number,proto3" json:"Number,omitempty"`
}

func (x *CustomerNoType) Reset() {
	*x = CustomerNoType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerNoType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerNoType) ProtoMessage() {}

func (x *CustomerNoType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerNoType.ProtoReflect.Descriptor instead.
func (*CustomerNoType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{42}
}

func (x *CustomerNoType) GetNumber() *StringType {
	if x != nil {
		return x.Number
	}
	return nil
}

// This keyword allows a customer name to be specified.
type CustomerType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// customer name
	Customer *StringType `protobuf:"bytes,1,opt,name=Customer,proto3" json:"Customer,omitempty"`
}

func (x *CustomerType) Reset() {
	*x = CustomerType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerType) ProtoMessage() {}

func (x *CustomerType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerType.ProtoReflect.Descriptor instead.
func (*CustomerType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{43}
}

func (x *CustomerType) GetCustomer() *StringType {
	if x != nil {
		return x.Customer
	}
	return nil
}

// typedef enum datasize {BYTE, WORD, LONG}
type DataSizeType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *DataSizeType) Reset() {
	*x = DataSizeType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSizeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSizeType) ProtoMessage() {}

func (x *DataSizeType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSizeType.ProtoReflect.Descriptor instead.
func (*DataSizeType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{44}
}

func (x *DataSizeType) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Optional String which can be applied with COMPU_TAB, COMPU_VTAB and COMPU_VTAB_RANGE, used as OutVal for display when
// the ECU value is out of any declared range. This string shall not be selectable for calibration (when writing to the
// ECU).
type DefaultValueType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Display string.
	DisplayString *StringType `protobuf:"bytes,1,opt,name=DisplayString,proto3" json:"DisplayString,omitempty"`
}

func (x *DefaultValueType) Reset() {
	*x = DefaultValueType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefaultValueType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultValueType) ProtoMessage() {}

func (x *DefaultValueType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultValueType.ProtoReflect.Descriptor instead.
func (*DefaultValueType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{45}
}

func (x *DefaultValueType) GetDisplayString() *StringType {
	if x != nil {
		return x.DisplayString
	}
	return nil
}

// This keyword can be used to declare some adjustable objects to be defined in respective function (function
// orientation).
//
// Note: DEF_CHARACTERISTIC may only refer to objects of type AXIS_PTS or CHARACTERISTIC.
type DefCharacteristicType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of those adjustable objects that are defined in respective function.
	Identifier []*IdentType `protobuf:"bytes,1,rep,name=Identifier,proto3" json:"Identifier,omitempty"`
}

func (x *DefCharacteristicType) Reset() {
	*x = DefCharacteristicType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefCharacteristicType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefCharacteristicType) ProtoMessage() {}

func (x *DefCharacteristicType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefCharacteristicType.ProtoReflect.Descriptor instead.
func (*DefCharacteristicType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{46}
}

func (x *DefCharacteristicType) GetIdentifier() []*IdentType {
	if x != nil {
		return x.Identifier
	}
	return nil
}

// This keyword allows dependent characteristics to be specified. For this, other characteristics can be combined into
// one characteristic whose consistent value is automatically derived by the application system. Upon adjusting one of
// the characteristics, this characteristic is then also automatically adjusted according to the chosen formula (see
// also VIRTUAL_CHARACTERISTIC)
type DependentCharacteristicType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Formula to be used for the calculation of the physical value of the characteristic from the physical value of other
	// characteristics.
	Formula *StringType `protobuf:"bytes,1,opt,name=Formula,proto3" json:"Formula,omitempty"`
	// Identifier of those adjustable objects that are used for the calculation of this characteristic.
	Characteristic []*IdentType `protobuf:"bytes,2,rep,name=Characteristic,proto3" json:"Characteristic,omitempty"`
}

func (x *DependentCharacteristicType) Reset() {
	*x = DependentCharacteristicType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DependentCharacteristicType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DependentCharacteristicType) ProtoMessage() {}

func (x *DependentCharacteristicType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DependentCharacteristicType.ProtoReflect.Descriptor instead.
func (*DependentCharacteristicType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{47}
}

func (x *DependentCharacteristicType) GetFormula() *StringType {
	if x != nil {
		return x.Formula
	}
	return nil
}

func (x *DependentCharacteristicType) GetCharacteristic() []*IdentType {
	if x != nil {
		return x.Characteristic
	}
	return nil
}

// The axis points of a characteristic can be deposited in two different ways in the memory:
//
// a) The individual axis point values are deposited as absolute values.
//
// b) The individual axis points are deposited as differences. Each axis point value is determined on the basis of the
// adjacent axis point (predecessor) and the corresponding difference. As reference point for the first axis point
// <maxvalue> is used:
//
// 1-byte-size: <maxvalue> = 28 (256)
// 2-byte-size: <maxvalue> = 216 (65536)
// 4-byte-size: <maxvalue> = 232
type DepositType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode string `protobuf:"bytes,1,opt,name=Mode,proto3" json:"Mode,omitempty"`
}

func (x *DepositType) Reset() {
	*x = DepositType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DepositType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositType) ProtoMessage() {}

func (x *DepositType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositType.ProtoReflect.Descriptor instead.
func (*DepositType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{48}
}

func (x *DepositType) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

type DisplayIdentifierType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisplayName *IdentType `protobuf:"bytes,1,opt,name=DisplayName,proto3" json:"DisplayName,omitempty"`
}

func (x *DisplayIdentifierType) Reset() {
	*x = DisplayIdentifierType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisplayIdentifierType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisplayIdentifierType) ProtoMessage() {}

func (x *DisplayIdentifierType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisplayIdentifierType.ProtoReflect.Descriptor instead.
func (*DisplayIdentifierType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{49}
}

func (x *DisplayIdentifierType) GetDisplayName() *IdentType {
	if x != nil {
		return x.DisplayName
	}
	return nil
}

// Description of the distance operand in the deposit structure to compute the axis points for fixed characteristic
// curves and fixed characteristic maps (see also keyword FIX_AXIS_PAR_DIST).
type DistOpXType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Position of the distance operand in the deposit structure.
	Position *IntType `protobuf:"bytes,1,opt,name=Position,proto3" json:"Position,omitempty"`
	// Data type of the distance operand.
	DataType *DataTypeType `protobuf:"bytes,2,opt,name=DataType,proto3" json:"DataType,omitempty"`
}

func (x *DistOpXType) Reset() {
	*x = DistOpXType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DistOpXType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DistOpXType) ProtoMessage() {}

func (x *DistOpXType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DistOpXType.ProtoReflect.Descriptor instead.
func (*DistOpXType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{50}
}

func (x *DistOpXType) GetPosition() *IntType {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *DistOpXType) GetDataType() *DataTypeType {
	if x != nil {
		return x.DataType
	}
	return nil
}

// Description of the distance operand in the deposit structure to compute the axis points for fixed characteristic
// curves and fixed characteristic maps (see also keyword FIX_AXIS_PAR_DIST).
type DistOpYType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Position of the distance operand in the deposit structure.
	Position *IntType `protobuf:"bytes,1,opt,name=Position,proto3" json:"Position,omitempty"`
	// Data type of the distance operand.
	DataType *DataTypeType `protobuf:"bytes,2,opt,name=DataType,proto3" json:"DataType,omitempty"`
}

func (x *DistOpYType) Reset() {
	*x = DistOpYType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DistOpYType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DistOpYType) ProtoMessage() {}

func (x *DistOpYType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DistOpYType.ProtoReflect.Descriptor instead.
func (*DistOpYType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{51}
}

func (x *DistOpYType) GetPosition() *IntType {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *DistOpYType) GetDataType() *DataTypeType {
	if x != nil {
		return x.DataType
	}
	return nil
}

// Description of the distance operand in the deposit structure to compute the axis points for fixed characteristic
// curves and fixed characteristic maps (see also keyword FIX_AXIS_PAR_DIST).
type DistOpZType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Position of the distance operand in the deposit structure.
	Position *IntType `protobuf:"bytes,1,opt,name=Position,proto3" json:"Position,omitempty"`
	// Data type of the distance operand.
	DataType *DataTypeType `protobuf:"bytes,2,opt,name=DataType,proto3" json:"DataType,omitempty"`
}

func (x *DistOpZType) Reset() {
	*x = DistOpZType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DistOpZType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DistOpZType) ProtoMessage() {}

func (x *DistOpZType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DistOpZType.ProtoReflect.Descriptor instead.
func (*DistOpZType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{52}
}

func (x *DistOpZType) GetPosition() *IntType {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *DistOpZType) GetDataType() *DataTypeType {
	if x != nil {
		return x.DataType
	}
	return nil
}

// This keyword is used to specify additional address information. For instance it can be used, to distinguish different
// address spaces of an ECU (multi-microcontroller devices). ECU_ADDRESS_EXTENSION is an optional keyword of
// MEASUREMENT, AXIS_PTS and CHARACTERISTIC.
type EcuAddressExtensionType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Address extension of the ECU address
	Extension *IntType `protobuf:"bytes,1,opt,name=Extension,proto3" json:"Extension,omitempty"`
}

func (x *EcuAddressExtensionType) Reset() {
	*x = EcuAddressExtensionType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EcuAddressExtensionType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EcuAddressExtensionType) ProtoMessage() {}

func (x *EcuAddressExtensionType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EcuAddressExtensionType.ProtoReflect.Descriptor instead.
func (*EcuAddressExtensionType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{53}
}

func (x *EcuAddressExtensionType) GetExtension() *IntType {
	if x != nil {
		return x.Extension
	}
	return nil
}

type EcuAddressType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address *LongType `protobuf:"bytes,1,opt,name=Address,proto3" json:"Address,omitempty"`
}

func (x *EcuAddressType) Reset() {
	*x = EcuAddressType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EcuAddressType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EcuAddressType) ProtoMessage() {}

func (x *EcuAddressType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EcuAddressType.ProtoReflect.Descriptor instead.
func (*EcuAddressType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{54}
}

func (x *EcuAddressType) GetAddress() *LongType {
	if x != nil {
		return x.Address
	}
	return nil
}

// ECU_CALIBRATION_OFFSET is used to describe a fixed address offset when accessing characteristics in the control unit
// due to:
//
// - near pointers in calibration objects. Some record layouts include near pointers inside a calibration objects from
// which the calibration system has to compute the absolute values by adding the ECU_CALIBRATION_OFFSET (CDAMOS)
// - variant coding. Some ECU projects include multiple data sets for different engine or vehicle projects served by one
// common ECU. By using the ECU_CALIBRATION_OFFSET, a selection for project base address can be made Used in MOD_PAR.
type EcuCalibrationOffsetType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Offset that has to be added to each address of a characteristic
	Offset *LongType `protobuf:"bytes,1,opt,name=Offset,proto3" json:"Offset,omitempty"`
}

func (x *EcuCalibrationOffsetType) Reset() {
	*x = EcuCalibrationOffsetType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EcuCalibrationOffsetType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EcuCalibrationOffsetType) ProtoMessage() {}

func (x *EcuCalibrationOffsetType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EcuCalibrationOffsetType.ProtoReflect.Descriptor instead.
func (*EcuCalibrationOffsetType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{55}
}

func (x *EcuCalibrationOffsetType) GetOffset() *LongType {
	if x != nil {
		return x.Offset
	}
	return nil
}

// String for identification of the control unit.
type EcuType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// control unit identifier
	ControlUnit *StringType `protobuf:"bytes,1,opt,name=ControlUnit,proto3" json:"ControlUnit,omitempty"`
}

func (x *EcuType) Reset() {
	*x = EcuType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EcuType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EcuType) ProtoMessage() {}

func (x *EcuType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EcuType.ProtoReflect.Descriptor instead.
func (*EcuType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{56}
}

func (x *EcuType) GetControlUnit() *StringType {
	if x != nil {
		return x.ControlUnit
	}
	return nil
}

// EPROM identifier string.
type EpkType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// EPROM identifier
	Identifier *StringType `protobuf:"bytes,1,opt,name=Identifier,proto3" json:"Identifier,omitempty"`
}

func (x *EpkType) Reset() {
	*x = EpkType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpkType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpkType) ProtoMessage() {}

func (x *EpkType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpkType.ProtoReflect.Descriptor instead.
func (*EpkType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{57}
}

func (x *EpkType) GetIdentifier() *StringType {
	if x != nil {
		return x.Identifier
	}
	return nil
}

type ErrorMaskType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mask *LongType `protobuf:"bytes,1,opt,name=Mask,proto3" json:"Mask,omitempty"`
}

func (x *ErrorMaskType) Reset() {
	*x = ErrorMaskType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorMaskType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorMaskType) ProtoMessage() {}

func (x *ErrorMaskType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorMaskType.ProtoReflect.Descriptor instead.
func (*ErrorMaskType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{58}
}

func (x *ErrorMaskType) GetMask() *LongType {
	if x != nil {
		return x.Mask
	}
	return nil
}

// This keyword can be used to specify an extended range of values. In the application system, for example, when leaving
// the standard range of values (mandatory parameters 'lower limit' and 'upper limit' in the CHARACTERISTIC data record)
// a warning could be generated (extended limits enabled only for "power user")
type ExtendedLimitsType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// extended range of table values, lower limit
	LowerLimit *FloatType `protobuf:"bytes,1,opt,name=LowerLimit,proto3" json:"LowerLimit,omitempty"`
	// extended range of table values, upper limit
	UpperLimit *FloatType `protobuf:"bytes,2,opt,name=UpperLimit,proto3" json:"UpperLimit,omitempty"`
}

func (x *ExtendedLimitsType) Reset() {
	*x = ExtendedLimitsType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtendedLimitsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtendedLimitsType) ProtoMessage() {}

func (x *ExtendedLimitsType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtendedLimitsType.ProtoReflect.Descriptor instead.
func (*ExtendedLimitsType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{59}
}

func (x *ExtendedLimitsType) GetLowerLimit() *FloatType {
	if x != nil {
		return x.LowerLimit
	}
	return nil
}

func (x *ExtendedLimitsType) GetUpperLimit() *FloatType {
	if x != nil {
		return x.UpperLimit
	}
	return nil
}

type FixAxisParDistType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset    *IntType `protobuf:"bytes,1,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Distance  *IntType `protobuf:"bytes,2,opt,name=Distance,proto3" json:"Distance,omitempty"`
	Numberapo *IntType `protobuf:"bytes,3,opt,name=Numberapo,proto3" json:"Numberapo,omitempty"`
}

func (x *FixAxisParDistType) Reset() {
	*x = FixAxisParDistType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FixAxisParDistType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixAxisParDistType) ProtoMessage() {}

func (x *FixAxisParDistType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixAxisParDistType.ProtoReflect.Descriptor instead.
func (*FixAxisParDistType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{60}
}

func (x *FixAxisParDistType) GetOffset() *IntType {
	if x != nil {
		return x.Offset
	}
	return nil
}

func (x *FixAxisParDistType) GetDistance() *IntType {
	if x != nil {
		return x.Distance
	}
	return nil
}

func (x *FixAxisParDistType) GetNumberapo() *IntType {
	if x != nil {
		return x.Numberapo
	}
	return nil
}

type FixAxisParListType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AxisPtsValue []*FloatType `protobuf:"bytes,1,rep,name=AxisPtsValue,proto3" json:"AxisPtsValue,omitempty"`
}

func (x *FixAxisParListType) Reset() {
	*x = FixAxisParListType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FixAxisParListType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixAxisParListType) ProtoMessage() {}

func (x *FixAxisParListType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixAxisParListType.ProtoReflect.Descriptor instead.
func (*FixAxisParListType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{61}
}

func (x *FixAxisParListType) GetAxisPtsValue() []*FloatType {
	if x != nil {
		return x.AxisPtsValue
	}
	return nil
}

type FixAxisParType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset    *IntType `protobuf:"bytes,1,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Shift     *IntType `protobuf:"bytes,2,opt,name=Shift,proto3" json:"Shift,omitempty"`
	Numberapo *IntType `protobuf:"bytes,3,opt,name=Numberapo,proto3" json:"Numberapo,omitempty"`
}

func (x *FixAxisParType) Reset() {
	*x = FixAxisParType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FixAxisParType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixAxisParType) ProtoMessage() {}

func (x *FixAxisParType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixAxisParType.ProtoReflect.Descriptor instead.
func (*FixAxisParType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{62}
}

func (x *FixAxisParType) GetOffset() *IntType {
	if x != nil {
		return x.Offset
	}
	return nil
}

func (x *FixAxisParType) GetShift() *IntType {
	if x != nil {
		return x.Shift
	}
	return nil
}

func (x *FixAxisParType) GetNumberapo() *IntType {
	if x != nil {
		return x.Numberapo
	}
	return nil
}

// This keyword indicates that all characteristic curves or characteristic maps are allocated a fixed number of X-axis
// and Y-axis points. In a RECORD_LAYOUT data record, this keyword cannot be used simultaneously with the keyword
// NO_AXIS_PTS_X (for FIX_NO_AXIS_PTS_X) or NO_AXIS_PTS_Y (for FIX_NO_AXIS_PTS_Y)
type FixNoAxisPtsXType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Dimensioning of characteristic curves or characteristic maps with a fixed number of axis points
	NumberOfAxisPoints *IntType `protobuf:"bytes,1,opt,name=NumberOfAxisPoints,proto3" json:"NumberOfAxisPoints,omitempty"`
}

func (x *FixNoAxisPtsXType) Reset() {
	*x = FixNoAxisPtsXType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FixNoAxisPtsXType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixNoAxisPtsXType) ProtoMessage() {}

func (x *FixNoAxisPtsXType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixNoAxisPtsXType.ProtoReflect.Descriptor instead.
func (*FixNoAxisPtsXType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{63}
}

func (x *FixNoAxisPtsXType) GetNumberOfAxisPoints() *IntType {
	if x != nil {
		return x.NumberOfAxisPoints
	}
	return nil
}

// This keyword indicates that all characteristic curves or characteristic maps are allocated a fixed number of X-axis
// and Y-axis points. In a RECORD_LAYOUT data record, this keyword cannot be used simultaneously with the keyword
// NO_AXIS_PTS_X (for FIX_NO_AXIS_PTS_X) or NO_AXIS_PTS_Y (for FIX_NO_AXIS_PTS_Y)
type FixNoAxisPtsYType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Dimensioning of characteristic curves or characteristic maps with a fixed number of axis points
	NumberOfAxisPoints *IntType `protobuf:"bytes,1,opt,name=NumberOfAxisPoints,proto3" json:"NumberOfAxisPoints,omitempty"`
}

func (x *FixNoAxisPtsYType) Reset() {
	*x = FixNoAxisPtsYType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FixNoAxisPtsYType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixNoAxisPtsYType) ProtoMessage() {}

func (x *FixNoAxisPtsYType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixNoAxisPtsYType.ProtoReflect.Descriptor instead.
func (*FixNoAxisPtsYType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{64}
}

func (x *FixNoAxisPtsYType) GetNumberOfAxisPoints() *IntType {
	if x != nil {
		return x.NumberOfAxisPoints
	}
	return nil
}

// This keyword indicates that all characteristic curves or characteristic maps are allocated a fixed number of X-axis
// and Y-axis points. In a RECORD_LAYOUT data record, this keyword cannot be used simultaneously with the keyword
// NO_AXIS_PTS_X (for FIX_NO_AXIS_PTS_X) or NO_AXIS_PTS_Y (for FIX_NO_AXIS_PTS_Y)
type FixNoAxisPtsZType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Dimensioning of characteristic curves or characteristic maps with a fixed number of axis points
	NumberOfAxisPoints *IntType `protobuf:"bytes,1,opt,name=NumberOfAxisPoints,proto3" json:"NumberOfAxisPoints,omitempty"`
}

func (x *FixNoAxisPtsZType) Reset() {
	*x = FixNoAxisPtsZType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FixNoAxisPtsZType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixNoAxisPtsZType) ProtoMessage() {}

func (x *FixNoAxisPtsZType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixNoAxisPtsZType.ProtoReflect.Descriptor instead.
func (*FixNoAxisPtsZType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{65}
}

func (x *FixNoAxisPtsZType) GetNumberOfAxisPoints() *IntType {
	if x != nil {
		return x.NumberOfAxisPoints
	}
	return nil
}

// Description of the table values (function values) of an adjustable object. If the ALTERNATE option is used, the
// position parameter of values and axis-points indicates their order.
type FncValuesType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// position of table values (function values) in the deposit structure (description of sequence of elements in the
	// data record).
	Position *IntType `protobuf:"bytes,1,opt,name=Position,proto3" json:"Position,omitempty"`
	// data type of the table values
	DataType *DataTypeType `protobuf:"bytes,2,opt,name=DataType,proto3" json:"DataType,omitempty"`
	// for characteristic maps, this attribute is used to describe how the 2-dimensional table values are mapped onto the
	// 1-dimensional address space:
	//
	// - COLUMN_DIR deposited in columns
	// - ROW_DIR deposited in rows
	//
	//Both concepts 'columns' and 'rows' relate to the XY coordinate system (see also Appendix B: Record layouts). For
	// characteristic cuboids each XY plane is mapped as above. The cuboid is stored as an array of maps with incremental
	// Z coordinates.
	IndexMode string `protobuf:"bytes,3,opt,name=IndexMode,proto3" json:"IndexMode,omitempty"`
	// addressing of the table values (see enum addrtype).
	AddressType *AddrTypeType `protobuf:"bytes,4,opt,name=AddressType,proto3" json:"AddressType,omitempty"`
}

func (x *FncValuesType) Reset() {
	*x = FncValuesType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FncValuesType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FncValuesType) ProtoMessage() {}

func (x *FncValuesType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FncValuesType.ProtoReflect.Descriptor instead.
func (*FncValuesType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{66}
}

func (x *FncValuesType) GetPosition() *IntType {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *FncValuesType) GetDataType() *DataTypeType {
	if x != nil {
		return x.DataType
	}
	return nil
}

func (x *FncValuesType) GetIndexMode() string {
	if x != nil {
		return x.IndexMode
	}
	return ""
}

func (x *FncValuesType) GetAddressType() *AddrTypeType {
	if x != nil {
		return x.AddressType
	}
	return nil
}

type FormatType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FormatString *StringType `protobuf:"bytes,1,opt,name=FormatString,proto3" json:"FormatString,omitempty"`
}

func (x *FormatType) Reset() {
	*x = FormatType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormatType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormatType) ProtoMessage() {}

func (x *FormatType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormatType.ProtoReflect.Descriptor instead.
func (*FormatType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{67}
}

func (x *FormatType) GetFormatString() *StringType {
	if x != nil {
		return x.FormatString
	}
	return nil
}

// This keyword allows any kind of formula to be specified for the conversion of measurement values, axis points or
// table values of an adjustable object from their physical format into the hexadecimal (ECU internal) format. The
// interpretation of the formula must be supported by a formula interpreter in the operating system.
//
// Note: FORMULA_INV is necessary if used for CHARACTERISTIC objects. Only MEASUREMENT objects do not need an inverse
// formula.
type FormulaInvType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Function for calculation of the hexadecimal, control unit internal value from the physical value. The
	// interpretation proceeds from left to right. Operator preferences, such as power before product/quotient before
	// sum/difference, are taken into account. Brackets are allowed.
	GX *StringType `protobuf:"bytes,1,opt,name=GX,proto3" json:"GX,omitempty"`
}

func (x *FormulaInvType) Reset() {
	*x = FormulaInvType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormulaInvType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormulaInvType) ProtoMessage() {}

func (x *FormulaInvType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormulaInvType.ProtoReflect.Descriptor instead.
func (*FormulaInvType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{68}
}

func (x *FormulaInvType) GetGX() *StringType {
	if x != nil {
		return x.GX
	}
	return nil
}

// This keyword allows any kind of formula to be specified for the conversion of measurement values, axis points or
// table values of an adjustable object from their hexadecimal (ECU internal) format into the physical format. The
// interpretation of the formula must be supported by a formula interpreter in the operating system.
//
// Note: When converting from internal values to physical values, the use of “X” is customary. For reasons of backward
// compatibility, if only one input value is necessary, use either X or X1.
type FormulaType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Function to calculate the physical value from the hexadecimal, control unit internal value. The interpretation
	// proceeds from left to right. Operator preferences, such as power before product/quotient before sum/difference, are
	// taken into account. Brackets are allowed.
	FX *StringType `protobuf:"bytes,1,opt,name=FX,proto3" json:"FX,omitempty"`
	// function to calculate the hexadecimal, control unit internal value from the physical value. This parameter is
	// mandatory in formulas used for the conversion of adjustable objects. It is optional only for measurement objects.
	//
	// Note: Certain functions in the application system can only be used for those measurement objects for which this
	// parameter is specified (e.g. scalable DAC output, triggering).
	FORMULA_INV *FormulaInvType `protobuf:"bytes,2,opt,name=FORMULA_INV,proto3,oneof" json:"FORMULA_INV,omitempty"`
}

func (x *FormulaType) Reset() {
	*x = FormulaType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormulaType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormulaType) ProtoMessage() {}

func (x *FormulaType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormulaType.ProtoReflect.Descriptor instead.
func (*FormulaType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{69}
}

func (x *FormulaType) GetFX() *StringType {
	if x != nil {
		return x.FX
	}
	return nil
}

func (x *FormulaType) GetFORMULA_INV() *FormulaInvType {
	if x != nil {
		return x.FORMULA_INV
	}
	return nil
}

// This keyword can be used to define quantities of respective FRAME.
type FrameMeasurementType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of quantity of respective FRAME (reference to measurement object).
	Identifier []*IdentType `protobuf:"bytes,1,rep,name=Identifier,proto3" json:"Identifier,omitempty"`
}

func (x *FrameMeasurementType) Reset() {
	*x = FrameMeasurementType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FrameMeasurementType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrameMeasurementType) ProtoMessage() {}

func (x *FrameMeasurementType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrameMeasurementType.ProtoReflect.Descriptor instead.
func (*FrameMeasurementType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{70}
}

func (x *FrameMeasurementType) GetIdentifier() []*IdentType {
	if x != nil {
		return x.Identifier
	}
	return nil
}

// For the structuring of a car network involving a very large number of measuring channels, function frames can be
// defined. These function frames shall be used in the application system to allow the selection lists for the selection
// of measuring channels to be represented in a structured manner on the basis of functional viewpoints (function
// orientation). This will also be used to describe the packaging of measurement data into sources for CAN frames in a
// network environment.
type FrameType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unique identifier in the program, referencing is based on this 'name'
	//
	// Note: The name of the frame has to be unique within all frames of the ASAP2 MODULE, i.e. there must not be another
	// FRAME object with the the same identifier in the MODULE.
	Name *IdentType `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	// comment, description
	LongIdentifier *StringType `protobuf:"bytes,2,opt,name=LongIdentifier,proto3" json:"LongIdentifier,omitempty"`
	// This parameter defines the basic scaling unit. The following parameter 'Rate' relates on this scaling unit. The
	// value of ScalingUnit is coded as shown in ‘Table 4: Codes for scaling units (CSE)’ (page144).
	ScalingUnit *IntType `protobuf:"bytes,3,opt,name=ScalingUnit,proto3" json:"ScalingUnit,omitempty"`
	// The maximum refresh rate of the concerning measurement source in the control unit. The unit is defined with
	// parameter 'ScalingUnit'.
	Rate *LongType `protobuf:"bytes,4,opt,name=Rate,proto3" json:"Rate,omitempty"`
	// Use this keyword to define the frames measurement objects.
	FRAME_MEASUREMENT *FrameMeasurementType `protobuf:"bytes,5,opt,name=FRAME_MEASUREMENT,proto3,oneof" json:"FRAME_MEASUREMENT,omitempty"`
	// Interface-specific description data (BLOB: binary large object) used at ASAP1b device at call of the command
	// InitRead(). The parameters associated with this keyword are described in the ASAP2 metalanguage (in short A2ML) by
	// the ECU supplier or the interface module supplier.
	IF_DATA []*IfDataType `protobuf:"bytes,6,rep,name=IF_DATA,proto3" json:"IF_DATA,omitempty"`
}

func (x *FrameType) Reset() {
	*x = FrameType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FrameType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrameType) ProtoMessage() {}

func (x *FrameType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrameType.ProtoReflect.Descriptor instead.
func (*FrameType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{71}
}

func (x *FrameType) GetName() *IdentType {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *FrameType) GetLongIdentifier() *StringType {
	if x != nil {
		return x.LongIdentifier
	}
	return nil
}

func (x *FrameType) GetScalingUnit() *IntType {
	if x != nil {
		return x.ScalingUnit
	}
	return nil
}

func (x *FrameType) GetRate() *LongType {
	if x != nil {
		return x.Rate
	}
	return nil
}

func (x *FrameType) GetFRAME_MEASUREMENT() *FrameMeasurementType {
	if x != nil {
		return x.FRAME_MEASUREMENT
	}
	return nil
}

func (x *FrameType) GetIF_DATA() []*IfDataType {
	if x != nil {
		return x.IF_DATA
	}
	return nil
}

// This keyword can be used to specify a list of 'functions' to which the relevant adjustable object has been allocated
// (function orientation).
//
// Note: Since ASAP2 version 1.20 the keyword FUNCTION comprises some additional features to describe functional
// structure and dependencies. The keyword FUNCTION_LIST is going to be canceled at ASAP2 version 2.00.
type FunctionListType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of references to higher-order functions (see FUNCTION).
	Name []*IdentType `protobuf:"bytes,1,rep,name=Name,proto3" json:"Name,omitempty"`
}

func (x *FunctionListType) Reset() {
	*x = FunctionListType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunctionListType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionListType) ProtoMessage() {}

func (x *FunctionListType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionListType.ProtoReflect.Descriptor instead.
func (*FunctionListType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{72}
}

func (x *FunctionListType) GetName() []*IdentType {
	if x != nil {
		return x.Name
	}
	return nil
}

type FunctionType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name               *IdentType             `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	LongIdentifier     *StringType            `protobuf:"bytes,2,opt,name=LongIdentifier,proto3" json:"LongIdentifier,omitempty"`
	ANNOTATION         []*AnnotationType      `protobuf:"bytes,3,rep,name=ANNOTATION,proto3" json:"ANNOTATION,omitempty"`
	DEF_CHARACTERISTIC *DefCharacteristicType `protobuf:"bytes,4,opt,name=DEF_CHARACTERISTIC,proto3,oneof" json:"DEF_CHARACTERISTIC,omitempty"`
	REF_CHARACTERISTIC *RefCharacteristicType `protobuf:"bytes,5,opt,name=REF_CHARACTERISTIC,proto3,oneof" json:"REF_CHARACTERISTIC,omitempty"`
	IN_MEASUREMENT     *InMeasurementType     `protobuf:"bytes,6,opt,name=IN_MEASUREMENT,proto3,oneof" json:"IN_MEASUREMENT,omitempty"`
	OUT_MEASUREMENT    *OutMeasurementType    `protobuf:"bytes,7,opt,name=OUT_MEASUREMENT,proto3,oneof" json:"OUT_MEASUREMENT,omitempty"`
	LOC_MEASUREMENT    *LocMeasurementType    `protobuf:"bytes,8,opt,name=LOC_MEASUREMENT,proto3,oneof" json:"LOC_MEASUREMENT,omitempty"`
	SUB_FUNCTION       *SubFunctionType       `protobuf:"bytes,9,opt,name=SUB_FUNCTION,proto3,oneof" json:"SUB_FUNCTION,omitempty"`
	FUNCTION_VERSION   *FunctionVersionType   `protobuf:"bytes,10,opt,name=FUNCTION_VERSION,proto3,oneof" json:"FUNCTION_VERSION,omitempty"`
}

func (x *FunctionType) Reset() {
	*x = FunctionType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunctionType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionType) ProtoMessage() {}

func (x *FunctionType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionType.ProtoReflect.Descriptor instead.
func (*FunctionType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{73}
}

func (x *FunctionType) GetName() *IdentType {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *FunctionType) GetLongIdentifier() *StringType {
	if x != nil {
		return x.LongIdentifier
	}
	return nil
}

func (x *FunctionType) GetANNOTATION() []*AnnotationType {
	if x != nil {
		return x.ANNOTATION
	}
	return nil
}

func (x *FunctionType) GetDEF_CHARACTERISTIC() *DefCharacteristicType {
	if x != nil {
		return x.DEF_CHARACTERISTIC
	}
	return nil
}

func (x *FunctionType) GetREF_CHARACTERISTIC() *RefCharacteristicType {
	if x != nil {
		return x.REF_CHARACTERISTIC
	}
	return nil
}

func (x *FunctionType) GetIN_MEASUREMENT() *InMeasurementType {
	if x != nil {
		return x.IN_MEASUREMENT
	}
	return nil
}

func (x *FunctionType) GetOUT_MEASUREMENT() *OutMeasurementType {
	if x != nil {
		return x.OUT_MEASUREMENT
	}
	return nil
}

func (x *FunctionType) GetLOC_MEASUREMENT() *LocMeasurementType {
	if x != nil {
		return x.LOC_MEASUREMENT
	}
	return nil
}

func (x *FunctionType) GetSUB_FUNCTION() *SubFunctionType {
	if x != nil {
		return x.SUB_FUNCTION
	}
	return nil
}

func (x *FunctionType) GetFUNCTION_VERSION() *FunctionVersionType {
	if x != nil {
		return x.FUNCTION_VERSION
	}
	return nil
}

// String for identification of the version of a function with maximum MAX_STRING (at present 255) characters.
type FunctionVersionType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// short identifier for the version
	VersionIdentifier *StringType `protobuf:"bytes,1,opt,name=VersionIdentifier,proto3" json:"VersionIdentifier,omitempty"`
}

func (x *FunctionVersionType) Reset() {
	*x = FunctionVersionType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunctionVersionType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionVersionType) ProtoMessage() {}

func (x *FunctionVersionType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionVersionType.ProtoReflect.Descriptor instead.
func (*FunctionVersionType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{74}
}

func (x *FunctionVersionType) GetVersionIdentifier() *StringType {
	if x != nil {
		return x.VersionIdentifier
	}
	return nil
}

type GroupType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupName           *IdentType             `protobuf:"bytes,1,opt,name=GroupName,proto3" json:"GroupName,omitempty"`
	GroupLongIdentifier *StringType            `protobuf:"bytes,2,opt,name=GroupLongIdentifier,proto3" json:"GroupLongIdentifier,omitempty"`
	ANNOTATION          []*AnnotationType      `protobuf:"bytes,3,rep,name=ANNOTATION,proto3" json:"ANNOTATION,omitempty"`
	ROOT                *RootType              `protobuf:"bytes,4,opt,name=ROOT,proto3,oneof" json:"ROOT,omitempty"`
	REF_CHARACTERISTIC  *RefCharacteristicType `protobuf:"bytes,5,opt,name=REF_CHARACTERISTIC,proto3,oneof" json:"REF_CHARACTERISTIC,omitempty"`
	REF_MEASUREMENT     *RefMeasurementType    `protobuf:"bytes,6,opt,name=REF_MEASUREMENT,proto3,oneof" json:"REF_MEASUREMENT,omitempty"`
	FUNCTION_LIST       *FunctionListType      `protobuf:"bytes,7,opt,name=FUNCTION_LIST,proto3,oneof" json:"FUNCTION_LIST,omitempty"`
	SUB_GROUP           *SubGroupType          `protobuf:"bytes,8,opt,name=SUB_GROUP,proto3,oneof" json:"SUB_GROUP,omitempty"`
}

func (x *GroupType) Reset() {
	*x = GroupType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupType) ProtoMessage() {}

func (x *GroupType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupType.ProtoReflect.Descriptor instead.
func (*GroupType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{75}
}

func (x *GroupType) GetGroupName() *IdentType {
	if x != nil {
		return x.GroupName
	}
	return nil
}

func (x *GroupType) GetGroupLongIdentifier() *StringType {
	if x != nil {
		return x.GroupLongIdentifier
	}
	return nil
}

func (x *GroupType) GetANNOTATION() []*AnnotationType {
	if x != nil {
		return x.ANNOTATION
	}
	return nil
}

func (x *GroupType) GetROOT() *RootType {
	if x != nil {
		return x.ROOT
	}
	return nil
}

func (x *GroupType) GetREF_CHARACTERISTIC() *RefCharacteristicType {
	if x != nil {
		return x.REF_CHARACTERISTIC
	}
	return nil
}

func (x *GroupType) GetREF_MEASUREMENT() *RefMeasurementType {
	if x != nil {
		return x.REF_MEASUREMENT
	}
	return nil
}

func (x *GroupType) GetFUNCTION_LIST() *FunctionListType {
	if x != nil {
		return x.FUNCTION_LIST
	}
	return nil
}

func (x *GroupType) GetSUB_GROUP() *SubGroupType {
	if x != nil {
		return x.SUB_GROUP
	}
	return nil
}

type GuardRailsType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GuardRailsType) Reset() {
	*x = GuardRailsType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuardRailsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuardRailsType) ProtoMessage() {}

func (x *GuardRailsType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuardRailsType.ProtoReflect.Descriptor instead.
func (*GuardRailsType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{76}
}

// Header information on a project. A project can comprise several ASAP devices.
type HeaderType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Comment: comment, description
	Comment *StringType `protobuf:"bytes,1,opt,name=Comment,proto3" json:"Comment,omitempty"`
	// Version: version number
	VERSION *VersionType `protobuf:"bytes,2,opt,name=VERSION,proto3,oneof" json:"VERSION,omitempty"`
	// ProjectNo: project number
	PROJECT_NO *ProjectNoType `protobuf:"bytes,3,opt,name=PROJECT_NO,proto3,oneof" json:"PROJECT_NO,omitempty"`
}

func (x *HeaderType) Reset() {
	*x = HeaderType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeaderType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeaderType) ProtoMessage() {}

func (x *HeaderType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeaderType.ProtoReflect.Descriptor instead.
func (*HeaderType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{77}
}

func (x *HeaderType) GetComment() *StringType {
	if x != nil {
		return x.Comment
	}
	return nil
}

func (x *HeaderType) GetVERSION() *VersionType {
	if x != nil {
		return x.VERSION
	}
	return nil
}

func (x *HeaderType) GetPROJECT_NO() *ProjectNoType {
	if x != nil {
		return x.PROJECT_NO
	}
	return nil
}

// Description of an 'identifier' in an adjustable object (see BOSCH: C-DAMOS deposit).
type IdentificationType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// position of the 'identifier' in the deposit structure.
	Position *IntType `protobuf:"bytes,1,opt,name=Position,proto3" json:"Position,omitempty"`
	// word length of the 'identifier"
	DataType *DataTypeType `protobuf:"bytes,2,opt,name=DataType,proto3" json:"DataType,omitempty"`
}

func (x *IdentificationType) Reset() {
	*x = IdentificationType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentificationType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentificationType) ProtoMessage() {}

func (x *IdentificationType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentificationType.ProtoReflect.Descriptor instead.
func (*IdentificationType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{78}
}

func (x *IdentificationType) GetPosition() *IntType {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *IdentificationType) GetDataType() *DataTypeType {
	if x != nil {
		return x.DataType
	}
	return nil
}

// This keyword can be used to define input quantities of respective function.
//
// Note: IN_MEASUREMENT may only refer to objects of type MEASUREMENT.
type InMeasurementType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of input quantity of respective function (reference to measurement object).
	Identifier []*IdentType `protobuf:"bytes,1,rep,name=Identifier,proto3" json:"Identifier,omitempty"`
}

func (x *InMeasurementType) Reset() {
	*x = InMeasurementType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InMeasurementType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InMeasurementType) ProtoMessage() {}

func (x *InMeasurementType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InMeasurementType.ProtoReflect.Descriptor instead.
func (*InMeasurementType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{79}
}

func (x *InMeasurementType) GetIdentifier() []*IdentType {
	if x != nil {
		return x.Identifier
	}
	return nil
}

type LeftShiftType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BitCount *LongType `protobuf:"bytes,1,opt,name=BitCount,proto3" json:"BitCount,omitempty"`
}

func (x *LeftShiftType) Reset() {
	*x = LeftShiftType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeftShiftType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeftShiftType) ProtoMessage() {}

func (x *LeftShiftType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeftShiftType.ProtoReflect.Descriptor instead.
func (*LeftShiftType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{80}
}

func (x *LeftShiftType) GetBitCount() *LongType {
	if x != nil {
		return x.BitCount
	}
	return nil
}

// This keyword can be used to define local quantities of respective function.
//
// Note: LOC_MEASUREMENT may only refer to objects of type MEASUREMENT.
type LocMeasurementType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of local quantity of respective function (reference to measurement object).
	Identifier []*IdentType `protobuf:"bytes,1,rep,name=Identifier,proto3" json:"Identifier,omitempty"`
}

func (x *LocMeasurementType) Reset() {
	*x = LocMeasurementType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocMeasurementType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocMeasurementType) ProtoMessage() {}

func (x *LocMeasurementType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocMeasurementType.ProtoReflect.Descriptor instead.
func (*LocMeasurementType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{81}
}

func (x *LocMeasurementType) GetIdentifier() []*IdentType {
	if x != nil {
		return x.Identifier
	}
	return nil
}

// This keyword can be used to specify the list of MAPs which comprise a CUBOID. This keyword is required because CUBOID
// data will not be at contiguous memory locations if a CUBOID is composed of several MAPs.
type MapListType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// identifier of a MAP (see CHARACTERISTIC)
	Name []*IdentType `protobuf:"bytes,1,rep,name=Name,proto3" json:"Name,omitempty"`
}

func (x *MapListType) Reset() {
	*x = MapListType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapListType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapListType) ProtoMessage() {}

func (x *MapListType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapListType.ProtoReflect.Descriptor instead.
func (*MapListType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{82}
}

func (x *MapListType) GetName() []*IdentType {
	if x != nil {
		return x.Name
	}
	return nil
}

// This keyword is used to describe the dimensions of a multidimensional array of values (MEASUREMENT or
// CHARACTERISTIC).
//
// xDim * yDim *zDim = number of values.
//
// If NUMBER or ARRAY_SIZE are used in the CHARACTERISTIC or MEASUREMENT record the result must be the same as the value
// given at this option.
type MatrixDimType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// number of values in dimension of x
	XDim *IntType `protobuf:"bytes,1,opt,name=XDim,proto3" json:"XDim,omitempty"`
	// number of values in dimension of y
	YDim *IntType `protobuf:"bytes,2,opt,name=YDim,proto3" json:"YDim,omitempty"`
	// number of values in dimension of z
	ZDim *IntType `protobuf:"bytes,3,opt,name=ZDim,proto3" json:"ZDim,omitempty"`
}

func (x *MatrixDimType) Reset() {
	*x = MatrixDimType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatrixDimType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatrixDimType) ProtoMessage() {}

func (x *MatrixDimType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatrixDimType.ProtoReflect.Descriptor instead.
func (*MatrixDimType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{83}
}

func (x *MatrixDimType) GetXDim() *IntType {
	if x != nil {
		return x.XDim
	}
	return nil
}

func (x *MatrixDimType) GetYDim() *IntType {
	if x != nil {
		return x.YDim
	}
	return nil
}

func (x *MatrixDimType) GetZDim() *IntType {
	if x != nil {
		return x.ZDim
	}
	return nil
}

type MaxGradType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxGradient *FloatType `protobuf:"bytes,1,opt,name=MaxGradient,proto3" json:"MaxGradient,omitempty"`
}

func (x *MaxGradType) Reset() {
	*x = MaxGradType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaxGradType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaxGradType) ProtoMessage() {}

func (x *MaxGradType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaxGradType.ProtoReflect.Descriptor instead.
func (*MaxGradType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{84}
}

func (x *MaxGradType) GetMaxGradient() *FloatType {
	if x != nil {
		return x.MaxGradient
	}
	return nil
}

// This optional keyword can be used to specify the maximum refresh rate in the control unit.
type MaxRefreshType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// this parameter defines the basic scaling unit. The following parameter 'Rate' relates on this scaling unit. The
	// value of ScalingUnit is coded as shown below in ‘Table 4: Codes for scaling units (CSE)’.
	ScalingUnit *IntType `protobuf:"bytes,1,opt,name=ScalingUnit,proto3" json:"ScalingUnit,omitempty"`
	// the maximum refresh rate of the concerning measurement object in the control unit. The unit is defined with
	// parameter 'ScalingUnit'.
	Rate *LongType `protobuf:"bytes,2,opt,name=Rate,proto3" json:"Rate,omitempty"`
}

func (x *MaxRefreshType) Reset() {
	*x = MaxRefreshType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaxRefreshType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaxRefreshType) ProtoMessage() {}

func (x *MaxRefreshType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaxRefreshType.ProtoReflect.Descriptor instead.
func (*MaxRefreshType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{85}
}

func (x *MaxRefreshType) GetScalingUnit() *IntType {
	if x != nil {
		return x.ScalingUnit
	}
	return nil
}

func (x *MaxRefreshType) GetRate() *LongType {
	if x != nil {
		return x.Rate
	}
	return nil
}

// The MEASUREMENT keyword is used to describe the parameters for the processing of a measurement object.
type MeasurementType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier in the ECU program
	//
	// Note: The name of the measurement object has to be unique within all measurement objects and adjustable objects of
	// the ASAP2 MODULE, i.e. there must not be another AXIS_PTS, CHARACTERISTIC or MEASUREMENT object with the same
	// identifier in the MODULE.
	Name *IdentType `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	// Comment, description
	LongIdentifier *StringType `protobuf:"bytes,2,opt,name=LongIdentifier,proto3" json:"LongIdentifier,omitempty"`
	// Data type of the measurement
	DataType *DataTypeType `protobuf:"bytes,3,opt,name=DataType,proto3" json:"DataType,omitempty"`
	// Reference to the relevant record of the description of the conversion method (see COMPU_METHOD). If there is no
	// conversion method, as in the case of CURVE_AXIS, the parameter ‘Conversion’ should be set to “NO_COMPU_METHOD”
	// (application systems must be able to handle this case).
	Conversion *IdentType `protobuf:"bytes,4,opt,name=Conversion,proto3" json:"Conversion,omitempty"`
	// Smallest possible change in bits
	Resolution *IntType `protobuf:"bytes,5,opt,name=Resolution,proto3" json:"Resolution,omitempty"`
	// Possible variation from exact value in %
	Accuracy *FloatType `protobuf:"bytes,6,opt,name=Accuracy,proto3" json:"Accuracy,omitempty"`
	// The limit values are to be interpreted as physical values and not internal values.
	LowerLimit *FloatType `protobuf:"bytes,7,opt,name=LowerLimit,proto3" json:"LowerLimit,omitempty"`
	// The limit values are to be interpreted as physical values and not internal values.
	UpperLimit         *FloatType             `protobuf:"bytes,8,opt,name=UpperLimit,proto3" json:"UpperLimit,omitempty"`
	DISPLAY_IDENTIFIER *DisplayIdentifierType `protobuf:"bytes,9,opt,name=DISPLAY_IDENTIFIER,proto3,oneof" json:"DISPLAY_IDENTIFIER,omitempty"`
	READ_WRITE         *ReadWriteType         `protobuf:"bytes,10,opt,name=READ_WRITE,proto3,oneof" json:"READ_WRITE,omitempty"`
	// With deviation from the display format specified with keyword COMPU_TAB referenced by parameter <Conversion> a
	// special display format can be specified to be used to display the measurement values.
	FORMAT *FormatType `protobuf:"bytes,11,opt,name=FORMAT,proto3,oneof" json:"FORMAT,omitempty"`
	// This keyword marks a measurement object as an array of measurement values.
	ARRAY_SIZE *ArraySizeType `protobuf:"bytes,12,opt,name=ARRAY_SIZE,proto3,oneof" json:"ARRAY_SIZE,omitempty"`
	// With deviation from the standard value 0xFFFFFFFF this parameter can be used to mask out bits.
	BIT_MASK      *BitMaskType      `protobuf:"bytes,13,opt,name=BIT_MASK,proto3,oneof" json:"BIT_MASK,omitempty"`
	BIT_OPERATION *BitOperationType `protobuf:"bytes,14,opt,name=BIT_OPERATION,proto3,oneof" json:"BIT_OPERATION,omitempty"`
	// With deviation from the standard value this parameter can be used to specify the byte order (Intel format, Motorola
	// format)
	BYTE_ORDER    *ByteOrderType    `protobuf:"bytes,15,opt,name=BYTE_ORDER,proto3,oneof" json:"BYTE_ORDER,omitempty"`
	MAX_REFRESH   *MaxRefreshType   `protobuf:"bytes,16,opt,name=MAX_REFRESH,proto3,oneof" json:"MAX_REFRESH,omitempty"`
	VIRTUAL       *VirtualType      `protobuf:"bytes,17,opt,name=VIRTUAL,proto3,oneof" json:"VIRTUAL,omitempty"`
	FUNCTION_LIST *FunctionListType `protobuf:"bytes,18,opt,name=FUNCTION_LIST,proto3,oneof" json:"FUNCTION_LIST,omitempty"`
	// Address of the measurement in the memory of the control unit.
	ECU_ADDRESS        *EcuAddressType       `protobuf:"bytes,19,opt,name=ECU_ADDRESS,proto3,oneof" json:"ECU_ADDRESS,omitempty"`
	ERROR_MASK         *ErrorMaskType        `protobuf:"bytes,20,opt,name=ERROR_MASK,proto3,oneof" json:"ERROR_MASK,omitempty"`
	REF_MEMORY_SEGMENT *RefMemorySegmentType `protobuf:"bytes,21,opt,name=REF_MEMORY_SEGMENT,proto3,oneof" json:"REF_MEMORY_SEGMENT,omitempty"`
	ANNOTATION         []*AnnotationType     `protobuf:"bytes,22,rep,name=ANNOTATION,proto3" json:"ANNOTATION,omitempty"`
	// Date record to describe the interface specific description data. The parameters associated with this keyword are
	// described in A2ML by the control unit supplier or the interface module supplier.
	IF_DATA []*IfDataType `protobuf:"bytes,23,rep,name=IF_DATA,proto3" json:"IF_DATA,omitempty"`
	// Shows the size and dimension of a multidimensional measurement. If the MATRIX_DIM keyword is used, then the option
	// ARRAY_SIZE is not needed. However, if the keywords ARRAY_SIZE and MATRIX_DIM are both used, the resulting value in
	// ARRAY_SIZE must be the same as xDim * yDim *zDim for MATRIX_DIM. If the keyword is missing the array has only one
	// dimension with the size given at ARRAY_SIZE.
	MATRIX_DIM *MatrixDimType `protobuf:"bytes,24,opt,name=MATRIX_DIM,proto3,oneof" json:"MATRIX_DIM,omitempty"`
	// This keyword is an additional address information. For instance, it can be used, to distinguish different address
	// spaces of an ECU (multi-microcontroller devices).
	ECU_ADDRESS_EXTENSION *EcuAddressExtensionType `protobuf:"bytes,25,opt,name=ECU_ADDRESS_EXTENSION,proto3,oneof" json:"ECU_ADDRESS_EXTENSION,omitempty"`
}

func (x *MeasurementType) Reset() {
	*x = MeasurementType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeasurementType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeasurementType) ProtoMessage() {}

func (x *MeasurementType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeasurementType.ProtoReflect.Descriptor instead.
func (*MeasurementType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{86}
}

func (x *MeasurementType) GetName() *IdentType {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *MeasurementType) GetLongIdentifier() *StringType {
	if x != nil {
		return x.LongIdentifier
	}
	return nil
}

func (x *MeasurementType) GetDataType() *DataTypeType {
	if x != nil {
		return x.DataType
	}
	return nil
}

func (x *MeasurementType) GetConversion() *IdentType {
	if x != nil {
		return x.Conversion
	}
	return nil
}

func (x *MeasurementType) GetResolution() *IntType {
	if x != nil {
		return x.Resolution
	}
	return nil
}

func (x *MeasurementType) GetAccuracy() *FloatType {
	if x != nil {
		return x.Accuracy
	}
	return nil
}

func (x *MeasurementType) GetLowerLimit() *FloatType {
	if x != nil {
		return x.LowerLimit
	}
	return nil
}

func (x *MeasurementType) GetUpperLimit() *FloatType {
	if x != nil {
		return x.UpperLimit
	}
	return nil
}

func (x *MeasurementType) GetDISPLAY_IDENTIFIER() *DisplayIdentifierType {
	if x != nil {
		return x.DISPLAY_IDENTIFIER
	}
	return nil
}

func (x *MeasurementType) GetREAD_WRITE() *ReadWriteType {
	if x != nil {
		return x.READ_WRITE
	}
	return nil
}

func (x *MeasurementType) GetFORMAT() *FormatType {
	if x != nil {
		return x.FORMAT
	}
	return nil
}

func (x *MeasurementType) GetARRAY_SIZE() *ArraySizeType {
	if x != nil {
		return x.ARRAY_SIZE
	}
	return nil
}

func (x *MeasurementType) GetBIT_MASK() *BitMaskType {
	if x != nil {
		return x.BIT_MASK
	}
	return nil
}

func (x *MeasurementType) GetBIT_OPERATION() *BitOperationType {
	if x != nil {
		return x.BIT_OPERATION
	}
	return nil
}

func (x *MeasurementType) GetBYTE_ORDER() *ByteOrderType {
	if x != nil {
		return x.BYTE_ORDER
	}
	return nil
}

func (x *MeasurementType) GetMAX_REFRESH() *MaxRefreshType {
	if x != nil {
		return x.MAX_REFRESH
	}
	return nil
}

func (x *MeasurementType) GetVIRTUAL() *VirtualType {
	if x != nil {
		return x.VIRTUAL
	}
	return nil
}

func (x *MeasurementType) GetFUNCTION_LIST() *FunctionListType {
	if x != nil {
		return x.FUNCTION_LIST
	}
	return nil
}

func (x *MeasurementType) GetECU_ADDRESS() *EcuAddressType {
	if x != nil {
		return x.ECU_ADDRESS
	}
	return nil
}

func (x *MeasurementType) GetERROR_MASK() *ErrorMaskType {
	if x != nil {
		return x.ERROR_MASK
	}
	return nil
}

func (x *MeasurementType) GetREF_MEMORY_SEGMENT() *RefMemorySegmentType {
	if x != nil {
		return x.REF_MEMORY_SEGMENT
	}
	return nil
}

func (x *MeasurementType) GetANNOTATION() []*AnnotationType {
	if x != nil {
		return x.ANNOTATION
	}
	return nil
}

func (x *MeasurementType) GetIF_DATA() []*IfDataType {
	if x != nil {
		return x.IF_DATA
	}
	return nil
}

func (x *MeasurementType) GetMATRIX_DIM() *MatrixDimType {
	if x != nil {
		return x.MATRIX_DIM
	}
	return nil
}

func (x *MeasurementType) GetECU_ADDRESS_EXTENSION() *EcuAddressExtensionType {
	if x != nil {
		return x.ECU_ADDRESS_EXTENSION
	}
	return nil
}

// This data record is used to describe an ECU program. The description indicates how the emulation memory is divided
// into the individual segments.
type MemoryLayoutType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description of the program segments divided into:
	// - PRG_CODE = program code
	// - PRG_DATA = program data
	// - PRG_RESERVED = other
	PrgType string `protobuf:"bytes,1,opt,name=PrgType,proto3" json:"PrgType,omitempty"`
	// Initial address of the program segment to be described.
	Address *LongType `protobuf:"bytes,2,opt,name=Address,proto3" json:"Address,omitempty"`
	// Length of the program segment to be described.
	Size *LongType `protobuf:"bytes,3,opt,name=Size,proto3" json:"Size,omitempty"`
	// BOSCH feature: In special ECU programs, so-called 'mirrored segments' may occur (see Figure 8). A mirrored segment
	// is a copy of another program segment. During adjustment the data changes are introduced in the relevant memory
	// segment as well as in all mirrored segments.
	Offset []*LongType `protobuf:"bytes,4,rep,name=Offset,proto3" json:"Offset,omitempty"` // should be array of 5 elements...
	// Date record to describe the interface specific description data used at ASAP1b device. The parameters associated
	// with this keyword are described in the ASAP2 metalanguage (in short A2ML) by the control unit supplier or the
	// interface module supplier.
	IF_DATA []*IfDataType `protobuf:"bytes,5,rep,name=IF_DATA,proto3" json:"IF_DATA,omitempty"`
}

func (x *MemoryLayoutType) Reset() {
	*x = MemoryLayoutType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemoryLayoutType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemoryLayoutType) ProtoMessage() {}

func (x *MemoryLayoutType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemoryLayoutType.ProtoReflect.Descriptor instead.
func (*MemoryLayoutType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{87}
}

func (x *MemoryLayoutType) GetPrgType() string {
	if x != nil {
		return x.PrgType
	}
	return ""
}

func (x *MemoryLayoutType) GetAddress() *LongType {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *MemoryLayoutType) GetSize() *LongType {
	if x != nil {
		return x.Size
	}
	return nil
}

func (x *MemoryLayoutType) GetOffset() []*LongType {
	if x != nil {
		return x.Offset
	}
	return nil
}

func (x *MemoryLayoutType) GetIF_DATA() []*IfDataType {
	if x != nil {
		return x.IF_DATA
	}
	return nil
}

// The new keyword MEMORY_SEGMENT is used to replace the existing keyword MEMORY_LAYOUT. The advantages of
// MEMORY_SEGMENT are that they are given a name which can be used for references from IF_DATA Blobs and the more
// accurate description of the memory by memory types and attributes (INTERN and EXTERN).
//
// Used in MOD_PAR. The keywords MEMORY_SEGMENT and MEMORY_LAYOUT can be used in parallel. The parameter Offset is to be
// used (as within the former MEMORY_LAYOUT) to describe several mirrored segments. MEMORY_SEGMENTS with the same
// MemoryType and the same Attribute may not overlap. Also all MEMORY_SEGMENTS with the PrgType CODE, DATA,
// OFFLINE_DATA, RESERVED may not overlap mutually to get a linear address space for access on calibration data. All
// other MEMORY_SEGMENTS with different MemoryType or different Attribute may however overlap, e.g. internal and
// external memory segments.
type MemorySegmentType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// identifier, reference to IF_DATA Blob is based on this ´name´
	Name *IdentType `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	// comment, description
	LongIdentifier *StringType `protobuf:"bytes,2,opt,name=LongIdentifier,proto3" json:"LongIdentifier,omitempty"`
	// - CODE: program code
	// - DATA: program data allowed for online calibration
	// - OFFLINE_DATA: program data allowed only for offline calibration
	// - VARIABLES: program variables
	// - SERAM: program data for serial emulation
	// - RESERVED: reserved segments
	// - CALIBRATION_VARIABLES: Values which are available in the ECU but do not exist in the Hex-file. There is no upload
	//   required to get access to the ECU data. The ECU will never be touched by the instrumentation tool except by
	//   upload.
	// - EXCLUDE_FROM_FLASH: values existing in the ECU but not dropped down in the binary file. There should no upload be
	//   needed to get access to the ECU data. The ECU will never be touched by the instrumentation tool except by upload.
	PrgType string `protobuf:"bytes,3,opt,name=PrgType,proto3" json:"PrgType,omitempty"`
	// Description of the type of memory used
	// - RAM: segment of RAM
	// - EEPROM: segment of EEPROM
	// - EPROM: segment of EPROM
	// - ROM: segment of ROM
	// - REGISTER: segment of CPU registers
	// - FLASH: segment of FLASH
	MemoryType string `protobuf:"bytes,4,opt,name=MemoryType,proto3" json:"MemoryType,omitempty"`
	// attributes:
	// - INTERN: internal segment
	// - EXTERN: external segment
	Attribute string `protobuf:"bytes,5,opt,name=Attribute,proto3" json:"Attribute,omitempty"`
	// Initial address
	Address *LongType `protobuf:"bytes,6,opt,name=Address,proto3" json:"Address,omitempty"`
	// Length of the segment
	Size *LongType `protobuf:"bytes,7,opt,name=Size,proto3" json:"Size,omitempty"`
	// Offset address of mirrored segments
	Offset []*LongType `protobuf:"bytes,8,rep,name=Offset,proto3" json:"Offset,omitempty"`
	// Date record to describe the interface specific description data used at ASAP1b device. The parameters associated
	// with this keyword are described in the ASAP2 metalanguage (in short A2ML) by the control unit supplier or the
	// interface module supplier
	IF_DATA []*IfDataType `protobuf:"bytes,9,rep,name=IF_DATA,proto3" json:"IF_DATA,omitempty"`
}

func (x *MemorySegmentType) Reset() {
	*x = MemorySegmentType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemorySegmentType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemorySegmentType) ProtoMessage() {}

func (x *MemorySegmentType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemorySegmentType.ProtoReflect.Descriptor instead.
func (*MemorySegmentType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{88}
}

func (x *MemorySegmentType) GetName() *IdentType {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *MemorySegmentType) GetLongIdentifier() *StringType {
	if x != nil {
		return x.LongIdentifier
	}
	return nil
}

func (x *MemorySegmentType) GetPrgType() string {
	if x != nil {
		return x.PrgType
	}
	return ""
}

func (x *MemorySegmentType) GetMemoryType() string {
	if x != nil {
		return x.MemoryType
	}
	return ""
}

func (x *MemorySegmentType) GetAttribute() string {
	if x != nil {
		return x.Attribute
	}
	return ""
}

func (x *MemorySegmentType) GetAddress() *LongType {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *MemorySegmentType) GetSize() *LongType {
	if x != nil {
		return x.Size
	}
	return nil
}

func (x *MemorySegmentType) GetOffset() []*LongType {
	if x != nil {
		return x.Offset
	}
	return nil
}

func (x *MemorySegmentType) GetIF_DATA() []*IfDataType {
	if x != nil {
		return x.IF_DATA
	}
	return nil
}

type ModCommonType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comment                *StringType               `protobuf:"bytes,1,opt,name=Comment,proto3" json:"Comment,omitempty"`
	S_REC_LAYOUT           *SRecLayoutType           `protobuf:"bytes,2,opt,name=S_REC_LAYOUT,proto3,oneof" json:"S_REC_LAYOUT,omitempty"`
	DEPOSIT                *DepositType              `protobuf:"bytes,3,opt,name=DEPOSIT,proto3,oneof" json:"DEPOSIT,omitempty"`
	BYTE_ORDER             *ByteOrderType            `protobuf:"bytes,4,opt,name=BYTE_ORDER,proto3,oneof" json:"BYTE_ORDER,omitempty"`
	DATA_SIZE              *DataSizeType             `protobuf:"bytes,5,opt,name=DATA_SIZE,proto3,oneof" json:"DATA_SIZE,omitempty"`
	ALIGNMENT_BYTE         *AlignmentByteType        `protobuf:"bytes,6,opt,name=ALIGNMENT_BYTE,proto3,oneof" json:"ALIGNMENT_BYTE,omitempty"`
	ALIGNMENT_WORD         *AlignmentWordType        `protobuf:"bytes,7,opt,name=ALIGNMENT_WORD,proto3,oneof" json:"ALIGNMENT_WORD,omitempty"`
	ALIGNMENT_LONG         *AlignmentLongType        `protobuf:"bytes,8,opt,name=ALIGNMENT_LONG,proto3,oneof" json:"ALIGNMENT_LONG,omitempty"`
	ALIGNMENT_FLOAT32_IEEE *AlignmentFloat32IeeeType `protobuf:"bytes,9,opt,name=ALIGNMENT_FLOAT32_IEEE,proto3,oneof" json:"ALIGNMENT_FLOAT32_IEEE,omitempty"`
	ALIGNMENT_FLOAT64_IEEE *AlignmentFloat64IeeeType `protobuf:"bytes,10,opt,name=ALIGNMENT_FLOAT64_IEEE,proto3,oneof" json:"ALIGNMENT_FLOAT64_IEEE,omitempty"`
}

func (x *ModCommonType) Reset() {
	*x = ModCommonType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModCommonType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModCommonType) ProtoMessage() {}

func (x *ModCommonType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModCommonType.ProtoReflect.Descriptor instead.
func (*ModCommonType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{89}
}

func (x *ModCommonType) GetComment() *StringType {
	if x != nil {
		return x.Comment
	}
	return nil
}

func (x *ModCommonType) GetS_REC_LAYOUT() *SRecLayoutType {
	if x != nil {
		return x.S_REC_LAYOUT
	}
	return nil
}

func (x *ModCommonType) GetDEPOSIT() *DepositType {
	if x != nil {
		return x.DEPOSIT
	}
	return nil
}

func (x *ModCommonType) GetBYTE_ORDER() *ByteOrderType {
	if x != nil {
		return x.BYTE_ORDER
	}
	return nil
}

func (x *ModCommonType) GetDATA_SIZE() *DataSizeType {
	if x != nil {
		return x.DATA_SIZE
	}
	return nil
}

func (x *ModCommonType) GetALIGNMENT_BYTE() *AlignmentByteType {
	if x != nil {
		return x.ALIGNMENT_BYTE
	}
	return nil
}

func (x *ModCommonType) GetALIGNMENT_WORD() *AlignmentWordType {
	if x != nil {
		return x.ALIGNMENT_WORD
	}
	return nil
}

func (x *ModCommonType) GetALIGNMENT_LONG() *AlignmentLongType {
	if x != nil {
		return x.ALIGNMENT_LONG
	}
	return nil
}

func (x *ModCommonType) GetALIGNMENT_FLOAT32_IEEE() *AlignmentFloat32IeeeType {
	if x != nil {
		return x.ALIGNMENT_FLOAT32_IEEE
	}
	return nil
}

func (x *ModCommonType) GetALIGNMENT_FLOAT64_IEEE() *AlignmentFloat64IeeeType {
	if x != nil {
		return x.ALIGNMENT_FLOAT64_IEEE
	}
	return nil
}

type ModParType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comment                *StringType               `protobuf:"bytes,1,opt,name=Comment,proto3" json:"Comment,omitempty"`
	VERSION                *VersionType              `protobuf:"bytes,2,opt,name=VERSION,proto3,oneof" json:"VERSION,omitempty"`
	ADDR_EPK               []*AddrEpkType            `protobuf:"bytes,3,rep,name=ADDR_EPK,proto3" json:"ADDR_EPK,omitempty"`
	EPK                    *EpkType                  `protobuf:"bytes,4,opt,name=EPK,proto3,oneof" json:"EPK,omitempty"`
	SUPPLIER               *SupplierType             `protobuf:"bytes,5,opt,name=SUPPLIER,proto3,oneof" json:"SUPPLIER,omitempty"`
	CUSTOMER               *CustomerType             `protobuf:"bytes,6,opt,name=CUSTOMER,proto3,oneof" json:"CUSTOMER,omitempty"`
	CUSTOMER_NO            *CustomerNoType           `protobuf:"bytes,7,opt,name=CUSTOMER_NO,proto3,oneof" json:"CUSTOMER_NO,omitempty"`
	USER                   *UserType                 `protobuf:"bytes,8,opt,name=USER,proto3,oneof" json:"USER,omitempty"`
	PHONE_NO               *PhoneNoType              `protobuf:"bytes,9,opt,name=PHONE_NO,proto3,oneof" json:"PHONE_NO,omitempty"`
	ECU                    *EcuType                  `protobuf:"bytes,10,opt,name=ECU,proto3,oneof" json:"ECU,omitempty"`
	CPU_TYPE               *CpuTypeType              `protobuf:"bytes,11,opt,name=CPU_TYPE,proto3,oneof" json:"CPU_TYPE,omitempty"`
	NO_OF_INTERFACES       *NoOfInterfacesType       `protobuf:"bytes,12,opt,name=NO_OF_INTERFACES,proto3,oneof" json:"NO_OF_INTERFACES,omitempty"`
	ECU_CALIBRATION_OFFSET *EcuCalibrationOffsetType `protobuf:"bytes,13,opt,name=ECU_CALIBRATION_OFFSET,proto3,oneof" json:"ECU_CALIBRATION_OFFSET,omitempty"`
	CALIBRATION_METHOD     []*CalibrationMethodType  `protobuf:"bytes,14,rep,name=CALIBRATION_METHOD,proto3" json:"CALIBRATION_METHOD,omitempty"`
	MEMORY_LAYOUT          []*MemoryLayoutType       `protobuf:"bytes,15,rep,name=MEMORY_LAYOUT,proto3" json:"MEMORY_LAYOUT,omitempty"`
	MEMORY_SEGMENT         []*MemorySegmentType      `protobuf:"bytes,16,rep,name=MEMORY_SEGMENT,proto3" json:"MEMORY_SEGMENT,omitempty"`
	SYSTEM_CONSTANT        []*SystemConstantType     `protobuf:"bytes,17,rep,name=SYSTEM_CONSTANT,proto3" json:"SYSTEM_CONSTANT,omitempty"`
}

func (x *ModParType) Reset() {
	*x = ModParType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModParType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModParType) ProtoMessage() {}

func (x *ModParType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModParType.ProtoReflect.Descriptor instead.
func (*ModParType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{90}
}

func (x *ModParType) GetComment() *StringType {
	if x != nil {
		return x.Comment
	}
	return nil
}

func (x *ModParType) GetVERSION() *VersionType {
	if x != nil {
		return x.VERSION
	}
	return nil
}

func (x *ModParType) GetADDR_EPK() []*AddrEpkType {
	if x != nil {
		return x.ADDR_EPK
	}
	return nil
}

func (x *ModParType) GetEPK() *EpkType {
	if x != nil {
		return x.EPK
	}
	return nil
}

func (x *ModParType) GetSUPPLIER() *SupplierType {
	if x != nil {
		return x.SUPPLIER
	}
	return nil
}

func (x *ModParType) GetCUSTOMER() *CustomerType {
	if x != nil {
		return x.CUSTOMER
	}
	return nil
}

func (x *ModParType) GetCUSTOMER_NO() *CustomerNoType {
	if x != nil {
		return x.CUSTOMER_NO
	}
	return nil
}

func (x *ModParType) GetUSER() *UserType {
	if x != nil {
		return x.USER
	}
	return nil
}

func (x *ModParType) GetPHONE_NO() *PhoneNoType {
	if x != nil {
		return x.PHONE_NO
	}
	return nil
}

func (x *ModParType) GetECU() *EcuType {
	if x != nil {
		return x.ECU
	}
	return nil
}

func (x *ModParType) GetCPU_TYPE() *CpuTypeType {
	if x != nil {
		return x.CPU_TYPE
	}
	return nil
}

func (x *ModParType) GetNO_OF_INTERFACES() *NoOfInterfacesType {
	if x != nil {
		return x.NO_OF_INTERFACES
	}
	return nil
}

func (x *ModParType) GetECU_CALIBRATION_OFFSET() *EcuCalibrationOffsetType {
	if x != nil {
		return x.ECU_CALIBRATION_OFFSET
	}
	return nil
}

func (x *ModParType) GetCALIBRATION_METHOD() []*CalibrationMethodType {
	if x != nil {
		return x.CALIBRATION_METHOD
	}
	return nil
}

func (x *ModParType) GetMEMORY_LAYOUT() []*MemoryLayoutType {
	if x != nil {
		return x.MEMORY_LAYOUT
	}
	return nil
}

func (x *ModParType) GetMEMORY_SEGMENT() []*MemorySegmentType {
	if x != nil {
		return x.MEMORY_SEGMENT
	}
	return nil
}

func (x *ModParType) GetSYSTEM_CONSTANT() []*SystemConstantType {
	if x != nil {
		return x.SYSTEM_CONSTANT
	}
	return nil
}

// The MODULE keyword describes a complete ASAP device with all adjustable and measurement objects, conversion methods
// and functions. To this, the format description of the interface-specific parameters by the ECU supplier must be
// added.
//
//Note: It is possible to have a measurement object and a computation method with equal names within the same MODULE. It
// is NOT possible to have a measurement object and a calibration object with equal names within the same MODULE.
type ModuleType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ASAP device identifier
	Name *IdentType `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	// comment, description
	LongIdentifier *StringType           `protobuf:"bytes,2,opt,name=LongIdentifier,proto3" json:"LongIdentifier,omitempty"`
	A2ML           *A2MLType             `protobuf:"bytes,3,opt,name=A2ML,proto3,oneof" json:"A2ML,omitempty"`
	MOD_PAR        *ModParType           `protobuf:"bytes,4,opt,name=MOD_PAR,proto3,oneof" json:"MOD_PAR,omitempty"`
	MOD_COMMON     *ModCommonType        `protobuf:"bytes,5,opt,name=MOD_COMMON,proto3,oneof" json:"MOD_COMMON,omitempty"`
	IF_DATA        []*IfDataType         `protobuf:"bytes,6,rep,name=IF_DATA,proto3" json:"IF_DATA,omitempty"`
	CHARACTERISTIC []*CharacteristicType `protobuf:"bytes,7,rep,name=CHARACTERISTIC,proto3" json:"CHARACTERISTIC,omitempty"`
	AXIS_PTS       []*AxisPtsType        `protobuf:"bytes,8,rep,name=AXIS_PTS,proto3" json:"AXIS_PTS,omitempty"`
	// Keyword for the description of the measurement objects
	MEASUREMENT      []*MeasurementType    `protobuf:"bytes,9,rep,name=MEASUREMENT,proto3" json:"MEASUREMENT,omitempty"`
	COMPU_METHOD     []*CompuMethodType    `protobuf:"bytes,10,rep,name=COMPU_METHOD,proto3" json:"COMPU_METHOD,omitempty"`
	COMPU_TAB        []*CompuTabType       `protobuf:"bytes,11,rep,name=COMPU_TAB,proto3" json:"COMPU_TAB,omitempty"`
	COMPU_VTAB       []*CompuVTabType      `protobuf:"bytes,12,rep,name=COMPU_VTAB,proto3" json:"COMPU_VTAB,omitempty"`
	COMPU_VTAB_RANGE []*CompuVTabRangeType `protobuf:"bytes,13,rep,name=COMPU_VTAB_RANGE,proto3" json:"COMPU_VTAB_RANGE,omitempty"`
	FUNCTION         []*FunctionType       `protobuf:"bytes,14,rep,name=FUNCTION,proto3" json:"FUNCTION,omitempty"`
	GROUP            []*GroupType          `protobuf:"bytes,15,rep,name=GROUP,proto3" json:"GROUP,omitempty"`
	RECORD_LAYOUT    []*RecordLayoutType   `protobuf:"bytes,16,rep,name=RECORD_LAYOUT,proto3" json:"RECORD_LAYOUT,omitempty"`
	VARIANT_CODING   *VariantCodingType    `protobuf:"bytes,17,opt,name=VARIANT_CODING,proto3,oneof" json:"VARIANT_CODING,omitempty"`
	FRAME            *FrameType            `protobuf:"bytes,18,opt,name=FRAME,proto3,oneof" json:"FRAME,omitempty"`
	USER_RIGHTS      []*UserRightsType     `protobuf:"bytes,19,rep,name=USER_RIGHTS,proto3" json:"USER_RIGHTS,omitempty"`
	UNIT             []*UnitType           `protobuf:"bytes,20,rep,name=UNIT,proto3" json:"UNIT,omitempty"`
}

func (x *ModuleType) Reset() {
	*x = ModuleType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModuleType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleType) ProtoMessage() {}

func (x *ModuleType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleType.ProtoReflect.Descriptor instead.
func (*ModuleType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{91}
}

func (x *ModuleType) GetName() *IdentType {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ModuleType) GetLongIdentifier() *StringType {
	if x != nil {
		return x.LongIdentifier
	}
	return nil
}

func (x *ModuleType) GetA2ML() *A2MLType {
	if x != nil {
		return x.A2ML
	}
	return nil
}

func (x *ModuleType) GetMOD_PAR() *ModParType {
	if x != nil {
		return x.MOD_PAR
	}
	return nil
}

func (x *ModuleType) GetMOD_COMMON() *ModCommonType {
	if x != nil {
		return x.MOD_COMMON
	}
	return nil
}

func (x *ModuleType) GetIF_DATA() []*IfDataType {
	if x != nil {
		return x.IF_DATA
	}
	return nil
}

func (x *ModuleType) GetCHARACTERISTIC() []*CharacteristicType {
	if x != nil {
		return x.CHARACTERISTIC
	}
	return nil
}

func (x *ModuleType) GetAXIS_PTS() []*AxisPtsType {
	if x != nil {
		return x.AXIS_PTS
	}
	return nil
}

func (x *ModuleType) GetMEASUREMENT() []*MeasurementType {
	if x != nil {
		return x.MEASUREMENT
	}
	return nil
}

func (x *ModuleType) GetCOMPU_METHOD() []*CompuMethodType {
	if x != nil {
		return x.COMPU_METHOD
	}
	return nil
}

func (x *ModuleType) GetCOMPU_TAB() []*CompuTabType {
	if x != nil {
		return x.COMPU_TAB
	}
	return nil
}

func (x *ModuleType) GetCOMPU_VTAB() []*CompuVTabType {
	if x != nil {
		return x.COMPU_VTAB
	}
	return nil
}

func (x *ModuleType) GetCOMPU_VTAB_RANGE() []*CompuVTabRangeType {
	if x != nil {
		return x.COMPU_VTAB_RANGE
	}
	return nil
}

func (x *ModuleType) GetFUNCTION() []*FunctionType {
	if x != nil {
		return x.FUNCTION
	}
	return nil
}

func (x *ModuleType) GetGROUP() []*GroupType {
	if x != nil {
		return x.GROUP
	}
	return nil
}

func (x *ModuleType) GetRECORD_LAYOUT() []*RecordLayoutType {
	if x != nil {
		return x.RECORD_LAYOUT
	}
	return nil
}

func (x *ModuleType) GetVARIANT_CODING() *VariantCodingType {
	if x != nil {
		return x.VARIANT_CODING
	}
	return nil
}

func (x *ModuleType) GetFRAME() *FrameType {
	if x != nil {
		return x.FRAME
	}
	return nil
}

func (x *ModuleType) GetUSER_RIGHTS() []*UserRightsType {
	if x != nil {
		return x.USER_RIGHTS
	}
	return nil
}

func (x *ModuleType) GetUNIT() []*UnitType {
	if x != nil {
		return x.UNIT
	}
	return nil
}

type MonotonyType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Monotony string `protobuf:"bytes,1,opt,name=Monotony,proto3" json:"Monotony,omitempty"`
}

func (x *MonotonyType) Reset() {
	*x = MonotonyType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonotonyType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonotonyType) ProtoMessage() {}

func (x *MonotonyType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonotonyType.ProtoReflect.Descriptor instead.
func (*MonotonyType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{92}
}

func (x *MonotonyType) GetMonotony() string {
	if x != nil {
		return x.Monotony
	}
	return ""
}

// Description of the number of axis points in an adjustable object
type NoAxisPtsXType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Position of the number of axis points in the deposit structure
	Position *IntType `protobuf:"bytes,1,opt,name=Position,proto3" json:"Position,omitempty"`
	// Data type of the number of axis points
	DataType *DataTypeType `protobuf:"bytes,2,opt,name=DataType,proto3" json:"DataType,omitempty"`
}

func (x *NoAxisPtsXType) Reset() {
	*x = NoAxisPtsXType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoAxisPtsXType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoAxisPtsXType) ProtoMessage() {}

func (x *NoAxisPtsXType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoAxisPtsXType.ProtoReflect.Descriptor instead.
func (*NoAxisPtsXType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{93}
}

func (x *NoAxisPtsXType) GetPosition() *IntType {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *NoAxisPtsXType) GetDataType() *DataTypeType {
	if x != nil {
		return x.DataType
	}
	return nil
}

// Description of the number of axis points in an adjustable object
type NoAxisPtsYType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Position of the number of axis points in the deposit structure
	Position *IntType `protobuf:"bytes,1,opt,name=Position,proto3" json:"Position,omitempty"`
	// Data type of the number of axis points
	DataType *DataTypeType `protobuf:"bytes,2,opt,name=DataType,proto3" json:"DataType,omitempty"`
}

func (x *NoAxisPtsYType) Reset() {
	*x = NoAxisPtsYType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoAxisPtsYType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoAxisPtsYType) ProtoMessage() {}

func (x *NoAxisPtsYType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoAxisPtsYType.ProtoReflect.Descriptor instead.
func (*NoAxisPtsYType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{94}
}

func (x *NoAxisPtsYType) GetPosition() *IntType {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *NoAxisPtsYType) GetDataType() *DataTypeType {
	if x != nil {
		return x.DataType
	}
	return nil
}

// Description of the number of axis points in an adjustable object
type NoAxisPtsZType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Position of the number of axis points in the deposit structure
	Position *IntType `protobuf:"bytes,1,opt,name=Position,proto3" json:"Position,omitempty"`
	// Data type of the number of axis points
	DataType *DataTypeType `protobuf:"bytes,2,opt,name=DataType,proto3" json:"DataType,omitempty"`
}

func (x *NoAxisPtsZType) Reset() {
	*x = NoAxisPtsZType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoAxisPtsZType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoAxisPtsZType) ProtoMessage() {}

func (x *NoAxisPtsZType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoAxisPtsZType.ProtoReflect.Descriptor instead.
func (*NoAxisPtsZType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{95}
}

func (x *NoAxisPtsZType) GetPosition() *IntType {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *NoAxisPtsZType) GetDataType() *DataTypeType {
	if x != nil {
		return x.DataType
	}
	return nil
}

// Keyword for the number of interfaces
type NoOfInterfacesType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of interfaces
	Num *IntType `protobuf:"bytes,1,opt,name=Num,proto3" json:"Num,omitempty"`
}

func (x *NoOfInterfacesType) Reset() {
	*x = NoOfInterfacesType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoOfInterfacesType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoOfInterfacesType) ProtoMessage() {}

func (x *NoOfInterfacesType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoOfInterfacesType.ProtoReflect.Descriptor instead.
func (*NoOfInterfacesType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{96}
}

func (x *NoOfInterfacesType) GetNum() *IntType {
	if x != nil {
		return x.Num
	}
	return nil
}

// Actual number of rescaling axis point value pairs. Used in RECORD_LAYOUT.
type NoRescaleXType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// position of the actual number of rescale axis point value pairs in the deposit structure (description of sequence
	// of elements in the data record).
	Position *IntType `protobuf:"bytes,1,opt,name=Position,proto3" json:"Position,omitempty"`
	// Data type of the number of rescale axis point value pairs
	DataType *DataTypeType `protobuf:"bytes,2,opt,name=DataType,proto3" json:"DataType,omitempty"`
}

func (x *NoRescaleXType) Reset() {
	*x = NoRescaleXType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoRescaleXType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoRescaleXType) ProtoMessage() {}

func (x *NoRescaleXType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoRescaleXType.ProtoReflect.Descriptor instead.
func (*NoRescaleXType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{97}
}

func (x *NoRescaleXType) GetPosition() *IntType {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *NoRescaleXType) GetDataType() *DataTypeType {
	if x != nil {
		return x.DataType
	}
	return nil
}

// Actual number of rescaling axis point value pairs. Used in RECORD_LAYOUT.
type NoRescaleYType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// position of the actual number of rescale axis point value pairs in the deposit structure (description of sequence
	// of elements in the data record).
	Position *IntType `protobuf:"bytes,1,opt,name=Position,proto3" json:"Position,omitempty"`
	// Data type of the number of rescale axis point value pairs
	DataType *DataTypeType `protobuf:"bytes,2,opt,name=DataType,proto3" json:"DataType,omitempty"`
}

func (x *NoRescaleYType) Reset() {
	*x = NoRescaleYType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoRescaleYType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoRescaleYType) ProtoMessage() {}

func (x *NoRescaleYType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoRescaleYType.ProtoReflect.Descriptor instead.
func (*NoRescaleYType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{98}
}

func (x *NoRescaleYType) GetPosition() *IntType {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *NoRescaleYType) GetDataType() *DataTypeType {
	if x != nil {
		return x.DataType
	}
	return nil
}

// Actual number of rescaling axis point value pairs. Used in RECORD_LAYOUT.
type NoRescaleZType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// position of the actual number of rescale axis point value pairs in the deposit structure (description of sequence
	// of elements in the data record).
	Position *IntType `protobuf:"bytes,1,opt,name=Position,proto3" json:"Position,omitempty"`
	// Data type of the number of rescale axis point value pairs
	DataType *DataTypeType `protobuf:"bytes,2,opt,name=DataType,proto3" json:"DataType,omitempty"`
}

func (x *NoRescaleZType) Reset() {
	*x = NoRescaleZType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoRescaleZType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoRescaleZType) ProtoMessage() {}

func (x *NoRescaleZType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoRescaleZType.ProtoReflect.Descriptor instead.
func (*NoRescaleZType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{99}
}

func (x *NoRescaleZType) GetPosition() *IntType {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *NoRescaleZType) GetDataType() *DataTypeType {
	if x != nil {
		return x.DataType
	}
	return nil
}

type NumberType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number *IntType `protobuf:"bytes,1,opt,name=Number,proto3" json:"Number,omitempty"`
}

func (x *NumberType) Reset() {
	*x = NumberType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NumberType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NumberType) ProtoMessage() {}

func (x *NumberType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NumberType.ProtoReflect.Descriptor instead.
func (*NumberType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{100}
}

func (x *NumberType) GetNumber() *IntType {
	if x != nil {
		return x.Number
	}
	return nil
}

// Description of the 'offset' parameter in the deposit structure to compute the axis points for fixed characteristic
// curves and fixed characteristic maps (see also keyword FIX_AXIS_PAR).
type OffsetXType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Position of the 'offset' parameter in the deposit structure to compute the X-axis points for fixed characteristic
	// curves and fixed characteristic maps.
	Position *IntType `protobuf:"bytes,1,opt,name=Position,proto3" json:"Position,omitempty"`
	// Data type of the 'offset' parameter.
	DataType *DataTypeType `protobuf:"bytes,2,opt,name=DataType,proto3" json:"DataType,omitempty"`
}

func (x *OffsetXType) Reset() {
	*x = OffsetXType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OffsetXType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OffsetXType) ProtoMessage() {}

func (x *OffsetXType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OffsetXType.ProtoReflect.Descriptor instead.
func (*OffsetXType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{101}
}

func (x *OffsetXType) GetPosition() *IntType {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *OffsetXType) GetDataType() *DataTypeType {
	if x != nil {
		return x.DataType
	}
	return nil
}

// Description of the 'offset' parameter in the deposit structure to compute the axis points for fixed characteristic
// curves and fixed characteristic maps (see also keyword FIX_AXIS_PAR).
type OffsetYType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Position of the 'offset' parameter in the deposit structure to compute the X-axis points for fixed characteristic
	// curves and fixed characteristic maps.
	Position *IntType `protobuf:"bytes,1,opt,name=Position,proto3" json:"Position,omitempty"`
	// Data type of the 'offset' parameter.
	DataType *DataTypeType `protobuf:"bytes,2,opt,name=DataType,proto3" json:"DataType,omitempty"`
}

func (x *OffsetYType) Reset() {
	*x = OffsetYType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OffsetYType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OffsetYType) ProtoMessage() {}

func (x *OffsetYType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OffsetYType.ProtoReflect.Descriptor instead.
func (*OffsetYType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{102}
}

func (x *OffsetYType) GetPosition() *IntType {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *OffsetYType) GetDataType() *DataTypeType {
	if x != nil {
		return x.DataType
	}
	return nil
}

// Description of the 'offset' parameter in the deposit structure to compute the axis points for fixed characteristic
// curves and fixed characteristic maps (see also keyword FIX_AXIS_PAR).
type OffsetZType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Position of the 'offset' parameter in the deposit structure to compute the X-axis points for fixed characteristic
	// curves and fixed characteristic maps.
	Position *IntType `protobuf:"bytes,1,opt,name=Position,proto3" json:"Position,omitempty"`
	// Data type of the 'offset' parameter.
	DataType *DataTypeType `protobuf:"bytes,2,opt,name=DataType,proto3" json:"DataType,omitempty"`
}

func (x *OffsetZType) Reset() {
	*x = OffsetZType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OffsetZType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OffsetZType) ProtoMessage() {}

func (x *OffsetZType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OffsetZType.ProtoReflect.Descriptor instead.
func (*OffsetZType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{103}
}

func (x *OffsetZType) GetPosition() *IntType {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *OffsetZType) GetDataType() *DataTypeType {
	if x != nil {
		return x.DataType
	}
	return nil
}

// This keyword can be used to define output quantities of respective function.
//
// Note: OUT_MEASUREMENT may only refer to objects of type MEASUREMENT.
type OutMeasurementType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of output quantity of respective function (reference to measurement object).
	Identifier []*IdentType `protobuf:"bytes,1,rep,name=Identifier,proto3" json:"Identifier,omitempty"`
}

func (x *OutMeasurementType) Reset() {
	*x = OutMeasurementType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutMeasurementType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutMeasurementType) ProtoMessage() {}

func (x *OutMeasurementType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutMeasurementType.ProtoReflect.Descriptor instead.
func (*OutMeasurementType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{104}
}

func (x *OutMeasurementType) GetIdentifier() []*IdentType {
	if x != nil {
		return x.Identifier
	}
	return nil
}

// This keyword is used to specify a phone number, e.g. of the applications engineer responsible.
type PhoneNoType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// phone number
	TelNum *StringType `protobuf:"bytes,1,opt,name=TelNum,proto3" json:"TelNum,omitempty"`
}

func (x *PhoneNoType) Reset() {
	*x = PhoneNoType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhoneNoType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhoneNoType) ProtoMessage() {}

func (x *PhoneNoType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhoneNoType.ProtoReflect.Descriptor instead.
func (*PhoneNoType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{105}
}

func (x *PhoneNoType) GetTelNum() *StringType {
	if x != nil {
		return x.TelNum
	}
	return nil
}

// String used to identify the project number with maximum MAX_IDENT (at present MAX_IDENT = 10) characters.
type ProjectNoType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Short identifier of the project number
	ProjectNumber *IdentType `protobuf:"bytes,1,opt,name=ProjectNumber,proto3" json:"ProjectNumber,omitempty"`
}

func (x *ProjectNoType) Reset() {
	*x = ProjectNoType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectNoType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectNoType) ProtoMessage() {}

func (x *ProjectNoType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectNoType.ProtoReflect.Descriptor instead.
func (*ProjectNoType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{106}
}

func (x *ProjectNoType) GetProjectNumber() *IdentType {
	if x != nil {
		return x.ProjectNumber
	}
	return nil
}

// Project description with project header and all ASAP devices belonging to the project. The PROJECT keyword covers the
// description of several control units, and possibly also of several suppliers.
type ProjectType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Project identifier in the program
	Name *IdentType `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	// Comment, description
	LongIdentifier *StringType `protobuf:"bytes,2,opt,name=LongIdentifier,proto3" json:"LongIdentifier,omitempty"`
	// Project header
	HEADER *HeaderType `protobuf:"bytes,3,opt,name=HEADER,proto3" json:"HEADER,omitempty"`
	// This keyword is used to describe the module (ASAP device) belonging to the project.
	MODULE []*ModuleType `protobuf:"bytes,4,rep,name=MODULE,proto3" json:"MODULE,omitempty"`
}

func (x *ProjectType) Reset() {
	*x = ProjectType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectType) ProtoMessage() {}

func (x *ProjectType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectType.ProtoReflect.Descriptor instead.
func (*ProjectType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{107}
}

func (x *ProjectType) GetName() *IdentType {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ProjectType) GetLongIdentifier() *StringType {
	if x != nil {
		return x.LongIdentifier
	}
	return nil
}

func (x *ProjectType) GetHEADER() *HeaderType {
	if x != nil {
		return x.HEADER
	}
	return nil
}

func (x *ProjectType) GetMODULE() []*ModuleType {
	if x != nil {
		return x.MODULE
	}
	return nil
}

type ReadOnlyType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReadOnlyType) Reset() {
	*x = ReadOnlyType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadOnlyType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadOnlyType) ProtoMessage() {}

func (x *ReadOnlyType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadOnlyType.ProtoReflect.Descriptor instead.
func (*ReadOnlyType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{108}
}

type ReadWriteType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReadWriteType) Reset() {
	*x = ReadWriteType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadWriteType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadWriteType) ProtoMessage() {}

func (x *ReadWriteType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadWriteType.ProtoReflect.Descriptor instead.
func (*ReadWriteType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{109}
}

type RecordLayoutType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                   *IdentType                `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	FNC_VALUES             *FncValuesType            `protobuf:"bytes,2,opt,name=FNC_VALUES,proto3,oneof" json:"FNC_VALUES,omitempty"`
	IDENTIFICATION         *IdentificationType       `protobuf:"bytes,3,opt,name=IDENTIFICATION,proto3,oneof" json:"IDENTIFICATION,omitempty"`
	AXIS_PTS_X             *AxisPtsXType             `protobuf:"bytes,4,opt,name=AXIS_PTS_X,proto3,oneof" json:"AXIS_PTS_X,omitempty"`
	AXIS_PTS_Y             *AxisPtsYType             `protobuf:"bytes,5,opt,name=AXIS_PTS_Y,proto3,oneof" json:"AXIS_PTS_Y,omitempty"`
	AXIS_PTS_Z             *AxisPtsZType             `protobuf:"bytes,6,opt,name=AXIS_PTS_Z,proto3,oneof" json:"AXIS_PTS_Z,omitempty"`
	AXIS_RESCALE_X         *AxisRescaleXType         `protobuf:"bytes,7,opt,name=AXIS_RESCALE_X,proto3,oneof" json:"AXIS_RESCALE_X,omitempty"`
	AXIS_RESCALE_Y         *AxisRescaleYType         `protobuf:"bytes,8,opt,name=AXIS_RESCALE_Y,proto3,oneof" json:"AXIS_RESCALE_Y,omitempty"`
	AXIS_RESCALE_Z         *AxisRescaleZType         `protobuf:"bytes,9,opt,name=AXIS_RESCALE_Z,proto3,oneof" json:"AXIS_RESCALE_Z,omitempty"`
	NO_AXIS_PTS_X          *NoAxisPtsXType           `protobuf:"bytes,10,opt,name=NO_AXIS_PTS_X,proto3,oneof" json:"NO_AXIS_PTS_X,omitempty"`
	NO_AXIS_PTS_Y          *NoAxisPtsYType           `protobuf:"bytes,11,opt,name=NO_AXIS_PTS_Y,proto3,oneof" json:"NO_AXIS_PTS_Y,omitempty"`
	NO_AXIS_PTS_Z          *NoAxisPtsZType           `protobuf:"bytes,12,opt,name=NO_AXIS_PTS_Z,proto3,oneof" json:"NO_AXIS_PTS_Z,omitempty"`
	NO_RESCALE_X           *NoRescaleXType           `protobuf:"bytes,13,opt,name=NO_RESCALE_X,proto3,oneof" json:"NO_RESCALE_X,omitempty"`
	NO_RESCALE_Y           *NoRescaleYType           `protobuf:"bytes,14,opt,name=NO_RESCALE_Y,proto3,oneof" json:"NO_RESCALE_Y,omitempty"`
	NO_RESCALE_Z           *NoRescaleZType           `protobuf:"bytes,15,opt,name=NO_RESCALE_Z,proto3,oneof" json:"NO_RESCALE_Z,omitempty"`
	FIX_NO_AXIS_PTS_X      *FixNoAxisPtsXType        `protobuf:"bytes,16,opt,name=FIX_NO_AXIS_PTS_X,proto3,oneof" json:"FIX_NO_AXIS_PTS_X,omitempty"`
	FIX_NO_AXIS_PTS_Y      *FixNoAxisPtsYType        `protobuf:"bytes,17,opt,name=FIX_NO_AXIS_PTS_Y,proto3,oneof" json:"FIX_NO_AXIS_PTS_Y,omitempty"`
	FIX_NO_AXIS_PTS_Z      *FixNoAxisPtsZType        `protobuf:"bytes,18,opt,name=FIX_NO_AXIS_PTS_Z,proto3,oneof" json:"FIX_NO_AXIS_PTS_Z,omitempty"`
	SRC_ADDR_X             *SrcAddrXType             `protobuf:"bytes,19,opt,name=SRC_ADDR_X,proto3,oneof" json:"SRC_ADDR_X,omitempty"`
	SRC_ADDR_Y             *SrcAddrYType             `protobuf:"bytes,20,opt,name=SRC_ADDR_Y,proto3,oneof" json:"SRC_ADDR_Y,omitempty"`
	SRC_ADDR_Z             *SrcAddrZType             `protobuf:"bytes,21,opt,name=SRC_ADDR_Z,proto3,oneof" json:"SRC_ADDR_Z,omitempty"`
	RIP_ADDR_X             *RipAddrXType             `protobuf:"bytes,22,opt,name=RIP_ADDR_X,proto3,oneof" json:"RIP_ADDR_X,omitempty"`
	RIP_ADDR_Y             *RipAddrYType             `protobuf:"bytes,23,opt,name=RIP_ADDR_Y,proto3,oneof" json:"RIP_ADDR_Y,omitempty"`
	RIP_ADDR_Z             *RipAddrZType             `protobuf:"bytes,24,opt,name=RIP_ADDR_Z,proto3,oneof" json:"RIP_ADDR_Z,omitempty"`
	RIP_ADDR_W             *RipAddrWType             `protobuf:"bytes,25,opt,name=RIP_ADDR_W,proto3,oneof" json:"RIP_ADDR_W,omitempty"`
	SHIFT_OP_X             *ShiftOpXType             `protobuf:"bytes,26,opt,name=SHIFT_OP_X,proto3,oneof" json:"SHIFT_OP_X,omitempty"`
	SHIFT_OP_Y             *ShiftOpYType             `protobuf:"bytes,27,opt,name=SHIFT_OP_Y,proto3,oneof" json:"SHIFT_OP_Y,omitempty"`
	SHIFT_OP_Z             *ShiftOpZType             `protobuf:"bytes,28,opt,name=SHIFT_OP_Z,proto3,oneof" json:"SHIFT_OP_Z,omitempty"`
	OFFSET_X               *OffsetXType              `protobuf:"bytes,29,opt,name=OFFSET_X,proto3,oneof" json:"OFFSET_X,omitempty"`
	OFFSET_Y               *OffsetYType              `protobuf:"bytes,30,opt,name=OFFSET_Y,proto3,oneof" json:"OFFSET_Y,omitempty"`
	OFFSET_Z               *OffsetZType              `protobuf:"bytes,31,opt,name=OFFSET_Z,proto3,oneof" json:"OFFSET_Z,omitempty"`
	DIST_OP_X              *DistOpXType              `protobuf:"bytes,32,opt,name=DIST_OP_X,proto3,oneof" json:"DIST_OP_X,omitempty"`
	DIST_OP_Y              *DistOpYType              `protobuf:"bytes,33,opt,name=DIST_OP_Y,proto3,oneof" json:"DIST_OP_Y,omitempty"`
	DIST_OP_Z              *DistOpZType              `protobuf:"bytes,34,opt,name=DIST_OP_Z,proto3,oneof" json:"DIST_OP_Z,omitempty"`
	ALIGNMENT_BYTE         *AlignmentByteType        `protobuf:"bytes,35,opt,name=ALIGNMENT_BYTE,proto3,oneof" json:"ALIGNMENT_BYTE,omitempty"`
	ALIGNMENT_WORD         *AlignmentWordType        `protobuf:"bytes,36,opt,name=ALIGNMENT_WORD,proto3,oneof" json:"ALIGNMENT_WORD,omitempty"`
	ALIGNMENT_LONG         *AlignmentLongType        `protobuf:"bytes,37,opt,name=ALIGNMENT_LONG,proto3,oneof" json:"ALIGNMENT_LONG,omitempty"`
	ALIGNMENT_FLOAT32_IEEE *AlignmentFloat32IeeeType `protobuf:"bytes,38,opt,name=ALIGNMENT_FLOAT32_IEEE,proto3,oneof" json:"ALIGNMENT_FLOAT32_IEEE,omitempty"`
	ALIGNMENT_FLOAT64_IEEE *AlignmentFloat64IeeeType `protobuf:"bytes,39,opt,name=ALIGNMENT_FLOAT64_IEEE,proto3,oneof" json:"ALIGNMENT_FLOAT64_IEEE,omitempty"`
	RESERVED               []*ReservedType           `protobuf:"bytes,40,rep,name=RESERVED,proto3" json:"RESERVED,omitempty"`
}

func (x *RecordLayoutType) Reset() {
	*x = RecordLayoutType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordLayoutType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordLayoutType) ProtoMessage() {}

func (x *RecordLayoutType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordLayoutType.ProtoReflect.Descriptor instead.
func (*RecordLayoutType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{110}
}

func (x *RecordLayoutType) GetName() *IdentType {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *RecordLayoutType) GetFNC_VALUES() *FncValuesType {
	if x != nil {
		return x.FNC_VALUES
	}
	return nil
}

func (x *RecordLayoutType) GetIDENTIFICATION() *IdentificationType {
	if x != nil {
		return x.IDENTIFICATION
	}
	return nil
}

func (x *RecordLayoutType) GetAXIS_PTS_X() *AxisPtsXType {
	if x != nil {
		return x.AXIS_PTS_X
	}
	return nil
}

func (x *RecordLayoutType) GetAXIS_PTS_Y() *AxisPtsYType {
	if x != nil {
		return x.AXIS_PTS_Y
	}
	return nil
}

func (x *RecordLayoutType) GetAXIS_PTS_Z() *AxisPtsZType {
	if x != nil {
		return x.AXIS_PTS_Z
	}
	return nil
}

func (x *RecordLayoutType) GetAXIS_RESCALE_X() *AxisRescaleXType {
	if x != nil {
		return x.AXIS_RESCALE_X
	}
	return nil
}

func (x *RecordLayoutType) GetAXIS_RESCALE_Y() *AxisRescaleYType {
	if x != nil {
		return x.AXIS_RESCALE_Y
	}
	return nil
}

func (x *RecordLayoutType) GetAXIS_RESCALE_Z() *AxisRescaleZType {
	if x != nil {
		return x.AXIS_RESCALE_Z
	}
	return nil
}

func (x *RecordLayoutType) GetNO_AXIS_PTS_X() *NoAxisPtsXType {
	if x != nil {
		return x.NO_AXIS_PTS_X
	}
	return nil
}

func (x *RecordLayoutType) GetNO_AXIS_PTS_Y() *NoAxisPtsYType {
	if x != nil {
		return x.NO_AXIS_PTS_Y
	}
	return nil
}

func (x *RecordLayoutType) GetNO_AXIS_PTS_Z() *NoAxisPtsZType {
	if x != nil {
		return x.NO_AXIS_PTS_Z
	}
	return nil
}

func (x *RecordLayoutType) GetNO_RESCALE_X() *NoRescaleXType {
	if x != nil {
		return x.NO_RESCALE_X
	}
	return nil
}

func (x *RecordLayoutType) GetNO_RESCALE_Y() *NoRescaleYType {
	if x != nil {
		return x.NO_RESCALE_Y
	}
	return nil
}

func (x *RecordLayoutType) GetNO_RESCALE_Z() *NoRescaleZType {
	if x != nil {
		return x.NO_RESCALE_Z
	}
	return nil
}

func (x *RecordLayoutType) GetFIX_NO_AXIS_PTS_X() *FixNoAxisPtsXType {
	if x != nil {
		return x.FIX_NO_AXIS_PTS_X
	}
	return nil
}

func (x *RecordLayoutType) GetFIX_NO_AXIS_PTS_Y() *FixNoAxisPtsYType {
	if x != nil {
		return x.FIX_NO_AXIS_PTS_Y
	}
	return nil
}

func (x *RecordLayoutType) GetFIX_NO_AXIS_PTS_Z() *FixNoAxisPtsZType {
	if x != nil {
		return x.FIX_NO_AXIS_PTS_Z
	}
	return nil
}

func (x *RecordLayoutType) GetSRC_ADDR_X() *SrcAddrXType {
	if x != nil {
		return x.SRC_ADDR_X
	}
	return nil
}

func (x *RecordLayoutType) GetSRC_ADDR_Y() *SrcAddrYType {
	if x != nil {
		return x.SRC_ADDR_Y
	}
	return nil
}

func (x *RecordLayoutType) GetSRC_ADDR_Z() *SrcAddrZType {
	if x != nil {
		return x.SRC_ADDR_Z
	}
	return nil
}

func (x *RecordLayoutType) GetRIP_ADDR_X() *RipAddrXType {
	if x != nil {
		return x.RIP_ADDR_X
	}
	return nil
}

func (x *RecordLayoutType) GetRIP_ADDR_Y() *RipAddrYType {
	if x != nil {
		return x.RIP_ADDR_Y
	}
	return nil
}

func (x *RecordLayoutType) GetRIP_ADDR_Z() *RipAddrZType {
	if x != nil {
		return x.RIP_ADDR_Z
	}
	return nil
}

func (x *RecordLayoutType) GetRIP_ADDR_W() *RipAddrWType {
	if x != nil {
		return x.RIP_ADDR_W
	}
	return nil
}

func (x *RecordLayoutType) GetSHIFT_OP_X() *ShiftOpXType {
	if x != nil {
		return x.SHIFT_OP_X
	}
	return nil
}

func (x *RecordLayoutType) GetSHIFT_OP_Y() *ShiftOpYType {
	if x != nil {
		return x.SHIFT_OP_Y
	}
	return nil
}

func (x *RecordLayoutType) GetSHIFT_OP_Z() *ShiftOpZType {
	if x != nil {
		return x.SHIFT_OP_Z
	}
	return nil
}

func (x *RecordLayoutType) GetOFFSET_X() *OffsetXType {
	if x != nil {
		return x.OFFSET_X
	}
	return nil
}

func (x *RecordLayoutType) GetOFFSET_Y() *OffsetYType {
	if x != nil {
		return x.OFFSET_Y
	}
	return nil
}

func (x *RecordLayoutType) GetOFFSET_Z() *OffsetZType {
	if x != nil {
		return x.OFFSET_Z
	}
	return nil
}

func (x *RecordLayoutType) GetDIST_OP_X() *DistOpXType {
	if x != nil {
		return x.DIST_OP_X
	}
	return nil
}

func (x *RecordLayoutType) GetDIST_OP_Y() *DistOpYType {
	if x != nil {
		return x.DIST_OP_Y
	}
	return nil
}

func (x *RecordLayoutType) GetDIST_OP_Z() *DistOpZType {
	if x != nil {
		return x.DIST_OP_Z
	}
	return nil
}

func (x *RecordLayoutType) GetALIGNMENT_BYTE() *AlignmentByteType {
	if x != nil {
		return x.ALIGNMENT_BYTE
	}
	return nil
}

func (x *RecordLayoutType) GetALIGNMENT_WORD() *AlignmentWordType {
	if x != nil {
		return x.ALIGNMENT_WORD
	}
	return nil
}

func (x *RecordLayoutType) GetALIGNMENT_LONG() *AlignmentLongType {
	if x != nil {
		return x.ALIGNMENT_LONG
	}
	return nil
}

func (x *RecordLayoutType) GetALIGNMENT_FLOAT32_IEEE() *AlignmentFloat32IeeeType {
	if x != nil {
		return x.ALIGNMENT_FLOAT32_IEEE
	}
	return nil
}

func (x *RecordLayoutType) GetALIGNMENT_FLOAT64_IEEE() *AlignmentFloat64IeeeType {
	if x != nil {
		return x.ALIGNMENT_FLOAT64_IEEE
	}
	return nil
}

func (x *RecordLayoutType) GetRESERVED() []*ReservedType {
	if x != nil {
		return x.RESERVED
	}
	return nil
}

// This keyword can be used to define some adjustable objects that are referenced in respective function or group.
//
// Note: REF_CHARACTERISTIC may only refer to objects of type CHARACTERISTIC or AXIS_PTS.
type RefCharacteristicType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of those adjustable objects that are referred to respective function or group.
	Identifier []*IdentType `protobuf:"bytes,1,rep,name=Identifier,proto3" json:"Identifier,omitempty"`
}

func (x *RefCharacteristicType) Reset() {
	*x = RefCharacteristicType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefCharacteristicType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefCharacteristicType) ProtoMessage() {}

func (x *RefCharacteristicType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefCharacteristicType.ProtoReflect.Descriptor instead.
func (*RefCharacteristicType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{111}
}

func (x *RefCharacteristicType) GetIdentifier() []*IdentType {
	if x != nil {
		return x.Identifier
	}
	return nil
}

// This keyword can be used to refer groups which control the access rights of users logging into an .MCD system.
type RefGroupType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of those groups which are referred in USER_RIGHTS
	Identifier []*IdentType `protobuf:"bytes,1,rep,name=Identifier,proto3" json:"Identifier,omitempty"`
}

func (x *RefGroupType) Reset() {
	*x = RefGroupType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefGroupType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefGroupType) ProtoMessage() {}

func (x *RefGroupType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefGroupType.ProtoReflect.Descriptor instead.
func (*RefGroupType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{112}
}

func (x *RefGroupType) GetIdentifier() []*IdentType {
	if x != nil {
		return x.Identifier
	}
	return nil
}

// This keyword can be used to define measurement quantities which are member of the respective function.
type RefMeasurementType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of those measurement quantities which are referred to the group.
	Identifier []*IdentType `protobuf:"bytes,1,rep,name=Identifier,proto3" json:"Identifier,omitempty"`
}

func (x *RefMeasurementType) Reset() {
	*x = RefMeasurementType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefMeasurementType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefMeasurementType) ProtoMessage() {}

func (x *RefMeasurementType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefMeasurementType.ProtoReflect.Descriptor instead.
func (*RefMeasurementType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{113}
}

func (x *RefMeasurementType) GetIdentifier() []*IdentType {
	if x != nil {
		return x.Identifier
	}
	return nil
}

// The reference to a memory segment is needed in characteristics and measurements. The memory segment, the
// characteristic belongs to can not be detected by the address itself in the case of overlapping memory segments.
//
// Used in CHARACTERISTIC, AXIS_PTS, MEASUREMENT.
type RefMemorySegmentType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of memory segments
	Name *IdentType `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *RefMemorySegmentType) Reset() {
	*x = RefMemorySegmentType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefMemorySegmentType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefMemorySegmentType) ProtoMessage() {}

func (x *RefMemorySegmentType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefMemorySegmentType.ProtoReflect.Descriptor instead.
func (*RefMemorySegmentType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{114}
}

func (x *RefMemorySegmentType) GetName() *IdentType {
	if x != nil {
		return x.Name
	}
	return nil
}

// This keyword can be used to reference to the data record which describes a measurement unit. It can be used in
// COMPU_METHOD and UNIT.
//
// REF_UNIT may only refer to objects of type UNIT.
//
// Note: The string parameter Unit of a COMPU_METHOD is a redundant information because the record referenced by
// REF_UNIT contain it too. Just for the purpose of compatibility with previous versions of ASAP2 the parameter REF_UNIT
// is optional. Therefore the string parameter Unit is going to be canceled at ASAP2 version 2.00.
type RefUnitType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reference to the data record which describes a measurement unit
	Unit *IdentType `protobuf:"bytes,1,opt,name=Unit,proto3" json:"Unit,omitempty"`
}

func (x *RefUnitType) Reset() {
	*x = RefUnitType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefUnitType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefUnitType) ProtoMessage() {}

func (x *RefUnitType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefUnitType.ProtoReflect.Descriptor instead.
func (*RefUnitType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{115}
}

func (x *RefUnitType) GetUnit() *IdentType {
	if x != nil {
		return x.Unit
	}
	return nil
}

// This keyword can be used to skip specific elements in an adjustable object whose meaning must not be interpreted by
// the application system (e.g. for extensions: new parameters in the adjustable objects).
type ReservedType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Position of the reserved parameter in the deposit structure
	Position *IntType `protobuf:"bytes,1,opt,name=Position,proto3" json:"Position,omitempty"`
	// Word length of the reserved parameter.
	DataSize *DataSizeType `protobuf:"bytes,2,opt,name=DataSize,proto3" json:"DataSize,omitempty"`
}

func (x *ReservedType) Reset() {
	*x = ReservedType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReservedType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReservedType) ProtoMessage() {}

func (x *ReservedType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReservedType.ProtoReflect.Descriptor instead.
func (*ReservedType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{116}
}

func (x *ReservedType) GetPosition() *IntType {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *ReservedType) GetDataSize() *DataSizeType {
	if x != nil {
		return x.DataSize
	}
	return nil
}

type RightShiftType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BitCount *LongType `protobuf:"bytes,1,opt,name=BitCount,proto3" json:"BitCount,omitempty"`
}

func (x *RightShiftType) Reset() {
	*x = RightShiftType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RightShiftType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RightShiftType) ProtoMessage() {}

func (x *RightShiftType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RightShiftType.ProtoReflect.Descriptor instead.
func (*RightShiftType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{117}
}

func (x *RightShiftType) GetBitCount() *LongType {
	if x != nil {
		return x.BitCount
	}
	return nil
}

// The description of this parameter should be based on the example of a characteristic curve (RIP: Result of
// Interpolation).
//
// When the ECU program accesses the characteristic curve it first determines the adjacent axis points of the current
// value of the input quantity (see Figure 9: Xi, Xi+1). The output value is derived from these axis points and the two
// allocated table values by means of interpolation.
type RipAddrWType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Position of the address to the result of the ECU-internal interpolation (see below) in the deposit structure.
	Position *IntType `protobuf:"bytes,1,opt,name=Position,proto3" json:"Position,omitempty"`
	// Data type of the address.
	//
	// Remark: Relating to version 1.0 of ASAP2-Specification this is an additional parameter.
	DataType *DataTypeType `protobuf:"bytes,2,opt,name=DataType,proto3" json:"DataType,omitempty"`
}

func (x *RipAddrWType) Reset() {
	*x = RipAddrWType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RipAddrWType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RipAddrWType) ProtoMessage() {}

func (x *RipAddrWType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RipAddrWType.ProtoReflect.Descriptor instead.
func (*RipAddrWType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{118}
}

func (x *RipAddrWType) GetPosition() *IntType {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *RipAddrWType) GetDataType() *DataTypeType {
	if x != nil {
		return x.DataType
	}
	return nil
}

// The description of this parameter should be based on the example of a characteristic curve (RIP: Result of
// Interpolation).
//
// When the ECU program accesses the characteristic curve it first determines the adjacent axis points of the current
// value of the input quantity (see Figure 9: Xi, Xi+1). The output value is derived from these axis points and the two
// allocated table values by means of interpolation.
type RipAddrXType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Position of the address to the result of the ECU-internal interpolation (see below) in the deposit structure.
	Position *IntType `protobuf:"bytes,1,opt,name=Position,proto3" json:"Position,omitempty"`
	// Data type of the address.
	//
	// Remark: Relating to version 1.0 of ASAP2-Specification this is an additional parameter.
	DataType *DataTypeType `protobuf:"bytes,2,opt,name=DataType,proto3" json:"DataType,omitempty"`
}

func (x *RipAddrXType) Reset() {
	*x = RipAddrXType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RipAddrXType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RipAddrXType) ProtoMessage() {}

func (x *RipAddrXType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RipAddrXType.ProtoReflect.Descriptor instead.
func (*RipAddrXType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{119}
}

func (x *RipAddrXType) GetPosition() *IntType {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *RipAddrXType) GetDataType() *DataTypeType {
	if x != nil {
		return x.DataType
	}
	return nil
}

// The description of this parameter should be based on the example of a characteristic curve (RIP: Result of
// Interpolation).
//
// When the ECU program accesses the characteristic curve it first determines the adjacent axis points of the current
// value of the input quantity (see Figure 9: Xi, Xi+1). The output value is derived from these axis points and the two
// allocated table values by means of interpolation.
type RipAddrYType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Position of the address to the result of the ECU-internal interpolation (see below) in the deposit structure.
	Position *IntType `protobuf:"bytes,1,opt,name=Position,proto3" json:"Position,omitempty"`
	// Data type of the address.
	//
	// Remark: Relating to version 1.0 of ASAP2-Specification this is an additional parameter.
	DataType *DataTypeType `protobuf:"bytes,2,opt,name=DataType,proto3" json:"DataType,omitempty"`
}

func (x *RipAddrYType) Reset() {
	*x = RipAddrYType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RipAddrYType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RipAddrYType) ProtoMessage() {}

func (x *RipAddrYType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RipAddrYType.ProtoReflect.Descriptor instead.
func (*RipAddrYType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{120}
}

func (x *RipAddrYType) GetPosition() *IntType {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *RipAddrYType) GetDataType() *DataTypeType {
	if x != nil {
		return x.DataType
	}
	return nil
}

// The description of this parameter should be based on the example of a characteristic curve (RIP: Result of
// Interpolation).
//
// When the ECU program accesses the characteristic curve it first determines the adjacent axis points of the current
// value of the input quantity (see Figure 9: Xi, Xi+1). The output value is derived from these axis points and the two
// allocated table values by means of interpolation.
type RipAddrZType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Position of the address to the result of the ECU-internal interpolation (see below) in the deposit structure.
	Position *IntType `protobuf:"bytes,1,opt,name=Position,proto3" json:"Position,omitempty"`
	// Data type of the address.
	//
	// Remark: Relating to version 1.0 of ASAP2-Specification this is an additional parameter.
	DataType *DataTypeType `protobuf:"bytes,2,opt,name=DataType,proto3" json:"DataType,omitempty"`
}

func (x *RipAddrZType) Reset() {
	*x = RipAddrZType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RipAddrZType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RipAddrZType) ProtoMessage() {}

func (x *RipAddrZType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RipAddrZType.ProtoReflect.Descriptor instead.
func (*RipAddrZType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{121}
}

func (x *RipAddrZType) GetPosition() *IntType {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *RipAddrZType) GetDataType() *DataTypeType {
	if x != nil {
		return x.DataType
	}
	return nil
}

type RootNodeType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ASAP2_VERSION *ASAP2VersionType `protobuf:"bytes,1,opt,name=ASAP2_VERSION,proto3" json:"ASAP2_VERSION,omitempty"`
	A2ML_VERSION  *A2MLVersionType  `protobuf:"bytes,2,opt,name=A2ML_VERSION,proto3" json:"A2ML_VERSION,omitempty"`
	PROJECT       *ProjectType      `protobuf:"bytes,3,opt,name=PROJECT,proto3" json:"PROJECT,omitempty"`
}

func (x *RootNodeType) Reset() {
	*x = RootNodeType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RootNodeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RootNodeType) ProtoMessage() {}

func (x *RootNodeType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RootNodeType.ProtoReflect.Descriptor instead.
func (*RootNodeType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{122}
}

func (x *RootNodeType) GetASAP2_VERSION() *ASAP2VersionType {
	if x != nil {
		return x.ASAP2_VERSION
	}
	return nil
}

func (x *RootNodeType) GetA2ML_VERSION() *A2MLVersionType {
	if x != nil {
		return x.A2ML_VERSION
	}
	return nil
}

func (x *RootNodeType) GetPROJECT() *ProjectType {
	if x != nil {
		return x.PROJECT
	}
	return nil
}

// This keyword ROOT indicates that the related group is presented as a root of a navigation tree in the group selection
// mechanism of the MCD system. The keyword ROOT can indicate that groups referred to this root group constitute a
// grouping mechanism.
type RootType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RootType) Reset() {
	*x = RootType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RootType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RootType) ProtoMessage() {}

func (x *RootType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RootType.ProtoReflect.Descriptor instead.
func (*RootType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{123}
}

// Description of the shift operand in the deposit structure to compute the axis points for fixed characteristic curves
// and fixed characteristic maps (see also keyword FIX_AXIS_PAR).
type ShiftOpXType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Position of the shift operand in the deposit structure.
	Position *IntType `protobuf:"bytes,1,opt,name=Position,proto3" json:"Position,omitempty"`
	// Data type of the shift operand.
	DataType *DataTypeType `protobuf:"bytes,2,opt,name=DataType,proto3" json:"DataType,omitempty"`
}

func (x *ShiftOpXType) Reset() {
	*x = ShiftOpXType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShiftOpXType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShiftOpXType) ProtoMessage() {}

func (x *ShiftOpXType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShiftOpXType.ProtoReflect.Descriptor instead.
func (*ShiftOpXType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{124}
}

func (x *ShiftOpXType) GetPosition() *IntType {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *ShiftOpXType) GetDataType() *DataTypeType {
	if x != nil {
		return x.DataType
	}
	return nil
}

// Description of the shift operand in the deposit structure to compute the axis points for fixed characteristic curves
// and fixed characteristic maps (see also keyword FIX_AXIS_PAR).
type ShiftOpYType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Position of the shift operand in the deposit structure.
	Position *IntType `protobuf:"bytes,1,opt,name=Position,proto3" json:"Position,omitempty"`
	// Data type of the shift operand.
	DataType *DataTypeType `protobuf:"bytes,2,opt,name=DataType,proto3" json:"DataType,omitempty"`
}

func (x *ShiftOpYType) Reset() {
	*x = ShiftOpYType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShiftOpYType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShiftOpYType) ProtoMessage() {}

func (x *ShiftOpYType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShiftOpYType.ProtoReflect.Descriptor instead.
func (*ShiftOpYType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{125}
}

func (x *ShiftOpYType) GetPosition() *IntType {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *ShiftOpYType) GetDataType() *DataTypeType {
	if x != nil {
		return x.DataType
	}
	return nil
}

// Description of the shift operand in the deposit structure to compute the axis points for fixed characteristic curves
// and fixed characteristic maps (see also keyword FIX_AXIS_PAR).
type ShiftOpZType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Position of the shift operand in the deposit structure.
	Position *IntType `protobuf:"bytes,1,opt,name=Position,proto3" json:"Position,omitempty"`
	// Data type of the shift operand.
	DataType *DataTypeType `protobuf:"bytes,2,opt,name=DataType,proto3" json:"DataType,omitempty"`
}

func (x *ShiftOpZType) Reset() {
	*x = ShiftOpZType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShiftOpZType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShiftOpZType) ProtoMessage() {}

func (x *ShiftOpZType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShiftOpZType.ProtoReflect.Descriptor instead.
func (*ShiftOpZType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{126}
}

func (x *ShiftOpZType) GetPosition() *IntType {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *ShiftOpZType) GetDataType() *DataTypeType {
	if x != nil {
		return x.DataType
	}
	return nil
}

// Specification of the seven base dimensions required to define an extended SI unit.
type SiExponentsType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// exponent of the base dimension length with unit metre
	Length *IntType `protobuf:"bytes,1,opt,name=Length,proto3" json:"Length,omitempty"`
	// exponent of the base dimension mass with unit kilogram
	Mass *IntType `protobuf:"bytes,2,opt,name=Mass,proto3" json:"Mass,omitempty"`
	// exponent of the base dimension time with unit second
	Time *IntType `protobuf:"bytes,3,opt,name=Time,proto3" json:"Time,omitempty"`
	// exponent of the base dimension electric current with unit ampere
	ElectricCurrent *IntType `protobuf:"bytes,4,opt,name=ElectricCurrent,proto3" json:"ElectricCurrent,omitempty"`
	// exponent of the base dimension thermodynamic temperature with unit kelvin
	Temperature *IntType `protobuf:"bytes,5,opt,name=Temperature,proto3" json:"Temperature,omitempty"`
	// exponent of the base dimension amount of substance with unit mole
	AmountOfSubstance *IntType `protobuf:"bytes,6,opt,name=AmountOfSubstance,proto3" json:"AmountOfSubstance,omitempty"`
	// exponent of the base dimension luminous intensity with unit candela
	LuminousIntensity *IntType `protobuf:"bytes,7,opt,name=LuminousIntensity,proto3" json:"LuminousIntensity,omitempty"`
}

func (x *SiExponentsType) Reset() {
	*x = SiExponentsType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SiExponentsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SiExponentsType) ProtoMessage() {}

func (x *SiExponentsType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SiExponentsType.ProtoReflect.Descriptor instead.
func (*SiExponentsType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{127}
}

func (x *SiExponentsType) GetLength() *IntType {
	if x != nil {
		return x.Length
	}
	return nil
}

func (x *SiExponentsType) GetMass() *IntType {
	if x != nil {
		return x.Mass
	}
	return nil
}

func (x *SiExponentsType) GetTime() *IntType {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *SiExponentsType) GetElectricCurrent() *IntType {
	if x != nil {
		return x.ElectricCurrent
	}
	return nil
}

func (x *SiExponentsType) GetTemperature() *IntType {
	if x != nil {
		return x.Temperature
	}
	return nil
}

func (x *SiExponentsType) GetAmountOfSubstance() *IntType {
	if x != nil {
		return x.AmountOfSubstance
	}
	return nil
}

func (x *SiExponentsType) GetLuminousIntensity() *IntType {
	if x != nil {
		return x.LuminousIntensity
	}
	return nil
}

type SignExtendType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SignExtendType) Reset() {
	*x = SignExtendType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignExtendType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignExtendType) ProtoMessage() {}

func (x *SignExtendType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignExtendType.ProtoReflect.Descriptor instead.
func (*SignExtendType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{128}
}

// Description of the address of the input quantity in an adjustable object
type SrcAddrXType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Position of the address of the input quantity in the deposit structure.
	Position *IntType `protobuf:"bytes,1,opt,name=Position,proto3" json:"Position,omitempty"`
	// Data type of the address.
	//
	// Remark: Relating to version 1.0 of ASAP2-Specification this is an additional parameter. The appropriate parameter
	// in the corresponding measuring channel data record is not any longer used.
	DataType *DataTypeType `protobuf:"bytes,2,opt,name=DataType,proto3" json:"DataType,omitempty"`
}

func (x *SrcAddrXType) Reset() {
	*x = SrcAddrXType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SrcAddrXType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SrcAddrXType) ProtoMessage() {}

func (x *SrcAddrXType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SrcAddrXType.ProtoReflect.Descriptor instead.
func (*SrcAddrXType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{129}
}

func (x *SrcAddrXType) GetPosition() *IntType {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *SrcAddrXType) GetDataType() *DataTypeType {
	if x != nil {
		return x.DataType
	}
	return nil
}

// Description of the address of the input quantity in an adjustable object
type SrcAddrYType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Position of the address of the input quantity in the deposit structure.
	Position *IntType `protobuf:"bytes,1,opt,name=Position,proto3" json:"Position,omitempty"`
	// Data type of the address.
	//
	// Remark: Relating to version 1.0 of ASAP2-Specification this is an additional parameter. The appropriate parameter
	// in the corresponding measuring channel data record is not any longer used.
	DataType *DataTypeType `protobuf:"bytes,2,opt,name=DataType,proto3" json:"DataType,omitempty"`
}

func (x *SrcAddrYType) Reset() {
	*x = SrcAddrYType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SrcAddrYType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SrcAddrYType) ProtoMessage() {}

func (x *SrcAddrYType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SrcAddrYType.ProtoReflect.Descriptor instead.
func (*SrcAddrYType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{130}
}

func (x *SrcAddrYType) GetPosition() *IntType {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *SrcAddrYType) GetDataType() *DataTypeType {
	if x != nil {
		return x.DataType
	}
	return nil
}

// Description of the address of the input quantity in an adjustable object
type SrcAddrZType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Position of the address of the input quantity in the deposit structure.
	Position *IntType `protobuf:"bytes,1,opt,name=Position,proto3" json:"Position,omitempty"`
	// Data type of the address.
	//
	// Remark: Relating to version 1.0 of ASAP2-Specification this is an additional parameter. The appropriate parameter
	// in the corresponding measuring channel data record is not any longer used.
	DataType *DataTypeType `protobuf:"bytes,2,opt,name=DataType,proto3" json:"DataType,omitempty"`
}

func (x *SrcAddrZType) Reset() {
	*x = SrcAddrZType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SrcAddrZType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SrcAddrZType) ProtoMessage() {}

func (x *SrcAddrZType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SrcAddrZType.ProtoReflect.Descriptor instead.
func (*SrcAddrZType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{131}
}

func (x *SrcAddrZType) GetPosition() *IntType {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *SrcAddrZType) GetDataType() *DataTypeType {
	if x != nil {
		return x.DataType
	}
	return nil
}

// This keyword can be used to specify the name of a standard record layout which will then apply to all characteristics
// in the entire module. Exceptions can be specified for the relevant characteristics.
//
// Note: S_REC_LAYOUT may only refer to objects of type RECORD_LAYOUT.
type SRecLayoutType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *IdentType `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *SRecLayoutType) Reset() {
	*x = SRecLayoutType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SRecLayoutType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRecLayoutType) ProtoMessage() {}

func (x *SRecLayoutType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRecLayoutType.ProtoReflect.Descriptor instead.
func (*SRecLayoutType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{132}
}

func (x *SRecLayoutType) GetName() *IdentType {
	if x != nil {
		return x.Name
	}
	return nil
}

// This keyword can be used to define the hierarchical structure of functions.
//
// Note: SUB_FUNCTION may only refer to objects of type FUNCTION.
type SubFunctionType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reference to function record. This function record is declared as subfunction of respective function.
	Identifier []*IdentType `protobuf:"bytes,1,rep,name=Identifier,proto3" json:"Identifier,omitempty"`
}

func (x *SubFunctionType) Reset() {
	*x = SubFunctionType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubFunctionType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubFunctionType) ProtoMessage() {}

func (x *SubFunctionType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubFunctionType.ProtoReflect.Descriptor instead.
func (*SubFunctionType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{133}
}

func (x *SubFunctionType) GetIdentifier() []*IdentType {
	if x != nil {
		return x.Identifier
	}
	return nil
}

// This keyword can be used to define the hierarchical structure of groups. In particular, a set of groups referenced
// from a root group (with optional keyword ROOT) constitute a grouping mechanism.
type SubGroupType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reference to a group record. This group record is declared as sub-group of the respective GROUP.
	Identifier []*IdentType `protobuf:"bytes,1,rep,name=Identifier,proto3" json:"Identifier,omitempty"`
}

func (x *SubGroupType) Reset() {
	*x = SubGroupType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubGroupType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubGroupType) ProtoMessage() {}

func (x *SubGroupType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubGroupType.ProtoReflect.Descriptor instead.
func (*SubGroupType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{134}
}

func (x *SubGroupType) GetIdentifier() []*IdentType {
	if x != nil {
		return x.Identifier
	}
	return nil
}

// String used to identify the manufacturer or supplier.
type SupplierType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the ECU manufacturer
	Manufacturer *StringType `protobuf:"bytes,1,opt,name=Manufacturer,proto3" json:"Manufacturer,omitempty"`
}

func (x *SupplierType) Reset() {
	*x = SupplierType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupplierType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupplierType) ProtoMessage() {}

func (x *SupplierType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupplierType.ProtoReflect.Descriptor instead.
func (*SupplierType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{135}
}

func (x *SupplierType) GetManufacturer() *StringType {
	if x != nil {
		return x.Manufacturer
	}
	return nil
}

// System-defined constant.
type SystemConstantType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// system constant identifier
	Name *StringType `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	// value of the system constant as a string
	Value *StringType `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *SystemConstantType) Reset() {
	*x = SystemConstantType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemConstantType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemConstantType) ProtoMessage() {}

func (x *SystemConstantType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemConstantType.ProtoReflect.Descriptor instead.
func (*SystemConstantType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{136}
}

func (x *SystemConstantType) GetName() *StringType {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *SystemConstantType) GetValue() *StringType {
	if x != nil {
		return x.Value
	}
	return nil
}

// Specification of the linear relationship between two measurement units given by describing the conversion from the
// referenced unit to the derived unit:
//
// derived_unit = f(referenced_unit)
//
// The referenced measurement unit had to be specified with parameter REF_UNIT.
type UnitConversionType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// gradient of the linear relationship between two measurement units:
	//
	// f(x) = gradient * x + offset
	Gradient *FloatType `protobuf:"bytes,1,opt,name=Gradient,proto3" json:"Gradient,omitempty"`
	// offset of the linear relationship between two measurement units:
	//
	// f(x) = gradient * x + offset
	Offset *FloatType `protobuf:"bytes,2,opt,name=Offset,proto3" json:"Offset,omitempty"`
}

func (x *UnitConversionType) Reset() {
	*x = UnitConversionType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnitConversionType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnitConversionType) ProtoMessage() {}

func (x *UnitConversionType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnitConversionType.ProtoReflect.Descriptor instead.
func (*UnitConversionType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{137}
}

func (x *UnitConversionType) GetGradient() *FloatType {
	if x != nil {
		return x.Gradient
	}
	return nil
}

func (x *UnitConversionType) GetOffset() *FloatType {
	if x != nil {
		return x.Offset
	}
	return nil
}

type UnitType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            *IdentType          `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	LongIdentifier  *StringType         `protobuf:"bytes,2,opt,name=LongIdentifier,proto3" json:"LongIdentifier,omitempty"`
	Display         *StringType         `protobuf:"bytes,3,opt,name=Display,proto3" json:"Display,omitempty"`
	Type            string              `protobuf:"bytes,4,opt,name=Type,proto3" json:"Type,omitempty"`
	SI_EXPONENTS    *SiExponentsType    `protobuf:"bytes,5,opt,name=SI_EXPONENTS,proto3,oneof" json:"SI_EXPONENTS,omitempty"`
	REF_UNIT        *RefUnitType        `protobuf:"bytes,6,opt,name=REF_UNIT,proto3,oneof" json:"REF_UNIT,omitempty"`
	UNIT_CONVERSION *UnitConversionType `protobuf:"bytes,7,opt,name=UNIT_CONVERSION,proto3,oneof" json:"UNIT_CONVERSION,omitempty"`
}

func (x *UnitType) Reset() {
	*x = UnitType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnitType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnitType) ProtoMessage() {}

func (x *UnitType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnitType.ProtoReflect.Descriptor instead.
func (*UnitType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{138}
}

func (x *UnitType) GetName() *IdentType {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *UnitType) GetLongIdentifier() *StringType {
	if x != nil {
		return x.LongIdentifier
	}
	return nil
}

func (x *UnitType) GetDisplay() *StringType {
	if x != nil {
		return x.Display
	}
	return nil
}

func (x *UnitType) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *UnitType) GetSI_EXPONENTS() *SiExponentsType {
	if x != nil {
		return x.SI_EXPONENTS
	}
	return nil
}

func (x *UnitType) GetREF_UNIT() *RefUnitType {
	if x != nil {
		return x.REF_UNIT
	}
	return nil
}

func (x *UnitType) GetUNIT_CONVERSION() *UnitConversionType {
	if x != nil {
		return x.UNIT_CONVERSION
	}
	return nil
}

type UserRightsType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserLevelId *IdentType      `protobuf:"bytes,1,opt,name=UserLevelId,proto3" json:"UserLevelId,omitempty"`
	REF_GROUP   []*RefGroupType `protobuf:"bytes,2,rep,name=REF_GROUP,proto3" json:"REF_GROUP,omitempty"`
	READ_ONLY   *ReadOnlyType   `protobuf:"bytes,3,opt,name=READ_ONLY,proto3,oneof" json:"READ_ONLY,omitempty"`
}

func (x *UserRightsType) Reset() {
	*x = UserRightsType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRightsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRightsType) ProtoMessage() {}

func (x *UserRightsType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRightsType.ProtoReflect.Descriptor instead.
func (*UserRightsType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{139}
}

func (x *UserRightsType) GetUserLevelId() *IdentType {
	if x != nil {
		return x.UserLevelId
	}
	return nil
}

func (x *UserRightsType) GetREF_GROUP() []*RefGroupType {
	if x != nil {
		return x.REF_GROUP
	}
	return nil
}

func (x *UserRightsType) GetREAD_ONLY() *ReadOnlyType {
	if x != nil {
		return x.READ_ONLY
	}
	return nil
}

// Specification of the user name.
type UserType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the user
	UserName *StringType `protobuf:"bytes,1,opt,name=UserName,proto3" json:"UserName,omitempty"`
}

func (x *UserType) Reset() {
	*x = UserType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserType) ProtoMessage() {}

func (x *UserType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserType.ProtoReflect.Descriptor instead.
func (*UserType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{140}
}

func (x *UserType) GetUserName() *StringType {
	if x != nil {
		return x.UserName
	}
	return nil
}

// This keyword can be used to define a list of start addresses of variant coded adjustable objects (see keyword
// VAR_CHARACTERISTIC). The number of addresses agrees with number of valid combinations of adjustable objects variant
// criteria (forbidden combinations excluded). The order of addresses corresponds to the order of variant criteria
// defined with parameter 'CriterionName' at keyword VAR_CHARACTERISTIC.
type VarAddressType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Start address of one variant of variant coded adjustable object.
	Address []*LongType `protobuf:"bytes,1,rep,name=Address,proto3" json:"Address,omitempty"`
}

func (x *VarAddressType) Reset() {
	*x = VarAddressType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VarAddressType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VarAddressType) ProtoMessage() {}

func (x *VarAddressType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VarAddressType.ProtoReflect.Descriptor instead.
func (*VarAddressType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{141}
}

func (x *VarAddressType) GetAddress() []*LongType {
	if x != nil {
		return x.Address
	}
	return nil
}

// This keyword defines one adjustable object to be variant coded, i.e. this adjustable objects is multiple deposited in
// control unit software corresponding to the assigned variant criteria. The number of variants results on valid
// combinations (forbidden combinations excluded) of variant criteria.
//
// Note: If an AXIS_PTS object is variant coded, the curves and maps using this common axis must be variant coded in the
// same way, i.e. they have to refer the same variant criteria in the same order.
type VarCharacteristicType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of variant coded adjustable object (refers to CHARACTERISTIC or AXIS_PTS record).
	Name *IdentType `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	// Corresponding to each combination of variant criteria defined with this parameter the control unit software
	// contains variants of concerning adjustable object.
	CriterionName []*IdentType `protobuf:"bytes,2,rep,name=CriterionName,proto3" json:"CriterionName,omitempty"`
	// Definition of start address of adjustable objects variants.
	VAR_ADDRESS *VarAddressType `protobuf:"bytes,3,opt,name=VAR_ADDRESS,proto3,oneof" json:"VAR_ADDRESS,omitempty"`
}

func (x *VarCharacteristicType) Reset() {
	*x = VarCharacteristicType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VarCharacteristicType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VarCharacteristicType) ProtoMessage() {}

func (x *VarCharacteristicType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VarCharacteristicType.ProtoReflect.Descriptor instead.
func (*VarCharacteristicType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{142}
}

func (x *VarCharacteristicType) GetName() *IdentType {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *VarCharacteristicType) GetCriterionName() []*IdentType {
	if x != nil {
		return x.CriterionName
	}
	return nil
}

func (x *VarCharacteristicType) GetVAR_ADDRESS() *VarAddressType {
	if x != nil {
		return x.VAR_ADDRESS
	}
	return nil
}

// This keyword describes a variant criterion, i.e. some adjustable objects are multiple deposited in control unit
// software corresponding to the enumeration of variant criterion values.
type VarCriterionType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of variant criterion.
	Name *IdentType `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	// Comment to describe the variant criterion.
	LongIdentifier *StringType `protobuf:"bytes,2,opt,name=LongIdentifier,proto3" json:"LongIdentifier,omitempty"`
	// Enumeration of criterion values.
	Value []*IdentType `protobuf:"bytes,3,rep,name=Value,proto3" json:"Value,omitempty"`
	// This keyword can be used to specify a special measurement object. This measurement object indicates with its
	// current value the variant which has effect on running control unit software.
	VAR_MEASUREMENT *VarMeasurementType `protobuf:"bytes,4,opt,name=VAR_MEASUREMENT,proto3,oneof" json:"VAR_MEASUREMENT,omitempty"`
	// This keyword is used to specify a special characteristic to change the variant of software which is running on
	// control unit.
	VAR_SELECTION_CHARACTERISTIC *VarSelectionCharacteristicType `protobuf:"bytes,5,opt,name=VAR_SELECTION_CHARACTERISTIC,proto3,oneof" json:"VAR_SELECTION_CHARACTERISTIC,omitempty"`
}

func (x *VarCriterionType) Reset() {
	*x = VarCriterionType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VarCriterionType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VarCriterionType) ProtoMessage() {}

func (x *VarCriterionType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VarCriterionType.ProtoReflect.Descriptor instead.
func (*VarCriterionType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{143}
}

func (x *VarCriterionType) GetName() *IdentType {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *VarCriterionType) GetLongIdentifier() *StringType {
	if x != nil {
		return x.LongIdentifier
	}
	return nil
}

func (x *VarCriterionType) GetValue() []*IdentType {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *VarCriterionType) GetVAR_MEASUREMENT() *VarMeasurementType {
	if x != nil {
		return x.VAR_MEASUREMENT
	}
	return nil
}

func (x *VarCriterionType) GetVAR_SELECTION_CHARACTERISTIC() *VarSelectionCharacteristicType {
	if x != nil {
		return x.VAR_SELECTION_CHARACTERISTIC
	}
	return nil
}

// This keyword describes a forbidden combination of values of different variant criteria.
type VarForbiddenCombType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CriterionNameCriterionValue []*VarForbiddenCombType_CriterionType `protobuf:"bytes,1,rep,name=CriterionNameCriterionValue,proto3" json:"CriterionNameCriterionValue,omitempty"`
}

func (x *VarForbiddenCombType) Reset() {
	*x = VarForbiddenCombType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VarForbiddenCombType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VarForbiddenCombType) ProtoMessage() {}

func (x *VarForbiddenCombType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VarForbiddenCombType.ProtoReflect.Descriptor instead.
func (*VarForbiddenCombType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{144}
}

func (x *VarForbiddenCombType) GetCriterionNameCriterionValue() []*VarForbiddenCombType_CriterionType {
	if x != nil {
		return x.CriterionNameCriterionValue
	}
	return nil
}

type VariantCodingType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VAR_SEPARATOR      *VarSeparatorType        `protobuf:"bytes,1,opt,name=VAR_SEPARATOR,proto3,oneof" json:"VAR_SEPARATOR,omitempty"`
	VAR_NAMING         *VarNamingType           `protobuf:"bytes,2,opt,name=VAR_NAMING,proto3,oneof" json:"VAR_NAMING,omitempty"`
	VAR_CRITERION      []*VarCriterionType      `protobuf:"bytes,3,rep,name=VAR_CRITERION,proto3" json:"VAR_CRITERION,omitempty"`
	VAR_FORBIDDEN_COMB []*VarForbiddenCombType  `protobuf:"bytes,4,rep,name=VAR_FORBIDDEN_COMB,proto3" json:"VAR_FORBIDDEN_COMB,omitempty"`
	VAR_CHARACTERISTIC []*VarCharacteristicType `protobuf:"bytes,5,rep,name=VAR_CHARACTERISTIC,proto3" json:"VAR_CHARACTERISTIC,omitempty"`
}

func (x *VariantCodingType) Reset() {
	*x = VariantCodingType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VariantCodingType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VariantCodingType) ProtoMessage() {}

func (x *VariantCodingType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VariantCodingType.ProtoReflect.Descriptor instead.
func (*VariantCodingType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{145}
}

func (x *VariantCodingType) GetVAR_SEPARATOR() *VarSeparatorType {
	if x != nil {
		return x.VAR_SEPARATOR
	}
	return nil
}

func (x *VariantCodingType) GetVAR_NAMING() *VarNamingType {
	if x != nil {
		return x.VAR_NAMING
	}
	return nil
}

func (x *VariantCodingType) GetVAR_CRITERION() []*VarCriterionType {
	if x != nil {
		return x.VAR_CRITERION
	}
	return nil
}

func (x *VariantCodingType) GetVAR_FORBIDDEN_COMB() []*VarForbiddenCombType {
	if x != nil {
		return x.VAR_FORBIDDEN_COMB
	}
	return nil
}

func (x *VariantCodingType) GetVAR_CHARACTERISTIC() []*VarCharacteristicType {
	if x != nil {
		return x.VAR_CHARACTERISTIC
	}
	return nil
}

// This keyword can be used to specify a special measurement object. This measurement object indicates with its current
// value the variant which has effect on running control unit software. The value 0 (zero) of measurement object
// corresponds to the first variant value defined at relative VAR_CRITERION record (see parameter 'Value' at keyword
// VAR_CRITERION), the value 1 to the second and so on.
type VarMeasurementType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of measurement object which indicates the actual criterion value. This parameter refers to a MEASUREMENT
	// record of description file.
	Name *IdentType `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *VarMeasurementType) Reset() {
	*x = VarMeasurementType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VarMeasurementType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VarMeasurementType) ProtoMessage() {}

func (x *VarMeasurementType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VarMeasurementType.ProtoReflect.Descriptor instead.
func (*VarMeasurementType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{146}
}

func (x *VarMeasurementType) GetName() *IdentType {
	if x != nil {
		return x.Name
	}
	return nil
}

// This keyword defines the format of variant extension (index) of adjustable objects name. The extension is used at MCD
// to distinguish the different variants of adjustable objects.
type VarNamingType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Format of variant extension (index). Possible values:
	// - NUMERIC: variant extension is a number (integer: 0,1,2,3...).
	// This parameter is reserved for future extension (e.g. ALPHA = { A, B, C, D....}).
	Tag string `protobuf:"bytes,1,opt,name=Tag,proto3" json:"Tag,omitempty"`
}

func (x *VarNamingType) Reset() {
	*x = VarNamingType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VarNamingType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VarNamingType) ProtoMessage() {}

func (x *VarNamingType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VarNamingType.ProtoReflect.Descriptor instead.
func (*VarNamingType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{147}
}

func (x *VarNamingType) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

// This keyword can be used to specify a special characteristic object. This characteristic object changes with its
// current value the variant which has effect on running control unit software. Referenced VAR_SELECTION_CHARACTERISTIC
// could have a 'verbal conversion table' and the strings defined at COMPU_VTAB could correspond to criterion values at
// VAR_CRITERION record.
type VarSelectionCharacteristicType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of characteristic object which indicates the actual criterion value. This parameter refers to a
	// CHARACTERISTIC record of description file.
	Name *IdentType `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *VarSelectionCharacteristicType) Reset() {
	*x = VarSelectionCharacteristicType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VarSelectionCharacteristicType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VarSelectionCharacteristicType) ProtoMessage() {}

func (x *VarSelectionCharacteristicType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VarSelectionCharacteristicType.ProtoReflect.Descriptor instead.
func (*VarSelectionCharacteristicType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{148}
}

func (x *VarSelectionCharacteristicType) GetName() *IdentType {
	if x != nil {
		return x.Name
	}
	return nil
}

// This keyword can be used to define the separating symbol between the two parts of adjustable objects name: 1.)
// identifier 2.) variant extension.
//
// Remark: The identifier of description record of variant coded adjustable objects contains no variant extension. The
// extension is needed to distinguish the variants at MCD.
type VarSeparatorType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This parameter defines the separating symbol of variant extension.
	Separator *StringType `protobuf:"bytes,1,opt,name=Separator,proto3" json:"Separator,omitempty"`
}

func (x *VarSeparatorType) Reset() {
	*x = VarSeparatorType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VarSeparatorType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VarSeparatorType) ProtoMessage() {}

func (x *VarSeparatorType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VarSeparatorType.ProtoReflect.Descriptor instead.
func (*VarSeparatorType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{149}
}

func (x *VarSeparatorType) GetSeparator() *StringType {
	if x != nil {
		return x.Separator
	}
	return nil
}

// String for identification of the version with maximum MAX_STRING (at present 255) characters.
type VersionType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// short identifier for the version
	VersionIdentifier *StringType `protobuf:"bytes,1,opt,name=VersionIdentifier,proto3" json:"VersionIdentifier,omitempty"`
}

func (x *VersionType) Reset() {
	*x = VersionType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionType) ProtoMessage() {}

func (x *VersionType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionType.ProtoReflect.Descriptor instead.
func (*VersionType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{150}
}

func (x *VersionType) GetVersionIdentifier() *StringType {
	if x != nil {
		return x.VersionIdentifier
	}
	return nil
}

// This keyword allows to define characteristics that are not deposited in the memory of the control unit, but can be
// used to indirectly calibrate other characteristic values in the control unit, if these are declared to be dependent
// on this characteristic. The introduction of virtual characteristic is therefore useful for saving memory in the case
// the calibration with dependent characteristics is used.
type VirtualCharacteristicType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Formula to be used for the calculation of the initial physical value of the characteristic from the physical value
	// of other characteristics.
	Formula *StringType `protobuf:"bytes,1,opt,name=Formula,proto3" json:"Formula,omitempty"`
	// Identifier of those adjustable objects that are used for the calculation of this characteristic.
	Characteristic []*IdentType `protobuf:"bytes,2,rep,name=Characteristic,proto3" json:"Characteristic,omitempty"`
}

func (x *VirtualCharacteristicType) Reset() {
	*x = VirtualCharacteristicType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualCharacteristicType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualCharacteristicType) ProtoMessage() {}

func (x *VirtualCharacteristicType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualCharacteristicType.ProtoReflect.Descriptor instead.
func (*VirtualCharacteristicType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{151}
}

func (x *VirtualCharacteristicType) GetFormula() *StringType {
	if x != nil {
		return x.Formula
	}
	return nil
}

func (x *VirtualCharacteristicType) GetCharacteristic() []*IdentType {
	if x != nil {
		return x.Characteristic
	}
	return nil
}

type VirtualType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MeasuringChannel []*IdentType `protobuf:"bytes,1,rep,name=MeasuringChannel,proto3" json:"MeasuringChannel,omitempty"`
}

func (x *VirtualType) Reset() {
	*x = VirtualType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualType) ProtoMessage() {}

func (x *VirtualType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualType.ProtoReflect.Descriptor instead.
func (*VirtualType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{152}
}

func (x *VirtualType) GetMeasuringChannel() []*IdentType {
	if x != nil {
		return x.MeasuringChannel
	}
	return nil
}

type CompuTabType_InValOutValType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// axis point
	InVal *FloatType `protobuf:"bytes,1,opt,name=InVal,proto3" json:"InVal,omitempty"`
	// axis value
	OutVal *FloatType `protobuf:"bytes,2,opt,name=OutVal,proto3" json:"OutVal,omitempty"`
}

func (x *CompuTabType_InValOutValType) Reset() {
	*x = CompuTabType_InValOutValType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompuTabType_InValOutValType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompuTabType_InValOutValType) ProtoMessage() {}

func (x *CompuTabType_InValOutValType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompuTabType_InValOutValType.ProtoReflect.Descriptor instead.
func (*CompuTabType_InValOutValType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{37, 0}
}

func (x *CompuTabType_InValOutValType) GetInVal() *FloatType {
	if x != nil {
		return x.InVal
	}
	return nil
}

func (x *CompuTabType_InValOutValType) GetOutVal() *FloatType {
	if x != nil {
		return x.OutVal
	}
	return nil
}

type CompuVTabRangeType_InValMinInValMaxOutValType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// lower limit as float value, needs to be integer ECU value when assigned to “non-float” definitions.
	InValMin *FloatType `protobuf:"bytes,1,opt,name=InValMin,proto3" json:"InValMin,omitempty"`
	// upper limit as float value, needs to be integer ECU value when assigned to “non-float” definitions.
	InValMax *FloatType `protobuf:"bytes,2,opt,name=InValMax,proto3" json:"InValMax,omitempty"`
	// display string for the value range
	OutVal *StringType `protobuf:"bytes,3,opt,name=OutVal,proto3" json:"OutVal,omitempty"`
}

func (x *CompuVTabRangeType_InValMinInValMaxOutValType) Reset() {
	*x = CompuVTabRangeType_InValMinInValMaxOutValType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompuVTabRangeType_InValMinInValMaxOutValType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompuVTabRangeType_InValMinInValMaxOutValType) ProtoMessage() {}

func (x *CompuVTabRangeType_InValMinInValMaxOutValType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompuVTabRangeType_InValMinInValMaxOutValType.ProtoReflect.Descriptor instead.
func (*CompuVTabRangeType_InValMinInValMaxOutValType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{38, 0}
}

func (x *CompuVTabRangeType_InValMinInValMaxOutValType) GetInValMin() *FloatType {
	if x != nil {
		return x.InValMin
	}
	return nil
}

func (x *CompuVTabRangeType_InValMinInValMaxOutValType) GetInValMax() *FloatType {
	if x != nil {
		return x.InValMax
	}
	return nil
}

func (x *CompuVTabRangeType_InValMinInValMaxOutValType) GetOutVal() *StringType {
	if x != nil {
		return x.OutVal
	}
	return nil
}

type CompuVTabType_InValOutValType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// internal value
	//
	// Note: Datatype “float” is used for the input value of COMPU_TAB and COMPU_VTAB. Since the accepted use case of
	// COMPU_VTAB input values are integers, all float values are rounded to the nearest integer by following the
	// formula (0.5 <= x_raw < 1.5 lead to x = 1). Only float input values used with COMPU_VTAB_RANGE remain float
	// values without truncation. If you want to use float as internal values (without truncation), you should use
	// COMPU_VTAB_RANGE.
	InVal *FloatType `protobuf:"bytes,1,opt,name=InVal,proto3" json:"InVal,omitempty"`
	// description (meaning) of the corresponding byte value
	OutVal *StringType `protobuf:"bytes,2,opt,name=OutVal,proto3" json:"OutVal,omitempty"`
}

func (x *CompuVTabType_InValOutValType) Reset() {
	*x = CompuVTabType_InValOutValType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompuVTabType_InValOutValType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompuVTabType_InValOutValType) ProtoMessage() {}

func (x *CompuVTabType_InValOutValType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompuVTabType_InValOutValType.ProtoReflect.Descriptor instead.
func (*CompuVTabType_InValOutValType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{39, 0}
}

func (x *CompuVTabType_InValOutValType) GetInVal() *FloatType {
	if x != nil {
		return x.InVal
	}
	return nil
}

func (x *CompuVTabType_InValOutValType) GetOutVal() *StringType {
	if x != nil {
		return x.OutVal
	}
	return nil
}

type VarForbiddenCombType_CriterionType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of variant criterion.
	CriterionName *IdentType `protobuf:"bytes,1,opt,name=CriterionName,proto3" json:"CriterionName,omitempty"`
	// Value of variant criterion 'CriterionName'.
	CriterionValue *IdentType `protobuf:"bytes,2,opt,name=CriterionValue,proto3" json:"CriterionValue,omitempty"`
}

func (x *VarForbiddenCombType_CriterionType) Reset() {
	*x = VarForbiddenCombType_CriterionType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_A2L_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VarForbiddenCombType_CriterionType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VarForbiddenCombType_CriterionType) ProtoMessage() {}

func (x *VarForbiddenCombType_CriterionType) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_A2L_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VarForbiddenCombType_CriterionType.ProtoReflect.Descriptor instead.
func (*VarForbiddenCombType_CriterionType) Descriptor() ([]byte, []int) {
	return file_protobufs_A2L_proto_rawDescGZIP(), []int{144, 0}
}

func (x *VarForbiddenCombType_CriterionType) GetCriterionName() *IdentType {
	if x != nil {
		return x.CriterionName
	}
	return nil
}

func (x *VarForbiddenCombType_CriterionType) GetCriterionValue() *IdentType {
	if x != nil {
		return x.CriterionValue
	}
	return nil
}

var File_protobufs_A2L_proto protoreflect.FileDescriptor

var file_protobufs_A2L_proto_rawDesc = []byte{
	0x0a, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x73, 0x2f, 0x41, 0x32, 0x4c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x73,
	0x2f, 0x41, 0x32, 0x4d, 0x4c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x73, 0x2f, 0x49, 0x46, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x73, 0x2f,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x24, 0x0a, 0x0c,
	0x41, 0x64, 0x64, 0x72, 0x54, 0x79, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x24, 0x0a, 0x0c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x26, 0x0a, 0x0e, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x3a, 0x0a, 0x08, 0x41, 0x32, 0x4d, 0x4c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x0b,
	0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0b, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x61, 0x0a, 0x0f,
	0x41, 0x32, 0x4d, 0x4c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x26, 0x0a, 0x09, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x08, 0x2e, 0x49, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x12, 0x26, 0x0a, 0x09, 0x55, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x49, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x22,
	0x32, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x72, 0x45, 0x70, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23,
	0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x09, 0x2e, 0x4c, 0x6f, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x22, 0x47, 0x0a, 0x11, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x42, 0x79, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x0f, 0x41, 0x6c, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x08, 0x2e, 0x49, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x41, 0x6c, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x4e, 0x0a, 0x18,
	0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32,
	0x49, 0x65, 0x65, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x0f, 0x41, 0x6c, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x08, 0x2e, 0x49, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x41, 0x6c, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x4e, 0x0a, 0x18,
	0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x36, 0x34,
	0x49, 0x65, 0x65, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x0f, 0x41, 0x6c, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x08, 0x2e, 0x49, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x41, 0x6c, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x47, 0x0a, 0x11,
	0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x32, 0x0a, 0x0f, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x49, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x42,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x47, 0x0a, 0x11, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x57, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x0f, 0x41, 0x6c,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x49, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x41,
	0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x38,
	0x0a, 0x13, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x3b, 0x0a, 0x14, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x23, 0x0a, 0x06, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x4f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x22, 0x49, 0x0a, 0x12, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x0e, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74,
	0x22, 0xa4, 0x02, 0x0a, 0x0e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x10, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x10, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x11, 0x41, 0x4e,
	0x4e, 0x4f, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x48, 0x01, 0x52, 0x11,
	0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49,
	0x4e, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x0f, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x48, 0x02, 0x52, 0x0f, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x45, 0x58, 0x54, 0x88, 0x01, 0x01, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x41, 0x4e, 0x4e,
	0x4f, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x42, 0x14, 0x0a,
	0x12, 0x5f, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x52, 0x49,
	0x47, 0x49, 0x4e, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x22, 0x31, 0x0a, 0x0d, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x53, 0x69, 0x7a, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x06, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x49, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x06, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x62, 0x0a, 0x10, 0x41, 0x53,
	0x41, 0x50, 0x32, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26,
	0x0a, 0x09, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x08, 0x2e, 0x49, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x12, 0x26, 0x0a, 0x09, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x49, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x22, 0xac,
	0x09, 0x0a, 0x0d, 0x41, 0x78, 0x69, 0x73, 0x44, 0x65, 0x73, 0x63, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x30,
	0x0a, 0x0d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x2a, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x0d,
	0x4d, 0x61, 0x78, 0x41, 0x78, 0x69, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x49, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x4d,
	0x61, 0x78, 0x41, 0x78, 0x69, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x0a,
	0x4c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x4c, 0x6f,
	0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2a, 0x0a, 0x0a, 0x55, 0x70, 0x70, 0x65,
	0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x55, 0x70, 0x70, 0x65, 0x72, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x30, 0x0a, 0x09, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x4f, 0x4e, 0x4c,
	0x59, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x6e,
	0x6c, 0x79, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x09, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x4f,
	0x4e, 0x4c, 0x59, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x06, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x48, 0x01, 0x52, 0x06, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x88, 0x01, 0x01,
	0x12, 0x2f, 0x0a, 0x0a, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x12, 0x38, 0x0a, 0x0c, 0x41, 0x58, 0x49, 0x53, 0x5f, 0x50, 0x54, 0x53, 0x5f, 0x52, 0x45,
	0x46, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x41, 0x78, 0x69, 0x73, 0x50, 0x74,
	0x73, 0x52, 0x65, 0x66, 0x54, 0x79, 0x70, 0x65, 0x48, 0x02, 0x52, 0x0c, 0x41, 0x58, 0x49, 0x53,
	0x5f, 0x50, 0x54, 0x53, 0x5f, 0x52, 0x45, 0x46, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x08, 0x4d,
	0x41, 0x58, 0x5f, 0x47, 0x52, 0x41, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x4d, 0x61, 0x78, 0x47, 0x72, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x48, 0x03, 0x52, 0x08, 0x4d,
	0x41, 0x58, 0x5f, 0x47, 0x52, 0x41, 0x44, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x08, 0x4d, 0x4f,
	0x4e, 0x4f, 0x54, 0x4f, 0x4e, 0x59, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4d,
	0x6f, 0x6e, 0x6f, 0x74, 0x6f, 0x6e, 0x79, 0x54, 0x79, 0x70, 0x65, 0x48, 0x04, 0x52, 0x08, 0x4d,
	0x4f, 0x4e, 0x4f, 0x54, 0x4f, 0x4e, 0x59, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x0a, 0x42, 0x59,
	0x54, 0x45, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x42, 0x79, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x48, 0x05,
	0x52, 0x0a, 0x42, 0x59, 0x54, 0x45, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x88, 0x01, 0x01, 0x12,
	0x42, 0x0a, 0x0f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x4c, 0x49, 0x4d, 0x49,
	0x54, 0x53, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x54, 0x79, 0x70, 0x65, 0x48, 0x06, 0x52,
	0x0f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x53,
	0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x0c, 0x46, 0x49, 0x58, 0x5f, 0x41, 0x58, 0x49, 0x53, 0x5f,
	0x50, 0x41, 0x52, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x46, 0x69, 0x78, 0x41,
	0x78, 0x69, 0x73, 0x50, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x48, 0x07, 0x52, 0x0c, 0x46, 0x49,
	0x58, 0x5f, 0x41, 0x58, 0x49, 0x53, 0x5f, 0x50, 0x41, 0x52, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a,
	0x11, 0x46, 0x49, 0x58, 0x5f, 0x41, 0x58, 0x49, 0x53, 0x5f, 0x50, 0x41, 0x52, 0x5f, 0x44, 0x49,
	0x53, 0x54, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x46, 0x69, 0x78, 0x41, 0x78,
	0x69, 0x73, 0x50, 0x61, 0x72, 0x44, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x08, 0x52,
	0x11, 0x46, 0x49, 0x58, 0x5f, 0x41, 0x58, 0x49, 0x53, 0x5f, 0x50, 0x41, 0x52, 0x5f, 0x44, 0x49,
	0x53, 0x54, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x11, 0x46, 0x49, 0x58, 0x5f, 0x41, 0x58, 0x49,
	0x53, 0x5f, 0x50, 0x41, 0x52, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x46, 0x69, 0x78, 0x41, 0x78, 0x69, 0x73, 0x50, 0x61, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x09, 0x52, 0x11, 0x46, 0x49, 0x58, 0x5f, 0x41, 0x58, 0x49,
	0x53, 0x5f, 0x50, 0x41, 0x52, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a,
	0x07, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x0a, 0x52, 0x07,
	0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0e, 0x43, 0x55,
	0x52, 0x56, 0x45, 0x5f, 0x41, 0x58, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x46, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43, 0x75, 0x72, 0x76, 0x65, 0x41, 0x78, 0x69, 0x73, 0x52, 0x65,
	0x66, 0x54, 0x79, 0x70, 0x65, 0x48, 0x0b, 0x52, 0x0e, 0x43, 0x55, 0x52, 0x56, 0x45, 0x5f, 0x41,
	0x58, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x46, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x52,
	0x45, 0x41, 0x44, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x46, 0x4f, 0x52,
	0x4d, 0x41, 0x54, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x41, 0x58, 0x49, 0x53, 0x5f, 0x50, 0x54, 0x53,
	0x5f, 0x52, 0x45, 0x46, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x47, 0x52, 0x41,
	0x44, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x4d, 0x4f, 0x4e, 0x4f, 0x54, 0x4f, 0x4e, 0x59, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54,
	0x53, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x46, 0x49, 0x58, 0x5f, 0x41, 0x58, 0x49, 0x53, 0x5f, 0x50,
	0x41, 0x52, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x46, 0x49, 0x58, 0x5f, 0x41, 0x58, 0x49, 0x53, 0x5f,
	0x50, 0x41, 0x52, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x46, 0x49, 0x58,
	0x5f, 0x41, 0x58, 0x49, 0x53, 0x5f, 0x50, 0x41, 0x52, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x43,
	0x55, 0x52, 0x56, 0x45, 0x5f, 0x41, 0x58, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x46, 0x22, 0x3c, 0x0a,
	0x0e, 0x41, 0x78, 0x69, 0x73, 0x50, 0x74, 0x73, 0x52, 0x65, 0x66, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2a, 0x0a, 0x0a, 0x41, 0x78, 0x69, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0a, 0x41, 0x78, 0x69, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x8f, 0x0b, 0x0a, 0x0b,
	0x41, 0x78, 0x69, 0x73, 0x50, 0x74, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x0e, 0x4c,
	0x6f, 0x6e, 0x67, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0e, 0x4c, 0x6f, 0x6e, 0x67, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x23, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x4c, 0x6f, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x30, 0x0a, 0x0d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x08, 0x44, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x52, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x52, 0x12,
	0x24, 0x0a, 0x07, 0x4d, 0x61, 0x78, 0x44, 0x69, 0x66, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x4d, 0x61,
	0x78, 0x44, 0x69, 0x66, 0x66, 0x12, 0x2a, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x2e, 0x0a, 0x0d, 0x4d, 0x61, 0x78, 0x41, 0x78, 0x69, 0x73, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x49, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0d, 0x4d, 0x61, 0x78, 0x41, 0x78, 0x69, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x12, 0x2a, 0x0a, 0x0a, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0a, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2a, 0x0a,
	0x0a, 0x55, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x55,
	0x70, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x4b, 0x0a, 0x12, 0x44, 0x49, 0x53,
	0x50, 0x4c, 0x41, 0x59, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46, 0x49, 0x45, 0x52, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52,
	0x12, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46,
	0x49, 0x45, 0x52, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x09, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x4f,
	0x4e, 0x4c, 0x59, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x52, 0x65, 0x61, 0x64,
	0x4f, 0x6e, 0x6c, 0x79, 0x54, 0x79, 0x70, 0x65, 0x48, 0x01, 0x52, 0x09, 0x52, 0x45, 0x41, 0x44,
	0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x06, 0x46, 0x4f, 0x52, 0x4d,
	0x41, 0x54, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x02, 0x52, 0x06, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x88,
	0x01, 0x01, 0x12, 0x2b, 0x0a, 0x07, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x48, 0x03, 0x52, 0x07, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x88, 0x01, 0x01, 0x12,
	0x33, 0x0a, 0x0a, 0x42, 0x59, 0x54, 0x45, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x48, 0x04, 0x52, 0x0a, 0x42, 0x59, 0x54, 0x45, 0x5f, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0d, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4c, 0x49, 0x53, 0x54, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x05,
	0x52, 0x0d, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x88,
	0x01, 0x01, 0x12, 0x4a, 0x0a, 0x12, 0x52, 0x45, 0x46, 0x5f, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59,
	0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x52, 0x65, 0x66, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x06, 0x52, 0x12, 0x52, 0x45, 0x46, 0x5f, 0x4d, 0x45, 0x4d,
	0x4f, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x88, 0x01, 0x01, 0x12, 0x36,
	0x0a, 0x0b, 0x47, 0x55, 0x41, 0x52, 0x44, 0x5f, 0x52, 0x41, 0x49, 0x4c, 0x53, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x47, 0x75, 0x61, 0x72, 0x64, 0x52, 0x61, 0x69, 0x6c, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x48, 0x07, 0x52, 0x0b, 0x47, 0x55, 0x41, 0x52, 0x44, 0x5f, 0x52, 0x41,
	0x49, 0x4c, 0x53, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x0f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44,
	0x45, 0x44, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x53, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x48, 0x08, 0x52, 0x0f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44,
	0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x53, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x0a, 0x41, 0x4e,
	0x4e, 0x4f, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0a, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x12, 0x25, 0x0a, 0x07, 0x49,
	0x46, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x49,
	0x66, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x49, 0x46, 0x5f, 0x44, 0x41,
	0x54, 0x41, 0x12, 0x4b, 0x0a, 0x12, 0x43, 0x41, 0x4c, 0x49, 0x42, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x48, 0x09, 0x52, 0x12, 0x43, 0x41, 0x4c, 0x49, 0x42, 0x52,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x88, 0x01, 0x01, 0x12,
	0x53, 0x0a, 0x15, 0x45, 0x43, 0x55, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x45,
	0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x45, 0x63, 0x75, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x48, 0x0a, 0x52, 0x15, 0x45, 0x43, 0x55, 0x5f,
	0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f,
	0x4e, 0x88, 0x01, 0x01, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59,
	0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46, 0x49, 0x45, 0x52, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x52, 0x45, 0x41, 0x44, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x46, 0x4f,
	0x52, 0x4d, 0x41, 0x54, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x53,
	0x54, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x52, 0x45, 0x46, 0x5f, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59,
	0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x47, 0x55, 0x41,
	0x52, 0x44, 0x5f, 0x52, 0x41, 0x49, 0x4c, 0x53, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x45, 0x58, 0x54,
	0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x53, 0x42, 0x15, 0x0a, 0x13,
	0x5f, 0x43, 0x41, 0x4c, 0x49, 0x42, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x45, 0x43, 0x55, 0x5f, 0x41, 0x44, 0x44, 0x52,
	0x45, 0x53, 0x53, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x22, 0x5f, 0x0a,
	0x0c, 0x41, 0x78, 0x69, 0x73, 0x50, 0x74, 0x73, 0x58, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a,
	0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x08, 0x2e, 0x49, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x22, 0x5f,
	0x0a, 0x0c, 0x41, 0x78, 0x69, 0x73, 0x50, 0x74, 0x73, 0x59, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24,
	0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x08, 0x2e, 0x49, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x5f, 0x0a, 0x0c, 0x41, 0x78, 0x69, 0x73, 0x50, 0x74, 0x73, 0x5a, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x24, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x08, 0x2e, 0x49, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x85, 0x02, 0x0a, 0x10, 0x41, 0x78, 0x69, 0x73, 0x52, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x58, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x49, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x08, 0x44,
	0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x44, 0x61,
	0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x17, 0x4d, 0x61, 0x78, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x4f, 0x66, 0x52, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x50, 0x61, 0x69, 0x72,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x49, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x17, 0x4d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x52, 0x65,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x50, 0x61, 0x69, 0x72, 0x73, 0x12, 0x2d, 0x0a, 0x09, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x49, 0x6e, 0x63, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x63, 0x72, 0x12, 0x2d, 0x0a, 0x0a, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x54, 0x79, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x22, 0x85, 0x02, 0x0a, 0x10, 0x41, 0x78, 0x69,
	0x73, 0x52, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x59, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a,
	0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x08, 0x2e, 0x49, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x42,
	0x0a, 0x17, 0x4d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x52, 0x65, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x50, 0x61, 0x69, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x08, 0x2e, 0x49, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x17, 0x4d, 0x61, 0x78, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x52, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x50, 0x61, 0x69,
	0x72, 0x73, 0x12, 0x2d, 0x0a, 0x09, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x63, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x63,
	0x72, 0x12, 0x2d, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x22, 0x85, 0x02, 0x0a, 0x10, 0x41, 0x78, 0x69, 0x73, 0x52, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x5a, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x49, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x08, 0x44,
	0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x44, 0x61,
	0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x17, 0x4d, 0x61, 0x78, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x4f, 0x66, 0x52, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x50, 0x61, 0x69, 0x72,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x49, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x17, 0x4d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x52, 0x65,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x50, 0x61, 0x69, 0x72, 0x73, 0x12, 0x2d, 0x0a, 0x09, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x49, 0x6e, 0x63, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x63, 0x72, 0x12, 0x2d, 0x0a, 0x0a, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x54, 0x79, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x22, 0xe6, 0x01, 0x0a, 0x10, 0x42, 0x69, 0x74,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a,
	0x0a, 0x4c, 0x45, 0x46, 0x54, 0x5f, 0x53, 0x48, 0x49, 0x46, 0x54, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x4c, 0x65, 0x66, 0x74, 0x53, 0x68, 0x69, 0x66, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x48, 0x00, 0x52, 0x0a, 0x4c, 0x45, 0x46, 0x54, 0x5f, 0x53, 0x48, 0x49, 0x46, 0x54, 0x88,
	0x01, 0x01, 0x12, 0x36, 0x0a, 0x0b, 0x52, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x53, 0x48, 0x49, 0x46,
	0x54, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x52, 0x69, 0x67, 0x68, 0x74, 0x53,
	0x68, 0x69, 0x66, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x01, 0x52, 0x0b, 0x52, 0x49, 0x47, 0x48,
	0x54, 0x5f, 0x53, 0x48, 0x49, 0x46, 0x54, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x0b, 0x53, 0x49,
	0x47, 0x4e, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x48, 0x02, 0x52, 0x0b, 0x53, 0x49, 0x47, 0x4e, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x88,
	0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x5f, 0x53, 0x48, 0x49, 0x46,
	0x54, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x53, 0x48, 0x49, 0x46,
	0x54, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e,
	0x44, 0x22, 0x2c, 0x0a, 0x0b, 0x42, 0x69, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1d, 0x0a, 0x04, 0x4d, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x4c, 0x6f, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x4d, 0x61, 0x73, 0x6b, 0x22,
	0x2d, 0x0a, 0x0d, 0x42, 0x79, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x42, 0x79, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x42, 0x79, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x2b,
	0x0a, 0x15, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x0a, 0x15, 0x43,
	0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x06, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4c, 0x6f, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x06, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x22, 0xa9, 0x01, 0x0a, 0x15, 0x43, 0x61, 0x6c, 0x69,
	0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x23, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x23, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4c, 0x6f, 0x6e, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x12, 0x43,
	0x41, 0x4c, 0x49, 0x42, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x4c,
	0x45, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x12, 0x43, 0x41, 0x4c, 0x49, 0x42, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x41, 0x4e,
	0x44, 0x4c, 0x45, 0x22, 0xce, 0x0f, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x0e, 0x4c, 0x6f,
	0x6e, 0x67, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0e, 0x4c, 0x6f, 0x6e, 0x67, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4c, 0x6f, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x07, 0x44, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x24,
	0x0a, 0x07, 0x4d, 0x61, 0x78, 0x44, 0x69, 0x66, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x4d, 0x61, 0x78,
	0x44, 0x69, 0x66, 0x66, 0x12, 0x2a, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x2a, 0x0a, 0x0a, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0a, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2a, 0x0a, 0x0a,
	0x55, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x55, 0x70,
	0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x4b, 0x0a, 0x12, 0x44, 0x49, 0x53, 0x50,
	0x4c, 0x41, 0x59, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46, 0x49, 0x45, 0x52, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x12,
	0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46, 0x49,
	0x45, 0x52, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x06, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x48, 0x01, 0x52, 0x06, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x88, 0x01, 0x01, 0x12,
	0x33, 0x0a, 0x0a, 0x42, 0x59, 0x54, 0x45, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x48, 0x02, 0x52, 0x0a, 0x42, 0x59, 0x54, 0x45, 0x5f, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x08, 0x42, 0x49, 0x54, 0x5f, 0x4d, 0x41, 0x53, 0x4b,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x42, 0x69, 0x74, 0x4d, 0x61, 0x73, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x48, 0x03, 0x52, 0x08, 0x42, 0x49, 0x54, 0x5f, 0x4d, 0x41, 0x53, 0x4b,
	0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0d, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4c, 0x49, 0x53, 0x54, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x04, 0x52,
	0x0d, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x88, 0x01,
	0x01, 0x12, 0x28, 0x0a, 0x06, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x48, 0x05,
	0x52, 0x06, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x0f, 0x45,
	0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x53, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x73, 0x54, 0x79, 0x70, 0x65, 0x48, 0x06, 0x52, 0x0f, 0x45, 0x58, 0x54,
	0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x53, 0x88, 0x01, 0x01, 0x12,
	0x30, 0x0a, 0x09, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x48, 0x07, 0x52, 0x09, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x88, 0x01,
	0x01, 0x12, 0x36, 0x0a, 0x0b, 0x47, 0x55, 0x41, 0x52, 0x44, 0x5f, 0x52, 0x41, 0x49, 0x4c, 0x53,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x47, 0x75, 0x61, 0x72, 0x64, 0x52, 0x61,
	0x69, 0x6c, 0x73, 0x54, 0x79, 0x70, 0x65, 0x48, 0x08, 0x52, 0x0b, 0x47, 0x55, 0x41, 0x52, 0x44,
	0x5f, 0x52, 0x41, 0x49, 0x4c, 0x53, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x08, 0x4d, 0x41, 0x50,
	0x5f, 0x4c, 0x49, 0x53, 0x54, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x4d, 0x61,
	0x70, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x09, 0x52, 0x08, 0x4d, 0x41, 0x50,
	0x5f, 0x4c, 0x49, 0x53, 0x54, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x0b, 0x4d, 0x41, 0x58, 0x5f,
	0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x4d, 0x61, 0x78, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x48, 0x0a,
	0x52, 0x0b, 0x4d, 0x41, 0x58, 0x5f, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x88, 0x01, 0x01,
	0x12, 0x5d, 0x0a, 0x18, 0x44, 0x45, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x48,
	0x41, 0x52, 0x41, 0x43, 0x54, 0x45, 0x52, 0x49, 0x53, 0x54, 0x49, 0x43, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x43, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65,
	0x48, 0x0b, 0x52, 0x18, 0x44, 0x45, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x48,
	0x41, 0x52, 0x41, 0x43, 0x54, 0x45, 0x52, 0x49, 0x53, 0x54, 0x49, 0x43, 0x88, 0x01, 0x01, 0x12,
	0x57, 0x0a, 0x16, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x41,
	0x43, 0x54, 0x45, 0x52, 0x49, 0x53, 0x54, 0x49, 0x43, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x48, 0x0c, 0x52, 0x16, 0x56,
	0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x41, 0x43, 0x54, 0x45, 0x52,
	0x49, 0x53, 0x54, 0x49, 0x43, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x12, 0x52, 0x45, 0x46, 0x5f,
	0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x52, 0x65, 0x66, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x0d, 0x52, 0x12, 0x52,
	0x45, 0x46, 0x5f, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e,
	0x54, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x0a, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x41, 0x4e, 0x4e, 0x4f, 0x54,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x12, 0x4e, 0x0a, 0x13, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x49,
	0x53, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x41, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x48, 0x0e, 0x52, 0x13, 0x43,
	0x4f, 0x4d, 0x50, 0x41, 0x52, 0x49, 0x53, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x41, 0x4e, 0x54, 0x49,
	0x54, 0x59, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x07, 0x49, 0x46, 0x5f, 0x44, 0x41, 0x54, 0x41,
	0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x49, 0x66, 0x44, 0x61, 0x74, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x07, 0x49, 0x46, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x12, 0x2e, 0x0a, 0x0a,
	0x41, 0x58, 0x49, 0x53, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x52, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x41, 0x78, 0x69, 0x73, 0x44, 0x65, 0x73, 0x63, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0a, 0x41, 0x58, 0x49, 0x53, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x52, 0x12, 0x4b, 0x0a, 0x12,
	0x43, 0x41, 0x4c, 0x49, 0x42, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x43, 0x61, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x48, 0x0f, 0x52, 0x12, 0x43, 0x41, 0x4c, 0x49, 0x42, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x0a, 0x4d, 0x41, 0x54,
	0x52, 0x49, 0x58, 0x5f, 0x44, 0x49, 0x4d, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x44, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x48, 0x10, 0x52,
	0x0a, 0x4d, 0x41, 0x54, 0x52, 0x49, 0x58, 0x5f, 0x44, 0x49, 0x4d, 0x88, 0x01, 0x01, 0x12, 0x53,
	0x0a, 0x15, 0x45, 0x43, 0x55, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x45, 0x58,
	0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x45, 0x63, 0x75, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x48, 0x11, 0x52, 0x15, 0x45, 0x43, 0x55, 0x5f, 0x41,
	0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e,
	0x88, 0x01, 0x01, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f,
	0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46, 0x49, 0x45, 0x52, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x46,
	0x4f, 0x52, 0x4d, 0x41, 0x54, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x5f, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x42, 0x49, 0x54, 0x5f, 0x4d, 0x41, 0x53,
	0x4b, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c,
	0x49, 0x53, 0x54, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x4c, 0x49, 0x4d, 0x49,
	0x54, 0x53, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x4f, 0x4e, 0x4c, 0x59,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x47, 0x55, 0x41, 0x52, 0x44, 0x5f, 0x52, 0x41, 0x49, 0x4c, 0x53,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x42, 0x1b, 0x0a,
	0x19, 0x5f, 0x44, 0x45, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x52,
	0x41, 0x43, 0x54, 0x45, 0x52, 0x49, 0x53, 0x54, 0x49, 0x43, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x56,
	0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x41, 0x43, 0x54, 0x45, 0x52,
	0x49, 0x53, 0x54, 0x49, 0x43, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x52, 0x45, 0x46, 0x5f, 0x4d, 0x45,
	0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x42, 0x16, 0x0a, 0x14,
	0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x49, 0x53, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x41, 0x4e,
	0x54, 0x49, 0x54, 0x59, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x43, 0x41, 0x4c, 0x49, 0x42, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x4d, 0x41, 0x54, 0x52, 0x49, 0x58, 0x5f, 0x44, 0x49, 0x4d, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x45,
	0x43, 0x55, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e,
	0x53, 0x49, 0x4f, 0x4e, 0x22, 0xa8, 0x01, 0x0a, 0x0a, 0x43, 0x6f, 0x65, 0x66, 0x66, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x01, 0x41, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x01, 0x41, 0x12, 0x18, 0x0a,
	0x01, 0x42, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x01, 0x42, 0x12, 0x18, 0x0a, 0x01, 0x43, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x01,
	0x43, 0x12, 0x18, 0x0a, 0x01, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x01, 0x44, 0x12, 0x18, 0x0a, 0x01, 0x45,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x01, 0x45, 0x12, 0x18, 0x0a, 0x01, 0x46, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x01, 0x46, 0x22,
	0x38, 0x0a, 0x16, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xcd, 0x03, 0x0a, 0x0f, 0x43, 0x6f,
	0x6d, 0x70, 0x75, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a,
	0x0e, 0x4c, 0x6f, 0x6e, 0x67, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0e, 0x4c, 0x6f, 0x6e, 0x67, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12,
	0x1f, 0x0a, 0x04, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x55, 0x6e, 0x69, 0x74,
	0x12, 0x2b, 0x0a, 0x07, 0x46, 0x4f, 0x52, 0x4d, 0x55, 0x4c, 0x41, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x54, 0x79, 0x70, 0x65, 0x48,
	0x00, 0x52, 0x07, 0x46, 0x4f, 0x52, 0x4d, 0x55, 0x4c, 0x41, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a,
	0x06, 0x43, 0x4f, 0x45, 0x46, 0x46, 0x53, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x43, 0x6f, 0x65, 0x66, 0x66, 0x73, 0x54, 0x79, 0x70, 0x65, 0x48, 0x01, 0x52, 0x06, 0x43, 0x4f,
	0x45, 0x46, 0x46, 0x53, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x0d, 0x43, 0x4f, 0x4d, 0x50, 0x55,
	0x5f, 0x54, 0x41, 0x42, 0x5f, 0x52, 0x45, 0x46, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x54, 0x61, 0x62, 0x52, 0x65, 0x66, 0x54, 0x79, 0x70, 0x65,
	0x48, 0x02, 0x52, 0x0d, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x5f, 0x54, 0x41, 0x42, 0x5f, 0x52, 0x45,
	0x46, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x08, 0x52, 0x45, 0x46, 0x5f, 0x55, 0x4e, 0x49, 0x54,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x52, 0x65, 0x66, 0x55, 0x6e, 0x69, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x48, 0x03, 0x52, 0x08, 0x52, 0x45, 0x46, 0x5f, 0x55, 0x4e, 0x49, 0x54,
	0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x55, 0x4c, 0x41, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x43, 0x4f, 0x45, 0x46, 0x46, 0x53, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x43,
	0x4f, 0x4d, 0x50, 0x55, 0x5f, 0x54, 0x41, 0x42, 0x5f, 0x52, 0x45, 0x46, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x52, 0x45, 0x46, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x22, 0x47, 0x0a, 0x0f, 0x43, 0x6f, 0x6d,
	0x70, 0x75, 0x54, 0x61, 0x62, 0x52, 0x65, 0x66, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x0f,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0f, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x22, 0xab, 0x03, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x54, 0x61, 0x62, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x0e, 0x4c, 0x6f, 0x6e, 0x67, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x4c, 0x6f, 0x6e, 0x67, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x34, 0x0a, 0x10, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50,
	0x61, 0x69, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x49, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x50, 0x61, 0x69, 0x72, 0x73, 0x12, 0x3f, 0x0a, 0x0b, 0x49, 0x6e, 0x56, 0x61, 0x6c, 0x4f,
	0x75, 0x74, 0x56, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x75, 0x54, 0x61, 0x62, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x49, 0x6e, 0x56, 0x61, 0x6c,
	0x4f, 0x75, 0x74, 0x56, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x49, 0x6e, 0x56, 0x61,
	0x6c, 0x4f, 0x75, 0x74, 0x56, 0x61, 0x6c, 0x12, 0x3c, 0x0a, 0x0d, 0x44, 0x45, 0x46, 0x41, 0x55,
	0x4c, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x48, 0x00, 0x52, 0x0d, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x56, 0x41, 0x4c,
	0x55, 0x45, 0x88, 0x01, 0x01, 0x1a, 0x57, 0x0a, 0x0f, 0x49, 0x6e, 0x56, 0x61, 0x6c, 0x4f, 0x75,
	0x74, 0x56, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x05, 0x49, 0x6e, 0x56, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x05, 0x49, 0x6e, 0x56, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x06, 0x4f, 0x75,
	0x74, 0x56, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x4f, 0x75, 0x74, 0x56, 0x61, 0x6c, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45,
	0x22, 0xf5, 0x03, 0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x56, 0x54, 0x61, 0x62, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x0e, 0x4c, 0x6f, 0x6e, 0x67, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x4c, 0x6f,
	0x6e, 0x67, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x15,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x54, 0x72,
	0x69, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x49, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x15, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x54, 0x72, 0x69, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x66, 0x0a, 0x16,
	0x49, 0x6e, 0x56, 0x61, 0x6c, 0x4d, 0x69, 0x6e, 0x49, 0x6e, 0x56, 0x61, 0x6c, 0x4d, 0x61, 0x78,
	0x4f, 0x75, 0x74, 0x56, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x75, 0x56, 0x54, 0x61, 0x62, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x2e, 0x49, 0x6e, 0x56, 0x61, 0x6c, 0x4d, 0x69, 0x6e, 0x49, 0x6e, 0x56, 0x61, 0x6c, 0x4d,
	0x61, 0x78, 0x4f, 0x75, 0x74, 0x56, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x16, 0x49, 0x6e,
	0x56, 0x61, 0x6c, 0x4d, 0x69, 0x6e, 0x49, 0x6e, 0x56, 0x61, 0x6c, 0x4d, 0x61, 0x78, 0x4f, 0x75,
	0x74, 0x56, 0x61, 0x6c, 0x12, 0x3c, 0x0a, 0x0d, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f,
	0x56, 0x41, 0x4c, 0x55, 0x45, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00,
	0x52, 0x0d, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x88,
	0x01, 0x01, 0x1a, 0x91, 0x01, 0x0a, 0x1a, 0x49, 0x6e, 0x56, 0x61, 0x6c, 0x4d, 0x69, 0x6e, 0x49,
	0x6e, 0x56, 0x61, 0x6c, 0x4d, 0x61, 0x78, 0x4f, 0x75, 0x74, 0x56, 0x61, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x26, 0x0a, 0x08, 0x49, 0x6e, 0x56, 0x61, 0x6c, 0x4d, 0x69, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x49, 0x6e, 0x56, 0x61, 0x6c, 0x4d, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x08, 0x49, 0x6e, 0x56,
	0x61, 0x6c, 0x4d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x49, 0x6e, 0x56, 0x61, 0x6c, 0x4d, 0x61,
	0x78, 0x12, 0x23, 0x0a, 0x06, 0x4f, 0x75, 0x74, 0x56, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06,
	0x4f, 0x75, 0x74, 0x56, 0x61, 0x6c, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55,
	0x4c, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x22, 0xae, 0x03, 0x0a, 0x0d, 0x43, 0x6f, 0x6d,
	0x70, 0x75, 0x56, 0x54, 0x61, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x0e, 0x4c, 0x6f,
	0x6e, 0x67, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0e, 0x4c, 0x6f, 0x6e, 0x67, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x10, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x08, 0x2e, 0x49, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x73, 0x12, 0x40, 0x0a,
	0x0b, 0x49, 0x6e, 0x56, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x56, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x56, 0x54, 0x61, 0x62, 0x54, 0x79,
	0x70, 0x65, 0x2e, 0x49, 0x6e, 0x56, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x56, 0x61, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0b, 0x49, 0x6e, 0x56, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x56, 0x61, 0x6c, 0x12,
	0x3c, 0x0a, 0x0d, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x44, 0x45, 0x46,
	0x41, 0x55, 0x4c, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x88, 0x01, 0x01, 0x1a, 0x58, 0x0a,
	0x0f, 0x49, 0x6e, 0x56, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x56, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x20, 0x0a, 0x05, 0x49, 0x6e, 0x56, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x49, 0x6e, 0x56,
	0x61, 0x6c, 0x12, 0x23, 0x0a, 0x06, 0x4f, 0x75, 0x74, 0x56, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x06, 0x4f, 0x75, 0x74, 0x56, 0x61, 0x6c, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x44, 0x45, 0x46, 0x41,
	0x55, 0x4c, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x22, 0x2c, 0x0a, 0x0b, 0x43, 0x70, 0x75,
	0x54, 0x79, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x03, 0x43, 0x70, 0x75, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x03, 0x43, 0x70, 0x75, 0x22, 0x3c, 0x0a, 0x10, 0x43, 0x75, 0x72, 0x76, 0x65,
	0x41, 0x78, 0x69, 0x73, 0x52, 0x65, 0x66, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x09, 0x43,
	0x75, 0x72, 0x76, 0x65, 0x41, 0x78, 0x69, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x43, 0x75, 0x72, 0x76,
	0x65, 0x41, 0x78, 0x69, 0x73, 0x22, 0x35, 0x0a, 0x0e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x4e, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x37, 0x0a, 0x0c,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x08,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x22, 0x24, 0x0a, 0x0c, 0x44, 0x61, 0x74, 0x61, 0x53, 0x69, 0x7a,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x45, 0x0a, 0x10, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x31, 0x0a, 0x0d, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0d, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x22, 0x43, 0x0a, 0x15, 0x44, 0x65, 0x66, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x0a, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x78, 0x0a, 0x1b, 0x44, 0x65, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x07, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x12, 0x32, 0x0a,
	0x0e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x22, 0x21, 0x0a, 0x0b, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x4d, 0x6f, 0x64, 0x65, 0x22, 0x45, 0x0a, 0x15, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a,
	0x0b, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x5e, 0x0a, 0x0b, 0x44,
	0x69, 0x73, 0x74, 0x4f, 0x70, 0x58, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x08, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x49,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x29, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x22, 0x5e, 0x0a, 0x0b, 0x44,
	0x69, 0x73, 0x74, 0x4f, 0x70, 0x59, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x08, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x49,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x29, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x22, 0x5e, 0x0a, 0x0b, 0x44,
	0x69, 0x73, 0x74, 0x4f, 0x70, 0x5a, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x08, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x49,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x29, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x22, 0x41, 0x0a, 0x17, 0x45,
	0x63, 0x75, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x09, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x49, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x35,
	0x0a, 0x0e, 0x45, 0x63, 0x75, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x23, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x4c, 0x6f, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x3d, 0x0a, 0x18, 0x45, 0x63, 0x75, 0x43, 0x61, 0x6c, 0x69,
	0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x21, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x4c, 0x6f, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x22, 0x38, 0x0a, 0x07, 0x45, 0x63, 0x75, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2d, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x55, 0x6e, 0x69, 0x74, 0x22, 0x36,
	0x0a, 0x07, 0x45, 0x70, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x2e, 0x0a, 0x0d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d,
	0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x04, 0x4d, 0x61, 0x73, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4c, 0x6f, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x6c, 0x0a, 0x12, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x0a,
	0x4c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x4c, 0x6f,
	0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2a, 0x0a, 0x0a, 0x55, 0x70, 0x70, 0x65,
	0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x55, 0x70, 0x70, 0x65, 0x72, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x22, 0x84, 0x01, 0x0a, 0x12, 0x46, 0x69, 0x78, 0x41, 0x78, 0x69, 0x73,
	0x50, 0x61, 0x72, 0x44, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x06, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x49, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x24, 0x0a,
	0x08, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x08, 0x2e, 0x49, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x44, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x09, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x61, 0x70, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x49, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x09, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x61, 0x70, 0x6f, 0x22, 0x44, 0x0a, 0x12, 0x46,
	0x69, 0x78, 0x41, 0x78, 0x69, 0x73, 0x50, 0x61, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x2e, 0x0a, 0x0c, 0x41, 0x78, 0x69, 0x73, 0x50, 0x74, 0x73, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0c, 0x41, 0x78, 0x69, 0x73, 0x50, 0x74, 0x73, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x7a, 0x0a, 0x0e, 0x46, 0x69, 0x78, 0x41, 0x78, 0x69, 0x73, 0x50, 0x61, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x49, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x05, 0x53, 0x68, 0x69, 0x66, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x49, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05,
	0x53, 0x68, 0x69, 0x66, 0x74, 0x12, 0x26, 0x0a, 0x09, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x61,
	0x70, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x49, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x61, 0x70, 0x6f, 0x22, 0x4d, 0x0a,
	0x11, 0x46, 0x69, 0x78, 0x4e, 0x6f, 0x41, 0x78, 0x69, 0x73, 0x50, 0x74, 0x73, 0x58, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x38, 0x0a, 0x12, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x41, 0x78,
	0x69, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08,
	0x2e, 0x49, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x12, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x4f, 0x66, 0x41, 0x78, 0x69, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x4d, 0x0a, 0x11,
	0x46, 0x69, 0x78, 0x4e, 0x6f, 0x41, 0x78, 0x69, 0x73, 0x50, 0x74, 0x73, 0x59, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x38, 0x0a, 0x12, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x41, 0x78, 0x69,
	0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e,
	0x49, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x12, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f,
	0x66, 0x41, 0x78, 0x69, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x4d, 0x0a, 0x11, 0x46,
	0x69, 0x78, 0x4e, 0x6f, 0x41, 0x78, 0x69, 0x73, 0x50, 0x74, 0x73, 0x5a, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x38, 0x0a, 0x12, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x41, 0x78, 0x69, 0x73,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x49,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x12, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66,
	0x41, 0x78, 0x69, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0xaf, 0x01, 0x0a, 0x0d, 0x46,
	0x6e, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x08,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08,
	0x2e, 0x49, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x0b, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x54, 0x79, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3d, 0x0a, 0x0a,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x0c, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x2d, 0x0a, 0x0e, 0x46,
	0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x49, 0x6e, 0x76, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a,
	0x02, 0x47, 0x58, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x02, 0x47, 0x58, 0x22, 0x72, 0x0a, 0x0b, 0x46, 0x6f,
	0x72, 0x6d, 0x75, 0x6c, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x02, 0x46, 0x58, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x02, 0x46, 0x58, 0x12, 0x36, 0x0a, 0x0b, 0x46, 0x4f, 0x52, 0x4d, 0x55, 0x4c,
	0x41, 0x5f, 0x49, 0x4e, 0x56, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x46, 0x6f,
	0x72, 0x6d, 0x75, 0x6c, 0x61, 0x49, 0x6e, 0x76, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x0b,
	0x46, 0x4f, 0x52, 0x4d, 0x55, 0x4c, 0x41, 0x5f, 0x49, 0x4e, 0x56, 0x88, 0x01, 0x01, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x55, 0x4c, 0x41, 0x5f, 0x49, 0x4e, 0x56, 0x22, 0x42,
	0x0a, 0x14, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x0a, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x22, 0xb2, 0x02, 0x0a, 0x09, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1e, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x33, 0x0a, 0x0e, 0x4c, 0x6f, 0x6e, 0x67, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x4c, 0x6f, 0x6e, 0x67, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x0b, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67,
	0x55, 0x6e, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x49, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x69,
	0x74, 0x12, 0x1d, 0x0a, 0x04, 0x52, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x09, 0x2e, 0x4c, 0x6f, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x48, 0x0a, 0x11, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x45, 0x41, 0x53, 0x55, 0x52,
	0x45, 0x4d, 0x45, 0x4e, 0x54, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x48, 0x00, 0x52, 0x11, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x45, 0x41, 0x53,
	0x55, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x07, 0x49, 0x46,
	0x5f, 0x44, 0x41, 0x54, 0x41, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x49, 0x66,
	0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x49, 0x46, 0x5f, 0x44, 0x41, 0x54,
	0x41, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x45, 0x41, 0x53,
	0x55, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x22, 0x32, 0x0a, 0x10, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x88, 0x06, 0x0a, 0x0c,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x0e,
	0x4c, 0x6f, 0x6e, 0x67, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0e, 0x4c, 0x6f, 0x6e, 0x67, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x2f, 0x0a, 0x0a, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x12, 0x4b, 0x0a, 0x12, 0x44, 0x45, 0x46, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x41, 0x43,
	0x54, 0x45, 0x52, 0x49, 0x53, 0x54, 0x49, 0x43, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x44, 0x65, 0x66, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x12, 0x44, 0x45, 0x46, 0x5f, 0x43, 0x48,
	0x41, 0x52, 0x41, 0x43, 0x54, 0x45, 0x52, 0x49, 0x53, 0x54, 0x49, 0x43, 0x88, 0x01, 0x01, 0x12,
	0x4b, 0x0a, 0x12, 0x52, 0x45, 0x46, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x41, 0x43, 0x54, 0x45, 0x52,
	0x49, 0x53, 0x54, 0x49, 0x43, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x52, 0x65,
	0x66, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x54,
	0x79, 0x70, 0x65, 0x48, 0x01, 0x52, 0x12, 0x52, 0x45, 0x46, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x41,
	0x43, 0x54, 0x45, 0x52, 0x49, 0x53, 0x54, 0x49, 0x43, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0e,
	0x49, 0x4e, 0x5f, 0x4d, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x49, 0x6e, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x02, 0x52, 0x0e, 0x49, 0x4e, 0x5f, 0x4d,
	0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a,
	0x0f, 0x4f, 0x55, 0x54, 0x5f, 0x4d, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4f, 0x75, 0x74, 0x4d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x03, 0x52, 0x0f, 0x4f,
	0x55, 0x54, 0x5f, 0x4d, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x88, 0x01,
	0x01, 0x12, 0x42, 0x0a, 0x0f, 0x4c, 0x4f, 0x43, 0x5f, 0x4d, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45,
	0x4d, 0x45, 0x4e, 0x54, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4c, 0x6f, 0x63,
	0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48,
	0x04, 0x52, 0x0f, 0x4c, 0x4f, 0x43, 0x5f, 0x4d, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0c, 0x53, 0x55, 0x42, 0x5f, 0x46, 0x55, 0x4e,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x53, 0x75,
	0x62, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x48, 0x05, 0x52,
	0x0c, 0x53, 0x55, 0x42, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x88, 0x01, 0x01,
	0x12, 0x45, 0x0a, 0x10, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x45, 0x52,
	0x53, 0x49, 0x4f, 0x4e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x48, 0x06, 0x52, 0x10, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x45, 0x52,
	0x53, 0x49, 0x4f, 0x4e, 0x88, 0x01, 0x01, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x44, 0x45, 0x46, 0x5f,
	0x43, 0x48, 0x41, 0x52, 0x41, 0x43, 0x54, 0x45, 0x52, 0x49, 0x53, 0x54, 0x49, 0x43, 0x42, 0x15,
	0x0a, 0x13, 0x5f, 0x52, 0x45, 0x46, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x41, 0x43, 0x54, 0x45, 0x52,
	0x49, 0x53, 0x54, 0x49, 0x43, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x49, 0x4e, 0x5f, 0x4d, 0x45, 0x41,
	0x53, 0x55, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x4f, 0x55, 0x54,
	0x5f, 0x4d, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x4c, 0x4f, 0x43, 0x5f, 0x4d, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x56,
	0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x22, 0x50, 0x0a, 0x13, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a,
	0x11, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x9e, 0x04, 0x0a, 0x09, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x3d, 0x0a, 0x13, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x6f, 0x6e, 0x67, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x13, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4c, 0x6f, 0x6e, 0x67, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x2f, 0x0a, 0x0a, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x12, 0x22, 0x0a, 0x04, 0x52, 0x4f, 0x4f, 0x54, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x52, 0x6f, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x04, 0x52, 0x4f, 0x4f,
	0x54, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x12, 0x52, 0x45, 0x46, 0x5f, 0x43, 0x48, 0x41, 0x52,
	0x41, 0x43, 0x54, 0x45, 0x52, 0x49, 0x53, 0x54, 0x49, 0x43, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x52, 0x65, 0x66, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x48, 0x01, 0x52, 0x12, 0x52, 0x45, 0x46, 0x5f,
	0x43, 0x48, 0x41, 0x52, 0x41, 0x43, 0x54, 0x45, 0x52, 0x49, 0x53, 0x54, 0x49, 0x43, 0x88, 0x01,
	0x01, 0x12, 0x42, 0x0a, 0x0f, 0x52, 0x45, 0x46, 0x5f, 0x4d, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45,
	0x4d, 0x45, 0x4e, 0x54, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x52, 0x65, 0x66,
	0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48,
	0x02, 0x52, 0x0f, 0x52, 0x45, 0x46, 0x5f, 0x4d, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0d, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48,
	0x03, 0x52, 0x0d, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x53, 0x54,
	0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x09, 0x53, 0x55, 0x42, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x53, 0x75, 0x62, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x48, 0x04, 0x52, 0x09, 0x53, 0x55, 0x42, 0x5f, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x52, 0x4f, 0x4f, 0x54, 0x42, 0x15,
	0x0a, 0x13, 0x5f, 0x52, 0x45, 0x46, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x41, 0x43, 0x54, 0x45, 0x52,
	0x49, 0x53, 0x54, 0x49, 0x43, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x52, 0x45, 0x46, 0x5f, 0x4d, 0x45,
	0x41, 0x53, 0x55, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x46, 0x55,
	0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x53, 0x55, 0x42, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x22, 0x10, 0x0a, 0x0e, 0x47, 0x75, 0x61,
	0x72, 0x64, 0x52, 0x61, 0x69, 0x6c, 0x73, 0x54, 0x79, 0x70, 0x65, 0x22, 0xb0, 0x01, 0x0a, 0x0a,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x07, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x2b, 0x0a, 0x07, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x48, 0x00, 0x52, 0x07, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x88, 0x01, 0x01, 0x12, 0x33,
	0x0a, 0x0a, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x4e, 0x4f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x6f, 0x54, 0x79,
	0x70, 0x65, 0x48, 0x01, 0x52, 0x0a, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x4e, 0x4f,
	0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x4e, 0x4f, 0x22, 0x65,
	0x0a, 0x12, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x49, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x08, 0x44, 0x61,
	0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x44, 0x61, 0x74,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3f, 0x0a, 0x11, 0x49, 0x6e, 0x4d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x0a, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x36, 0x0a, 0x0d, 0x4c, 0x65, 0x66, 0x74, 0x53, 0x68,
	0x69, 0x66, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x08, 0x42, 0x69, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4c, 0x6f, 0x6e, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x42, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x40,
	0x0a, 0x12, 0x4c, 0x6f, 0x63, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x0a, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x22, 0x2d, 0x0a, 0x0b, 0x4d, 0x61, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1e, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x69, 0x0a, 0x0d, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x44, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1c, 0x0a, 0x04, 0x58, 0x44, 0x69, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08,
	0x2e, 0x49, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x58, 0x44, 0x69, 0x6d, 0x12, 0x1c,
	0x0a, 0x04, 0x59, 0x44, 0x69, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x49,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x59, 0x44, 0x69, 0x6d, 0x12, 0x1c, 0x0a, 0x04,
	0x5a, 0x44, 0x69, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x49, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x5a, 0x44, 0x69, 0x6d, 0x22, 0x3b, 0x0a, 0x0b, 0x4d, 0x61,
	0x78, 0x47, 0x72, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x0b, 0x4d, 0x61, 0x78,
	0x47, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x4d, 0x61, 0x78, 0x47,
	0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x22, 0x5b, 0x0a, 0x0e, 0x4d, 0x61, 0x78, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x0b, 0x53, 0x63, 0x61,
	0x6c, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08,
	0x2e, 0x49, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e,
	0x67, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x04, 0x52, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4c, 0x6f, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x52, 0x61, 0x74, 0x65, 0x22, 0xa3, 0x0c, 0x0a, 0x0f, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x0e, 0x4c, 0x6f, 0x6e, 0x67,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x4c,
	0x6f, 0x6e, 0x67, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x29, 0x0a,
	0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08,
	0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x49, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26,
	0x0a, 0x08, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x41, 0x63,
	0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x12, 0x2a, 0x0a, 0x0a, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x2a, 0x0a, 0x0a, 0x55, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x55, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x4b,
	0x0a, 0x12, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49,
	0x46, 0x49, 0x45, 0x52, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x48, 0x00, 0x52, 0x12, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x49, 0x44,
	0x45, 0x4e, 0x54, 0x49, 0x46, 0x49, 0x45, 0x52, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x0a, 0x52,
	0x45, 0x41, 0x44, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x57, 0x72, 0x69, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48,
	0x01, 0x52, 0x0a, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x88, 0x01, 0x01,
	0x12, 0x28, 0x0a, 0x06, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x02, 0x52,
	0x06, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x0a, 0x41, 0x52,
	0x52, 0x41, 0x59, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x41, 0x72, 0x72, 0x61, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x03,
	0x52, 0x0a, 0x41, 0x52, 0x52, 0x41, 0x59, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x88, 0x01, 0x01, 0x12,
	0x2d, 0x0a, 0x08, 0x42, 0x49, 0x54, 0x5f, 0x4d, 0x41, 0x53, 0x4b, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x42, 0x69, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x48,
	0x04, 0x52, 0x08, 0x42, 0x49, 0x54, 0x5f, 0x4d, 0x41, 0x53, 0x4b, 0x88, 0x01, 0x01, 0x12, 0x3c,
	0x0a, 0x0d, 0x42, 0x49, 0x54, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x42, 0x69, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x48, 0x05, 0x52, 0x0d, 0x42, 0x49, 0x54, 0x5f,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x0a,
	0x42, 0x59, 0x54, 0x45, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x48, 0x06, 0x52, 0x0a, 0x42, 0x59, 0x54, 0x45, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x88, 0x01,
	0x01, 0x12, 0x36, 0x0a, 0x0b, 0x4d, 0x41, 0x58, 0x5f, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x48, 0x07, 0x52, 0x0b, 0x4d, 0x41, 0x58, 0x5f, 0x52,
	0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x07, 0x56, 0x49, 0x52,
	0x54, 0x55, 0x41, 0x4c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x48, 0x08, 0x52, 0x07, 0x56, 0x49, 0x52, 0x54,
	0x55, 0x41, 0x4c, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0d, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x48, 0x09, 0x52, 0x0d, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x53,
	0x54, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x0b, 0x45, 0x43, 0x55, 0x5f, 0x41, 0x44, 0x44, 0x52,
	0x45, 0x53, 0x53, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x45, 0x63, 0x75, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x48, 0x0a, 0x52, 0x0b, 0x45, 0x43,
	0x55, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x0a,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4d, 0x41, 0x53, 0x4b, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x48, 0x0b, 0x52, 0x0a, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4d, 0x41, 0x53, 0x4b, 0x88, 0x01,
	0x01, 0x12, 0x4a, 0x0a, 0x12, 0x52, 0x45, 0x46, 0x5f, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f,
	0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x52, 0x65, 0x66, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x48, 0x0c, 0x52, 0x12, 0x52, 0x45, 0x46, 0x5f, 0x4d, 0x45, 0x4d, 0x4f,
	0x52, 0x59, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a,
	0x0a, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x18, 0x16, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x12, 0x25,
	0x0a, 0x07, 0x49, 0x46, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x49, 0x66, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x49, 0x46,
	0x5f, 0x44, 0x41, 0x54, 0x41, 0x12, 0x33, 0x0a, 0x0a, 0x4d, 0x41, 0x54, 0x52, 0x49, 0x58, 0x5f,
	0x44, 0x49, 0x4d, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x4d, 0x61, 0x74, 0x72,
	0x69, 0x78, 0x44, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x48, 0x0d, 0x52, 0x0a, 0x4d, 0x41, 0x54,
	0x52, 0x49, 0x58, 0x5f, 0x44, 0x49, 0x4d, 0x88, 0x01, 0x01, 0x12, 0x53, 0x0a, 0x15, 0x45, 0x43,
	0x55, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53,
	0x49, 0x4f, 0x4e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x45, 0x63, 0x75, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x48, 0x0e, 0x52, 0x15, 0x45, 0x43, 0x55, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45,
	0x53, 0x53, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x88, 0x01, 0x01, 0x42,
	0x15, 0x0a, 0x13, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x49, 0x44, 0x45, 0x4e,
	0x54, 0x49, 0x46, 0x49, 0x45, 0x52, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f,
	0x57, 0x52, 0x49, 0x54, 0x45, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x41, 0x52, 0x52, 0x41, 0x59, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x42, 0x49, 0x54, 0x5f, 0x4d, 0x41, 0x53, 0x4b, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x42, 0x49, 0x54, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x46, 0x55,
	0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x45, 0x43, 0x55, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4d, 0x41, 0x53, 0x4b, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x52,
	0x45, 0x46, 0x5f, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e,
	0x54, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x4d, 0x41, 0x54, 0x52, 0x49, 0x58, 0x5f, 0x44, 0x49, 0x4d,
	0x42, 0x18, 0x0a, 0x16, 0x5f, 0x45, 0x43, 0x55, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53,
	0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x22, 0xba, 0x01, 0x0a, 0x10, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x50, 0x72, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x50, 0x72, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x07, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4c, 0x6f, 0x6e,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d,
	0x0a, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4c,
	0x6f, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x21, 0x0a,
	0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x4c, 0x6f, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x25, 0x0a, 0x07, 0x49, 0x46, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x49, 0x66, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07,
	0x49, 0x46, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x22, 0xce, 0x02, 0x0a, 0x11, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a,
	0x0e, 0x4c, 0x6f, 0x6e, 0x67, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0e, 0x4c, 0x6f, 0x6e, 0x67, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x72, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x72, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x07, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4c, 0x6f,
	0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x1d, 0x0a, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x4c, 0x6f, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x21,
	0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x4c, 0x6f, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x25, 0x0a, 0x07, 0x49, 0x46, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x49, 0x66, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x07, 0x49, 0x46, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x22, 0xa0, 0x06, 0x0a, 0x0d, 0x4d, 0x6f, 0x64,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x07, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x38, 0x0a, 0x0c, 0x53, 0x5f, 0x52, 0x45, 0x43, 0x5f, 0x4c, 0x41, 0x59, 0x4f, 0x55,
	0x54, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x53, 0x52, 0x65, 0x63, 0x4c, 0x61,
	0x79, 0x6f, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x53, 0x5f, 0x52, 0x45,
	0x43, 0x5f, 0x4c, 0x41, 0x59, 0x4f, 0x55, 0x54, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x07, 0x44,
	0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x44,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x01, 0x52, 0x07, 0x44, 0x45,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x0a, 0x42, 0x59, 0x54, 0x45,
	0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x42,
	0x79, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x48, 0x02, 0x52, 0x0a,
	0x42, 0x59, 0x54, 0x45, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a,
	0x09, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48,
	0x03, 0x52, 0x09, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x88, 0x01, 0x01, 0x12,
	0x3f, 0x0a, 0x0e, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x59, 0x54,
	0x45, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x42, 0x79, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x04, 0x52, 0x0e, 0x41,
	0x4c, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x88, 0x01, 0x01,
	0x12, 0x3f, 0x0a, 0x0e, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x57, 0x4f,
	0x52, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x41, 0x6c, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x57, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x48, 0x05, 0x52, 0x0e,
	0x41, 0x4c, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x57, 0x4f, 0x52, 0x44, 0x88, 0x01,
	0x01, 0x12, 0x3f, 0x0a, 0x0e, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4c,
	0x4f, 0x4e, 0x47, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x41, 0x6c, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x48, 0x06, 0x52,
	0x0e, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x88,
	0x01, 0x01, 0x12, 0x56, 0x0a, 0x16, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x46, 0x4c, 0x4f, 0x41, 0x54, 0x33, 0x32, 0x5f, 0x49, 0x45, 0x45, 0x45, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x33, 0x32, 0x49, 0x65, 0x65, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x07, 0x52,
	0x16, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x4c, 0x4f, 0x41, 0x54,
	0x33, 0x32, 0x5f, 0x49, 0x45, 0x45, 0x45, 0x88, 0x01, 0x01, 0x12, 0x56, 0x0a, 0x16, 0x41, 0x4c,
	0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x36, 0x34, 0x5f,
	0x49, 0x45, 0x45, 0x45, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x41, 0x6c, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x36, 0x34, 0x49, 0x65, 0x65,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x08, 0x52, 0x16, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x36, 0x34, 0x5f, 0x49, 0x45, 0x45, 0x45, 0x88,
	0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x53, 0x5f, 0x52, 0x45, 0x43, 0x5f, 0x4c, 0x41, 0x59,
	0x4f, 0x55, 0x54, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x57, 0x4f,
	0x52, 0x44, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x33, 0x32, 0x5f, 0x49, 0x45, 0x45, 0x45,
	0x42, 0x19, 0x0a, 0x17, 0x5f, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x46,
	0x4c, 0x4f, 0x41, 0x54, 0x36, 0x34, 0x5f, 0x49, 0x45, 0x45, 0x45, 0x22, 0x99, 0x08, 0x0a, 0x0a,
	0x4d, 0x6f, 0x64, 0x50, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x07, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x2b, 0x0a, 0x07, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x48, 0x00, 0x52, 0x07, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x88, 0x01, 0x01, 0x12, 0x28,
	0x0a, 0x08, 0x41, 0x44, 0x44, 0x52, 0x5f, 0x45, 0x50, 0x4b, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x45, 0x70, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08,
	0x41, 0x44, 0x44, 0x52, 0x5f, 0x45, 0x50, 0x4b, 0x12, 0x1f, 0x0a, 0x03, 0x45, 0x50, 0x4b, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x45, 0x70, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x48,
	0x01, 0x52, 0x03, 0x45, 0x50, 0x4b, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x08, 0x53, 0x55, 0x50,
	0x50, 0x4c, 0x49, 0x45, 0x52, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x53, 0x75,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x48, 0x02, 0x52, 0x08, 0x53, 0x55,
	0x50, 0x50, 0x4c, 0x49, 0x45, 0x52, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x08, 0x43, 0x55, 0x53,
	0x54, 0x4f, 0x4d, 0x45, 0x52, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x48, 0x03, 0x52, 0x08, 0x43, 0x55,
	0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x0b, 0x43, 0x55, 0x53,
	0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x48,
	0x04, 0x52, 0x0b, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x04, 0x55, 0x53, 0x45, 0x52, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x09, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x48, 0x05, 0x52, 0x04, 0x55, 0x53,
	0x45, 0x52, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x08, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x4e,
	0x4f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e,
	0x6f, 0x54, 0x79, 0x70, 0x65, 0x48, 0x06, 0x52, 0x08, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x4e,
	0x4f, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x03, 0x45, 0x43, 0x55, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x08, 0x2e, 0x45, 0x63, 0x75, 0x54, 0x79, 0x70, 0x65, 0x48, 0x07, 0x52, 0x03, 0x45,
	0x43, 0x55, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x08, 0x43, 0x50, 0x55, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x43, 0x70, 0x75, 0x54, 0x79, 0x70,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x08, 0x52, 0x08, 0x43, 0x50, 0x55, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x10, 0x4e, 0x4f, 0x5f, 0x4f, 0x46, 0x5f, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x4e, 0x6f, 0x4f, 0x66, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x48, 0x09, 0x52, 0x10, 0x4e, 0x4f, 0x5f, 0x4f, 0x46, 0x5f, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x88, 0x01, 0x01, 0x12, 0x56, 0x0a, 0x16, 0x45, 0x43,
	0x55, 0x5f, 0x43, 0x41, 0x4c, 0x49, 0x42, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x46,
	0x46, 0x53, 0x45, 0x54, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x45, 0x63, 0x75,
	0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x0a, 0x52, 0x16, 0x45, 0x43, 0x55, 0x5f, 0x43, 0x41, 0x4c,
	0x49, 0x42, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54, 0x88,
	0x01, 0x01, 0x12, 0x46, 0x0a, 0x12, 0x43, 0x41, 0x4c, 0x49, 0x42, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x12, 0x43, 0x41, 0x4c, 0x49, 0x42, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x12, 0x37, 0x0a, 0x0d, 0x4d, 0x45,
	0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x4c, 0x41, 0x59, 0x4f, 0x55, 0x54, 0x18, 0x0f, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x4c, 0x41, 0x59,
	0x4f, 0x55, 0x54, 0x12, 0x3a, 0x0a, 0x0e, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x45,
	0x47, 0x4d, 0x45, 0x4e, 0x54, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0e, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x12,
	0x3d, 0x0a, 0x0f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x41,
	0x4e, 0x54, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x53,
	0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x54, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x45,
	0x50, 0x4b, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4c, 0x49, 0x45, 0x52, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f,
	0x4e, 0x4f, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x45, 0x43, 0x55, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x43,
	0x50, 0x55, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x4e, 0x4f, 0x5f, 0x4f,
	0x46, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x42, 0x19, 0x0a, 0x17,
	0x5f, 0x45, 0x43, 0x55, 0x5f, 0x43, 0x41, 0x4c, 0x49, 0x42, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54, 0x22, 0xfd, 0x07, 0x0a, 0x0a, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x0e, 0x4c, 0x6f, 0x6e, 0x67, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x4c, 0x6f, 0x6e,
	0x67, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x04, 0x41,
	0x32, 0x4d, 0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x41, 0x32, 0x4d, 0x4c,
	0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x04, 0x41, 0x32, 0x4d, 0x4c, 0x88, 0x01, 0x01, 0x12,
	0x2a, 0x0a, 0x07, 0x4d, 0x4f, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x4d, 0x6f, 0x64, 0x50, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x48, 0x01, 0x52,
	0x07, 0x4d, 0x4f, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x0a, 0x4d,
	0x4f, 0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x4d, 0x6f, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x48,
	0x02, 0x52, 0x0a, 0x4d, 0x4f, 0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x88, 0x01, 0x01,
	0x12, 0x25, 0x0a, 0x07, 0x49, 0x46, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x49, 0x66, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07,
	0x49, 0x46, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x12, 0x3b, 0x0a, 0x0e, 0x43, 0x48, 0x41, 0x52, 0x41,
	0x43, 0x54, 0x45, 0x52, 0x49, 0x53, 0x54, 0x49, 0x43, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x43, 0x48, 0x41, 0x52, 0x41, 0x43, 0x54, 0x45, 0x52, 0x49,
	0x53, 0x54, 0x49, 0x43, 0x12, 0x28, 0x0a, 0x08, 0x41, 0x58, 0x49, 0x53, 0x5f, 0x50, 0x54, 0x53,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x41, 0x78, 0x69, 0x73, 0x50, 0x74, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x41, 0x58, 0x49, 0x53, 0x5f, 0x50, 0x54, 0x53, 0x12, 0x32,
	0x0a, 0x0b, 0x4d, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x4d, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x12, 0x34, 0x0a, 0x0c, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x5f, 0x4d, 0x45, 0x54, 0x48,
	0x4f, 0x44, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x43, 0x4f, 0x4d, 0x50,
	0x55, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x12, 0x2b, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50,
	0x55, 0x5f, 0x54, 0x41, 0x42, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x75, 0x54, 0x61, 0x62, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x43, 0x4f, 0x4d, 0x50,
	0x55, 0x5f, 0x54, 0x41, 0x42, 0x12, 0x2e, 0x0a, 0x0a, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x5f, 0x56,
	0x54, 0x41, 0x42, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x75, 0x56, 0x54, 0x61, 0x62, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x43, 0x4f, 0x4d, 0x50, 0x55,
	0x5f, 0x56, 0x54, 0x41, 0x42, 0x12, 0x3f, 0x0a, 0x10, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x5f, 0x56,
	0x54, 0x41, 0x42, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x56, 0x54, 0x61, 0x62, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x5f, 0x56, 0x54, 0x41, 0x42,
	0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x12, 0x29, 0x0a, 0x08, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x12, 0x20, 0x0a, 0x05, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x12, 0x37, 0x0a, 0x0d, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x4c, 0x41,
	0x59, 0x4f, 0x55, 0x54, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x52,
	0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x4c, 0x41, 0x59, 0x4f, 0x55, 0x54, 0x12, 0x3f, 0x0a, 0x0e,
	0x56, 0x41, 0x52, 0x49, 0x41, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x43, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x48, 0x03, 0x52, 0x0e, 0x56, 0x41, 0x52, 0x49,
	0x41, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a,
	0x05, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x04, 0x52, 0x05, 0x46, 0x52, 0x41, 0x4d,
	0x45, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x0b, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x49, 0x47,
	0x48, 0x54, 0x53, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x53, 0x12, 0x1d, 0x0a, 0x04, 0x55, 0x4e, 0x49, 0x54, 0x18,
	0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x55, 0x4e, 0x49, 0x54, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x41, 0x32, 0x4d, 0x4c, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x4d, 0x4f, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x4d, 0x4f, 0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x56,
	0x41, 0x52, 0x49, 0x41, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x22, 0x2a, 0x0a, 0x0c, 0x4d, 0x6f, 0x6e, 0x6f, 0x74,
	0x6f, 0x6e, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x6f, 0x6e, 0x6f, 0x74,
	0x6f, 0x6e, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4d, 0x6f, 0x6e, 0x6f, 0x74,
	0x6f, 0x6e, 0x79, 0x22, 0x61, 0x0a, 0x0e, 0x4e, 0x6f, 0x41, 0x78, 0x69, 0x73, 0x50, 0x74, 0x73,
	0x58, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x49, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x08, 0x44,
	0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x44, 0x61,
	0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x22, 0x61, 0x0a, 0x0e, 0x4e, 0x6f, 0x41, 0x78, 0x69, 0x73,
	0x50, 0x74, 0x73, 0x59, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x49, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29,
	0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x22, 0x61, 0x0a, 0x0e, 0x4e, 0x6f, 0x41,
	0x78, 0x69, 0x73, 0x50, 0x74, 0x73, 0x5a, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x08, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e,
	0x49, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x29, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x22, 0x30, 0x0a, 0x12,
	0x4e, 0x6f, 0x4f, 0x66, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1a, 0x0a, 0x03, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x08, 0x2e, 0x49, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x03, 0x4e, 0x75, 0x6d, 0x22, 0x61,
	0x0a, 0x0e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x58, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x24, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x08, 0x2e, 0x49, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x61, 0x0a, 0x0e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x59, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x49, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x08, 0x44, 0x61, 0x74,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x44, 0x61, 0x74, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x61, 0x0a, 0x0e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x5a, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x49, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x08,
	0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x44,
	0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x22, 0x2e, 0x0a, 0x0a, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x06, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x49, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x06, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x5e, 0x0a, 0x0b, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x58, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x49, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x08,
	0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x44,
	0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x22, 0x5e, 0x0a, 0x0b, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x59, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x49, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x08,
	0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x44,
	0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x22, 0x5e, 0x0a, 0x0b, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x5a, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x49, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x08,
	0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x44,
	0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x22, 0x40, 0x0a, 0x12, 0x4f, 0x75, 0x74, 0x4d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a,
	0x0a, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x32, 0x0a, 0x0b, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x4e, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x54, 0x65, 0x6c, 0x4e,
	0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x54, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x22, 0x41, 0x0a,
	0x0d, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30,
	0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0d, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x22, 0xac, 0x01, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1e, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x33, 0x0a, 0x0e, 0x4c, 0x6f, 0x6e, 0x67, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x4c, 0x6f, 0x6e, 0x67, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x06, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x06, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x12, 0x23, 0x0a, 0x06, 0x4d, 0x4f,
	0x44, 0x55, 0x4c, 0x45, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x22,
	0x0e, 0x0a, 0x0c, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x0f, 0x0a, 0x0d, 0x52, 0x65, 0x61, 0x64, 0x57, 0x72, 0x69, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x8b, 0x17, 0x0a, 0x10, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x46, 0x4e, 0x43, 0x5f, 0x56, 0x41, 0x4c,
	0x55, 0x45, 0x53, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x46, 0x6e, 0x63, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x46, 0x4e, 0x43,
	0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x53, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x0e, 0x49, 0x44,
	0x45, 0x4e, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x48, 0x01, 0x52, 0x0e, 0x49, 0x44, 0x45, 0x4e, 0x54,
	0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x0a,
	0x41, 0x58, 0x49, 0x53, 0x5f, 0x50, 0x54, 0x53, 0x5f, 0x58, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x41, 0x78, 0x69, 0x73, 0x50, 0x74, 0x73, 0x58, 0x54, 0x79, 0x70, 0x65, 0x48,
	0x02, 0x52, 0x0a, 0x41, 0x58, 0x49, 0x53, 0x5f, 0x50, 0x54, 0x53, 0x5f, 0x58, 0x88, 0x01, 0x01,
	0x12, 0x32, 0x0a, 0x0a, 0x41, 0x58, 0x49, 0x53, 0x5f, 0x50, 0x54, 0x53, 0x5f, 0x59, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x41, 0x78, 0x69, 0x73, 0x50, 0x74, 0x73, 0x59, 0x54,
	0x79, 0x70, 0x65, 0x48, 0x03, 0x52, 0x0a, 0x41, 0x58, 0x49, 0x53, 0x5f, 0x50, 0x54, 0x53, 0x5f,
	0x59, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x0a, 0x41, 0x58, 0x49, 0x53, 0x5f, 0x50, 0x54, 0x53,
	0x5f, 0x5a, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x41, 0x78, 0x69, 0x73, 0x50,
	0x74, 0x73, 0x5a, 0x54, 0x79, 0x70, 0x65, 0x48, 0x04, 0x52, 0x0a, 0x41, 0x58, 0x49, 0x53, 0x5f,
	0x50, 0x54, 0x53, 0x5f, 0x5a, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0e, 0x41, 0x58, 0x49, 0x53,
	0x5f, 0x52, 0x45, 0x53, 0x43, 0x41, 0x4c, 0x45, 0x5f, 0x58, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x41, 0x78, 0x69, 0x73, 0x52, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x58, 0x54,
	0x79, 0x70, 0x65, 0x48, 0x05, 0x52, 0x0e, 0x41, 0x58, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x43,
	0x41, 0x4c, 0x45, 0x5f, 0x58, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0e, 0x41, 0x58, 0x49, 0x53,
	0x5f, 0x52, 0x45, 0x53, 0x43, 0x41, 0x4c, 0x45, 0x5f, 0x59, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x41, 0x78, 0x69, 0x73, 0x52, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x59, 0x54,
	0x79, 0x70, 0x65, 0x48, 0x06, 0x52, 0x0e, 0x41, 0x58, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x43,
	0x41, 0x4c, 0x45, 0x5f, 0x59, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0e, 0x41, 0x58, 0x49, 0x53,
	0x5f, 0x52, 0x45, 0x53, 0x43, 0x41, 0x4c, 0x45, 0x5f, 0x5a, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x41, 0x78, 0x69, 0x73, 0x52, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5a, 0x54,
	0x79, 0x70, 0x65, 0x48, 0x07, 0x52, 0x0e, 0x41, 0x58, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x43,
	0x41, 0x4c, 0x45, 0x5f, 0x5a, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x0d, 0x4e, 0x4f, 0x5f, 0x41,
	0x58, 0x49, 0x53, 0x5f, 0x50, 0x54, 0x53, 0x5f, 0x58, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x4e, 0x6f, 0x41, 0x78, 0x69, 0x73, 0x50, 0x74, 0x73, 0x58, 0x54, 0x79, 0x70, 0x65,
	0x48, 0x08, 0x52, 0x0d, 0x4e, 0x4f, 0x5f, 0x41, 0x58, 0x49, 0x53, 0x5f, 0x50, 0x54, 0x53, 0x5f,
	0x58, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x0d, 0x4e, 0x4f, 0x5f, 0x41, 0x58, 0x49, 0x53, 0x5f,
	0x50, 0x54, 0x53, 0x5f, 0x59, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4e, 0x6f,
	0x41, 0x78, 0x69, 0x73, 0x50, 0x74, 0x73, 0x59, 0x54, 0x79, 0x70, 0x65, 0x48, 0x09, 0x52, 0x0d,
	0x4e, 0x4f, 0x5f, 0x41, 0x58, 0x49, 0x53, 0x5f, 0x50, 0x54, 0x53, 0x5f, 0x59, 0x88, 0x01, 0x01,
	0x12, 0x3a, 0x0a, 0x0d, 0x4e, 0x4f, 0x5f, 0x41, 0x58, 0x49, 0x53, 0x5f, 0x50, 0x54, 0x53, 0x5f,
	0x5a, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4e, 0x6f, 0x41, 0x78, 0x69, 0x73,
	0x50, 0x74, 0x73, 0x5a, 0x54, 0x79, 0x70, 0x65, 0x48, 0x0a, 0x52, 0x0d, 0x4e, 0x4f, 0x5f, 0x41,
	0x58, 0x49, 0x53, 0x5f, 0x50, 0x54, 0x53, 0x5f, 0x5a, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x0c,
	0x4e, 0x4f, 0x5f, 0x52, 0x45, 0x53, 0x43, 0x41, 0x4c, 0x45, 0x5f, 0x58, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x58, 0x54,
	0x79, 0x70, 0x65, 0x48, 0x0b, 0x52, 0x0c, 0x4e, 0x4f, 0x5f, 0x52, 0x45, 0x53, 0x43, 0x41, 0x4c,
	0x45, 0x5f, 0x58, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x0c, 0x4e, 0x4f, 0x5f, 0x52, 0x45, 0x53,
	0x43, 0x41, 0x4c, 0x45, 0x5f, 0x59, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4e,
	0x6f, 0x52, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x59, 0x54, 0x79, 0x70, 0x65, 0x48, 0x0c, 0x52,
	0x0c, 0x4e, 0x4f, 0x5f, 0x52, 0x45, 0x53, 0x43, 0x41, 0x4c, 0x45, 0x5f, 0x59, 0x88, 0x01, 0x01,
	0x12, 0x38, 0x0a, 0x0c, 0x4e, 0x4f, 0x5f, 0x52, 0x45, 0x53, 0x43, 0x41, 0x4c, 0x45, 0x5f, 0x5a,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x5a, 0x54, 0x79, 0x70, 0x65, 0x48, 0x0d, 0x52, 0x0c, 0x4e, 0x4f, 0x5f, 0x52, 0x45,
	0x53, 0x43, 0x41, 0x4c, 0x45, 0x5f, 0x5a, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x11, 0x46, 0x49,
	0x58, 0x5f, 0x4e, 0x4f, 0x5f, 0x41, 0x58, 0x49, 0x53, 0x5f, 0x50, 0x54, 0x53, 0x5f, 0x58, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x69, 0x78, 0x4e, 0x6f, 0x41, 0x78, 0x69,
	0x73, 0x50, 0x74, 0x73, 0x58, 0x54, 0x79, 0x70, 0x65, 0x48, 0x0e, 0x52, 0x11, 0x46, 0x49, 0x58,
	0x5f, 0x4e, 0x4f, 0x5f, 0x41, 0x58, 0x49, 0x53, 0x5f, 0x50, 0x54, 0x53, 0x5f, 0x58, 0x88, 0x01,
	0x01, 0x12, 0x45, 0x0a, 0x11, 0x46, 0x49, 0x58, 0x5f, 0x4e, 0x4f, 0x5f, 0x41, 0x58, 0x49, 0x53,
	0x5f, 0x50, 0x54, 0x53, 0x5f, 0x59, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46,
	0x69, 0x78, 0x4e, 0x6f, 0x41, 0x78, 0x69, 0x73, 0x50, 0x74, 0x73, 0x59, 0x54, 0x79, 0x70, 0x65,
	0x48, 0x0f, 0x52, 0x11, 0x46, 0x49, 0x58, 0x5f, 0x4e, 0x4f, 0x5f, 0x41, 0x58, 0x49, 0x53, 0x5f,
	0x50, 0x54, 0x53, 0x5f, 0x59, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x11, 0x46, 0x49, 0x58, 0x5f,
	0x4e, 0x4f, 0x5f, 0x41, 0x58, 0x49, 0x53, 0x5f, 0x50, 0x54, 0x53, 0x5f, 0x5a, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x69, 0x78, 0x4e, 0x6f, 0x41, 0x78, 0x69, 0x73, 0x50,
	0x74, 0x73, 0x5a, 0x54, 0x79, 0x70, 0x65, 0x48, 0x10, 0x52, 0x11, 0x46, 0x49, 0x58, 0x5f, 0x4e,
	0x4f, 0x5f, 0x41, 0x58, 0x49, 0x53, 0x5f, 0x50, 0x54, 0x53, 0x5f, 0x5a, 0x88, 0x01, 0x01, 0x12,
	0x32, 0x0a, 0x0a, 0x53, 0x52, 0x43, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x5f, 0x58, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x53, 0x72, 0x63, 0x41, 0x64, 0x64, 0x72, 0x58, 0x54, 0x79,
	0x70, 0x65, 0x48, 0x11, 0x52, 0x0a, 0x53, 0x52, 0x43, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x5f, 0x58,
	0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x0a, 0x53, 0x52, 0x43, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x5f,
	0x59, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x53, 0x72, 0x63, 0x41, 0x64, 0x64,
	0x72, 0x59, 0x54, 0x79, 0x70, 0x65, 0x48, 0x12, 0x52, 0x0a, 0x53, 0x52, 0x43, 0x5f, 0x41, 0x44,
	0x44, 0x52, 0x5f, 0x59, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x0a, 0x53, 0x52, 0x43, 0x5f, 0x41,
	0x44, 0x44, 0x52, 0x5f, 0x5a, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x53, 0x72,
	0x63, 0x41, 0x64, 0x64, 0x72, 0x5a, 0x54, 0x79, 0x70, 0x65, 0x48, 0x13, 0x52, 0x0a, 0x53, 0x52,
	0x43, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x5f, 0x5a, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x0a, 0x52,
	0x49, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x5f, 0x58, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x52, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x58, 0x54, 0x79, 0x70, 0x65, 0x48, 0x14,
	0x52, 0x0a, 0x52, 0x49, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x5f, 0x58, 0x88, 0x01, 0x01, 0x12,
	0x32, 0x0a, 0x0a, 0x52, 0x49, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x5f, 0x59, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x52, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x59, 0x54, 0x79,
	0x70, 0x65, 0x48, 0x15, 0x52, 0x0a, 0x52, 0x49, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x5f, 0x59,
	0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x0a, 0x52, 0x49, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x5f,
	0x5a, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x52, 0x69, 0x70, 0x41, 0x64, 0x64,
	0x72, 0x5a, 0x54, 0x79, 0x70, 0x65, 0x48, 0x16, 0x52, 0x0a, 0x52, 0x49, 0x50, 0x5f, 0x41, 0x44,
	0x44, 0x52, 0x5f, 0x5a, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x0a, 0x52, 0x49, 0x50, 0x5f, 0x41,
	0x44, 0x44, 0x52, 0x5f, 0x57, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x52, 0x69,
	0x70, 0x41, 0x64, 0x64, 0x72, 0x57, 0x54, 0x79, 0x70, 0x65, 0x48, 0x17, 0x52, 0x0a, 0x52, 0x49,
	0x50, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x5f, 0x57, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x0a, 0x53,
	0x48, 0x49, 0x46, 0x54, 0x5f, 0x4f, 0x50, 0x5f, 0x58, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x53, 0x68, 0x69, 0x66, 0x74, 0x4f, 0x70, 0x58, 0x54, 0x79, 0x70, 0x65, 0x48, 0x18,
	0x52, 0x0a, 0x53, 0x48, 0x49, 0x46, 0x54, 0x5f, 0x4f, 0x50, 0x5f, 0x58, 0x88, 0x01, 0x01, 0x12,
	0x32, 0x0a, 0x0a, 0x53, 0x48, 0x49, 0x46, 0x54, 0x5f, 0x4f, 0x50, 0x5f, 0x59, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x53, 0x68, 0x69, 0x66, 0x74, 0x4f, 0x70, 0x59, 0x54, 0x79,
	0x70, 0x65, 0x48, 0x19, 0x52, 0x0a, 0x53, 0x48, 0x49, 0x46, 0x54, 0x5f, 0x4f, 0x50, 0x5f, 0x59,
	0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x0a, 0x53, 0x48, 0x49, 0x46, 0x54, 0x5f, 0x4f, 0x50, 0x5f,
	0x5a, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x53, 0x68, 0x69, 0x66, 0x74, 0x4f,
	0x70, 0x5a, 0x54, 0x79, 0x70, 0x65, 0x48, 0x1a, 0x52, 0x0a, 0x53, 0x48, 0x49, 0x46, 0x54, 0x5f,
	0x4f, 0x50, 0x5f, 0x5a, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x08, 0x4f, 0x46, 0x46, 0x53, 0x45,
	0x54, 0x5f, 0x58, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x58, 0x54, 0x79, 0x70, 0x65, 0x48, 0x1b, 0x52, 0x08, 0x4f, 0x46, 0x46, 0x53, 0x45,
	0x54, 0x5f, 0x58, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x08, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54,
	0x5f, 0x59, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x59, 0x54, 0x79, 0x70, 0x65, 0x48, 0x1c, 0x52, 0x08, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54,
	0x5f, 0x59, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x08, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54, 0x5f,
	0x5a, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x5a, 0x54, 0x79, 0x70, 0x65, 0x48, 0x1d, 0x52, 0x08, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54, 0x5f,
	0x5a, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x09, 0x44, 0x49, 0x53, 0x54, 0x5f, 0x4f, 0x50, 0x5f,
	0x58, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x4f, 0x70,
	0x58, 0x54, 0x79, 0x70, 0x65, 0x48, 0x1e, 0x52, 0x09, 0x44, 0x49, 0x53, 0x54, 0x5f, 0x4f, 0x50,
	0x5f, 0x58, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x09, 0x44, 0x49, 0x53, 0x54, 0x5f, 0x4f, 0x50,
	0x5f, 0x59, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x4f,
	0x70, 0x59, 0x54, 0x79, 0x70, 0x65, 0x48, 0x1f, 0x52, 0x09, 0x44, 0x49, 0x53, 0x54, 0x5f, 0x4f,
	0x50, 0x5f, 0x59, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x09, 0x44, 0x49, 0x53, 0x54, 0x5f, 0x4f,
	0x50, 0x5f, 0x5a, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x44, 0x69, 0x73, 0x74,
	0x4f, 0x70, 0x5a, 0x54, 0x79, 0x70, 0x65, 0x48, 0x20, 0x52, 0x09, 0x44, 0x49, 0x53, 0x54, 0x5f,
	0x4f, 0x50, 0x5f, 0x5a, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0e, 0x41, 0x4c, 0x49, 0x47, 0x4e,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x74, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x48, 0x21, 0x52, 0x0e, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x42, 0x59, 0x54, 0x45, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0e, 0x41, 0x4c, 0x49, 0x47,
	0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x57, 0x4f, 0x52, 0x44, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x57, 0x6f, 0x72, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x48, 0x22, 0x52, 0x0e, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x57, 0x4f, 0x52, 0x44, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0e, 0x41, 0x4c, 0x49,
	0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x18, 0x25, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x6e,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x48, 0x23, 0x52, 0x0e, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x88, 0x01, 0x01, 0x12, 0x56, 0x0a, 0x16, 0x41, 0x4c,
	0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x33, 0x32, 0x5f,
	0x49, 0x45, 0x45, 0x45, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x41, 0x6c, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32, 0x49, 0x65, 0x65,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x24, 0x52, 0x16, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x33, 0x32, 0x5f, 0x49, 0x45, 0x45, 0x45, 0x88,
	0x01, 0x01, 0x12, 0x56, 0x0a, 0x16, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x46, 0x4c, 0x4f, 0x41, 0x54, 0x36, 0x34, 0x5f, 0x49, 0x45, 0x45, 0x45, 0x18, 0x27, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x36, 0x34, 0x49, 0x65, 0x65, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x25, 0x52,
	0x16, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x4c, 0x4f, 0x41, 0x54,
	0x36, 0x34, 0x5f, 0x49, 0x45, 0x45, 0x45, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x08, 0x52, 0x45,
	0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x18, 0x28, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x52, 0x45, 0x53,
	0x45, 0x52, 0x56, 0x45, 0x44, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x46, 0x4e, 0x43, 0x5f, 0x56, 0x41,
	0x4c, 0x55, 0x45, 0x53, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x41, 0x58, 0x49, 0x53,
	0x5f, 0x50, 0x54, 0x53, 0x5f, 0x58, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x41, 0x58, 0x49, 0x53, 0x5f,
	0x50, 0x54, 0x53, 0x5f, 0x59, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x41, 0x58, 0x49, 0x53, 0x5f, 0x50,
	0x54, 0x53, 0x5f, 0x5a, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x41, 0x58, 0x49, 0x53, 0x5f, 0x52, 0x45,
	0x53, 0x43, 0x41, 0x4c, 0x45, 0x5f, 0x58, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x41, 0x58, 0x49, 0x53,
	0x5f, 0x52, 0x45, 0x53, 0x43, 0x41, 0x4c, 0x45, 0x5f, 0x59, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x41,
	0x58, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x43, 0x41, 0x4c, 0x45, 0x5f, 0x5a, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x4e, 0x4f, 0x5f, 0x41, 0x58, 0x49, 0x53, 0x5f, 0x50, 0x54, 0x53, 0x5f, 0x58, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x4e, 0x4f, 0x5f, 0x41, 0x58, 0x49, 0x53, 0x5f, 0x50, 0x54, 0x53, 0x5f,
	0x59, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x4e, 0x4f, 0x5f, 0x41, 0x58, 0x49, 0x53, 0x5f, 0x50, 0x54,
	0x53, 0x5f, 0x5a, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x4e, 0x4f, 0x5f, 0x52, 0x45, 0x53, 0x43, 0x41,
	0x4c, 0x45, 0x5f, 0x58, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x4e, 0x4f, 0x5f, 0x52, 0x45, 0x53, 0x43,
	0x41, 0x4c, 0x45, 0x5f, 0x59, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x4e, 0x4f, 0x5f, 0x52, 0x45, 0x53,
	0x43, 0x41, 0x4c, 0x45, 0x5f, 0x5a, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x46, 0x49, 0x58, 0x5f, 0x4e,
	0x4f, 0x5f, 0x41, 0x58, 0x49, 0x53, 0x5f, 0x50, 0x54, 0x53, 0x5f, 0x58, 0x42, 0x14, 0x0a, 0x12,
	0x5f, 0x46, 0x49, 0x58, 0x5f, 0x4e, 0x4f, 0x5f, 0x41, 0x58, 0x49, 0x53, 0x5f, 0x50, 0x54, 0x53,
	0x5f, 0x59, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x46, 0x49, 0x58, 0x5f, 0x4e, 0x4f, 0x5f, 0x41, 0x58,
	0x49, 0x53, 0x5f, 0x50, 0x54, 0x53, 0x5f, 0x5a, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x53, 0x52, 0x43,
	0x5f, 0x41, 0x44, 0x44, 0x52, 0x5f, 0x58, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x53, 0x52, 0x43, 0x5f,
	0x41, 0x44, 0x44, 0x52, 0x5f, 0x59, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x53, 0x52, 0x43, 0x5f, 0x41,
	0x44, 0x44, 0x52, 0x5f, 0x5a, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x52, 0x49, 0x50, 0x5f, 0x41, 0x44,
	0x44, 0x52, 0x5f, 0x58, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x52, 0x49, 0x50, 0x5f, 0x41, 0x44, 0x44,
	0x52, 0x5f, 0x59, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x52, 0x49, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x52,
	0x5f, 0x5a, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x52, 0x49, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x5f,
	0x57, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x53, 0x48, 0x49, 0x46, 0x54, 0x5f, 0x4f, 0x50, 0x5f, 0x58,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x53, 0x48, 0x49, 0x46, 0x54, 0x5f, 0x4f, 0x50, 0x5f, 0x59, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x53, 0x48, 0x49, 0x46, 0x54, 0x5f, 0x4f, 0x50, 0x5f, 0x5a, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54, 0x5f, 0x58, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x4f, 0x46, 0x46, 0x53, 0x45, 0x54, 0x5f, 0x59, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x4f, 0x46, 0x46,
	0x53, 0x45, 0x54, 0x5f, 0x5a, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x5f, 0x4f,
	0x50, 0x5f, 0x58, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x5f, 0x4f, 0x50, 0x5f,
	0x59, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x5f, 0x4f, 0x50, 0x5f, 0x5a, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x59,
	0x54, 0x45, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x57, 0x4f, 0x52, 0x44, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x41, 0x4c, 0x49,
	0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x33, 0x32, 0x5f, 0x49,
	0x45, 0x45, 0x45, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x36, 0x34, 0x5f, 0x49, 0x45, 0x45, 0x45, 0x22, 0x43,
	0x0a, 0x15, 0x52, 0x65, 0x66, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x0a, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x22, 0x3a, 0x0a, 0x0c, 0x52, 0x65, 0x66, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x0a, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0a, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22,
	0x40, 0x0a, 0x12, 0x52, 0x65, 0x66, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x0a, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x22, 0x36, 0x0a, 0x14, 0x52, 0x65, 0x66, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x2d, 0x0a, 0x0b, 0x52, 0x65, 0x66,
	0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x55, 0x6e, 0x69, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x55, 0x6e, 0x69, 0x74, 0x22, 0x5f, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x49, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29,
	0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x44, 0x61, 0x74, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x37, 0x0a, 0x0e, 0x52, 0x69, 0x67,
	0x68, 0x74, 0x53, 0x68, 0x69, 0x66, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x08, 0x42,
	0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x4c, 0x6f, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x42, 0x69, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x5f, 0x0a, 0x0c, 0x52, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x57, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x24, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x49, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x5f, 0x0a, 0x0c, 0x52, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x58, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x49, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x08, 0x44, 0x61, 0x74,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x44, 0x61, 0x74, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x5f, 0x0a, 0x0c, 0x52, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x59,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x49, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x08, 0x44, 0x61,
	0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x44, 0x61, 0x74,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x22, 0x5f, 0x0a, 0x0c, 0x52, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72,
	0x5a, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x49, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x08, 0x44,
	0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x44, 0x61,
	0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x22, 0xa5, 0x01, 0x0a, 0x0c, 0x52, 0x6f, 0x6f, 0x74, 0x4e,
	0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x0d, 0x41, 0x53, 0x41, 0x50, 0x32,
	0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x41, 0x53, 0x41, 0x50, 0x32, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0d, 0x41, 0x53, 0x41, 0x50, 0x32, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e,
	0x12, 0x34, 0x0a, 0x0c, 0x41, 0x32, 0x4d, 0x4c, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x41, 0x32, 0x4d, 0x4c, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x41, 0x32, 0x4d, 0x4c, 0x5f, 0x56,
	0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x12, 0x26, 0x0a, 0x07, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43,
	0x54, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x22, 0x0a,
	0x0a, 0x08, 0x52, 0x6f, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x5f, 0x0a, 0x0c, 0x53, 0x68,
	0x69, 0x66, 0x74, 0x4f, 0x70, 0x58, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x08, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x49,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x29, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x22, 0x5f, 0x0a, 0x0c, 0x53,
	0x68, 0x69, 0x66, 0x74, 0x4f, 0x70, 0x59, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x08, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e,
	0x49, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x29, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x22, 0x5f, 0x0a, 0x0c,
	0x53, 0x68, 0x69, 0x66, 0x74, 0x4f, 0x70, 0x5a, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x08,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08,
	0x2e, 0x49, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x22, 0xbf, 0x02,
	0x0a, 0x0f, 0x53, 0x69, 0x45, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x20, 0x0a, 0x06, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x08, 0x2e, 0x49, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x04, 0x4d, 0x61, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x08, 0x2e, 0x49, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x4d, 0x61, 0x73,
	0x73, 0x12, 0x1c, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x08, 0x2e, 0x49, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x32, 0x0a, 0x0f, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x49, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0f, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x0b, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x49, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0b, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x36, 0x0a, 0x11, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x66, 0x53, 0x75, 0x62, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x49, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x66, 0x53, 0x75,
	0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x11, 0x4c, 0x75, 0x6d, 0x69, 0x6e,
	0x6f, 0x75, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x08, 0x2e, 0x49, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x4c, 0x75,
	0x6d, 0x69, 0x6e, 0x6f, 0x75, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x22,
	0x10, 0x0a, 0x0e, 0x53, 0x69, 0x67, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x5f, 0x0a, 0x0c, 0x53, 0x72, 0x63, 0x41, 0x64, 0x64, 0x72, 0x58, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x24, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x49, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x5f, 0x0a, 0x0c, 0x53, 0x72, 0x63, 0x41, 0x64, 0x64, 0x72, 0x59, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x24, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x49, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x5f, 0x0a, 0x0c, 0x53, 0x72, 0x63, 0x41, 0x64, 0x64, 0x72, 0x5a, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x49, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x08, 0x44, 0x61, 0x74,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x44, 0x61, 0x74, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x30, 0x0a, 0x0e, 0x53, 0x52, 0x65, 0x63, 0x4c, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x3d, 0x0a, 0x0f, 0x53, 0x75, 0x62, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x0a, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x3a, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x0a, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x22, 0x3f, 0x0a, 0x0c, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x2f, 0x0a, 0x0c, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x72, 0x22, 0x58, 0x0a, 0x12, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x60, 0x0a, 0x12,
	0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x26, 0x0a, 0x08, 0x47, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x08, 0x47, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x06, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0xfa,
	0x02, 0x0a, 0x08, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x0e, 0x4c,
	0x6f, 0x6e, 0x67, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0e, 0x4c, 0x6f, 0x6e, 0x67, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x25, 0x0a, 0x07, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x0c, 0x53,
	0x49, 0x5f, 0x45, 0x58, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x53, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x53, 0x69, 0x45, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x53, 0x49, 0x5f, 0x45, 0x58, 0x50, 0x4f, 0x4e, 0x45,
	0x4e, 0x54, 0x53, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x08, 0x52, 0x45, 0x46, 0x5f, 0x55, 0x4e,
	0x49, 0x54, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x52, 0x65, 0x66, 0x55, 0x6e,
	0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x01, 0x52, 0x08, 0x52, 0x45, 0x46, 0x5f, 0x55, 0x4e,
	0x49, 0x54, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x0f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x43, 0x4f,
	0x4e, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x48, 0x02, 0x52, 0x0f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x56,
	0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x53, 0x49,
	0x5f, 0x45, 0x58, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x53, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x52,
	0x45, 0x46, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x55, 0x4e, 0x49, 0x54,
	0x5f, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x22, 0xab, 0x01, 0x0a, 0x0e,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c,
	0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0b, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x09,
	0x52, 0x45, 0x46, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x52, 0x65, 0x66, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x52, 0x45, 0x46, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x12, 0x30, 0x0a, 0x09, 0x52, 0x45, 0x41,
	0x44, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x52,
	0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x09, 0x52,
	0x45, 0x41, 0x44, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x52, 0x45, 0x41, 0x44, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x22, 0x33, 0x0a, 0x08, 0x55, 0x73, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x35,
	0x0a, 0x0e, 0x56, 0x61, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x23, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x4c, 0x6f, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xb1, 0x01, 0x0a, 0x15, 0x56, 0x61, 0x72, 0x43, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1e, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x30, 0x0a, 0x0d, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0d, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x36, 0x0a, 0x0b, 0x56, 0x41, 0x52, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x56, 0x61, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x56, 0x41, 0x52, 0x5f, 0x41,
	0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x56, 0x41,
	0x52, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x22, 0xec, 0x02, 0x0a, 0x10, 0x56, 0x61,
	0x72, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e,
	0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33,
	0x0a, 0x0e, 0x4c, 0x6f, 0x6e, 0x67, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0e, 0x4c, 0x6f, 0x6e, 0x67, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x56, 0x41, 0x52, 0x5f, 0x4d, 0x45, 0x41,
	0x53, 0x55, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x56, 0x61, 0x72, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x56, 0x41, 0x52, 0x5f, 0x4d, 0x45, 0x41, 0x53, 0x55,
	0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x88, 0x01, 0x01, 0x12, 0x68, 0x0a, 0x1c, 0x56, 0x41, 0x52,
	0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x41,
	0x43, 0x54, 0x45, 0x52, 0x49, 0x53, 0x54, 0x49, 0x43, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x56, 0x61, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65,
	0x48, 0x01, 0x52, 0x1c, 0x56, 0x41, 0x52, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x41, 0x43, 0x54, 0x45, 0x52, 0x49, 0x53, 0x54, 0x49, 0x43,
	0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x56, 0x41, 0x52, 0x5f, 0x4d, 0x45, 0x41, 0x53,
	0x55, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x56, 0x41, 0x52, 0x5f,
	0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x41, 0x43,
	0x54, 0x45, 0x52, 0x49, 0x53, 0x54, 0x49, 0x43, 0x22, 0xf4, 0x01, 0x0a, 0x14, 0x56, 0x61, 0x72,
	0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x43, 0x6f, 0x6d, 0x62, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x65, 0x0a, 0x1b, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x56, 0x61, 0x72, 0x46, 0x6f, 0x72, 0x62,
	0x69, 0x64, 0x64, 0x65, 0x6e, 0x43, 0x6f, 0x6d, 0x62, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x72,
	0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x1b, 0x43, 0x72, 0x69,
	0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72,
	0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x75, 0x0a, 0x0d, 0x43, 0x72, 0x69, 0x74,
	0x65, 0x72, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x0d, 0x43, 0x72, 0x69,
	0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x43, 0x72,
	0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x0e, 0x43,
	0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0e, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0xef, 0x02, 0x0a, 0x11, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x0d, 0x56, 0x41, 0x52, 0x5f, 0x53, 0x45, 0x50,
	0x41, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x56,
	0x61, 0x72, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x48,
	0x00, 0x52, 0x0d, 0x56, 0x41, 0x52, 0x5f, 0x53, 0x45, 0x50, 0x41, 0x52, 0x41, 0x54, 0x4f, 0x52,
	0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x0a, 0x56, 0x41, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x49, 0x4e,
	0x47, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x56, 0x61, 0x72, 0x4e, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x48, 0x01, 0x52, 0x0a, 0x56, 0x41, 0x52, 0x5f, 0x4e,
	0x41, 0x4d, 0x49, 0x4e, 0x47, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x0d, 0x56, 0x41, 0x52, 0x5f,
	0x43, 0x52, 0x49, 0x54, 0x45, 0x52, 0x49, 0x4f, 0x4e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x56, 0x61, 0x72, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0d, 0x56, 0x41, 0x52, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x45, 0x52, 0x49, 0x4f,
	0x4e, 0x12, 0x45, 0x0a, 0x12, 0x56, 0x41, 0x52, 0x5f, 0x46, 0x4f, 0x52, 0x42, 0x49, 0x44, 0x44,
	0x45, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x42, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x56, 0x61, 0x72, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x43, 0x6f, 0x6d, 0x62,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x12, 0x56, 0x41, 0x52, 0x5f, 0x46, 0x4f, 0x52, 0x42, 0x49, 0x44,
	0x44, 0x45, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x42, 0x12, 0x46, 0x0a, 0x12, 0x56, 0x41, 0x52, 0x5f,
	0x43, 0x48, 0x41, 0x52, 0x41, 0x43, 0x54, 0x45, 0x52, 0x49, 0x53, 0x54, 0x49, 0x43, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x56, 0x61, 0x72, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x12, 0x56, 0x41,
	0x52, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x41, 0x43, 0x54, 0x45, 0x52, 0x49, 0x53, 0x54, 0x49, 0x43,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x56, 0x41, 0x52, 0x5f, 0x53, 0x45, 0x50, 0x41, 0x52, 0x41, 0x54,
	0x4f, 0x52, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x56, 0x41, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x49, 0x4e,
	0x47, 0x22, 0x34, 0x0a, 0x12, 0x56, 0x61, 0x72, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x21, 0x0a, 0x0d, 0x56, 0x61, 0x72, 0x4e, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x54, 0x61, 0x67, 0x22, 0x40, 0x0a, 0x1e, 0x56, 0x61,
	0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x3d, 0x0a, 0x10,
	0x56, 0x61, 0x72, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x29, 0x0a, 0x09, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x09, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x48, 0x0a, 0x0b, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x11, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x11, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x76, 0x0a, 0x19, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x25, 0x0a, 0x07, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x07, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x12, 0x32, 0x0a, 0x0e, 0x43, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x43,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x22, 0x45, 0x0a,
	0x0b, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x10,
	0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x10, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x0e, 0x5a, 0x0c, 0x2e, 0x2f, 0x2e, 0x2e, 0x2f, 0x70, 0x6b, 0x67,
	0x2f, 0x61, 0x32, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protobufs_A2L_proto_rawDescOnce sync.Once
	file_protobufs_A2L_proto_rawDescData = file_protobufs_A2L_proto_rawDesc
)

func file_protobufs_A2L_proto_rawDescGZIP() []byte {
	file_protobufs_A2L_proto_rawDescOnce.Do(func() {
		file_protobufs_A2L_proto_rawDescData = protoimpl.X.CompressGZIP(file_protobufs_A2L_proto_rawDescData)
	})
	return file_protobufs_A2L_proto_rawDescData
}

var file_protobufs_A2L_proto_msgTypes = make([]protoimpl.MessageInfo, 157)
var file_protobufs_A2L_proto_goTypes = []interface{}{
	(*AddrTypeType)(nil),                                  // 0: AddrTypeType
	(*DataTypeType)(nil),                                  // 1: DataTypeType
	(*IndexOrderType)(nil),                                // 2: IndexOrderType
	(*A2MLType)(nil),                                      // 3: A2MLType
	(*A2MLVersionType)(nil),                               // 4: A2MLVersionType
	(*AddrEpkType)(nil),                                   // 5: AddrEpkType
	(*AlignmentByteType)(nil),                             // 6: AlignmentByteType
	(*AlignmentFloat32IeeeType)(nil),                      // 7: AlignmentFloat32IeeeType
	(*AlignmentFloat64IeeeType)(nil),                      // 8: AlignmentFloat64IeeeType
	(*AlignmentLongType)(nil),                             // 9: AlignmentLongType
	(*AlignmentWordType)(nil),                             // 10: AlignmentWordType
	(*AnnotationLabelType)(nil),                           // 11: AnnotationLabelType
	(*AnnotationOriginType)(nil),                          // 12: AnnotationOriginType
	(*AnnotationTextType)(nil),                            // 13: AnnotationTextType
	(*AnnotationType)(nil),                                // 14: AnnotationType
	(*ArraySizeType)(nil),                                 // 15: ArraySizeType
	(*ASAP2VersionType)(nil),                              // 16: ASAP2VersionType
	(*AxisDescrType)(nil),                                 // 17: AxisDescrType
	(*AxisPtsRefType)(nil),                                // 18: AxisPtsRefType
	(*AxisPtsType)(nil),                                   // 19: AxisPtsType
	(*AxisPtsXType)(nil),                                  // 20: AxisPtsXType
	(*AxisPtsYType)(nil),                                  // 21: AxisPtsYType
	(*AxisPtsZType)(nil),                                  // 22: AxisPtsZType
	(*AxisRescaleXType)(nil),                              // 23: AxisRescaleXType
	(*AxisRescaleYType)(nil),                              // 24: AxisRescaleYType
	(*AxisRescaleZType)(nil),                              // 25: AxisRescaleZType
	(*BitOperationType)(nil),                              // 26: BitOperationType
	(*BitMaskType)(nil),                                   // 27: BitMaskType
	(*ByteOrderType)(nil),                                 // 28: ByteOrderType
	(*CalibrationAccessType)(nil),                         // 29: CalibrationAccessType
	(*CalibrationHandleType)(nil),                         // 30: CalibrationHandleType
	(*CalibrationMethodType)(nil),                         // 31: CalibrationMethodType
	(*CharacteristicType)(nil),                            // 32: CharacteristicType
	(*CoeffsType)(nil),                                    // 33: CoeffsType
	(*ComparisonQuantityType)(nil),                        // 34: ComparisonQuantityType
	(*CompuMethodType)(nil),                               // 35: CompuMethodType
	(*CompuTabRefType)(nil),                               // 36: CompuTabRefType
	(*CompuTabType)(nil),                                  // 37: CompuTabType
	(*CompuVTabRangeType)(nil),                            // 38: CompuVTabRangeType
	(*CompuVTabType)(nil),                                 // 39: CompuVTabType
	(*CpuTypeType)(nil),                                   // 40: CpuTypeType
	(*CurveAxisRefType)(nil),                              // 41: CurveAxisRefType
	(*CustomerNoType)(nil),                                // 42: CustomerNoType
	(*CustomerType)(nil),                                  // 43: CustomerType
	(*DataSizeType)(nil),                                  // 44: DataSizeType
	(*DefaultValueType)(nil),                              // 45: DefaultValueType
	(*DefCharacteristicType)(nil),                         // 46: DefCharacteristicType
	(*DependentCharacteristicType)(nil),                   // 47: DependentCharacteristicType
	(*DepositType)(nil),                                   // 48: DepositType
	(*DisplayIdentifierType)(nil),                         // 49: DisplayIdentifierType
	(*DistOpXType)(nil),                                   // 50: DistOpXType
	(*DistOpYType)(nil),                                   // 51: DistOpYType
	(*DistOpZType)(nil),                                   // 52: DistOpZType
	(*EcuAddressExtensionType)(nil),                       // 53: EcuAddressExtensionType
	(*EcuAddressType)(nil),                                // 54: EcuAddressType
	(*EcuCalibrationOffsetType)(nil),                      // 55: EcuCalibrationOffsetType
	(*EcuType)(nil),                                       // 56: EcuType
	(*EpkType)(nil),                                       // 57: EpkType
	(*ErrorMaskType)(nil),                                 // 58: ErrorMaskType
	(*ExtendedLimitsType)(nil),                            // 59: ExtendedLimitsType
	(*FixAxisParDistType)(nil),                            // 60: FixAxisParDistType
	(*FixAxisParListType)(nil),                            // 61: FixAxisParListType
	(*FixAxisParType)(nil),                                // 62: FixAxisParType
	(*FixNoAxisPtsXType)(nil),                             // 63: FixNoAxisPtsXType
	(*FixNoAxisPtsYType)(nil),                             // 64: FixNoAxisPtsYType
	(*FixNoAxisPtsZType)(nil),                             // 65: FixNoAxisPtsZType
	(*FncValuesType)(nil),                                 // 66: FncValuesType
	(*FormatType)(nil),                                    // 67: FormatType
	(*FormulaInvType)(nil),                                // 68: FormulaInvType
	(*FormulaType)(nil),                                   // 69: FormulaType
	(*FrameMeasurementType)(nil),                          // 70: FrameMeasurementType
	(*FrameType)(nil),                                     // 71: FrameType
	(*FunctionListType)(nil),                              // 72: FunctionListType
	(*FunctionType)(nil),                                  // 73: FunctionType
	(*FunctionVersionType)(nil),                           // 74: FunctionVersionType
	(*GroupType)(nil),                                     // 75: GroupType
	(*GuardRailsType)(nil),                                // 76: GuardRailsType
	(*HeaderType)(nil),                                    // 77: HeaderType
	(*IdentificationType)(nil),                            // 78: IdentificationType
	(*InMeasurementType)(nil),                             // 79: InMeasurementType
	(*LeftShiftType)(nil),                                 // 80: LeftShiftType
	(*LocMeasurementType)(nil),                            // 81: LocMeasurementType
	(*MapListType)(nil),                                   // 82: MapListType
	(*MatrixDimType)(nil),                                 // 83: MatrixDimType
	(*MaxGradType)(nil),                                   // 84: MaxGradType
	(*MaxRefreshType)(nil),                                // 85: MaxRefreshType
	(*MeasurementType)(nil),                               // 86: MeasurementType
	(*MemoryLayoutType)(nil),                              // 87: MemoryLayoutType
	(*MemorySegmentType)(nil),                             // 88: MemorySegmentType
	(*ModCommonType)(nil),                                 // 89: ModCommonType
	(*ModParType)(nil),                                    // 90: ModParType
	(*ModuleType)(nil),                                    // 91: ModuleType
	(*MonotonyType)(nil),                                  // 92: MonotonyType
	(*NoAxisPtsXType)(nil),                                // 93: NoAxisPtsXType
	(*NoAxisPtsYType)(nil),                                // 94: NoAxisPtsYType
	(*NoAxisPtsZType)(nil),                                // 95: NoAxisPtsZType
	(*NoOfInterfacesType)(nil),                            // 96: NoOfInterfacesType
	(*NoRescaleXType)(nil),                                // 97: NoRescaleXType
	(*NoRescaleYType)(nil),                                // 98: NoRescaleYType
	(*NoRescaleZType)(nil),                                // 99: NoRescaleZType
	(*NumberType)(nil),                                    // 100: NumberType
	(*OffsetXType)(nil),                                   // 101: OffsetXType
	(*OffsetYType)(nil),                                   // 102: OffsetYType
	(*OffsetZType)(nil),                                   // 103: OffsetZType
	(*OutMeasurementType)(nil),                            // 104: OutMeasurementType
	(*PhoneNoType)(nil),                                   // 105: PhoneNoType
	(*ProjectNoType)(nil),                                 // 106: ProjectNoType
	(*ProjectType)(nil),                                   // 107: ProjectType
	(*ReadOnlyType)(nil),                                  // 108: ReadOnlyType
	(*ReadWriteType)(nil),                                 // 109: ReadWriteType
	(*RecordLayoutType)(nil),                              // 110: RecordLayoutType
	(*RefCharacteristicType)(nil),                         // 111: RefCharacteristicType
	(*RefGroupType)(nil),                                  // 112: RefGroupType
	(*RefMeasurementType)(nil),                            // 113: RefMeasurementType
	(*RefMemorySegmentType)(nil),                          // 114: RefMemorySegmentType
	(*RefUnitType)(nil),                                   // 115: RefUnitType
	(*ReservedType)(nil),                                  // 116: ReservedType
	(*RightShiftType)(nil),                                // 117: RightShiftType
	(*RipAddrWType)(nil),                                  // 118: RipAddrWType
	(*RipAddrXType)(nil),                                  // 119: RipAddrXType
	(*RipAddrYType)(nil),                                  // 120: RipAddrYType
	(*RipAddrZType)(nil),                                  // 121: RipAddrZType
	(*RootNodeType)(nil),                                  // 122: RootNodeType
	(*RootType)(nil),                                      // 123: RootType
	(*ShiftOpXType)(nil),                                  // 124: ShiftOpXType
	(*ShiftOpYType)(nil),                                  // 125: ShiftOpYType
	(*ShiftOpZType)(nil),                                  // 126: ShiftOpZType
	(*SiExponentsType)(nil),                               // 127: SiExponentsType
	(*SignExtendType)(nil),                                // 128: SignExtendType
	(*SrcAddrXType)(nil),                                  // 129: SrcAddrXType
	(*SrcAddrYType)(nil),                                  // 130: SrcAddrYType
	(*SrcAddrZType)(nil),                                  // 131: SrcAddrZType
	(*SRecLayoutType)(nil),                                // 132: SRecLayoutType
	(*SubFunctionType)(nil),                               // 133: SubFunctionType
	(*SubGroupType)(nil),                                  // 134: SubGroupType
	(*SupplierType)(nil),                                  // 135: SupplierType
	(*SystemConstantType)(nil),                            // 136: SystemConstantType
	(*UnitConversionType)(nil),                            // 137: UnitConversionType
	(*UnitType)(nil),                                      // 138: UnitType
	(*UserRightsType)(nil),                                // 139: UserRightsType
	(*UserType)(nil),                                      // 140: UserType
	(*VarAddressType)(nil),                                // 141: VarAddressType
	(*VarCharacteristicType)(nil),                         // 142: VarCharacteristicType
	(*VarCriterionType)(nil),                              // 143: VarCriterionType
	(*VarForbiddenCombType)(nil),                          // 144: VarForbiddenCombType
	(*VariantCodingType)(nil),                             // 145: VariantCodingType
	(*VarMeasurementType)(nil),                            // 146: VarMeasurementType
	(*VarNamingType)(nil),                                 // 147: VarNamingType
	(*VarSelectionCharacteristicType)(nil),                // 148: VarSelectionCharacteristicType
	(*VarSeparatorType)(nil),                              // 149: VarSeparatorType
	(*VersionType)(nil),                                   // 150: VersionType
	(*VirtualCharacteristicType)(nil),                     // 151: VirtualCharacteristicType
	(*VirtualType)(nil),                                   // 152: VirtualType
	(*CompuTabType_InValOutValType)(nil),                  // 153: CompuTabType.InValOutValType
	(*CompuVTabRangeType_InValMinInValMaxOutValType)(nil), // 154: CompuVTabRangeType.InValMinInValMaxOutValType
	(*CompuVTabType_InValOutValType)(nil),                 // 155: CompuVTabType.InValOutValType
	(*VarForbiddenCombType_CriterionType)(nil),            // 156: VarForbiddenCombType.CriterionType
	(*Declaration)(nil),                                   // 157: declaration
	(*IntType)(nil),                                       // 158: IntType
	(*LongType)(nil),                                      // 159: LongType
	(*StringType)(nil),                                    // 160: StringType
	(*IdentType)(nil),                                     // 161: IdentType
	(*FloatType)(nil),                                     // 162: FloatType
	(*IfDataType)(nil),                                    // 163: IfDataType
}
var file_protobufs_A2L_proto_depIdxs = []int32{
	157, // 0: A2MLType.Declaration:type_name -> declaration
	158, // 1: A2MLVersionType.VersionNo:type_name -> IntType
	158, // 2: A2MLVersionType.UpgradeNo:type_name -> IntType
	159, // 3: AddrEpkType.Address:type_name -> LongType
	158, // 4: AlignmentByteType.AlignmentBorder:type_name -> IntType
	158, // 5: AlignmentFloat32IeeeType.AlignmentBorder:type_name -> IntType
	158, // 6: AlignmentFloat64IeeeType.AlignmentBorder:type_name -> IntType
	158, // 7: AlignmentLongType.AlignmentBorder:type_name -> IntType
	158, // 8: AlignmentWordType.AlignmentBorder:type_name -> IntType
	160, // 9: AnnotationLabelType.Label:type_name -> StringType
	160, // 10: AnnotationOriginType.Origin:type_name -> StringType
	160, // 11: AnnotationTextType.AnnotationText:type_name -> StringType
	11,  // 12: AnnotationType.ANNOTATION_LABEL:type_name -> AnnotationLabelType
	12,  // 13: AnnotationType.ANNOTATION_ORIGIN:type_name -> AnnotationOriginType
	13,  // 14: AnnotationType.ANNOTATION_TEXT:type_name -> AnnotationTextType
	158, // 15: ArraySizeType.Number:type_name -> IntType
	158, // 16: ASAP2VersionType.VersionNo:type_name -> IntType
	158, // 17: ASAP2VersionType.UpgradeNo:type_name -> IntType
	161, // 18: AxisDescrType.InputQuantity:type_name -> IdentType
	161, // 19: AxisDescrType.Conversion:type_name -> IdentType
	158, // 20: AxisDescrType.MaxAxisPoints:type_name -> IntType
	162, // 21: AxisDescrType.LowerLimit:type_name -> FloatType
	162, // 22: AxisDescrType.UpperLimit:type_name -> FloatType
	108, // 23: AxisDescrType.READ_ONLY:type_name -> ReadOnlyType
	67,  // 24: AxisDescrType.FORMAT:type_name -> FormatType
	14,  // 25: AxisDescrType.ANNOTATION:type_name -> AnnotationType
	18,  // 26: AxisDescrType.AXIS_PTS_REF:type_name -> AxisPtsRefType
	84,  // 27: AxisDescrType.MAX_GRAD:type_name -> MaxGradType
	92,  // 28: AxisDescrType.MONOTONY:type_name -> MonotonyType
	28,  // 29: AxisDescrType.BYTE_ORDER:type_name -> ByteOrderType
	59,  // 30: AxisDescrType.EXTENDED_LIMITS:type_name -> ExtendedLimitsType
	62,  // 31: AxisDescrType.FIX_AXIS_PAR:type_name -> FixAxisParType
	60,  // 32: AxisDescrType.FIX_AXIS_PAR_DIST:type_name -> FixAxisParDistType
	61,  // 33: AxisDescrType.FIX_AXIS_PAR_LIST:type_name -> FixAxisParListType
	48,  // 34: AxisDescrType.DEPOSIT:type_name -> DepositType
	41,  // 35: AxisDescrType.CURVE_AXIS_REF:type_name -> CurveAxisRefType
	161, // 36: AxisPtsRefType.AxisPoints:type_name -> IdentType
	161, // 37: AxisPtsType.Name:type_name -> IdentType
	160, // 38: AxisPtsType.LongIdentifier:type_name -> StringType
	159, // 39: AxisPtsType.Address:type_name -> LongType
	161, // 40: AxisPtsType.InputQuantity:type_name -> IdentType
	161, // 41: AxisPtsType.DepositR:type_name -> IdentType
	162, // 42: AxisPtsType.MaxDiff:type_name -> FloatType
	161, // 43: AxisPtsType.Conversion:type_name -> IdentType
	158, // 44: AxisPtsType.MaxAxisPoints:type_name -> IntType
	162, // 45: AxisPtsType.LowerLimit:type_name -> FloatType
	162, // 46: AxisPtsType.UpperLimit:type_name -> FloatType
	49,  // 47: AxisPtsType.DISPLAY_IDENTIFIER:type_name -> DisplayIdentifierType
	108, // 48: AxisPtsType.READ_ONLY:type_name -> ReadOnlyType
	67,  // 49: AxisPtsType.FORMAT:type_name -> FormatType
	48,  // 50: AxisPtsType.DEPOSIT:type_name -> DepositType
	28,  // 51: AxisPtsType.BYTE_ORDER:type_name -> ByteOrderType
	72,  // 52: AxisPtsType.FUNCTION_LIST:type_name -> FunctionListType
	114, // 53: AxisPtsType.REF_MEMORY_SEGMENT:type_name -> RefMemorySegmentType
	76,  // 54: AxisPtsType.GUARD_RAILS:type_name -> GuardRailsType
	59,  // 55: AxisPtsType.EXTENDED_LIMITS:type_name -> ExtendedLimitsType
	14,  // 56: AxisPtsType.ANNOTATION:type_name -> AnnotationType
	163, // 57: AxisPtsType.IF_DATA:type_name -> IfDataType
	29,  // 58: AxisPtsType.CALIBRATION_ACCESS:type_name -> CalibrationAccessType
	53,  // 59: AxisPtsType.ECU_ADDRESS_EXTENSION:type_name -> EcuAddressExtensionType
	158, // 60: AxisPtsXType.Position:type_name -> IntType
	1,   // 61: AxisPtsXType.DataType:type_name -> DataTypeType
	158, // 62: AxisPtsYType.Position:type_name -> IntType
	1,   // 63: AxisPtsYType.DataType:type_name -> DataTypeType
	158, // 64: AxisPtsZType.Position:type_name -> IntType
	1,   // 65: AxisPtsZType.DataType:type_name -> DataTypeType
	158, // 66: AxisRescaleXType.Position:type_name -> IntType
	1,   // 67: AxisRescaleXType.DataType:type_name -> DataTypeType
	158, // 68: AxisRescaleXType.MaxNumberOfRescalePairs:type_name -> IntType
	2,   // 69: AxisRescaleXType.IndexIncr:type_name -> IndexOrderType
	0,   // 70: AxisRescaleXType.Addressing:type_name -> AddrTypeType
	158, // 71: AxisRescaleYType.Position:type_name -> IntType
	1,   // 72: AxisRescaleYType.DataType:type_name -> DataTypeType
	158, // 73: AxisRescaleYType.MaxNumberOfRescalePairs:type_name -> IntType
	2,   // 74: AxisRescaleYType.IndexIncr:type_name -> IndexOrderType
	0,   // 75: AxisRescaleYType.Addressing:type_name -> AddrTypeType
	158, // 76: AxisRescaleZType.Position:type_name -> IntType
	1,   // 77: AxisRescaleZType.DataType:type_name -> DataTypeType
	158, // 78: AxisRescaleZType.MaxNumberOfRescalePairs:type_name -> IntType
	2,   // 79: AxisRescaleZType.IndexIncr:type_name -> IndexOrderType
	0,   // 80: AxisRescaleZType.Addressing:type_name -> AddrTypeType
	80,  // 81: BitOperationType.LEFT_SHIFT:type_name -> LeftShiftType
	117, // 82: BitOperationType.RIGHT_SHIFT:type_name -> RightShiftType
	128, // 83: BitOperationType.SIGN_EXTEND:type_name -> SignExtendType
	159, // 84: BitMaskType.Mask:type_name -> LongType
	159, // 85: CalibrationHandleType.Handle:type_name -> LongType
	160, // 86: CalibrationMethodType.Method:type_name -> StringType
	159, // 87: CalibrationMethodType.Version:type_name -> LongType
	30,  // 88: CalibrationMethodType.CALIBRATION_HANDLE:type_name -> CalibrationHandleType
	161, // 89: CharacteristicType.Name:type_name -> IdentType
	160, // 90: CharacteristicType.LongIdentifier:type_name -> StringType
	159, // 91: CharacteristicType.Address:type_name -> LongType
	161, // 92: CharacteristicType.Deposit:type_name -> IdentType
	162, // 93: CharacteristicType.MaxDiff:type_name -> FloatType
	161, // 94: CharacteristicType.Conversion:type_name -> IdentType
	162, // 95: CharacteristicType.LowerLimit:type_name -> FloatType
	162, // 96: CharacteristicType.UpperLimit:type_name -> FloatType
	49,  // 97: CharacteristicType.DISPLAY_IDENTIFIER:type_name -> DisplayIdentifierType
	67,  // 98: CharacteristicType.FORMAT:type_name -> FormatType
	28,  // 99: CharacteristicType.BYTE_ORDER:type_name -> ByteOrderType
	27,  // 100: CharacteristicType.BIT_MASK:type_name -> BitMaskType
	72,  // 101: CharacteristicType.FUNCTION_LIST:type_name -> FunctionListType
	100, // 102: CharacteristicType.NUMBER:type_name -> NumberType
	59,  // 103: CharacteristicType.EXTENDED_LIMITS:type_name -> ExtendedLimitsType
	108, // 104: CharacteristicType.READ_ONLY:type_name -> ReadOnlyType
	76,  // 105: CharacteristicType.GUARD_RAILS:type_name -> GuardRailsType
	82,  // 106: CharacteristicType.MAP_LIST:type_name -> MapListType
	85,  // 107: CharacteristicType.MAX_REFRESH:type_name -> MaxRefreshType
	47,  // 108: CharacteristicType.DEPENDENT_CHARACTERISTIC:type_name -> DependentCharacteristicType
	151, // 109: CharacteristicType.VIRTUAL_CHARACTERISTIC:type_name -> VirtualCharacteristicType
	114, // 110: CharacteristicType.REF_MEMORY_SEGMENT:type_name -> RefMemorySegmentType
	14,  // 111: CharacteristicType.ANNOTATION:type_name -> AnnotationType
	34,  // 112: CharacteristicType.COMPARISON_QUANTITY:type_name -> ComparisonQuantityType
	163, // 113: CharacteristicType.IF_DATA:type_name -> IfDataType
	17,  // 114: CharacteristicType.AXIS_DESCR:type_name -> AxisDescrType
	29,  // 115: CharacteristicType.CALIBRATION_ACCESS:type_name -> CalibrationAccessType
	83,  // 116: CharacteristicType.MATRIX_DIM:type_name -> MatrixDimType
	53,  // 117: CharacteristicType.ECU_ADDRESS_EXTENSION:type_name -> EcuAddressExtensionType
	162, // 118: CoeffsType.A:type_name -> FloatType
	162, // 119: CoeffsType.B:type_name -> FloatType
	162, // 120: CoeffsType.C:type_name -> FloatType
	162, // 121: CoeffsType.D:type_name -> FloatType
	162, // 122: CoeffsType.E:type_name -> FloatType
	162, // 123: CoeffsType.F:type_name -> FloatType
	161, // 124: ComparisonQuantityType.Name:type_name -> IdentType
	161, // 125: CompuMethodType.Name:type_name -> IdentType
	160, // 126: CompuMethodType.LongIdentifier:type_name -> StringType
	160, // 127: CompuMethodType.Format:type_name -> StringType
	160, // 128: CompuMethodType.Unit:type_name -> StringType
	69,  // 129: CompuMethodType.FORMULA:type_name -> FormulaType
	33,  // 130: CompuMethodType.COEFFS:type_name -> CoeffsType
	36,  // 131: CompuMethodType.COMPU_TAB_REF:type_name -> CompuTabRefType
	115, // 132: CompuMethodType.REF_UNIT:type_name -> RefUnitType
	161, // 133: CompuTabRefType.ConversionTable:type_name -> IdentType
	161, // 134: CompuTabType.Name:type_name -> IdentType
	160, // 135: CompuTabType.LongIdentifier:type_name -> StringType
	158, // 136: CompuTabType.NumberValuePairs:type_name -> IntType
	153, // 137: CompuTabType.InValOutVal:type_name -> CompuTabType.InValOutValType
	45,  // 138: CompuTabType.DEFAULT_VALUE:type_name -> DefaultValueType
	161, // 139: CompuVTabRangeType.Name:type_name -> IdentType
	160, // 140: CompuVTabRangeType.LongIdentifier:type_name -> StringType
	158, // 141: CompuVTabRangeType.NumberOfValuesTriples:type_name -> IntType
	154, // 142: CompuVTabRangeType.InValMinInValMaxOutVal:type_name -> CompuVTabRangeType.InValMinInValMaxOutValType
	45,  // 143: CompuVTabRangeType.DEFAULT_VALUE:type_name -> DefaultValueType
	161, // 144: CompuVTabType.Name:type_name -> IdentType
	160, // 145: CompuVTabType.LongIdentifier:type_name -> StringType
	158, // 146: CompuVTabType.NumberValuePairs:type_name -> IntType
	155, // 147: CompuVTabType.InValOutVal:type_name -> CompuVTabType.InValOutValType
	45,  // 148: CompuVTabType.DEFAULT_VALUE:type_name -> DefaultValueType
	160, // 149: CpuTypeType.Cpu:type_name -> StringType
	161, // 150: CurveAxisRefType.CurveAxis:type_name -> IdentType
	160, // 151: CustomerNoType.Number:type_name -> StringType
	160, // 152: CustomerType.Customer:type_name -> StringType
	160, // 153: DefaultValueType.DisplayString:type_name -> StringType
	161, // 154: DefCharacteristicType.Identifier:type_name -> IdentType
	160, // 155: DependentCharacteristicType.Formula:type_name -> StringType
	161, // 156: DependentCharacteristicType.Characteristic:type_name -> IdentType
	161, // 157: DisplayIdentifierType.DisplayName:type_name -> IdentType
	158, // 158: DistOpXType.Position:type_name -> IntType
	1,   // 159: DistOpXType.DataType:type_name -> DataTypeType
	158, // 160: DistOpYType.Position:type_name -> IntType
	1,   // 161: DistOpYType.DataType:type_name -> DataTypeType
	158, // 162: DistOpZType.Position:type_name -> IntType
	1,   // 163: DistOpZType.DataType:type_name -> DataTypeType
	158, // 164: EcuAddressExtensionType.Extension:type_name -> IntType
	159, // 165: EcuAddressType.Address:type_name -> LongType
	159, // 166: EcuCalibrationOffsetType.Offset:type_name -> LongType
	160, // 167: EcuType.ControlUnit:type_name -> StringType
	160, // 168: EpkType.Identifier:type_name -> StringType
	159, // 169: ErrorMaskType.Mask:type_name -> LongType
	162, // 170: ExtendedLimitsType.LowerLimit:type_name -> FloatType
	162, // 171: ExtendedLimitsType.UpperLimit:type_name -> FloatType
	158, // 172: FixAxisParDistType.Offset:type_name -> IntType
	158, // 173: FixAxisParDistType.Distance:type_name -> IntType
	158, // 174: FixAxisParDistType.Numberapo:type_name -> IntType
	162, // 175: FixAxisParListType.AxisPtsValue:type_name -> FloatType
	158, // 176: FixAxisParType.Offset:type_name -> IntType
	158, // 177: FixAxisParType.Shift:type_name -> IntType
	158, // 178: FixAxisParType.Numberapo:type_name -> IntType
	158, // 179: FixNoAxisPtsXType.NumberOfAxisPoints:type_name -> IntType
	158, // 180: FixNoAxisPtsYType.NumberOfAxisPoints:type_name -> IntType
	158, // 181: FixNoAxisPtsZType.NumberOfAxisPoints:type_name -> IntType
	158, // 182: FncValuesType.Position:type_name -> IntType
	1,   // 183: FncValuesType.DataType:type_name -> DataTypeType
	0,   // 184: FncValuesType.AddressType:type_name -> AddrTypeType
	160, // 185: FormatType.FormatString:type_name -> StringType
	160, // 186: FormulaInvType.GX:type_name -> StringType
	160, // 187: FormulaType.FX:type_name -> StringType
	68,  // 188: FormulaType.FORMULA_INV:type_name -> FormulaInvType
	161, // 189: FrameMeasurementType.Identifier:type_name -> IdentType
	161, // 190: FrameType.Name:type_name -> IdentType
	160, // 191: FrameType.LongIdentifier:type_name -> StringType
	158, // 192: FrameType.ScalingUnit:type_name -> IntType
	159, // 193: FrameType.Rate:type_name -> LongType
	70,  // 194: FrameType.FRAME_MEASUREMENT:type_name -> FrameMeasurementType
	163, // 195: FrameType.IF_DATA:type_name -> IfDataType
	161, // 196: FunctionListType.Name:type_name -> IdentType
	161, // 197: FunctionType.Name:type_name -> IdentType
	160, // 198: FunctionType.LongIdentifier:type_name -> StringType
	14,  // 199: FunctionType.ANNOTATION:type_name -> AnnotationType
	46,  // 200: FunctionType.DEF_CHARACTERISTIC:type_name -> DefCharacteristicType
	111, // 201: FunctionType.REF_CHARACTERISTIC:type_name -> RefCharacteristicType
	79,  // 202: FunctionType.IN_MEASUREMENT:type_name -> InMeasurementType
	104, // 203: FunctionType.OUT_MEASUREMENT:type_name -> OutMeasurementType
	81,  // 204: FunctionType.LOC_MEASUREMENT:type_name -> LocMeasurementType
	133, // 205: FunctionType.SUB_FUNCTION:type_name -> SubFunctionType
	74,  // 206: FunctionType.FUNCTION_VERSION:type_name -> FunctionVersionType
	160, // 207: FunctionVersionType.VersionIdentifier:type_name -> StringType
	161, // 208: GroupType.GroupName:type_name -> IdentType
	160, // 209: GroupType.GroupLongIdentifier:type_name -> StringType
	14,  // 210: GroupType.ANNOTATION:type_name -> AnnotationType
	123, // 211: GroupType.ROOT:type_name -> RootType
	111, // 212: GroupType.REF_CHARACTERISTIC:type_name -> RefCharacteristicType
	113, // 213: GroupType.REF_MEASUREMENT:type_name -> RefMeasurementType
	72,  // 214: GroupType.FUNCTION_LIST:type_name -> FunctionListType
	134, // 215: GroupType.SUB_GROUP:type_name -> SubGroupType
	160, // 216: HeaderType.Comment:type_name -> StringType
	150, // 217: HeaderType.VERSION:type_name -> VersionType
	106, // 218: HeaderType.PROJECT_NO:type_name -> ProjectNoType
	158, // 219: IdentificationType.Position:type_name -> IntType
	1,   // 220: IdentificationType.DataType:type_name -> DataTypeType
	161, // 221: InMeasurementType.Identifier:type_name -> IdentType
	159, // 222: LeftShiftType.BitCount:type_name -> LongType
	161, // 223: LocMeasurementType.Identifier:type_name -> IdentType
	161, // 224: MapListType.Name:type_name -> IdentType
	158, // 225: MatrixDimType.XDim:type_name -> IntType
	158, // 226: MatrixDimType.YDim:type_name -> IntType
	158, // 227: MatrixDimType.ZDim:type_name -> IntType
	162, // 228: MaxGradType.MaxGradient:type_name -> FloatType
	158, // 229: MaxRefreshType.ScalingUnit:type_name -> IntType
	159, // 230: MaxRefreshType.Rate:type_name -> LongType
	161, // 231: MeasurementType.Name:type_name -> IdentType
	160, // 232: MeasurementType.LongIdentifier:type_name -> StringType
	1,   // 233: MeasurementType.DataType:type_name -> DataTypeType
	161, // 234: MeasurementType.Conversion:type_name -> IdentType
	158, // 235: MeasurementType.Resolution:type_name -> IntType
	162, // 236: MeasurementType.Accuracy:type_name -> FloatType
	162, // 237: MeasurementType.LowerLimit:type_name -> FloatType
	162, // 238: MeasurementType.UpperLimit:type_name -> FloatType
	49,  // 239: MeasurementType.DISPLAY_IDENTIFIER:type_name -> DisplayIdentifierType
	109, // 240: MeasurementType.READ_WRITE:type_name -> ReadWriteType
	67,  // 241: MeasurementType.FORMAT:type_name -> FormatType
	15,  // 242: MeasurementType.ARRAY_SIZE:type_name -> ArraySizeType
	27,  // 243: MeasurementType.BIT_MASK:type_name -> BitMaskType
	26,  // 244: MeasurementType.BIT_OPERATION:type_name -> BitOperationType
	28,  // 245: MeasurementType.BYTE_ORDER:type_name -> ByteOrderType
	85,  // 246: MeasurementType.MAX_REFRESH:type_name -> MaxRefreshType
	152, // 247: MeasurementType.VIRTUAL:type_name -> VirtualType
	72,  // 248: MeasurementType.FUNCTION_LIST:type_name -> FunctionListType
	54,  // 249: MeasurementType.ECU_ADDRESS:type_name -> EcuAddressType
	58,  // 250: MeasurementType.ERROR_MASK:type_name -> ErrorMaskType
	114, // 251: MeasurementType.REF_MEMORY_SEGMENT:type_name -> RefMemorySegmentType
	14,  // 252: MeasurementType.ANNOTATION:type_name -> AnnotationType
	163, // 253: MeasurementType.IF_DATA:type_name -> IfDataType
	83,  // 254: MeasurementType.MATRIX_DIM:type_name -> MatrixDimType
	53,  // 255: MeasurementType.ECU_ADDRESS_EXTENSION:type_name -> EcuAddressExtensionType
	159, // 256: MemoryLayoutType.Address:type_name -> LongType
	159, // 257: MemoryLayoutType.Size:type_name -> LongType
	159, // 258: MemoryLayoutType.Offset:type_name -> LongType
	163, // 259: MemoryLayoutType.IF_DATA:type_name -> IfDataType
	161, // 260: MemorySegmentType.Name:type_name -> IdentType
	160, // 261: MemorySegmentType.LongIdentifier:type_name -> StringType
	159, // 262: MemorySegmentType.Address:type_name -> LongType
	159, // 263: MemorySegmentType.Size:type_name -> LongType
	159, // 264: MemorySegmentType.Offset:type_name -> LongType
	163, // 265: MemorySegmentType.IF_DATA:type_name -> IfDataType
	160, // 266: ModCommonType.Comment:type_name -> StringType
	132, // 267: ModCommonType.S_REC_LAYOUT:type_name -> SRecLayoutType
	48,  // 268: ModCommonType.DEPOSIT:type_name -> DepositType
	28,  // 269: ModCommonType.BYTE_ORDER:type_name -> ByteOrderType
	44,  // 270: ModCommonType.DATA_SIZE:type_name -> DataSizeType
	6,   // 271: ModCommonType.ALIGNMENT_BYTE:type_name -> AlignmentByteType
	10,  // 272: ModCommonType.ALIGNMENT_WORD:type_name -> AlignmentWordType
	9,   // 273: ModCommonType.ALIGNMENT_LONG:type_name -> AlignmentLongType
	7,   // 274: ModCommonType.ALIGNMENT_FLOAT32_IEEE:type_name -> AlignmentFloat32IeeeType
	8,   // 275: ModCommonType.ALIGNMENT_FLOAT64_IEEE:type_name -> AlignmentFloat64IeeeType
	160, // 276: ModParType.Comment:type_name -> StringType
	150, // 277: ModParType.VERSION:type_name -> VersionType
	5,   // 278: ModParType.ADDR_EPK:type_name -> AddrEpkType
	57,  // 279: ModParType.EPK:type_name -> EpkType
	135, // 280: ModParType.SUPPLIER:type_name -> SupplierType
	43,  // 281: ModParType.CUSTOMER:type_name -> CustomerType
	42,  // 282: ModParType.CUSTOMER_NO:type_name -> CustomerNoType
	140, // 283: ModParType.USER:type_name -> UserType
	105, // 284: ModParType.PHONE_NO:type_name -> PhoneNoType
	56,  // 285: ModParType.ECU:type_name -> EcuType
	40,  // 286: ModParType.CPU_TYPE:type_name -> CpuTypeType
	96,  // 287: ModParType.NO_OF_INTERFACES:type_name -> NoOfInterfacesType
	55,  // 288: ModParType.ECU_CALIBRATION_OFFSET:type_name -> EcuCalibrationOffsetType
	31,  // 289: ModParType.CALIBRATION_METHOD:type_name -> CalibrationMethodType
	87,  // 290: ModParType.MEMORY_LAYOUT:type_name -> MemoryLayoutType
	88,  // 291: ModParType.MEMORY_SEGMENT:type_name -> MemorySegmentType
	136, // 292: ModParType.SYSTEM_CONSTANT:type_name -> SystemConstantType
	161, // 293: ModuleType.Name:type_name -> IdentType
	160, // 294: ModuleType.LongIdentifier:type_name -> StringType
	3,   // 295: ModuleType.A2ML:type_name -> A2MLType
	90,  // 296: ModuleType.MOD_PAR:type_name -> ModParType
	89,  // 297: ModuleType.MOD_COMMON:type_name -> ModCommonType
	163, // 298: ModuleType.IF_DATA:type_name -> IfDataType
	32,  // 299: ModuleType.CHARACTERISTIC:type_name -> CharacteristicType
	19,  // 300: ModuleType.AXIS_PTS:type_name -> AxisPtsType
	86,  // 301: ModuleType.MEASUREMENT:type_name -> MeasurementType
	35,  // 302: ModuleType.COMPU_METHOD:type_name -> CompuMethodType
	37,  // 303: ModuleType.COMPU_TAB:type_name -> CompuTabType
	39,  // 304: ModuleType.COMPU_VTAB:type_name -> CompuVTabType
	38,  // 305: ModuleType.COMPU_VTAB_RANGE:type_name -> CompuVTabRangeType
	73,  // 306: ModuleType.FUNCTION:type_name -> FunctionType
	75,  // 307: ModuleType.GROUP:type_name -> GroupType
	110, // 308: ModuleType.RECORD_LAYOUT:type_name -> RecordLayoutType
	145, // 309: ModuleType.VARIANT_CODING:type_name -> VariantCodingType
	71,  // 310: ModuleType.FRAME:type_name -> FrameType
	139, // 311: ModuleType.USER_RIGHTS:type_name -> UserRightsType
	138, // 312: ModuleType.UNIT:type_name -> UnitType
	158, // 313: NoAxisPtsXType.Position:type_name -> IntType
	1,   // 314: NoAxisPtsXType.DataType:type_name -> DataTypeType
	158, // 315: NoAxisPtsYType.Position:type_name -> IntType
	1,   // 316: NoAxisPtsYType.DataType:type_name -> DataTypeType
	158, // 317: NoAxisPtsZType.Position:type_name -> IntType
	1,   // 318: NoAxisPtsZType.DataType:type_name -> DataTypeType
	158, // 319: NoOfInterfacesType.Num:type_name -> IntType
	158, // 320: NoRescaleXType.Position:type_name -> IntType
	1,   // 321: NoRescaleXType.DataType:type_name -> DataTypeType
	158, // 322: NoRescaleYType.Position:type_name -> IntType
	1,   // 323: NoRescaleYType.DataType:type_name -> DataTypeType
	158, // 324: NoRescaleZType.Position:type_name -> IntType
	1,   // 325: NoRescaleZType.DataType:type_name -> DataTypeType
	158, // 326: NumberType.Number:type_name -> IntType
	158, // 327: OffsetXType.Position:type_name -> IntType
	1,   // 328: OffsetXType.DataType:type_name -> DataTypeType
	158, // 329: OffsetYType.Position:type_name -> IntType
	1,   // 330: OffsetYType.DataType:type_name -> DataTypeType
	158, // 331: OffsetZType.Position:type_name -> IntType
	1,   // 332: OffsetZType.DataType:type_name -> DataTypeType
	161, // 333: OutMeasurementType.Identifier:type_name -> IdentType
	160, // 334: PhoneNoType.TelNum:type_name -> StringType
	161, // 335: ProjectNoType.ProjectNumber:type_name -> IdentType
	161, // 336: ProjectType.Name:type_name -> IdentType
	160, // 337: ProjectType.LongIdentifier:type_name -> StringType
	77,  // 338: ProjectType.HEADER:type_name -> HeaderType
	91,  // 339: ProjectType.MODULE:type_name -> ModuleType
	161, // 340: RecordLayoutType.Name:type_name -> IdentType
	66,  // 341: RecordLayoutType.FNC_VALUES:type_name -> FncValuesType
	78,  // 342: RecordLayoutType.IDENTIFICATION:type_name -> IdentificationType
	20,  // 343: RecordLayoutType.AXIS_PTS_X:type_name -> AxisPtsXType
	21,  // 344: RecordLayoutType.AXIS_PTS_Y:type_name -> AxisPtsYType
	22,  // 345: RecordLayoutType.AXIS_PTS_Z:type_name -> AxisPtsZType
	23,  // 346: RecordLayoutType.AXIS_RESCALE_X:type_name -> AxisRescaleXType
	24,  // 347: RecordLayoutType.AXIS_RESCALE_Y:type_name -> AxisRescaleYType
	25,  // 348: RecordLayoutType.AXIS_RESCALE_Z:type_name -> AxisRescaleZType
	93,  // 349: RecordLayoutType.NO_AXIS_PTS_X:type_name -> NoAxisPtsXType
	94,  // 350: RecordLayoutType.NO_AXIS_PTS_Y:type_name -> NoAxisPtsYType
	95,  // 351: RecordLayoutType.NO_AXIS_PTS_Z:type_name -> NoAxisPtsZType
	97,  // 352: RecordLayoutType.NO_RESCALE_X:type_name -> NoRescaleXType
	98,  // 353: RecordLayoutType.NO_RESCALE_Y:type_name -> NoRescaleYType
	99,  // 354: RecordLayoutType.NO_RESCALE_Z:type_name -> NoRescaleZType
	63,  // 355: RecordLayoutType.FIX_NO_AXIS_PTS_X:type_name -> FixNoAxisPtsXType
	64,  // 356: RecordLayoutType.FIX_NO_AXIS_PTS_Y:type_name -> FixNoAxisPtsYType
	65,  // 357: RecordLayoutType.FIX_NO_AXIS_PTS_Z:type_name -> FixNoAxisPtsZType
	129, // 358: RecordLayoutType.SRC_ADDR_X:type_name -> SrcAddrXType
	130, // 359: RecordLayoutType.SRC_ADDR_Y:type_name -> SrcAddrYType
	131, // 360: RecordLayoutType.SRC_ADDR_Z:type_name -> SrcAddrZType
	119, // 361: RecordLayoutType.RIP_ADDR_X:type_name -> RipAddrXType
	120, // 362: RecordLayoutType.RIP_ADDR_Y:type_name -> RipAddrYType
	121, // 363: RecordLayoutType.RIP_ADDR_Z:type_name -> RipAddrZType
	118, // 364: RecordLayoutType.RIP_ADDR_W:type_name -> RipAddrWType
	124, // 365: RecordLayoutType.SHIFT_OP_X:type_name -> ShiftOpXType
	125, // 366: RecordLayoutType.SHIFT_OP_Y:type_name -> ShiftOpYType
	126, // 367: RecordLayoutType.SHIFT_OP_Z:type_name -> ShiftOpZType
	101, // 368: RecordLayoutType.OFFSET_X:type_name -> OffsetXType
	102, // 369: RecordLayoutType.OFFSET_Y:type_name -> OffsetYType
	103, // 370: RecordLayoutType.OFFSET_Z:type_name -> OffsetZType
	50,  // 371: RecordLayoutType.DIST_OP_X:type_name -> DistOpXType
	51,  // 372: RecordLayoutType.DIST_OP_Y:type_name -> DistOpYType
	52,  // 373: RecordLayoutType.DIST_OP_Z:type_name -> DistOpZType
	6,   // 374: RecordLayoutType.ALIGNMENT_BYTE:type_name -> AlignmentByteType
	10,  // 375: RecordLayoutType.ALIGNMENT_WORD:type_name -> AlignmentWordType
	9,   // 376: RecordLayoutType.ALIGNMENT_LONG:type_name -> AlignmentLongType
	7,   // 377: RecordLayoutType.ALIGNMENT_FLOAT32_IEEE:type_name -> AlignmentFloat32IeeeType
	8,   // 378: RecordLayoutType.ALIGNMENT_FLOAT64_IEEE:type_name -> AlignmentFloat64IeeeType
	116, // 379: RecordLayoutType.RESERVED:type_name -> ReservedType
	161, // 380: RefCharacteristicType.Identifier:type_name -> IdentType
	161, // 381: RefGroupType.Identifier:type_name -> IdentType
	161, // 382: RefMeasurementType.Identifier:type_name -> IdentType
	161, // 383: RefMemorySegmentType.Name:type_name -> IdentType
	161, // 384: RefUnitType.Unit:type_name -> IdentType
	158, // 385: ReservedType.Position:type_name -> IntType
	44,  // 386: ReservedType.DataSize:type_name -> DataSizeType
	159, // 387: RightShiftType.BitCount:type_name -> LongType
	158, // 388: RipAddrWType.Position:type_name -> IntType
	1,   // 389: RipAddrWType.DataType:type_name -> DataTypeType
	158, // 390: RipAddrXType.Position:type_name -> IntType
	1,   // 391: RipAddrXType.DataType:type_name -> DataTypeType
	158, // 392: RipAddrYType.Position:type_name -> IntType
	1,   // 393: RipAddrYType.DataType:type_name -> DataTypeType
	158, // 394: RipAddrZType.Position:type_name -> IntType
	1,   // 395: RipAddrZType.DataType:type_name -> DataTypeType
	16,  // 396: RootNodeType.ASAP2_VERSION:type_name -> ASAP2VersionType
	4,   // 397: RootNodeType.A2ML_VERSION:type_name -> A2MLVersionType
	107, // 398: RootNodeType.PROJECT:type_name -> ProjectType
	158, // 399: ShiftOpXType.Position:type_name -> IntType
	1,   // 400: ShiftOpXType.DataType:type_name -> DataTypeType
	158, // 401: ShiftOpYType.Position:type_name -> IntType
	1,   // 402: ShiftOpYType.DataType:type_name -> DataTypeType
	158, // 403: ShiftOpZType.Position:type_name -> IntType
	1,   // 404: ShiftOpZType.DataType:type_name -> DataTypeType
	158, // 405: SiExponentsType.Length:type_name -> IntType
	158, // 406: SiExponentsType.Mass:type_name -> IntType
	158, // 407: SiExponentsType.Time:type_name -> IntType
	158, // 408: SiExponentsType.ElectricCurrent:type_name -> IntType
	158, // 409: SiExponentsType.Temperature:type_name -> IntType
	158, // 410: SiExponentsType.AmountOfSubstance:type_name -> IntType
	158, // 411: SiExponentsType.LuminousIntensity:type_name -> IntType
	158, // 412: SrcAddrXType.Position:type_name -> IntType
	1,   // 413: SrcAddrXType.DataType:type_name -> DataTypeType
	158, // 414: SrcAddrYType.Position:type_name -> IntType
	1,   // 415: SrcAddrYType.DataType:type_name -> DataTypeType
	158, // 416: SrcAddrZType.Position:type_name -> IntType
	1,   // 417: SrcAddrZType.DataType:type_name -> DataTypeType
	161, // 418: SRecLayoutType.Name:type_name -> IdentType
	161, // 419: SubFunctionType.Identifier:type_name -> IdentType
	161, // 420: SubGroupType.Identifier:type_name -> IdentType
	160, // 421: SupplierType.Manufacturer:type_name -> StringType
	160, // 422: SystemConstantType.Name:type_name -> StringType
	160, // 423: SystemConstantType.Value:type_name -> StringType
	162, // 424: UnitConversionType.Gradient:type_name -> FloatType
	162, // 425: UnitConversionType.Offset:type_name -> FloatType
	161, // 426: UnitType.Name:type_name -> IdentType
	160, // 427: UnitType.LongIdentifier:type_name -> StringType
	160, // 428: UnitType.Display:type_name -> StringType
	127, // 429: UnitType.SI_EXPONENTS:type_name -> SiExponentsType
	115, // 430: UnitType.REF_UNIT:type_name -> RefUnitType
	137, // 431: UnitType.UNIT_CONVERSION:type_name -> UnitConversionType
	161, // 432: UserRightsType.UserLevelId:type_name -> IdentType
	112, // 433: UserRightsType.REF_GROUP:type_name -> RefGroupType
	108, // 434: UserRightsType.READ_ONLY:type_name -> ReadOnlyType
	160, // 435: UserType.UserName:type_name -> StringType
	159, // 436: VarAddressType.Address:type_name -> LongType
	161, // 437: VarCharacteristicType.Name:type_name -> IdentType
	161, // 438: VarCharacteristicType.CriterionName:type_name -> IdentType
	141, // 439: VarCharacteristicType.VAR_ADDRESS:type_name -> VarAddressType
	161, // 440: VarCriterionType.Name:type_name -> IdentType
	160, // 441: VarCriterionType.LongIdentifier:type_name -> StringType
	161, // 442: VarCriterionType.Value:type_name -> IdentType
	146, // 443: VarCriterionType.VAR_MEASUREMENT:type_name -> VarMeasurementType
	148, // 444: VarCriterionType.VAR_SELECTION_CHARACTERISTIC:type_name -> VarSelectionCharacteristicType
	156, // 445: VarForbiddenCombType.CriterionNameCriterionValue:type_name -> VarForbiddenCombType.CriterionType
	149, // 446: VariantCodingType.VAR_SEPARATOR:type_name -> VarSeparatorType
	147, // 447: VariantCodingType.VAR_NAMING:type_name -> VarNamingType
	143, // 448: VariantCodingType.VAR_CRITERION:type_name -> VarCriterionType
	144, // 449: VariantCodingType.VAR_FORBIDDEN_COMB:type_name -> VarForbiddenCombType
	142, // 450: VariantCodingType.VAR_CHARACTERISTIC:type_name -> VarCharacteristicType
	161, // 451: VarMeasurementType.Name:type_name -> IdentType
	161, // 452: VarSelectionCharacteristicType.Name:type_name -> IdentType
	160, // 453: VarSeparatorType.Separator:type_name -> StringType
	160, // 454: VersionType.VersionIdentifier:type_name -> StringType
	160, // 455: VirtualCharacteristicType.Formula:type_name -> StringType
	161, // 456: VirtualCharacteristicType.Characteristic:type_name -> IdentType
	161, // 457: VirtualType.MeasuringChannel:type_name -> IdentType
	162, // 458: CompuTabType.InValOutValType.InVal:type_name -> FloatType
	162, // 459: CompuTabType.InValOutValType.OutVal:type_name -> FloatType
	162, // 460: CompuVTabRangeType.InValMinInValMaxOutValType.InValMin:type_name -> FloatType
	162, // 461: CompuVTabRangeType.InValMinInValMaxOutValType.InValMax:type_name -> FloatType
	160, // 462: CompuVTabRangeType.InValMinInValMaxOutValType.OutVal:type_name -> StringType
	162, // 463: CompuVTabType.InValOutValType.InVal:type_name -> FloatType
	160, // 464: CompuVTabType.InValOutValType.OutVal:type_name -> StringType
	161, // 465: VarForbiddenCombType.CriterionType.CriterionName:type_name -> IdentType
	161, // 466: VarForbiddenCombType.CriterionType.CriterionValue:type_name -> IdentType
	467, // [467:467] is the sub-list for method output_type
	467, // [467:467] is the sub-list for method input_type
	467, // [467:467] is the sub-list for extension type_name
	467, // [467:467] is the sub-list for extension extendee
	0,   // [0:467] is the sub-list for field type_name
}

func init() { file_protobufs_A2L_proto_init() }
func file_protobufs_A2L_proto_init() {
	if File_protobufs_A2L_proto != nil {
		return
	}
	file_protobufs_A2ML_proto_init()
	file_protobufs_IF_DATA_proto_init()
	file_protobufs_shared_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_protobufs_A2L_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddrTypeType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataTypeType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexOrderType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*A2MLType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*A2MLVersionType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddrEpkType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlignmentByteType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlignmentFloat32IeeeType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlignmentFloat64IeeeType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlignmentLongType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlignmentWordType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnnotationLabelType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnnotationOriginType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnnotationTextType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnnotationType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArraySizeType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ASAP2VersionType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AxisDescrType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AxisPtsRefType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AxisPtsType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AxisPtsXType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AxisPtsYType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AxisPtsZType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AxisRescaleXType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AxisRescaleYType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AxisRescaleZType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BitOperationType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BitMaskType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ByteOrderType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalibrationAccessType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalibrationHandleType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalibrationMethodType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharacteristicType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoeffsType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComparisonQuantityType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompuMethodType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompuTabRefType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompuTabType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompuVTabRangeType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompuVTabType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CpuTypeType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurveAxisRefType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerNoType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataSizeType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefaultValueType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefCharacteristicType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DependentCharacteristicType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DepositType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisplayIdentifierType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DistOpXType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DistOpYType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DistOpZType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EcuAddressExtensionType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EcuAddressType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EcuCalibrationOffsetType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EcuType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EpkType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorMaskType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtendedLimitsType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FixAxisParDistType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FixAxisParListType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FixAxisParType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FixNoAxisPtsXType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FixNoAxisPtsYType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FixNoAxisPtsZType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FncValuesType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FormatType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FormulaInvType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FormulaType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FrameMeasurementType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FrameType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FunctionListType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FunctionType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FunctionVersionType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuardRailsType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeaderType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentificationType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InMeasurementType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeftShiftType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocMeasurementType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapListType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatrixDimType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaxGradType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaxRefreshType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeasurementType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemoryLayoutType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemorySegmentType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModCommonType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModParType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModuleType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonotonyType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoAxisPtsXType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoAxisPtsYType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoAxisPtsZType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoOfInterfacesType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoRescaleXType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoRescaleYType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoRescaleZType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NumberType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OffsetXType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OffsetYType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OffsetZType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutMeasurementType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhoneNoType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectNoType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadOnlyType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadWriteType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordLayoutType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefCharacteristicType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefGroupType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefMeasurementType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefMemorySegmentType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefUnitType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReservedType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RightShiftType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RipAddrWType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RipAddrXType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RipAddrYType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RipAddrZType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RootNodeType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RootType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShiftOpXType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShiftOpYType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShiftOpZType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SiExponentsType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignExtendType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SrcAddrXType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SrcAddrYType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SrcAddrZType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SRecLayoutType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubFunctionType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubGroupType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupplierType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemConstantType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnitConversionType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnitType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserRightsType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VarAddressType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VarCharacteristicType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VarCriterionType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VarForbiddenCombType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VariantCodingType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VarMeasurementType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VarNamingType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VarSelectionCharacteristicType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VarSeparatorType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualCharacteristicType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompuTabType_InValOutValType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompuVTabRangeType_InValMinInValMaxOutValType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompuVTabType_InValOutValType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_A2L_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VarForbiddenCombType_CriterionType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_protobufs_A2L_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_protobufs_A2L_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_protobufs_A2L_proto_msgTypes[19].OneofWrappers = []interface{}{}
	file_protobufs_A2L_proto_msgTypes[26].OneofWrappers = []interface{}{}
	file_protobufs_A2L_proto_msgTypes[32].OneofWrappers = []interface{}{}
	file_protobufs_A2L_proto_msgTypes[35].OneofWrappers = []interface{}{}
	file_protobufs_A2L_proto_msgTypes[37].OneofWrappers = []interface{}{}
	file_protobufs_A2L_proto_msgTypes[38].OneofWrappers = []interface{}{}
	file_protobufs_A2L_proto_msgTypes[39].OneofWrappers = []interface{}{}
	file_protobufs_A2L_proto_msgTypes[69].OneofWrappers = []interface{}{}
	file_protobufs_A2L_proto_msgTypes[71].OneofWrappers = []interface{}{}
	file_protobufs_A2L_proto_msgTypes[73].OneofWrappers = []interface{}{}
	file_protobufs_A2L_proto_msgTypes[75].OneofWrappers = []interface{}{}
	file_protobufs_A2L_proto_msgTypes[77].OneofWrappers = []interface{}{}
	file_protobufs_A2L_proto_msgTypes[86].OneofWrappers = []interface{}{}
	file_protobufs_A2L_proto_msgTypes[89].OneofWrappers = []interface{}{}
	file_protobufs_A2L_proto_msgTypes[90].OneofWrappers = []interface{}{}
	file_protobufs_A2L_proto_msgTypes[91].OneofWrappers = []interface{}{}
	file_protobufs_A2L_proto_msgTypes[110].OneofWrappers = []interface{}{}
	file_protobufs_A2L_proto_msgTypes[138].OneofWrappers = []interface{}{}
	file_protobufs_A2L_proto_msgTypes[139].OneofWrappers = []interface{}{}
	file_protobufs_A2L_proto_msgTypes[142].OneofWrappers = []interface{}{}
	file_protobufs_A2L_proto_msgTypes[143].OneofWrappers = []interface{}{}
	file_protobufs_A2L_proto_msgTypes[145].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protobufs_A2L_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   157,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protobufs_A2L_proto_goTypes,
		DependencyIndexes: file_protobufs_A2L_proto_depIdxs,
		MessageInfos:      file_protobufs_A2L_proto_msgTypes,
	}.Build()
	File_protobufs_A2L_proto = out.File
	file_protobufs_A2L_proto_rawDesc = nil
	file_protobufs_A2L_proto_goTypes = nil
	file_protobufs_A2L_proto_depIdxs = nil
}
