// Code generated from grammar/A2L.g4 by ANTLR 4.12.0. DO NOT EDIT.

package parser // A2L

import (
	"fmt"
	"strconv"
	"sync"

	"github.com/antlr/antlr4/runtime/Go/antlr/v4"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = strconv.Itoa
var _ = sync.Once{}

type A2LParser struct {
	*antlr.BaseParser
}

var a2lParserStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	literalNames           []string
	symbolicNames          []string
	ruleNames              []string
	predictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func a2lParserInit() {
	staticData := &a2lParserStaticData
	staticData.literalNames = []string{
		"", "'ALIGNMENT_BYTE'", "'ALIGNMENT_FLOAT16_IEEE'", "'ALIGNMENT_FLOAT32_IEEE'",
		"'ALIGNMENT_FLOAT64_IEEE'", "'ALIGNMENT_INT64'", "'ALIGNMENT_LONG'",
		"'ALIGNMENT_WORD'", "'ANNOTATION'", "'ANNOTATION_LABEL'", "'ANNOTATION_ORIGIN'",
		"'ANNOTATION_TEXT'", "'BIT_MASK'", "'BYTE_ORDER'", "'CALIBRATION_ACCESS'",
		"'CALIBRATION'", "'NO_CALIBRATION'", "'NOT_IN_MCD_SYSTEM'", "'OFFLINE_CALIBRATION'",
		"'DEFAULT_VALUE'", "'DEPOSIT'", "'ABSOLUTE'", "'DIFFERENCE'", "'DISCRETE'",
		"'DISPLAY_IDENTIFIER'", "'ECU_ADDRESS_EXTENSION'", "'EXTENDED_LIMITS'",
		"'FORMAT'", "'FUNCTION_LIST'", "'GUARD_RAILS'", "'MATRIX_DIM'", "'MAX_REFRESH'",
		"'MONOTONY'", "'MON_DECREASE'", "'MON_INCREASE'", "'STRICT_DECREASE'",
		"'STRICT_INCREASE'", "'MONOTONOUS'", "'STRICT_MON'", "'NOT_MON'", "'PHYS_UNIT'",
		"'READ_ONLY'", "'REF_CHARACTERISTIC'", "'REF_MEMORY_SEGMENT'", "'REF_UNIT'",
		"'STEP_SIZE'", "'SYMBOL_LINK'", "'VERSION'", "'ASAP2_VERSION'", "'A2ML_VERSION'",
		"'PROJECT'", "'HEADER'", "'PROJECT_NO'", "'MODULE'", "'AXIS_PTS'", "'CHARACTERISTIC'",
		"'ASCII'", "'CURVE'", "'MAP'", "'CUBOID'", "'CUBE_4'", "'CUBE_5'", "'VAL_BLK'",
		"'VALUE'", "'AXIS_DESCR'", "'CURVE_AXIS'", "'COM_AXIS'", "'FIX_AXIS'",
		"'RES_AXIS'", "'STD_AXIS'", "'AXIS_PTS_REF'", "'CURVE_AXIS_REF'", "'FIX_AXIS_PAR'",
		"'FIX_AXIS_PAR_DIST'", "'FIX_AXIS_PAR_LIST'", "'MAX_GRAD'", "'COMPARISON_QUANTITY'",
		"'DEPENDENT_CHARACTERISTIC'", "'MAP_LIST'", "'NUMBER'", "'VIRTUAL_CHARACTERISTIC'",
		"'COMPU_METHOD'", "'IDENTICAL'", "'FORM'", "'LINEAR'", "'RAT_FUNC'",
		"'TAB_INTP'", "'TAB_NOINTP'", "'TAB_VERB'", "'COEFFS'", "'COEFFS_LINEAR'",
		"'COMPU_TAB_REF'", "'FORMULA'", "'FORMULA_INV'", "'STATUS_STRING_REF'",
		"'COMPU_TAB'", "'DEFAULT_VALUE_NUMERIC'", "'COMPU_VTAB'", "'COMPU_VTAB_RANGE'",
		"'FRAME'", "'FRAME_MEASUREMENT'", "'FUNCTION'", "'DEF_CHARACTERISTIC'",
		"'FUNCTION_VERSION'", "'IN_MEASUREMENT'", "'LOC_MEASUREMENT'", "'OUT_MEASUREMENT'",
		"'SUB_FUNCTION'", "'GROUP'", "'REF_MEASUREMENT'", "'ROOT'", "'SUB_GROUP'",
		"'INSTANCE'", "'MEASUREMENT'", "'ARRAY_SIZE'", "'BIT_OPERATION'", "'LEFT_SHIFT'",
		"'RIGHT_SHIFT'", "'SIGN_EXTEND'", "'ECU_ADDRESS'", "'ERROR_MASK'", "'LAYOUT'",
		"'ROW_DIR'", "'COLUMN_DIR'", "'READ_WRITE'", "'VIRTUAL'", "'MOD_COMMON'",
		"'DATA_SIZE'", "'S_REC_LAYOUT'", "'MOD_PAR'", "'ADDR_EPK'", "'CALIBRATION_METHOD'",
		"'CALIBRATION_HANDLE'", "'CPU_TYPE'", "'CUSTOMER'", "'CUSTOMER_NO'",
		"'ECU'", "'ECU_CALIBRATION_OFFSET'", "'EPK'", "'MEMORY_LAYOUT'", "'PRG_CODE'",
		"'PRG_DATA'", "'PRG_RESERVED'", "'MEMORY_SEGMENT'", "'CALIBRATION_VARIABLES'",
		"'CODE'", "'DATA'", "'EXCLUDE_FROM_FLASH'", "'OFFLINE_DATA'", "'RESERVED'",
		"'SERAM'", "'VARIABLES'", "'EEPROM'", "'EPROM'", "'FLASH'", "'RAM'",
		"'ROM'", "'REGISTER'", "'INTERN'", "'EXTERN'", "'NO_OF_INTERFACES'",
		"'PHONE_NO'", "'SUPPLIER'", "'SYSTEM_CONSTANT'", "'USER'", "'RECORD_LAYOUT'",
		"'AXIS_PTS_X'", "'AXIS_PTS_Y'", "'AXIS_PTS_Z'", "'AXIS_PTS_4'", "'AXIS_PTS_5'",
		"'AXIS_RESCALE_X'", "'AXIS_RESCALE_Y'", "'AXIS_RESCALE_Z'", "'AXIS_RESCALE_4'",
		"'AXIS_RESCALE_5'", "'DIST_OP_X'", "'DIST_OP_Y'", "'DIST_OP_Z'", "'DIST_OP_4'",
		"'DIST_OP_5'", "'FIX_NO_AXIS_PTS_X'", "'FIX_NO_AXIS_PTS_Y'", "'FIX_NO_AXIS_PTS_Z'",
		"'FIX_NO_AXIS_PTS_4'", "'FIX_NO_AXIS_PTS_5'", "'FNC_VALUES'", "'ALTERNATE_CURVES'",
		"'ALTERNATE_WITH_X'", "'ALTERNATE_WITH_Y'", "'IDENTIFICATION'", "'NO_AXIS_PTS_X'",
		"'NO_AXIS_PTS_Y'", "'NO_AXIS_PTS_Z'", "'NO_AXIS_PTS_4'", "'NO_AXIS_PTS_5'",
		"'STATIC_RECORD_LAYOUT'", "'NO_RESCALE_X'", "'NO_RESCALE_Y'", "'NO_RESCALE_Z'",
		"'NO_RESCALE_4'", "'NO_RESCALE_5'", "'OFFSET_X'", "'OFFSET_Y'", "'OFFSET_Z'",
		"'OFFSET_4'", "'OFFSET_5'", "'RIP_ADDR_W'", "'RIP_ADDR_X'", "'RIP_ADDR_Y'",
		"'RIP_ADDR_Z'", "'RIP_ADDR_4'", "'RIP_ADDR_5'", "'SHIFT_OP_X'", "'SHIFT_OP_Y'",
		"'SHIFT_OP_Z'", "'SHIFT_OP_4'", "'SHIFT_OP_5'", "'SRC_ADDR_X'", "'SRC_ADDR_Y'",
		"'SRC_ADDR_Z'", "'SRC_ADDR_4'", "'SRC_ADDR_5'", "'TYPEDEF_CHARACTERISTIC'",
		"'TYPEDEF_MEASUREMENT'", "'TYPEDEF_STRUCTURE'", "'STRUCTURE_COMPONENT'",
		"'UNIT'", "'DERIVED'", "'EXTENDED_SI'", "'SI_EXPONENTS'", "'UNIT_CONVERSION'",
		"'USER_RIGHTS'", "'REF_GROUP'", "'VARIANT_CODING'", "'VAR_CHARACTERISTIC'",
		"'VAR_ADDRESS'", "'VAR_CRITERION'", "'VAR_MEASUREMENT'", "'VAR_SELECTION_CHARACTERISTIC'",
		"'VAR_FORBIDDEN_COMB'", "'VAR_NAMING'", "'NUMERIC'", "'APLHA'", "'VAR_SEPARATOR'",
		"'.'", "'['", "']'", "'UBYTE'", "'SBYTE'", "'UWORD'", "'SWORD'", "'ULONG'",
		"'SLONG'", "'A_UINT64'", "'A_INT64'", "'FLOAT16_IEEE'", "'FLOAT32_IEEE'",
		"'FLOAT64_IEEE'", "'BYTE'", "'WORD'", "'LONG'", "'PBYTE'", "'PWORD'",
		"'PLONG'", "'DIRECT'", "'LITTLE_ENDIAN'", "'BIG_ENDIAN'", "'MSB_LAST'",
		"'MSB_FIRST'", "'INDEX_INCR'", "'INDEX_DECR'", "'SYMBOL_TYPE_LINK'",
		"'A2ML'", "';'", "'char'", "'int'", "'long'", "'uchar'", "'uint'", "'ulong'",
		"'int64'", "'uint64'", "'double'", "'float'", "'block'", "'('", "')'",
		"'*'", "'enum'", "'{'", "'}'", "','", "'='", "'struct'", "'taggedstruct'",
		"'taggedunion'", "'IF_DATA'", "'/begin'", "'/end'",
	}
	staticData.symbolicNames = []string{
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "BEGIN", "END", "IDENT", "FLOAT",
		"INT", "HEX", "COMMENT", "WS", "STRING", "ID", "TAG",
	}
	staticData.ruleNames = []string{
		"a2lFile", "alignmentByte", "alignmentFloat16Ieee", "alignmentFloat32Ieee",
		"alignmentFloat64Ieee", "alignmentInt64", "alignmentLong", "alignmentWord",
		"annotation", "annotationLabel", "annotationOrigin", "annotationText",
		"bitMask", "byteOrder", "calibrationAccess", "defaultValue", "deposit",
		"discrete", "displayIdentifier", "ecuAddressExtension", "extendedLimits",
		"format", "functionList", "guardRails", "matrixDim", "maxRefresh", "monotony",
		"physUnit", "readOnly", "refCharacteristic", "refMemorySegment", "refUnit",
		"stepSize", "symbolLink", "version", "asap2Version", "a2mlVersion",
		"project", "header", "projectNo", "module", "axisPts", "characteristic",
		"axisDescr", "axisPtsRef", "curveAxisRef", "fixAxisPar", "fixAxisParDist",
		"fixAxisParList", "maxGrad", "comparisonQuantity", "dependentCharacteristic",
		"mapList", "number", "virtualCharacteristic", "compuMethod", "coeffs",
		"coeffsLinear", "compuTabRef", "formula", "formulaInv", "statusStringRef",
		"compuTab", "defaultValueNumeric", "compuVTab", "compuVTabRange", "frame",
		"frameMeasurement", "function", "defCharacteristic", "functionVersion",
		"inMeasurement", "locMeasurement", "outMeasurement", "subFunction",
		"group", "refMeasurement", "root", "subGroup", "instance", "measurement",
		"arraySize", "bitOperation", "leftShift", "rightShift", "signExtend",
		"ecuAddress", "errorMask", "layout", "readWrite", "virtual", "modCommon",
		"dataSize", "sRecLayout", "modPar", "addrEpk", "calibrationMethod",
		"calibrationHandle", "cpuType", "customer", "customerNo", "ecu", "ecuCalibrationOffset",
		"epk", "memoryLayout", "memorySegment", "noOfInterfaces", "phoneNo",
		"supplier", "systemConstant", "user", "recordLayout", "axisPtsX", "axisPtsY",
		"axisPtsZ", "axisPts4", "axisPts5", "axisRescaleX", "axisRescaleY",
		"axisRescaleZ", "axisRescale4", "axisRescale5", "distOpX", "distOpY",
		"distOpZ", "distOp4", "distOp5", "fixNoAxisPtsX", "fixNoAxisPtsY", "fixNoAxisPtsZ",
		"fixNoAxisPts4", "fixNoAxisPts5", "fncValues", "identification", "noAxisPtsX",
		"noAxisPtsY", "noAxisPtsZ", "noAxisPts4", "noAxisPts5", "staticRecordLayout",
		"noRescaleX", "noRescaleY", "noRescaleZ", "noRescale4", "noRescale5",
		"offsetX", "offsetY", "offsetZ", "offset4", "offset5", "reserved", "ripAddrW",
		"ripAddrX", "ripAddrY", "ripAddrZ", "ripAddr4", "ripAddr5", "shiftOpX",
		"shiftOpY", "shiftOpZ", "shiftOp4", "shiftOp5", "srcAddrX", "srcAddrY",
		"srcAddrZ", "srcAddr4", "srcAddr5", "typedefCharacteristic", "typedefMeasurement",
		"typedefStructure", "structureComponent", "unit", "siExponents", "unitConversion",
		"userRights", "refGroup", "variantCoding", "varCharacteristic", "varAddress",
		"varCriterion", "varMeasurement", "varSelectionCharacteristic", "varForbiddenComb",
		"varNaming", "varSeparator", "integerValue", "numericValue", "stringValue",
		"identifierValue", "partialIdentifier", "arraySpecifier", "dataType",
		"datasize", "addrtype", "byteOrderValue", "indexorder", "linkType",
		"a2ml", "declaration", "typeDefinition", "a2mlTypeName", "predefinedTypeName",
		"blockDefinition", "enumTypeName", "enumeratorList", "enumerator", "structTypeName",
		"structMember", "member", "taggedStructTypeName", "taggedStructMember",
		"taggedStructDefinition", "taggedUnionTypeName", "taggedUnionMember",
		"tagValue", "ifData", "genericParameter", "genericNode",
	}
	staticData.predictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 1, 308, 2182, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4,
		7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2, 10,
		7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15, 7,
		15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7, 20,
		2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25, 2,
		26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2, 31,
		7, 31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36, 7,
		36, 2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7, 41,
		2, 42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7, 45, 2, 46, 7, 46, 2,
		47, 7, 47, 2, 48, 7, 48, 2, 49, 7, 49, 2, 50, 7, 50, 2, 51, 7, 51, 2, 52,
		7, 52, 2, 53, 7, 53, 2, 54, 7, 54, 2, 55, 7, 55, 2, 56, 7, 56, 2, 57, 7,
		57, 2, 58, 7, 58, 2, 59, 7, 59, 2, 60, 7, 60, 2, 61, 7, 61, 2, 62, 7, 62,
		2, 63, 7, 63, 2, 64, 7, 64, 2, 65, 7, 65, 2, 66, 7, 66, 2, 67, 7, 67, 2,
		68, 7, 68, 2, 69, 7, 69, 2, 70, 7, 70, 2, 71, 7, 71, 2, 72, 7, 72, 2, 73,
		7, 73, 2, 74, 7, 74, 2, 75, 7, 75, 2, 76, 7, 76, 2, 77, 7, 77, 2, 78, 7,
		78, 2, 79, 7, 79, 2, 80, 7, 80, 2, 81, 7, 81, 2, 82, 7, 82, 2, 83, 7, 83,
		2, 84, 7, 84, 2, 85, 7, 85, 2, 86, 7, 86, 2, 87, 7, 87, 2, 88, 7, 88, 2,
		89, 7, 89, 2, 90, 7, 90, 2, 91, 7, 91, 2, 92, 7, 92, 2, 93, 7, 93, 2, 94,
		7, 94, 2, 95, 7, 95, 2, 96, 7, 96, 2, 97, 7, 97, 2, 98, 7, 98, 2, 99, 7,
		99, 2, 100, 7, 100, 2, 101, 7, 101, 2, 102, 7, 102, 2, 103, 7, 103, 2,
		104, 7, 104, 2, 105, 7, 105, 2, 106, 7, 106, 2, 107, 7, 107, 2, 108, 7,
		108, 2, 109, 7, 109, 2, 110, 7, 110, 2, 111, 7, 111, 2, 112, 7, 112, 2,
		113, 7, 113, 2, 114, 7, 114, 2, 115, 7, 115, 2, 116, 7, 116, 2, 117, 7,
		117, 2, 118, 7, 118, 2, 119, 7, 119, 2, 120, 7, 120, 2, 121, 7, 121, 2,
		122, 7, 122, 2, 123, 7, 123, 2, 124, 7, 124, 2, 125, 7, 125, 2, 126, 7,
		126, 2, 127, 7, 127, 2, 128, 7, 128, 2, 129, 7, 129, 2, 130, 7, 130, 2,
		131, 7, 131, 2, 132, 7, 132, 2, 133, 7, 133, 2, 134, 7, 134, 2, 135, 7,
		135, 2, 136, 7, 136, 2, 137, 7, 137, 2, 138, 7, 138, 2, 139, 7, 139, 2,
		140, 7, 140, 2, 141, 7, 141, 2, 142, 7, 142, 2, 143, 7, 143, 2, 144, 7,
		144, 2, 145, 7, 145, 2, 146, 7, 146, 2, 147, 7, 147, 2, 148, 7, 148, 2,
		149, 7, 149, 2, 150, 7, 150, 2, 151, 7, 151, 2, 152, 7, 152, 2, 153, 7,
		153, 2, 154, 7, 154, 2, 155, 7, 155, 2, 156, 7, 156, 2, 157, 7, 157, 2,
		158, 7, 158, 2, 159, 7, 159, 2, 160, 7, 160, 2, 161, 7, 161, 2, 162, 7,
		162, 2, 163, 7, 163, 2, 164, 7, 164, 2, 165, 7, 165, 2, 166, 7, 166, 2,
		167, 7, 167, 2, 168, 7, 168, 2, 169, 7, 169, 2, 170, 7, 170, 2, 171, 7,
		171, 2, 172, 7, 172, 2, 173, 7, 173, 2, 174, 7, 174, 2, 175, 7, 175, 2,
		176, 7, 176, 2, 177, 7, 177, 2, 178, 7, 178, 2, 179, 7, 179, 2, 180, 7,
		180, 2, 181, 7, 181, 2, 182, 7, 182, 2, 183, 7, 183, 2, 184, 7, 184, 2,
		185, 7, 185, 2, 186, 7, 186, 2, 187, 7, 187, 2, 188, 7, 188, 2, 189, 7,
		189, 2, 190, 7, 190, 2, 191, 7, 191, 2, 192, 7, 192, 2, 193, 7, 193, 2,
		194, 7, 194, 2, 195, 7, 195, 2, 196, 7, 196, 2, 197, 7, 197, 2, 198, 7,
		198, 2, 199, 7, 199, 2, 200, 7, 200, 2, 201, 7, 201, 2, 202, 7, 202, 2,
		203, 7, 203, 2, 204, 7, 204, 2, 205, 7, 205, 2, 206, 7, 206, 2, 207, 7,
		207, 2, 208, 7, 208, 2, 209, 7, 209, 2, 210, 7, 210, 2, 211, 7, 211, 2,
		212, 7, 212, 2, 213, 7, 213, 2, 214, 7, 214, 2, 215, 7, 215, 2, 216, 7,
		216, 2, 217, 7, 217, 1, 0, 3, 0, 438, 8, 0, 1, 0, 3, 0, 441, 8, 0, 1, 0,
		1, 0, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 3, 1, 3, 1, 3, 1, 4, 1, 4,
		1, 4, 1, 5, 1, 5, 1, 5, 1, 6, 1, 6, 1, 6, 1, 7, 1, 7, 1, 7, 1, 8, 1, 8,
		1, 8, 1, 8, 1, 8, 1, 8, 5, 8, 472, 8, 8, 10, 8, 12, 8, 475, 9, 8, 1, 8,
		1, 8, 1, 8, 1, 9, 1, 9, 1, 9, 1, 10, 1, 10, 1, 10, 1, 11, 1, 11, 1, 11,
		5, 11, 489, 8, 11, 10, 11, 12, 11, 492, 9, 11, 1, 11, 1, 11, 1, 11, 1,
		12, 1, 12, 1, 12, 1, 13, 1, 13, 1, 13, 1, 14, 1, 14, 1, 14, 1, 15, 1, 15,
		1, 15, 1, 16, 1, 16, 1, 16, 1, 17, 1, 17, 1, 18, 1, 18, 1, 18, 1, 19, 1,
		19, 1, 19, 1, 20, 1, 20, 1, 20, 1, 20, 1, 21, 1, 21, 1, 21, 1, 22, 1, 22,
		1, 22, 5, 22, 530, 8, 22, 10, 22, 12, 22, 533, 9, 22, 1, 22, 1, 22, 1,
		22, 1, 23, 1, 23, 1, 24, 1, 24, 1, 24, 3, 24, 543, 8, 24, 1, 24, 3, 24,
		546, 8, 24, 1, 25, 1, 25, 1, 25, 1, 25, 1, 26, 1, 26, 1, 26, 1, 27, 1,
		27, 1, 27, 1, 28, 1, 28, 1, 29, 1, 29, 1, 29, 5, 29, 563, 8, 29, 10, 29,
		12, 29, 566, 9, 29, 1, 29, 1, 29, 1, 29, 1, 30, 1, 30, 1, 30, 1, 31, 1,
		31, 1, 31, 1, 32, 1, 32, 1, 32, 1, 33, 1, 33, 1, 33, 1, 33, 1, 34, 1, 34,
		1, 34, 1, 35, 1, 35, 1, 35, 1, 35, 1, 36, 1, 36, 1, 36, 1, 36, 1, 37, 1,
		37, 1, 37, 1, 37, 1, 37, 1, 37, 5, 37, 601, 8, 37, 10, 37, 12, 37, 604,
		9, 37, 1, 37, 1, 37, 1, 37, 1, 38, 1, 38, 1, 38, 1, 38, 1, 38, 5, 38, 614,
		8, 38, 10, 38, 12, 38, 617, 9, 38, 1, 38, 1, 38, 1, 38, 1, 39, 1, 39, 1,
		39, 1, 40, 1, 40, 1, 40, 1, 40, 1, 40, 1, 40, 1, 40, 1, 40, 1, 40, 1, 40,
		1, 40, 1, 40, 1, 40, 1, 40, 1, 40, 1, 40, 1, 40, 1, 40, 1, 40, 1, 40, 1,
		40, 1, 40, 1, 40, 1, 40, 1, 40, 1, 40, 5, 40, 651, 8, 40, 10, 40, 12, 40,
		654, 9, 40, 1, 40, 1, 40, 1, 40, 1, 41, 1, 41, 1, 41, 1, 41, 1, 41, 1,
		41, 1, 41, 1, 41, 1, 41, 1, 41, 1, 41, 1, 41, 1, 41, 1, 41, 1, 41, 1, 41,
		1, 41, 1, 41, 1, 41, 1, 41, 1, 41, 1, 41, 1, 41, 1, 41, 1, 41, 1, 41, 1,
		41, 1, 41, 1, 41, 5, 41, 688, 8, 41, 10, 41, 12, 41, 691, 9, 41, 1, 41,
		1, 41, 1, 41, 1, 42, 1, 42, 1, 42, 1, 42, 1, 42, 1, 42, 1, 42, 1, 42, 1,
		42, 1, 42, 1, 42, 1, 42, 1, 42, 1, 42, 1, 42, 1, 42, 1, 42, 1, 42, 1, 42,
		1, 42, 1, 42, 1, 42, 1, 42, 1, 42, 1, 42, 1, 42, 1, 42, 1, 42, 1, 42, 1,
		42, 1, 42, 1, 42, 1, 42, 1, 42, 1, 42, 1, 42, 5, 42, 732, 8, 42, 10, 42,
		12, 42, 735, 9, 42, 1, 42, 1, 42, 1, 42, 1, 43, 1, 43, 1, 43, 1, 43, 1,
		43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43,
		1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 5, 43, 763, 8,
		43, 10, 43, 12, 43, 766, 9, 43, 1, 43, 1, 43, 1, 43, 1, 44, 1, 44, 1, 44,
		1, 45, 1, 45, 1, 45, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 47, 1, 47, 1,
		47, 1, 47, 1, 47, 1, 48, 1, 48, 1, 48, 5, 48, 790, 8, 48, 10, 48, 12, 48,
		793, 9, 48, 1, 48, 1, 48, 1, 48, 1, 49, 1, 49, 1, 49, 1, 50, 1, 50, 1,
		50, 1, 51, 1, 51, 1, 51, 1, 51, 5, 51, 808, 8, 51, 10, 51, 12, 51, 811,
		9, 51, 1, 51, 1, 51, 1, 51, 1, 52, 1, 52, 1, 52, 5, 52, 819, 8, 52, 10,
		52, 12, 52, 822, 9, 52, 1, 52, 1, 52, 1, 52, 1, 53, 1, 53, 1, 53, 1, 54,
		1, 54, 1, 54, 1, 54, 5, 54, 834, 8, 54, 10, 54, 12, 54, 837, 9, 54, 1,
		54, 1, 54, 1, 54, 1, 55, 1, 55, 1, 55, 1, 55, 1, 55, 1, 55, 1, 55, 1, 55,
		1, 55, 1, 55, 1, 55, 1, 55, 1, 55, 5, 55, 855, 8, 55, 10, 55, 12, 55, 858,
		9, 55, 1, 55, 1, 55, 1, 55, 1, 56, 1, 56, 1, 56, 1, 56, 1, 56, 1, 56, 1,
		56, 1, 56, 1, 57, 1, 57, 1, 57, 1, 57, 1, 58, 1, 58, 1, 58, 1, 59, 1, 59,
		1, 59, 1, 59, 5, 59, 882, 8, 59, 10, 59, 12, 59, 885, 9, 59, 1, 59, 1,
		59, 1, 59, 1, 60, 1, 60, 1, 60, 1, 61, 1, 61, 1, 61, 1, 62, 1, 62, 1, 62,
		1, 62, 1, 62, 1, 62, 1, 62, 1, 62, 1, 62, 5, 62, 905, 8, 62, 10, 62, 12,
		62, 908, 9, 62, 1, 62, 5, 62, 911, 8, 62, 10, 62, 12, 62, 914, 9, 62, 1,
		62, 1, 62, 1, 62, 1, 63, 1, 63, 1, 63, 1, 64, 1, 64, 1, 64, 1, 64, 1, 64,
		1, 64, 1, 64, 1, 64, 1, 64, 5, 64, 931, 8, 64, 10, 64, 12, 64, 934, 9,
		64, 1, 64, 5, 64, 937, 8, 64, 10, 64, 12, 64, 940, 9, 64, 1, 64, 1, 64,
		1, 64, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 5,
		65, 954, 8, 65, 10, 65, 12, 65, 957, 9, 65, 1, 65, 5, 65, 960, 8, 65, 10,
		65, 12, 65, 963, 9, 65, 1, 65, 1, 65, 1, 65, 1, 66, 1, 66, 1, 66, 1, 66,
		1, 66, 1, 66, 1, 66, 1, 66, 5, 66, 976, 8, 66, 10, 66, 12, 66, 979, 9,
		66, 1, 66, 1, 66, 1, 66, 1, 67, 1, 67, 5, 67, 986, 8, 67, 10, 67, 12, 67,
		989, 9, 67, 1, 68, 1, 68, 1, 68, 1, 68, 1, 68, 1, 68, 1, 68, 1, 68, 1,
		68, 1, 68, 1, 68, 1, 68, 1, 68, 5, 68, 1004, 8, 68, 10, 68, 12, 68, 1007,
		9, 68, 1, 68, 1, 68, 1, 68, 1, 69, 1, 69, 1, 69, 5, 69, 1015, 8, 69, 10,
		69, 12, 69, 1018, 9, 69, 1, 69, 1, 69, 1, 69, 1, 70, 1, 70, 1, 70, 1, 71,
		1, 71, 1, 71, 5, 71, 1029, 8, 71, 10, 71, 12, 71, 1032, 9, 71, 1, 71, 1,
		71, 1, 71, 1, 72, 1, 72, 1, 72, 5, 72, 1040, 8, 72, 10, 72, 12, 72, 1043,
		9, 72, 1, 72, 1, 72, 1, 72, 1, 73, 1, 73, 1, 73, 5, 73, 1051, 8, 73, 10,
		73, 12, 73, 1054, 9, 73, 1, 73, 1, 73, 1, 73, 1, 74, 1, 74, 1, 74, 5, 74,
		1062, 8, 74, 10, 74, 12, 74, 1065, 9, 74, 1, 74, 1, 74, 1, 74, 1, 75, 1,
		75, 1, 75, 1, 75, 1, 75, 1, 75, 1, 75, 1, 75, 1, 75, 1, 75, 1, 75, 5, 75,
		1081, 8, 75, 10, 75, 12, 75, 1084, 9, 75, 1, 75, 1, 75, 1, 75, 1, 76, 1,
		76, 1, 76, 5, 76, 1092, 8, 76, 10, 76, 12, 76, 1095, 9, 76, 1, 76, 1, 76,
		1, 76, 1, 77, 1, 77, 1, 78, 1, 78, 1, 78, 5, 78, 1105, 8, 78, 10, 78, 12,
		78, 1108, 9, 78, 1, 78, 1, 78, 1, 78, 1, 79, 1, 79, 1, 79, 1, 79, 1, 79,
		1, 79, 1, 79, 1, 79, 5, 79, 1121, 8, 79, 10, 79, 12, 79, 1124, 9, 79, 1,
		79, 1, 79, 1, 79, 1, 80, 1, 80, 1, 80, 1, 80, 1, 80, 1, 80, 1, 80, 1, 80,
		1, 80, 1, 80, 1, 80, 1, 80, 1, 80, 1, 80, 1, 80, 1, 80, 1, 80, 1, 80, 1,
		80, 1, 80, 1, 80, 1, 80, 1, 80, 1, 80, 1, 80, 1, 80, 1, 80, 1, 80, 1, 80,
		1, 80, 1, 80, 5, 80, 1160, 8, 80, 10, 80, 12, 80, 1163, 9, 80, 1, 80, 1,
		80, 1, 80, 1, 81, 1, 81, 1, 81, 1, 82, 1, 82, 1, 82, 1, 82, 1, 82, 5, 82,
		1176, 8, 82, 10, 82, 12, 82, 1179, 9, 82, 1, 82, 1, 82, 1, 82, 1, 83, 1,
		83, 1, 83, 1, 84, 1, 84, 1, 84, 1, 85, 1, 85, 1, 86, 1, 86, 1, 86, 1, 87,
		1, 87, 1, 87, 1, 88, 1, 88, 1, 88, 1, 89, 1, 89, 1, 90, 1, 90, 1, 90, 5,
		90, 1206, 8, 90, 10, 90, 12, 90, 1209, 9, 90, 1, 90, 1, 90, 1, 90, 1, 91,
		1, 91, 1, 91, 1, 91, 1, 91, 1, 91, 1, 91, 1, 91, 1, 91, 1, 91, 1, 91, 1,
		91, 1, 91, 1, 91, 5, 91, 1228, 8, 91, 10, 91, 12, 91, 1231, 9, 91, 1, 91,
		1, 91, 1, 91, 1, 92, 1, 92, 1, 92, 1, 93, 1, 93, 1, 93, 1, 94, 1, 94, 1,
		94, 1, 94, 1, 94, 1, 94, 1, 94, 1, 94, 1, 94, 1, 94, 1, 94, 1, 94, 1, 94,
		1, 94, 1, 94, 1, 94, 1, 94, 1, 94, 1, 94, 5, 94, 1261, 8, 94, 10, 94, 12,
		94, 1264, 9, 94, 1, 94, 1, 94, 1, 94, 1, 95, 1, 95, 1, 95, 1, 96, 1, 96,
		1, 96, 1, 96, 1, 96, 5, 96, 1277, 8, 96, 10, 96, 12, 96, 1280, 9, 96, 1,
		96, 1, 96, 1, 96, 1, 97, 1, 97, 1, 97, 5, 97, 1288, 8, 97, 10, 97, 12,
		97, 1291, 9, 97, 1, 97, 1, 97, 1, 97, 1, 98, 1, 98, 1, 98, 1, 99, 1, 99,
		1, 99, 1, 100, 1, 100, 1, 100, 1, 101, 1, 101, 1, 101, 1, 102, 1, 102,
		1, 102, 1, 103, 1, 103, 1, 103, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104,
		1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 5, 104, 1325, 8, 104, 10,
		104, 12, 104, 1328, 9, 104, 1, 104, 1, 104, 1, 104, 1, 105, 1, 105, 1,
		105, 1, 105, 1, 105, 1, 105, 1, 105, 1, 105, 1, 105, 1, 105, 1, 105, 1,
		105, 1, 105, 1, 105, 1, 105, 5, 105, 1348, 8, 105, 10, 105, 12, 105, 1351,
		9, 105, 1, 105, 1, 105, 1, 105, 1, 106, 1, 106, 1, 106, 1, 107, 1, 107,
		1, 107, 1, 108, 1, 108, 1, 108, 1, 109, 1, 109, 1, 109, 1, 109, 1, 110,
		1, 110, 1, 110, 1, 111, 1, 111, 1, 111, 1, 111, 1, 111, 1, 111, 1, 111,
		1, 111, 1, 111, 1, 111, 1, 111, 1, 111, 1, 111, 1, 111, 1, 111, 1, 111,
		1, 111, 1, 111, 1, 111, 1, 111, 1, 111, 1, 111, 1, 111, 1, 111, 1, 111,
		1, 111, 1, 111, 1, 111, 1, 111, 1, 111, 1, 111, 1, 111, 1, 111, 1, 111,
		1, 111, 1, 111, 1, 111, 1, 111, 1, 111, 1, 111, 1, 111, 1, 111, 1, 111,
		1, 111, 1, 111, 1, 111, 1, 111, 1, 111, 1, 111, 1, 111, 1, 111, 1, 111,
		1, 111, 1, 111, 1, 111, 1, 111, 1, 111, 1, 111, 1, 111, 1, 111, 1, 111,
		1, 111, 1, 111, 1, 111, 1, 111, 5, 111, 1437, 8, 111, 10, 111, 12, 111,
		1440, 9, 111, 1, 111, 1, 111, 1, 111, 1, 112, 1, 112, 1, 112, 1, 112, 1,
		112, 1, 112, 1, 113, 1, 113, 1, 113, 1, 113, 1, 113, 1, 113, 1, 114, 1,
		114, 1, 114, 1, 114, 1, 114, 1, 114, 1, 115, 1, 115, 1, 115, 1, 115, 1,
		115, 1, 115, 1, 116, 1, 116, 1, 116, 1, 116, 1, 116, 1, 116, 1, 117, 1,
		117, 1, 117, 1, 117, 1, 117, 1, 117, 1, 117, 1, 118, 1, 118, 1, 118, 1,
		118, 1, 118, 1, 118, 1, 118, 1, 119, 1, 119, 1, 119, 1, 119, 1, 119, 1,
		119, 1, 119, 1, 120, 1, 120, 1, 120, 1, 120, 1, 120, 1, 120, 1, 120, 1,
		121, 1, 121, 1, 121, 1, 121, 1, 121, 1, 121, 1, 121, 1, 122, 1, 122, 1,
		122, 1, 122, 1, 123, 1, 123, 1, 123, 1, 123, 1, 124, 1, 124, 1, 124, 1,
		124, 1, 125, 1, 125, 1, 125, 1, 125, 1, 126, 1, 126, 1, 126, 1, 126, 1,
		127, 1, 127, 1, 127, 1, 128, 1, 128, 1, 128, 1, 129, 1, 129, 1, 129, 1,
		130, 1, 130, 1, 130, 1, 131, 1, 131, 1, 131, 1, 132, 1, 132, 1, 132, 1,
		132, 1, 132, 1, 132, 1, 133, 1, 133, 1, 133, 1, 133, 1, 134, 1, 134, 1,
		134, 1, 134, 1, 135, 1, 135, 1, 135, 1, 135, 1, 136, 1, 136, 1, 136, 1,
		136, 1, 137, 1, 137, 1, 137, 1, 137, 1, 138, 1, 138, 1, 138, 1, 138, 1,
		139, 1, 139, 1, 140, 1, 140, 1, 140, 1, 140, 1, 141, 1, 141, 1, 141, 1,
		141, 1, 142, 1, 142, 1, 142, 1, 142, 1, 143, 1, 143, 1, 143, 1, 143, 1,
		144, 1, 144, 1, 144, 1, 144, 1, 145, 1, 145, 1, 145, 1, 145, 1, 146, 1,
		146, 1, 146, 1, 146, 1, 147, 1, 147, 1, 147, 1, 147, 1, 148, 1, 148, 1,
		148, 1, 148, 1, 149, 1, 149, 1, 149, 1, 149, 1, 150, 1, 150, 1, 150, 1,
		150, 1, 151, 1, 151, 1, 151, 1, 151, 1, 152, 1, 152, 1, 152, 1, 152, 1,
		153, 1, 153, 1, 153, 1, 153, 1, 154, 1, 154, 1, 154, 1, 154, 1, 155, 1,
		155, 1, 155, 1, 155, 1, 156, 1, 156, 1, 156, 1, 156, 1, 157, 1, 157, 1,
		157, 1, 157, 1, 158, 1, 158, 1, 158, 1, 158, 1, 159, 1, 159, 1, 159, 1,
		159, 1, 160, 1, 160, 1, 160, 1, 160, 1, 161, 1, 161, 1, 161, 1, 161, 1,
		162, 1, 162, 1, 162, 1, 162, 1, 163, 1, 163, 1, 163, 1, 163, 1, 164, 1,
		164, 1, 164, 1, 164, 1, 165, 1, 165, 1, 165, 1, 165, 1, 166, 1, 166, 1,
		166, 1, 166, 1, 167, 1, 167, 1, 167, 1, 167, 1, 167, 1, 167, 1, 167, 1,
		167, 1, 167, 1, 167, 1, 167, 1, 167, 1, 167, 1, 168, 1, 168, 1, 168, 1,
		168, 1, 168, 1, 168, 1, 168, 1, 168, 1, 168, 1, 168, 1, 168, 1, 168, 1,
		168, 1, 169, 1, 169, 1, 169, 1, 169, 1, 169, 1, 169, 1, 169, 1, 169, 5,
		169, 1719, 8, 169, 10, 169, 12, 169, 1722, 9, 169, 1, 169, 1, 169, 1, 169,
		1, 170, 1, 170, 1, 170, 1, 170, 1, 170, 1, 170, 1, 170, 1, 170, 1, 170,
		1, 170, 1, 171, 1, 171, 1, 171, 1, 171, 1, 171, 1, 171, 1, 171, 1, 171,
		1, 171, 5, 171, 1746, 8, 171, 10, 171, 12, 171, 1749, 9, 171, 1, 171, 1,
		171, 1, 171, 1, 172, 1, 172, 1, 172, 1, 172, 1, 172, 1, 172, 1, 172, 1,
		172, 1, 172, 1, 173, 1, 173, 1, 173, 1, 173, 1, 174, 1, 174, 1, 174, 1,
		174, 1, 174, 5, 174, 1772, 8, 174, 10, 174, 12, 174, 1775, 9, 174, 1, 174,
		1, 174, 1, 174, 1, 175, 1, 175, 1, 175, 5, 175, 1783, 8, 175, 10, 175,
		12, 175, 1786, 9, 175, 1, 175, 1, 175, 1, 175, 1, 176, 1, 176, 1, 176,
		1, 176, 1, 176, 1, 176, 1, 176, 5, 176, 1798, 8, 176, 10, 176, 12, 176,
		1801, 9, 176, 1, 176, 1, 176, 1, 176, 1, 177, 1, 177, 1, 177, 1, 177, 5,
		177, 1810, 8, 177, 10, 177, 12, 177, 1813, 9, 177, 1, 177, 5, 177, 1816,
		8, 177, 10, 177, 12, 177, 1819, 9, 177, 1, 177, 1, 177, 1, 177, 1, 178,
		1, 178, 1, 178, 5, 178, 1827, 8, 178, 10, 178, 12, 178, 1830, 9, 178, 1,
		178, 1, 178, 1, 178, 1, 179, 1, 179, 1, 179, 1, 179, 1, 179, 5, 179, 1840,
		8, 179, 10, 179, 12, 179, 1843, 9, 179, 1, 179, 1, 179, 5, 179, 1847, 8,
		179, 10, 179, 12, 179, 1850, 9, 179, 1, 179, 1, 179, 1, 179, 1, 180, 1,
		180, 1, 180, 1, 181, 1, 181, 1, 181, 1, 182, 1, 182, 1, 182, 1, 182, 1,
		182, 5, 182, 1866, 8, 182, 10, 182, 12, 182, 1869, 9, 182, 1, 182, 1, 182,
		1, 182, 1, 183, 1, 183, 1, 183, 1, 184, 1, 184, 1, 184, 1, 185, 1, 185,
		3, 185, 1882, 8, 185, 1, 186, 1, 186, 1, 186, 3, 186, 1887, 8, 186, 1,
		187, 1, 187, 1, 188, 1, 188, 1, 188, 5, 188, 1894, 8, 188, 10, 188, 12,
		188, 1897, 9, 188, 1, 189, 1, 189, 5, 189, 1901, 8, 189, 10, 189, 12, 189,
		1904, 9, 189, 1, 190, 1, 190, 1, 190, 3, 190, 1909, 8, 190, 1, 190, 1,
		190, 1, 191, 1, 191, 1, 192, 1, 192, 1, 193, 1, 193, 1, 194, 1, 194, 1,
		195, 1, 195, 1, 196, 1, 196, 1, 197, 1, 197, 1, 197, 5, 197, 1928, 8, 197,
		10, 197, 12, 197, 1931, 9, 197, 1, 197, 1, 197, 1, 197, 1, 198, 1, 198,
		3, 198, 1938, 8, 198, 1, 198, 1, 198, 1, 199, 1, 199, 1, 200, 1, 200, 1,
		200, 1, 200, 1, 200, 3, 200, 1949, 8, 200, 1, 201, 1, 201, 1, 201, 1, 201,
		1, 201, 1, 201, 1, 201, 1, 201, 1, 201, 1, 201, 3, 201, 1961, 8, 201, 1,
		202, 1, 202, 1, 202, 1, 202, 1, 202, 1, 202, 1, 202, 1, 202, 1, 202, 1,
		202, 1, 202, 1, 202, 1, 202, 1, 202, 3, 202, 1977, 8, 202, 3, 202, 1979,
		8, 202, 1, 203, 1, 203, 3, 203, 1983, 8, 203, 1, 203, 1, 203, 1, 203, 1,
		203, 1, 203, 1, 203, 3, 203, 1991, 8, 203, 1, 204, 1, 204, 1, 204, 5, 204,
		1996, 8, 204, 10, 204, 12, 204, 1999, 9, 204, 1, 205, 1, 205, 1, 205, 3,
		205, 2004, 8, 205, 1, 205, 1, 205, 1, 205, 3, 205, 2009, 8, 205, 3, 205,
		2011, 8, 205, 1, 206, 1, 206, 3, 206, 2015, 8, 206, 1, 206, 1, 206, 5,
		206, 2019, 8, 206, 10, 206, 12, 206, 2022, 9, 206, 1, 206, 1, 206, 1, 206,
		3, 206, 2027, 8, 206, 1, 207, 1, 207, 1, 207, 1, 207, 1, 207, 1, 207, 1,
		207, 3, 207, 2036, 8, 207, 1, 207, 1, 207, 3, 207, 2040, 8, 207, 1, 208,
		1, 208, 5, 208, 2044, 8, 208, 10, 208, 12, 208, 2047, 9, 208, 1, 209, 1,
		209, 3, 209, 2051, 8, 209, 1, 209, 1, 209, 5, 209, 2055, 8, 209, 10, 209,
		12, 209, 2058, 9, 209, 1, 209, 1, 209, 5, 209, 2062, 8, 209, 10, 209, 12,
		209, 2065, 9, 209, 3, 209, 2067, 8, 209, 1, 210, 1, 210, 1, 210, 3, 210,
		2072, 8, 210, 1, 210, 1, 210, 1, 210, 1, 210, 1, 210, 1, 210, 1, 210, 3,
		210, 2081, 8, 210, 1, 210, 1, 210, 1, 210, 1, 210, 1, 210, 1, 210, 1, 210,
		1, 210, 1, 210, 1, 210, 3, 210, 2093, 8, 210, 1, 211, 3, 211, 2096, 8,
		211, 1, 211, 3, 211, 2099, 8, 211, 1, 211, 3, 211, 2102, 8, 211, 1, 211,
		1, 211, 1, 211, 1, 211, 1, 211, 1, 211, 3, 211, 2110, 8, 211, 1, 211, 3,
		211, 2113, 8, 211, 3, 211, 2115, 8, 211, 1, 212, 1, 212, 3, 212, 2119,
		8, 212, 1, 212, 1, 212, 5, 212, 2123, 8, 212, 10, 212, 12, 212, 2126, 9,
		212, 1, 212, 1, 212, 1, 212, 3, 212, 2131, 8, 212, 1, 213, 1, 213, 3, 213,
		2135, 8, 213, 1, 213, 1, 213, 1, 213, 1, 213, 3, 213, 2141, 8, 213, 1,
		213, 1, 213, 1, 213, 1, 213, 1, 213, 3, 213, 2148, 8, 213, 1, 214, 1, 214,
		1, 215, 1, 215, 1, 215, 1, 215, 5, 215, 2156, 8, 215, 10, 215, 12, 215,
		2159, 9, 215, 1, 215, 1, 215, 1, 215, 1, 216, 1, 216, 1, 216, 1, 216, 1,
		216, 3, 216, 2169, 8, 216, 1, 217, 1, 217, 1, 217, 5, 217, 2174, 8, 217,
		10, 217, 12, 217, 2177, 9, 217, 1, 217, 1, 217, 1, 217, 1, 217, 0, 0, 218,
		0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36,
		38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72,
		74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106,
		108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136,
		138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166,
		168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196,
		198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226,
		228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254, 256,
		258, 260, 262, 264, 266, 268, 270, 272, 274, 276, 278, 280, 282, 284, 286,
		288, 290, 292, 294, 296, 298, 300, 302, 304, 306, 308, 310, 312, 314, 316,
		318, 320, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 342, 344, 346,
		348, 350, 352, 354, 356, 358, 360, 362, 364, 366, 368, 370, 372, 374, 376,
		378, 380, 382, 384, 386, 388, 390, 392, 394, 396, 398, 400, 402, 404, 406,
		408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 0,
		20, 1, 0, 15, 18, 1, 0, 21, 22, 1, 0, 33, 39, 1, 0, 56, 63, 1, 0, 65, 69,
		1, 0, 82, 88, 1, 0, 86, 87, 1, 0, 122, 123, 1, 0, 140, 142, 1, 0, 144,
		151, 1, 0, 152, 157, 1, 0, 158, 159, 2, 0, 122, 123, 187, 189, 1, 0, 228,
		229, 1, 0, 242, 243, 1, 0, 248, 258, 1, 0, 259, 261, 1, 0, 262, 265, 1,
		0, 266, 269, 1, 0, 270, 271, 2302, 0, 437, 1, 0, 0, 0, 2, 444, 1, 0, 0,
		0, 4, 447, 1, 0, 0, 0, 6, 450, 1, 0, 0, 0, 8, 453, 1, 0, 0, 0, 10, 456,
		1, 0, 0, 0, 12, 459, 1, 0, 0, 0, 14, 462, 1, 0, 0, 0, 16, 465, 1, 0, 0,
		0, 18, 479, 1, 0, 0, 0, 20, 482, 1, 0, 0, 0, 22, 485, 1, 0, 0, 0, 24, 496,
		1, 0, 0, 0, 26, 499, 1, 0, 0, 0, 28, 502, 1, 0, 0, 0, 30, 505, 1, 0, 0,
		0, 32, 508, 1, 0, 0, 0, 34, 511, 1, 0, 0, 0, 36, 513, 1, 0, 0, 0, 38, 516,
		1, 0, 0, 0, 40, 519, 1, 0, 0, 0, 42, 523, 1, 0, 0, 0, 44, 526, 1, 0, 0,
		0, 46, 537, 1, 0, 0, 0, 48, 539, 1, 0, 0, 0, 50, 547, 1, 0, 0, 0, 52, 551,
		1, 0, 0, 0, 54, 554, 1, 0, 0, 0, 56, 557, 1, 0, 0, 0, 58, 559, 1, 0, 0,
		0, 60, 570, 1, 0, 0, 0, 62, 573, 1, 0, 0, 0, 64, 576, 1, 0, 0, 0, 66, 579,
		1, 0, 0, 0, 68, 583, 1, 0, 0, 0, 70, 586, 1, 0, 0, 0, 72, 590, 1, 0, 0,
		0, 74, 594, 1, 0, 0, 0, 76, 608, 1, 0, 0, 0, 78, 621, 1, 0, 0, 0, 80, 624,
		1, 0, 0, 0, 82, 658, 1, 0, 0, 0, 84, 695, 1, 0, 0, 0, 86, 739, 1, 0, 0,
		0, 88, 770, 1, 0, 0, 0, 90, 773, 1, 0, 0, 0, 92, 776, 1, 0, 0, 0, 94, 781,
		1, 0, 0, 0, 96, 786, 1, 0, 0, 0, 98, 797, 1, 0, 0, 0, 100, 800, 1, 0, 0,
		0, 102, 803, 1, 0, 0, 0, 104, 815, 1, 0, 0, 0, 106, 826, 1, 0, 0, 0, 108,
		829, 1, 0, 0, 0, 110, 841, 1, 0, 0, 0, 112, 862, 1, 0, 0, 0, 114, 870,
		1, 0, 0, 0, 116, 874, 1, 0, 0, 0, 118, 877, 1, 0, 0, 0, 120, 889, 1, 0,
		0, 0, 122, 892, 1, 0, 0, 0, 124, 895, 1, 0, 0, 0, 126, 918, 1, 0, 0, 0,
		128, 921, 1, 0, 0, 0, 130, 944, 1, 0, 0, 0, 132, 967, 1, 0, 0, 0, 134,
		983, 1, 0, 0, 0, 136, 990, 1, 0, 0, 0, 138, 1011, 1, 0, 0, 0, 140, 1022,
		1, 0, 0, 0, 142, 1025, 1, 0, 0, 0, 144, 1036, 1, 0, 0, 0, 146, 1047, 1,
		0, 0, 0, 148, 1058, 1, 0, 0, 0, 150, 1069, 1, 0, 0, 0, 152, 1088, 1, 0,
		0, 0, 154, 1099, 1, 0, 0, 0, 156, 1101, 1, 0, 0, 0, 158, 1112, 1, 0, 0,
		0, 160, 1128, 1, 0, 0, 0, 162, 1167, 1, 0, 0, 0, 164, 1170, 1, 0, 0, 0,
		166, 1183, 1, 0, 0, 0, 168, 1186, 1, 0, 0, 0, 170, 1189, 1, 0, 0, 0, 172,
		1191, 1, 0, 0, 0, 174, 1194, 1, 0, 0, 0, 176, 1197, 1, 0, 0, 0, 178, 1200,
		1, 0, 0, 0, 180, 1202, 1, 0, 0, 0, 182, 1213, 1, 0, 0, 0, 184, 1235, 1,
		0, 0, 0, 186, 1238, 1, 0, 0, 0, 188, 1241, 1, 0, 0, 0, 190, 1268, 1, 0,
		0, 0, 192, 1271, 1, 0, 0, 0, 194, 1284, 1, 0, 0, 0, 196, 1295, 1, 0, 0,
		0, 198, 1298, 1, 0, 0, 0, 200, 1301, 1, 0, 0, 0, 202, 1304, 1, 0, 0, 0,
		204, 1307, 1, 0, 0, 0, 206, 1310, 1, 0, 0, 0, 208, 1313, 1, 0, 0, 0, 210,
		1332, 1, 0, 0, 0, 212, 1355, 1, 0, 0, 0, 214, 1358, 1, 0, 0, 0, 216, 1361,
		1, 0, 0, 0, 218, 1364, 1, 0, 0, 0, 220, 1368, 1, 0, 0, 0, 222, 1371, 1,
		0, 0, 0, 224, 1444, 1, 0, 0, 0, 226, 1450, 1, 0, 0, 0, 228, 1456, 1, 0,
		0, 0, 230, 1462, 1, 0, 0, 0, 232, 1468, 1, 0, 0, 0, 234, 1474, 1, 0, 0,
		0, 236, 1481, 1, 0, 0, 0, 238, 1488, 1, 0, 0, 0, 240, 1495, 1, 0, 0, 0,
		242, 1502, 1, 0, 0, 0, 244, 1509, 1, 0, 0, 0, 246, 1513, 1, 0, 0, 0, 248,
		1517, 1, 0, 0, 0, 250, 1521, 1, 0, 0, 0, 252, 1525, 1, 0, 0, 0, 254, 1529,
		1, 0, 0, 0, 256, 1532, 1, 0, 0, 0, 258, 1535, 1, 0, 0, 0, 260, 1538, 1,
		0, 0, 0, 262, 1541, 1, 0, 0, 0, 264, 1544, 1, 0, 0, 0, 266, 1550, 1, 0,
		0, 0, 268, 1554, 1, 0, 0, 0, 270, 1558, 1, 0, 0, 0, 272, 1562, 1, 0, 0,
		0, 274, 1566, 1, 0, 0, 0, 276, 1570, 1, 0, 0, 0, 278, 1574, 1, 0, 0, 0,
		280, 1576, 1, 0, 0, 0, 282, 1580, 1, 0, 0, 0, 284, 1584, 1, 0, 0, 0, 286,
		1588, 1, 0, 0, 0, 288, 1592, 1, 0, 0, 0, 290, 1596, 1, 0, 0, 0, 292, 1600,
		1, 0, 0, 0, 294, 1604, 1, 0, 0, 0, 296, 1608, 1, 0, 0, 0, 298, 1612, 1,
		0, 0, 0, 300, 1616, 1, 0, 0, 0, 302, 1620, 1, 0, 0, 0, 304, 1624, 1, 0,
		0, 0, 306, 1628, 1, 0, 0, 0, 308, 1632, 1, 0, 0, 0, 310, 1636, 1, 0, 0,
		0, 312, 1640, 1, 0, 0, 0, 314, 1644, 1, 0, 0, 0, 316, 1648, 1, 0, 0, 0,
		318, 1652, 1, 0, 0, 0, 320, 1656, 1, 0, 0, 0, 322, 1660, 1, 0, 0, 0, 324,
		1664, 1, 0, 0, 0, 326, 1668, 1, 0, 0, 0, 328, 1672, 1, 0, 0, 0, 330, 1676,
		1, 0, 0, 0, 332, 1680, 1, 0, 0, 0, 334, 1684, 1, 0, 0, 0, 336, 1697, 1,
		0, 0, 0, 338, 1710, 1, 0, 0, 0, 340, 1726, 1, 0, 0, 0, 342, 1736, 1, 0,
		0, 0, 344, 1753, 1, 0, 0, 0, 346, 1762, 1, 0, 0, 0, 348, 1766, 1, 0, 0,
		0, 350, 1779, 1, 0, 0, 0, 352, 1790, 1, 0, 0, 0, 354, 1805, 1, 0, 0, 0,
		356, 1823, 1, 0, 0, 0, 358, 1834, 1, 0, 0, 0, 360, 1854, 1, 0, 0, 0, 362,
		1857, 1, 0, 0, 0, 364, 1860, 1, 0, 0, 0, 366, 1873, 1, 0, 0, 0, 368, 1876,
		1, 0, 0, 0, 370, 1881, 1, 0, 0, 0, 372, 1886, 1, 0, 0, 0, 374, 1888, 1,
		0, 0, 0, 376, 1890, 1, 0, 0, 0, 378, 1898, 1, 0, 0, 0, 380, 1905, 1, 0,
		0, 0, 382, 1912, 1, 0, 0, 0, 384, 1914, 1, 0, 0, 0, 386, 1916, 1, 0, 0,
		0, 388, 1918, 1, 0, 0, 0, 390, 1920, 1, 0, 0, 0, 392, 1922, 1, 0, 0, 0,
		394, 1924, 1, 0, 0, 0, 396, 1937, 1, 0, 0, 0, 398, 1941, 1, 0, 0, 0, 400,
		1948, 1, 0, 0, 0, 402, 1960, 1, 0, 0, 0, 404, 1978, 1, 0, 0, 0, 406, 1990,
		1, 0, 0, 0, 408, 1992, 1, 0, 0, 0, 410, 2010, 1, 0, 0, 0, 412, 2026, 1,
		0, 0, 0, 414, 2039, 1, 0, 0, 0, 416, 2041, 1, 0, 0, 0, 418, 2048, 1, 0,
		0, 0, 420, 2092, 1, 0, 0, 0, 422, 2114, 1, 0, 0, 0, 424, 2130, 1, 0, 0,
		0, 426, 2147, 1, 0, 0, 0, 428, 2149, 1, 0, 0, 0, 430, 2151, 1, 0, 0, 0,
		432, 2168, 1, 0, 0, 0, 434, 2170, 1, 0, 0, 0, 436, 438, 3, 70, 35, 0, 437,
		436, 1, 0, 0, 0, 437, 438, 1, 0, 0, 0, 438, 440, 1, 0, 0, 0, 439, 441,
		3, 72, 36, 0, 440, 439, 1, 0, 0, 0, 440, 441, 1, 0, 0, 0, 441, 442, 1,
		0, 0, 0, 442, 443, 3, 74, 37, 0, 443, 1, 1, 0, 0, 0, 444, 445, 5, 1, 0,
		0, 445, 446, 3, 370, 185, 0, 446, 3, 1, 0, 0, 0, 447, 448, 5, 2, 0, 0,
		448, 449, 3, 370, 185, 0, 449, 5, 1, 0, 0, 0, 450, 451, 5, 3, 0, 0, 451,
		452, 3, 370, 185, 0, 452, 7, 1, 0, 0, 0, 453, 454, 5, 4, 0, 0, 454, 455,
		3, 370, 185, 0, 455, 9, 1, 0, 0, 0, 456, 457, 5, 5, 0, 0, 457, 458, 3,
		370, 185, 0, 458, 11, 1, 0, 0, 0, 459, 460, 5, 6, 0, 0, 460, 461, 3, 370,
		185, 0, 461, 13, 1, 0, 0, 0, 462, 463, 5, 7, 0, 0, 463, 464, 3, 370, 185,
		0, 464, 15, 1, 0, 0, 0, 465, 466, 5, 298, 0, 0, 466, 473, 5, 8, 0, 0, 467,
		472, 3, 18, 9, 0, 468, 469, 3, 20, 10, 0, 469, 470, 3, 22, 11, 0, 470,
		472, 1, 0, 0, 0, 471, 467, 1, 0, 0, 0, 471, 468, 1, 0, 0, 0, 472, 475,
		1, 0, 0, 0, 473, 471, 1, 0, 0, 0, 473, 474, 1, 0, 0, 0, 474, 476, 1, 0,
		0, 0, 475, 473, 1, 0, 0, 0, 476, 477, 5, 299, 0, 0, 477, 478, 5, 8, 0,
		0, 478, 17, 1, 0, 0, 0, 479, 480, 5, 9, 0, 0, 480, 481, 3, 374, 187, 0,
		481, 19, 1, 0, 0, 0, 482, 483, 5, 10, 0, 0, 483, 484, 3, 374, 187, 0, 484,
		21, 1, 0, 0, 0, 485, 486, 5, 298, 0, 0, 486, 490, 5, 11, 0, 0, 487, 489,
		3, 374, 187, 0, 488, 487, 1, 0, 0, 0, 489, 492, 1, 0, 0, 0, 490, 488, 1,
		0, 0, 0, 490, 491, 1, 0, 0, 0, 491, 493, 1, 0, 0, 0, 492, 490, 1, 0, 0,
		0, 493, 494, 5, 299, 0, 0, 494, 495, 5, 11, 0, 0, 495, 23, 1, 0, 0, 0,
		496, 497, 5, 12, 0, 0, 497, 498, 3, 370, 185, 0, 498, 25, 1, 0, 0, 0, 499,
		500, 5, 13, 0, 0, 500, 501, 3, 388, 194, 0, 501, 27, 1, 0, 0, 0, 502, 503,
		5, 14, 0, 0, 503, 504, 7, 0, 0, 0, 504, 29, 1, 0, 0, 0, 505, 506, 5, 19,
		0, 0, 506, 507, 3, 374, 187, 0, 507, 31, 1, 0, 0, 0, 508, 509, 5, 20, 0,
		0, 509, 510, 7, 1, 0, 0, 510, 33, 1, 0, 0, 0, 511, 512, 5, 23, 0, 0, 512,
		35, 1, 0, 0, 0, 513, 514, 5, 24, 0, 0, 514, 515, 3, 376, 188, 0, 515, 37,
		1, 0, 0, 0, 516, 517, 5, 25, 0, 0, 517, 518, 3, 370, 185, 0, 518, 39, 1,
		0, 0, 0, 519, 520, 5, 26, 0, 0, 520, 521, 3, 372, 186, 0, 521, 522, 3,
		372, 186, 0, 522, 41, 1, 0, 0, 0, 523, 524, 5, 27, 0, 0, 524, 525, 3, 374,
		187, 0, 525, 43, 1, 0, 0, 0, 526, 527, 5, 298, 0, 0, 527, 531, 5, 28, 0,
		0, 528, 530, 3, 376, 188, 0, 529, 528, 1, 0, 0, 0, 530, 533, 1, 0, 0, 0,
		531, 529, 1, 0, 0, 0, 531, 532, 1, 0, 0, 0, 532, 534, 1, 0, 0, 0, 533,
		531, 1, 0, 0, 0, 534, 535, 5, 299, 0, 0, 535, 536, 5, 28, 0, 0, 536, 45,
		1, 0, 0, 0, 537, 538, 5, 29, 0, 0, 538, 47, 1, 0, 0, 0, 539, 540, 5, 30,
		0, 0, 540, 542, 3, 370, 185, 0, 541, 543, 3, 370, 185, 0, 542, 541, 1,
		0, 0, 0, 542, 543, 1, 0, 0, 0, 543, 545, 1, 0, 0, 0, 544, 546, 3, 370,
		185, 0, 545, 544, 1, 0, 0, 0, 545, 546, 1, 0, 0, 0, 546, 49, 1, 0, 0, 0,
		547, 548, 5, 31, 0, 0, 548, 549, 3, 370, 185, 0, 549, 550, 3, 370, 185,
		0, 550, 51, 1, 0, 0, 0, 551, 552, 5, 32, 0, 0, 552, 553, 7, 2, 0, 0, 553,
		53, 1, 0, 0, 0, 554, 555, 5, 40, 0, 0, 555, 556, 3, 374, 187, 0, 556, 55,
		1, 0, 0, 0, 557, 558, 5, 41, 0, 0, 558, 57, 1, 0, 0, 0, 559, 560, 5, 298,
		0, 0, 560, 564, 5, 42, 0, 0, 561, 563, 3, 376, 188, 0, 562, 561, 1, 0,
		0, 0, 563, 566, 1, 0, 0, 0, 564, 562, 1, 0, 0, 0, 564, 565, 1, 0, 0, 0,
		565, 567, 1, 0, 0, 0, 566, 564, 1, 0, 0, 0, 567, 568, 5, 299, 0, 0, 568,
		569, 5, 42, 0, 0, 569, 59, 1, 0, 0, 0, 570, 571, 5, 43, 0, 0, 571, 572,
		3, 376, 188, 0, 572, 61, 1, 0, 0, 0, 573, 574, 5, 44, 0, 0, 574, 575, 3,
		376, 188, 0, 575, 63, 1, 0, 0, 0, 576, 577, 5, 45, 0, 0, 577, 578, 3, 372,
		186, 0, 578, 65, 1, 0, 0, 0, 579, 580, 5, 46, 0, 0, 580, 581, 3, 374, 187,
		0, 581, 582, 3, 370, 185, 0, 582, 67, 1, 0, 0, 0, 583, 584, 5, 47, 0, 0,
		584, 585, 3, 374, 187, 0, 585, 69, 1, 0, 0, 0, 586, 587, 5, 48, 0, 0, 587,
		588, 3, 370, 185, 0, 588, 589, 3, 370, 185, 0, 589, 71, 1, 0, 0, 0, 590,
		591, 5, 49, 0, 0, 591, 592, 3, 370, 185, 0, 592, 593, 3, 370, 185, 0, 593,
		73, 1, 0, 0, 0, 594, 595, 5, 298, 0, 0, 595, 596, 5, 50, 0, 0, 596, 597,
		3, 376, 188, 0, 597, 602, 3, 374, 187, 0, 598, 601, 3, 76, 38, 0, 599,
		601, 3, 80, 40, 0, 600, 598, 1, 0, 0, 0, 600, 599, 1, 0, 0, 0, 601, 604,
		1, 0, 0, 0, 602, 600, 1, 0, 0, 0, 602, 603, 1, 0, 0, 0, 603, 605, 1, 0,
		0, 0, 604, 602, 1, 0, 0, 0, 605, 606, 5, 299, 0, 0, 606, 607, 5, 50, 0,
		0, 607, 75, 1, 0, 0, 0, 608, 609, 5, 298, 0, 0, 609, 610, 5, 51, 0, 0,
		610, 615, 3, 374, 187, 0, 611, 614, 3, 78, 39, 0, 612, 614, 3, 68, 34,
		0, 613, 611, 1, 0, 0, 0, 613, 612, 1, 0, 0, 0, 614, 617, 1, 0, 0, 0, 615,
		613, 1, 0, 0, 0, 615, 616, 1, 0, 0, 0, 616, 618, 1, 0, 0, 0, 617, 615,
		1, 0, 0, 0, 618, 619, 5, 299, 0, 0, 619, 620, 5, 51, 0, 0, 620, 77, 1,
		0, 0, 0, 621, 622, 5, 52, 0, 0, 622, 623, 3, 376, 188, 0, 623, 79, 1, 0,
		0, 0, 624, 625, 5, 298, 0, 0, 625, 626, 5, 53, 0, 0, 626, 627, 3, 376,
		188, 0, 627, 652, 3, 374, 187, 0, 628, 651, 3, 394, 197, 0, 629, 651, 3,
		430, 215, 0, 630, 651, 3, 82, 41, 0, 631, 651, 3, 84, 42, 0, 632, 651,
		3, 110, 55, 0, 633, 651, 3, 124, 62, 0, 634, 651, 3, 128, 64, 0, 635, 651,
		3, 130, 65, 0, 636, 651, 3, 132, 66, 0, 637, 651, 3, 136, 68, 0, 638, 651,
		3, 150, 75, 0, 639, 651, 3, 158, 79, 0, 640, 651, 3, 160, 80, 0, 641, 651,
		3, 182, 91, 0, 642, 651, 3, 188, 94, 0, 643, 651, 3, 222, 111, 0, 644,
		651, 3, 334, 167, 0, 645, 651, 3, 336, 168, 0, 646, 651, 3, 338, 169, 0,
		647, 651, 3, 342, 171, 0, 648, 651, 3, 348, 174, 0, 649, 651, 3, 352, 176,
		0, 650, 628, 1, 0, 0, 0, 650, 629, 1, 0, 0, 0, 650, 630, 1, 0, 0, 0, 650,
		631, 1, 0, 0, 0, 650, 632, 1, 0, 0, 0, 650, 633, 1, 0, 0, 0, 650, 634,
		1, 0, 0, 0, 650, 635, 1, 0, 0, 0, 650, 636, 1, 0, 0, 0, 650, 637, 1, 0,
		0, 0, 650, 638, 1, 0, 0, 0, 650, 639, 1, 0, 0, 0, 650, 640, 1, 0, 0, 0,
		650, 641, 1, 0, 0, 0, 650, 642, 1, 0, 0, 0, 650, 643, 1, 0, 0, 0, 650,
		644, 1, 0, 0, 0, 650, 645, 1, 0, 0, 0, 650, 646, 1, 0, 0, 0, 650, 647,
		1, 0, 0, 0, 650, 648, 1, 0, 0, 0, 650, 649, 1, 0, 0, 0, 651, 654, 1, 0,
		0, 0, 652, 650, 1, 0, 0, 0, 652, 653, 1, 0, 0, 0, 653, 655, 1, 0, 0, 0,
		654, 652, 1, 0, 0, 0, 655, 656, 5, 299, 0, 0, 656, 657, 5, 53, 0, 0, 657,
		81, 1, 0, 0, 0, 658, 659, 5, 298, 0, 0, 659, 660, 5, 54, 0, 0, 660, 661,
		3, 376, 188, 0, 661, 662, 3, 374, 187, 0, 662, 663, 3, 370, 185, 0, 663,
		664, 3, 376, 188, 0, 664, 665, 3, 376, 188, 0, 665, 666, 3, 372, 186, 0,
		666, 667, 3, 376, 188, 0, 667, 668, 3, 370, 185, 0, 668, 669, 3, 372, 186,
		0, 669, 689, 3, 372, 186, 0, 670, 688, 3, 16, 8, 0, 671, 688, 3, 26, 13,
		0, 672, 688, 3, 28, 14, 0, 673, 688, 3, 32, 16, 0, 674, 688, 3, 36, 18,
		0, 675, 688, 3, 38, 19, 0, 676, 688, 3, 40, 20, 0, 677, 688, 3, 42, 21,
		0, 678, 688, 3, 44, 22, 0, 679, 688, 3, 46, 23, 0, 680, 688, 3, 430, 215,
		0, 681, 688, 3, 52, 26, 0, 682, 688, 3, 54, 27, 0, 683, 688, 3, 56, 28,
		0, 684, 688, 3, 60, 30, 0, 685, 688, 3, 64, 32, 0, 686, 688, 3, 66, 33,
		0, 687, 670, 1, 0, 0, 0, 687, 671, 1, 0, 0, 0, 687, 672, 1, 0, 0, 0, 687,
		673, 1, 0, 0, 0, 687, 674, 1, 0, 0, 0, 687, 675, 1, 0, 0, 0, 687, 676,
		1, 0, 0, 0, 687, 677, 1, 0, 0, 0, 687, 678, 1, 0, 0, 0, 687, 679, 1, 0,
		0, 0, 687, 680, 1, 0, 0, 0, 687, 681, 1, 0, 0, 0, 687, 682, 1, 0, 0, 0,
		687, 683, 1, 0, 0, 0, 687, 684, 1, 0, 0, 0, 687, 685, 1, 0, 0, 0, 687,
		686, 1, 0, 0, 0, 688, 691, 1, 0, 0, 0, 689, 687, 1, 0, 0, 0, 689, 690,
		1, 0, 0, 0, 690, 692, 1, 0, 0, 0, 691, 689, 1, 0, 0, 0, 692, 693, 5, 299,
		0, 0, 693, 694, 5, 54, 0, 0, 694, 83, 1, 0, 0, 0, 695, 696, 5, 298, 0,
		0, 696, 697, 5, 55, 0, 0, 697, 698, 3, 376, 188, 0, 698, 699, 3, 374, 187,
		0, 699, 700, 7, 3, 0, 0, 700, 701, 3, 370, 185, 0, 701, 702, 3, 376, 188,
		0, 702, 703, 3, 372, 186, 0, 703, 704, 3, 376, 188, 0, 704, 705, 3, 372,
		186, 0, 705, 733, 3, 372, 186, 0, 706, 732, 3, 16, 8, 0, 707, 732, 3, 86,
		43, 0, 708, 732, 3, 24, 12, 0, 709, 732, 3, 26, 13, 0, 710, 732, 3, 28,
		14, 0, 711, 732, 3, 100, 50, 0, 712, 732, 3, 102, 51, 0, 713, 732, 3, 34,
		17, 0, 714, 732, 3, 36, 18, 0, 715, 732, 3, 38, 19, 0, 716, 732, 3, 40,
		20, 0, 717, 732, 3, 42, 21, 0, 718, 732, 3, 44, 22, 0, 719, 732, 3, 46,
		23, 0, 720, 732, 3, 430, 215, 0, 721, 732, 3, 104, 52, 0, 722, 732, 3,
		48, 24, 0, 723, 732, 3, 50, 25, 0, 724, 732, 3, 106, 53, 0, 725, 732, 3,
		54, 27, 0, 726, 732, 3, 56, 28, 0, 727, 732, 3, 60, 30, 0, 728, 732, 3,
		64, 32, 0, 729, 732, 3, 66, 33, 0, 730, 732, 3, 108, 54, 0, 731, 706, 1,
		0, 0, 0, 731, 707, 1, 0, 0, 0, 731, 708, 1, 0, 0, 0, 731, 709, 1, 0, 0,
		0, 731, 710, 1, 0, 0, 0, 731, 711, 1, 0, 0, 0, 731, 712, 1, 0, 0, 0, 731,
		713, 1, 0, 0, 0, 731, 714, 1, 0, 0, 0, 731, 715, 1, 0, 0, 0, 731, 716,
		1, 0, 0, 0, 731, 717, 1, 0, 0, 0, 731, 718, 1, 0, 0, 0, 731, 719, 1, 0,
		0, 0, 731, 720, 1, 0, 0, 0, 731, 721, 1, 0, 0, 0, 731, 722, 1, 0, 0, 0,
		731, 723, 1, 0, 0, 0, 731, 724, 1, 0, 0, 0, 731, 725, 1, 0, 0, 0, 731,
		726, 1, 0, 0, 0, 731, 727, 1, 0, 0, 0, 731, 728, 1, 0, 0, 0, 731, 729,
		1, 0, 0, 0, 731, 730, 1, 0, 0, 0, 732, 735, 1, 0, 0, 0, 733, 731, 1, 0,
		0, 0, 733, 734, 1, 0, 0, 0, 734, 736, 1, 0, 0, 0, 735, 733, 1, 0, 0, 0,
		736, 737, 5, 299, 0, 0, 737, 738, 5, 55, 0, 0, 738, 85, 1, 0, 0, 0, 739,
		740, 5, 298, 0, 0, 740, 741, 5, 64, 0, 0, 741, 742, 7, 4, 0, 0, 742, 743,
		3, 376, 188, 0, 743, 744, 3, 376, 188, 0, 744, 745, 3, 370, 185, 0, 745,
		746, 3, 372, 186, 0, 746, 764, 3, 372, 186, 0, 747, 763, 3, 16, 8, 0, 748,
		763, 3, 88, 44, 0, 749, 763, 3, 26, 13, 0, 750, 763, 3, 90, 45, 0, 751,
		763, 3, 32, 16, 0, 752, 763, 3, 40, 20, 0, 753, 763, 3, 92, 46, 0, 754,
		763, 3, 94, 47, 0, 755, 763, 3, 96, 48, 0, 756, 763, 3, 42, 21, 0, 757,
		763, 3, 98, 49, 0, 758, 763, 3, 52, 26, 0, 759, 763, 3, 54, 27, 0, 760,
		763, 3, 56, 28, 0, 761, 763, 3, 64, 32, 0, 762, 747, 1, 0, 0, 0, 762, 748,
		1, 0, 0, 0, 762, 749, 1, 0, 0, 0, 762, 750, 1, 0, 0, 0, 762, 751, 1, 0,
		0, 0, 762, 752, 1, 0, 0, 0, 762, 753, 1, 0, 0, 0, 762, 754, 1, 0, 0, 0,
		762, 755, 1, 0, 0, 0, 762, 756, 1, 0, 0, 0, 762, 757, 1, 0, 0, 0, 762,
		758, 1, 0, 0, 0, 762, 759, 1, 0, 0, 0, 762, 760, 1, 0, 0, 0, 762, 761,
		1, 0, 0, 0, 763, 766, 1, 0, 0, 0, 764, 762, 1, 0, 0, 0, 764, 765, 1, 0,
		0, 0, 765, 767, 1, 0, 0, 0, 766, 764, 1, 0, 0, 0, 767, 768, 5, 299, 0,
		0, 768, 769, 5, 64, 0, 0, 769, 87, 1, 0, 0, 0, 770, 771, 5, 70, 0, 0, 771,
		772, 3, 376, 188, 0, 772, 89, 1, 0, 0, 0, 773, 774, 5, 71, 0, 0, 774, 775,
		3, 376, 188, 0, 775, 91, 1, 0, 0, 0, 776, 777, 5, 72, 0, 0, 777, 778, 3,
		370, 185, 0, 778, 779, 3, 370, 185, 0, 779, 780, 3, 370, 185, 0, 780, 93,
		1, 0, 0, 0, 781, 782, 5, 73, 0, 0, 782, 783, 3, 370, 185, 0, 783, 784,
		3, 370, 185, 0, 784, 785, 3, 370, 185, 0, 785, 95, 1, 0, 0, 0, 786, 787,
		5, 298, 0, 0, 787, 791, 5, 74, 0, 0, 788, 790, 3, 372, 186, 0, 789, 788,
		1, 0, 0, 0, 790, 793, 1, 0, 0, 0, 791, 789, 1, 0, 0, 0, 791, 792, 1, 0,
		0, 0, 792, 794, 1, 0, 0, 0, 793, 791, 1, 0, 0, 0, 794, 795, 5, 299, 0,
		0, 795, 796, 5, 74, 0, 0, 796, 97, 1, 0, 0, 0, 797, 798, 5, 75, 0, 0, 798,
		799, 3, 372, 186, 0, 799, 99, 1, 0, 0, 0, 800, 801, 5, 76, 0, 0, 801, 802,
		3, 376, 188, 0, 802, 101, 1, 0, 0, 0, 803, 804, 5, 298, 0, 0, 804, 805,
		5, 77, 0, 0, 805, 809, 3, 374, 187, 0, 806, 808, 3, 376, 188, 0, 807, 806,
		1, 0, 0, 0, 808, 811, 1, 0, 0, 0, 809, 807, 1, 0, 0, 0, 809, 810, 1, 0,
		0, 0, 810, 812, 1, 0, 0, 0, 811, 809, 1, 0, 0, 0, 812, 813, 5, 299, 0,
		0, 813, 814, 5, 77, 0, 0, 814, 103, 1, 0, 0, 0, 815, 816, 5, 298, 0, 0,
		816, 820, 5, 78, 0, 0, 817, 819, 3, 376, 188, 0, 818, 817, 1, 0, 0, 0,
		819, 822, 1, 0, 0, 0, 820, 818, 1, 0, 0, 0, 820, 821, 1, 0, 0, 0, 821,
		823, 1, 0, 0, 0, 822, 820, 1, 0, 0, 0, 823, 824, 5, 299, 0, 0, 824, 825,
		5, 78, 0, 0, 825, 105, 1, 0, 0, 0, 826, 827, 5, 79, 0, 0, 827, 828, 3,
		370, 185, 0, 828, 107, 1, 0, 0, 0, 829, 830, 5, 298, 0, 0, 830, 831, 5,
		80, 0, 0, 831, 835, 3, 374, 187, 0, 832, 834, 3, 376, 188, 0, 833, 832,
		1, 0, 0, 0, 834, 837, 1, 0, 0, 0, 835, 833, 1, 0, 0, 0, 835, 836, 1, 0,
		0, 0, 836, 838, 1, 0, 0, 0, 837, 835, 1, 0, 0, 0, 838, 839, 5, 299, 0,
		0, 839, 840, 5, 80, 0, 0, 840, 109, 1, 0, 0, 0, 841, 842, 5, 298, 0, 0,
		842, 843, 5, 81, 0, 0, 843, 844, 3, 376, 188, 0, 844, 845, 3, 374, 187,
		0, 845, 846, 7, 5, 0, 0, 846, 847, 3, 374, 187, 0, 847, 856, 3, 374, 187,
		0, 848, 855, 3, 112, 56, 0, 849, 855, 3, 114, 57, 0, 850, 855, 3, 116,
		58, 0, 851, 855, 3, 118, 59, 0, 852, 855, 3, 62, 31, 0, 853, 855, 3, 122,
		61, 0, 854, 848, 1, 0, 0, 0, 854, 849, 1, 0, 0, 0, 854, 850, 1, 0, 0, 0,
		854, 851, 1, 0, 0, 0, 854, 852, 1, 0, 0, 0, 854, 853, 1, 0, 0, 0, 855,
		858, 1, 0, 0, 0, 856, 854, 1, 0, 0, 0, 856, 857, 1, 0, 0, 0, 857, 859,
		1, 0, 0, 0, 858, 856, 1, 0, 0, 0, 859, 860, 5, 299, 0, 0, 860, 861, 5,
		81, 0, 0, 861, 111, 1, 0, 0, 0, 862, 863, 5, 89, 0, 0, 863, 864, 3, 372,
		186, 0, 864, 865, 3, 372, 186, 0, 865, 866, 3, 372, 186, 0, 866, 867, 3,
		372, 186, 0, 867, 868, 3, 372, 186, 0, 868, 869, 3, 372, 186, 0, 869, 113,
		1, 0, 0, 0, 870, 871, 5, 90, 0, 0, 871, 872, 3, 372, 186, 0, 872, 873,
		3, 372, 186, 0, 873, 115, 1, 0, 0, 0, 874, 875, 5, 91, 0, 0, 875, 876,
		3, 376, 188, 0, 876, 117, 1, 0, 0, 0, 877, 878, 5, 298, 0, 0, 878, 879,
		5, 92, 0, 0, 879, 883, 3, 374, 187, 0, 880, 882, 3, 120, 60, 0, 881, 880,
		1, 0, 0, 0, 882, 885, 1, 0, 0, 0, 883, 881, 1, 0, 0, 0, 883, 884, 1, 0,
		0, 0, 884, 886, 1, 0, 0, 0, 885, 883, 1, 0, 0, 0, 886, 887, 5, 299, 0,
		0, 887, 888, 5, 92, 0, 0, 888, 119, 1, 0, 0, 0, 889, 890, 5, 93, 0, 0,
		890, 891, 3, 374, 187, 0, 891, 121, 1, 0, 0, 0, 892, 893, 5, 94, 0, 0,
		893, 894, 3, 376, 188, 0, 894, 123, 1, 0, 0, 0, 895, 896, 5, 298, 0, 0,
		896, 897, 5, 95, 0, 0, 897, 898, 3, 376, 188, 0, 898, 899, 3, 374, 187,
		0, 899, 900, 7, 6, 0, 0, 900, 906, 3, 370, 185, 0, 901, 902, 3, 372, 186,
		0, 902, 903, 3, 372, 186, 0, 903, 905, 1, 0, 0, 0, 904, 901, 1, 0, 0, 0,
		905, 908, 1, 0, 0, 0, 906, 904, 1, 0, 0, 0, 906, 907, 1, 0, 0, 0, 907,
		912, 1, 0, 0, 0, 908, 906, 1, 0, 0, 0, 909, 911, 3, 30, 15, 0, 910, 909,
		1, 0, 0, 0, 911, 914, 1, 0, 0, 0, 912, 910, 1, 0, 0, 0, 912, 913, 1, 0,
		0, 0, 913, 915, 1, 0, 0, 0, 914, 912, 1, 0, 0, 0, 915, 916, 5, 299, 0,
		0, 916, 917, 5, 95, 0, 0, 917, 125, 1, 0, 0, 0, 918, 919, 5, 96, 0, 0,
		919, 920, 3, 372, 186, 0, 920, 127, 1, 0, 0, 0, 921, 922, 5, 298, 0, 0,
		922, 923, 5, 97, 0, 0, 923, 924, 3, 376, 188, 0, 924, 925, 3, 374, 187,
		0, 925, 926, 5, 88, 0, 0, 926, 932, 3, 370, 185, 0, 927, 928, 3, 372, 186,
		0, 928, 929, 3, 374, 187, 0, 929, 931, 1, 0, 0, 0, 930, 927, 1, 0, 0, 0,
		931, 934, 1, 0, 0, 0, 932, 930, 1, 0, 0, 0, 932, 933, 1, 0, 0, 0, 933,
		938, 1, 0, 0, 0, 934, 932, 1, 0, 0, 0, 935, 937, 3, 30, 15, 0, 936, 935,
		1, 0, 0, 0, 937, 940, 1, 0, 0, 0, 938, 936, 1, 0, 0, 0, 938, 939, 1, 0,
		0, 0, 939, 941, 1, 0, 0, 0, 940, 938, 1, 0, 0, 0, 941, 942, 5, 299, 0,
		0, 942, 943, 5, 97, 0, 0, 943, 129, 1, 0, 0, 0, 944, 945, 5, 298, 0, 0,
		945, 946, 5, 98, 0, 0, 946, 947, 3, 376, 188, 0, 947, 948, 3, 374, 187,
		0, 948, 955, 3, 370, 185, 0, 949, 950, 3, 372, 186, 0, 950, 951, 3, 372,
		186, 0, 951, 952, 3, 374, 187, 0, 952, 954, 1, 0, 0, 0, 953, 949, 1, 0,
		0, 0, 954, 957, 1, 0, 0, 0, 955, 953, 1, 0, 0, 0, 955, 956, 1, 0, 0, 0,
		956, 961, 1, 0, 0, 0, 957, 955, 1, 0, 0, 0, 958, 960, 3, 30, 15, 0, 959,
		958, 1, 0, 0, 0, 960, 963, 1, 0, 0, 0, 961, 959, 1, 0, 0, 0, 961, 962,
		1, 0, 0, 0, 962, 964, 1, 0, 0, 0, 963, 961, 1, 0, 0, 0, 964, 965, 5, 299,
		0, 0, 965, 966, 5, 98, 0, 0, 966, 131, 1, 0, 0, 0, 967, 968, 5, 298, 0,
		0, 968, 969, 5, 99, 0, 0, 969, 970, 3, 376, 188, 0, 970, 971, 3, 374, 187,
		0, 971, 972, 3, 370, 185, 0, 972, 977, 3, 370, 185, 0, 973, 976, 3, 134,
		67, 0, 974, 976, 3, 430, 215, 0, 975, 973, 1, 0, 0, 0, 975, 974, 1, 0,
		0, 0, 976, 979, 1, 0, 0, 0, 977, 975, 1, 0, 0, 0, 977, 978, 1, 0, 0, 0,
		978, 980, 1, 0, 0, 0, 979, 977, 1, 0, 0, 0, 980, 981, 5, 299, 0, 0, 981,
		982, 5, 99, 0, 0, 982, 133, 1, 0, 0, 0, 983, 987, 5, 100, 0, 0, 984, 986,
		3, 376, 188, 0, 985, 984, 1, 0, 0, 0, 986, 989, 1, 0, 0, 0, 987, 985, 1,
		0, 0, 0, 987, 988, 1, 0, 0, 0, 988, 135, 1, 0, 0, 0, 989, 987, 1, 0, 0,
		0, 990, 991, 5, 298, 0, 0, 991, 992, 5, 101, 0, 0, 992, 993, 3, 376, 188,
		0, 993, 1005, 3, 374, 187, 0, 994, 1004, 3, 16, 8, 0, 995, 1004, 3, 138,
		69, 0, 996, 1004, 3, 140, 70, 0, 997, 1004, 3, 430, 215, 0, 998, 1004,
		3, 142, 71, 0, 999, 1004, 3, 144, 72, 0, 1000, 1004, 3, 146, 73, 0, 1001,
		1004, 3, 58, 29, 0, 1002, 1004, 3, 148, 74, 0, 1003, 994, 1, 0, 0, 0, 1003,
		995, 1, 0, 0, 0, 1003, 996, 1, 0, 0, 0, 1003, 997, 1, 0, 0, 0, 1003, 998,
		1, 0, 0, 0, 1003, 999, 1, 0, 0, 0, 1003, 1000, 1, 0, 0, 0, 1003, 1001,
		1, 0, 0, 0, 1003, 1002, 1, 0, 0, 0, 1004, 1007, 1, 0, 0, 0, 1005, 1003,
		1, 0, 0, 0, 1005, 1006, 1, 0, 0, 0, 1006, 1008, 1, 0, 0, 0, 1007, 1005,
		1, 0, 0, 0, 1008, 1009, 5, 299, 0, 0, 1009, 1010, 5, 101, 0, 0, 1010, 137,
		1, 0, 0, 0, 1011, 1012, 5, 298, 0, 0, 1012, 1016, 5, 102, 0, 0, 1013, 1015,
		3, 376, 188, 0, 1014, 1013, 1, 0, 0, 0, 1015, 1018, 1, 0, 0, 0, 1016, 1014,
		1, 0, 0, 0, 1016, 1017, 1, 0, 0, 0, 1017, 1019, 1, 0, 0, 0, 1018, 1016,
		1, 0, 0, 0, 1019, 1020, 5, 299, 0, 0, 1020, 1021, 5, 102, 0, 0, 1021, 139,
		1, 0, 0, 0, 1022, 1023, 5, 103, 0, 0, 1023, 1024, 3, 374, 187, 0, 1024,
		141, 1, 0, 0, 0, 1025, 1026, 5, 298, 0, 0, 1026, 1030, 5, 104, 0, 0, 1027,
		1029, 3, 376, 188, 0, 1028, 1027, 1, 0, 0, 0, 1029, 1032, 1, 0, 0, 0, 1030,
		1028, 1, 0, 0, 0, 1030, 1031, 1, 0, 0, 0, 1031, 1033, 1, 0, 0, 0, 1032,
		1030, 1, 0, 0, 0, 1033, 1034, 5, 299, 0, 0, 1034, 1035, 5, 104, 0, 0, 1035,
		143, 1, 0, 0, 0, 1036, 1037, 5, 298, 0, 0, 1037, 1041, 5, 105, 0, 0, 1038,
		1040, 3, 376, 188, 0, 1039, 1038, 1, 0, 0, 0, 1040, 1043, 1, 0, 0, 0, 1041,
		1039, 1, 0, 0, 0, 1041, 1042, 1, 0, 0, 0, 1042, 1044, 1, 0, 0, 0, 1043,
		1041, 1, 0, 0, 0, 1044, 1045, 5, 299, 0, 0, 1045, 1046, 5, 105, 0, 0, 1046,
		145, 1, 0, 0, 0, 1047, 1048, 5, 298, 0, 0, 1048, 1052, 5, 106, 0, 0, 1049,
		1051, 3, 376, 188, 0, 1050, 1049, 1, 0, 0, 0, 1051, 1054, 1, 0, 0, 0, 1052,
		1050, 1, 0, 0, 0, 1052, 1053, 1, 0, 0, 0, 1053, 1055, 1, 0, 0, 0, 1054,
		1052, 1, 0, 0, 0, 1055, 1056, 5, 299, 0, 0, 1056, 1057, 5, 106, 0, 0, 1057,
		147, 1, 0, 0, 0, 1058, 1059, 5, 298, 0, 0, 1059, 1063, 5, 107, 0, 0, 1060,
		1062, 3, 376, 188, 0, 1061, 1060, 1, 0, 0, 0, 1062, 1065, 1, 0, 0, 0, 1063,
		1061, 1, 0, 0, 0, 1063, 1064, 1, 0, 0, 0, 1064, 1066, 1, 0, 0, 0, 1065,
		1063, 1, 0, 0, 0, 1066, 1067, 5, 299, 0, 0, 1067, 1068, 5, 107, 0, 0, 1068,
		149, 1, 0, 0, 0, 1069, 1070, 5, 298, 0, 0, 1070, 1071, 5, 108, 0, 0, 1071,
		1072, 3, 376, 188, 0, 1072, 1082, 3, 374, 187, 0, 1073, 1081, 3, 16, 8,
		0, 1074, 1081, 3, 44, 22, 0, 1075, 1081, 3, 430, 215, 0, 1076, 1081, 3,
		58, 29, 0, 1077, 1081, 3, 152, 76, 0, 1078, 1081, 3, 154, 77, 0, 1079,
		1081, 3, 156, 78, 0, 1080, 1073, 1, 0, 0, 0, 1080, 1074, 1, 0, 0, 0, 1080,
		1075, 1, 0, 0, 0, 1080, 1076, 1, 0, 0, 0, 1080, 1077, 1, 0, 0, 0, 1080,
		1078, 1, 0, 0, 0, 1080, 1079, 1, 0, 0, 0, 1081, 1084, 1, 0, 0, 0, 1082,
		1080, 1, 0, 0, 0, 1082, 1083, 1, 0, 0, 0, 1083, 1085, 1, 0, 0, 0, 1084,
		1082, 1, 0, 0, 0, 1085, 1086, 5, 299, 0, 0, 1086, 1087, 5, 108, 0, 0, 1087,
		151, 1, 0, 0, 0, 1088, 1089, 5, 298, 0, 0, 1089, 1093, 5, 109, 0, 0, 1090,
		1092, 3, 376, 188, 0, 1091, 1090, 1, 0, 0, 0, 1092, 1095, 1, 0, 0, 0, 1093,
		1091, 1, 0, 0, 0, 1093, 1094, 1, 0, 0, 0, 1094, 1096, 1, 0, 0, 0, 1095,
		1093, 1, 0, 0, 0, 1096, 1097, 5, 299, 0, 0, 1097, 1098, 5, 109, 0, 0, 1098,
		153, 1, 0, 0, 0, 1099, 1100, 5, 110, 0, 0, 1100, 155, 1, 0, 0, 0, 1101,
		1102, 5, 298, 0, 0, 1102, 1106, 5, 111, 0, 0, 1103, 1105, 3, 376, 188,
		0, 1104, 1103, 1, 0, 0, 0, 1105, 1108, 1, 0, 0, 0, 1106, 1104, 1, 0, 0,
		0, 1106, 1107, 1, 0, 0, 0, 1107, 1109, 1, 0, 0, 0, 1108, 1106, 1, 0, 0,
		0, 1109, 1110, 5, 299, 0, 0, 1110, 1111, 5, 111, 0, 0, 1111, 157, 1, 0,
		0, 0, 1112, 1113, 5, 298, 0, 0, 1113, 1114, 5, 112, 0, 0, 1114, 1115, 3,
		376, 188, 0, 1115, 1116, 3, 374, 187, 0, 1116, 1117, 3, 376, 188, 0, 1117,
		1122, 3, 370, 185, 0, 1118, 1121, 3, 430, 215, 0, 1119, 1121, 3, 38, 19,
		0, 1120, 1118, 1, 0, 0, 0, 1120, 1119, 1, 0, 0, 0, 1121, 1124, 1, 0, 0,
		0, 1122, 1120, 1, 0, 0, 0, 1122, 1123, 1, 0, 0, 0, 1123, 1125, 1, 0, 0,
		0, 1124, 1122, 1, 0, 0, 0, 1125, 1126, 5, 299, 0, 0, 1126, 1127, 5, 112,
		0, 0, 1127, 159, 1, 0, 0, 0, 1128, 1129, 5, 298, 0, 0, 1129, 1130, 5, 113,
		0, 0, 1130, 1131, 3, 376, 188, 0, 1131, 1132, 3, 374, 187, 0, 1132, 1133,
		3, 382, 191, 0, 1133, 1134, 3, 376, 188, 0, 1134, 1135, 3, 370, 185, 0,
		1135, 1136, 3, 372, 186, 0, 1136, 1137, 3, 372, 186, 0, 1137, 1161, 3,
		372, 186, 0, 1138, 1160, 3, 16, 8, 0, 1139, 1160, 3, 162, 81, 0, 1140,
		1160, 3, 24, 12, 0, 1141, 1160, 3, 164, 82, 0, 1142, 1160, 3, 26, 13, 0,
		1143, 1160, 3, 34, 17, 0, 1144, 1160, 3, 36, 18, 0, 1145, 1160, 3, 172,
		86, 0, 1146, 1160, 3, 38, 19, 0, 1147, 1160, 3, 174, 87, 0, 1148, 1160,
		3, 42, 21, 0, 1149, 1160, 3, 44, 22, 0, 1150, 1160, 3, 430, 215, 0, 1151,
		1160, 3, 176, 88, 0, 1152, 1160, 3, 48, 24, 0, 1153, 1160, 3, 50, 25, 0,
		1154, 1160, 3, 54, 27, 0, 1155, 1160, 3, 178, 89, 0, 1156, 1160, 3, 60,
		30, 0, 1157, 1160, 3, 66, 33, 0, 1158, 1160, 3, 180, 90, 0, 1159, 1138,
		1, 0, 0, 0, 1159, 1139, 1, 0, 0, 0, 1159, 1140, 1, 0, 0, 0, 1159, 1141,
		1, 0, 0, 0, 1159, 1142, 1, 0, 0, 0, 1159, 1143, 1, 0, 0, 0, 1159, 1144,
		1, 0, 0, 0, 1159, 1145, 1, 0, 0, 0, 1159, 1146, 1, 0, 0, 0, 1159, 1147,
		1, 0, 0, 0, 1159, 1148, 1, 0, 0, 0, 1159, 1149, 1, 0, 0, 0, 1159, 1150,
		1, 0, 0, 0, 1159, 1151, 1, 0, 0, 0, 1159, 1152, 1, 0, 0, 0, 1159, 1153,
		1, 0, 0, 0, 1159, 1154, 1, 0, 0, 0, 1159, 1155, 1, 0, 0, 0, 1159, 1156,
		1, 0, 0, 0, 1159, 1157, 1, 0, 0, 0, 1159, 1158, 1, 0, 0, 0, 1160, 1163,
		1, 0, 0, 0, 1161, 1159, 1, 0, 0, 0, 1161, 1162, 1, 0, 0, 0, 1162, 1164,
		1, 0, 0, 0, 1163, 1161, 1, 0, 0, 0, 1164, 1165, 5, 299, 0, 0, 1165, 1166,
		5, 113, 0, 0, 1166, 161, 1, 0, 0, 0, 1167, 1168, 5, 114, 0, 0, 1168, 1169,
		3, 370, 185, 0, 1169, 163, 1, 0, 0, 0, 1170, 1171, 5, 298, 0, 0, 1171,
		1177, 5, 115, 0, 0, 1172, 1176, 3, 166, 83, 0, 1173, 1176, 3, 168, 84,
		0, 1174, 1176, 3, 170, 85, 0, 1175, 1172, 1, 0, 0, 0, 1175, 1173, 1, 0,
		0, 0, 1175, 1174, 1, 0, 0, 0, 1176, 1179, 1, 0, 0, 0, 1177, 1175, 1, 0,
		0, 0, 1177, 1178, 1, 0, 0, 0, 1178, 1180, 1, 0, 0, 0, 1179, 1177, 1, 0,
		0, 0, 1180, 1181, 5, 299, 0, 0, 1181, 1182, 5, 115, 0, 0, 1182, 165, 1,
		0, 0, 0, 1183, 1184, 5, 116, 0, 0, 1184, 1185, 3, 370, 185, 0, 1185, 167,
		1, 0, 0, 0, 1186, 1187, 5, 117, 0, 0, 1187, 1188, 3, 370, 185, 0, 1188,
		169, 1, 0, 0, 0, 1189, 1190, 5, 118, 0, 0, 1190, 171, 1, 0, 0, 0, 1191,
		1192, 5, 119, 0, 0, 1192, 1193, 3, 370, 185, 0, 1193, 173, 1, 0, 0, 0,
		1194, 1195, 5, 120, 0, 0, 1195, 1196, 3, 370, 185, 0, 1196, 175, 1, 0,
		0, 0, 1197, 1198, 5, 121, 0, 0, 1198, 1199, 7, 7, 0, 0, 1199, 177, 1, 0,
		0, 0, 1200, 1201, 5, 124, 0, 0, 1201, 179, 1, 0, 0, 0, 1202, 1203, 5, 298,
		0, 0, 1203, 1207, 5, 125, 0, 0, 1204, 1206, 3, 376, 188, 0, 1205, 1204,
		1, 0, 0, 0, 1206, 1209, 1, 0, 0, 0, 1207, 1205, 1, 0, 0, 0, 1207, 1208,
		1, 0, 0, 0, 1208, 1210, 1, 0, 0, 0, 1209, 1207, 1, 0, 0, 0, 1210, 1211,
		5, 299, 0, 0, 1211, 1212, 5, 125, 0, 0, 1212, 181, 1, 0, 0, 0, 1213, 1214,
		5, 298, 0, 0, 1214, 1215, 5, 126, 0, 0, 1215, 1229, 3, 374, 187, 0, 1216,
		1228, 3, 2, 1, 0, 1217, 1228, 3, 4, 2, 0, 1218, 1228, 3, 6, 3, 0, 1219,
		1228, 3, 8, 4, 0, 1220, 1228, 3, 10, 5, 0, 1221, 1228, 3, 12, 6, 0, 1222,
		1228, 3, 14, 7, 0, 1223, 1228, 3, 26, 13, 0, 1224, 1228, 3, 184, 92, 0,
		1225, 1228, 3, 32, 16, 0, 1226, 1228, 3, 186, 93, 0, 1227, 1216, 1, 0,
		0, 0, 1227, 1217, 1, 0, 0, 0, 1227, 1218, 1, 0, 0, 0, 1227, 1219, 1, 0,
		0, 0, 1227, 1220, 1, 0, 0, 0, 1227, 1221, 1, 0, 0, 0, 1227, 1222, 1, 0,
		0, 0, 1227, 1223, 1, 0, 0, 0, 1227, 1224, 1, 0, 0, 0, 1227, 1225, 1, 0,
		0, 0, 1227, 1226, 1, 0, 0, 0, 1228, 1231, 1, 0, 0, 0, 1229, 1227, 1, 0,
		0, 0, 1229, 1230, 1, 0, 0, 0, 1230, 1232, 1, 0, 0, 0, 1231, 1229, 1, 0,
		0, 0, 1232, 1233, 5, 299, 0, 0, 1233, 1234, 5, 126, 0, 0, 1234, 183, 1,
		0, 0, 0, 1235, 1236, 5, 127, 0, 0, 1236, 1237, 3, 370, 185, 0, 1237, 185,
		1, 0, 0, 0, 1238, 1239, 5, 128, 0, 0, 1239, 1240, 3, 376, 188, 0, 1240,
		187, 1, 0, 0, 0, 1241, 1242, 5, 298, 0, 0, 1242, 1243, 5, 129, 0, 0, 1243,
		1262, 3, 374, 187, 0, 1244, 1261, 3, 190, 95, 0, 1245, 1261, 3, 192, 96,
		0, 1246, 1261, 3, 196, 98, 0, 1247, 1261, 3, 198, 99, 0, 1248, 1261, 3,
		200, 100, 0, 1249, 1261, 3, 202, 101, 0, 1250, 1261, 3, 204, 102, 0, 1251,
		1261, 3, 206, 103, 0, 1252, 1261, 3, 208, 104, 0, 1253, 1261, 3, 210, 105,
		0, 1254, 1261, 3, 212, 106, 0, 1255, 1261, 3, 214, 107, 0, 1256, 1261,
		3, 216, 108, 0, 1257, 1261, 3, 218, 109, 0, 1258, 1261, 3, 220, 110, 0,
		1259, 1261, 3, 68, 34, 0, 1260, 1244, 1, 0, 0, 0, 1260, 1245, 1, 0, 0,
		0, 1260, 1246, 1, 0, 0, 0, 1260, 1247, 1, 0, 0, 0, 1260, 1248, 1, 0, 0,
		0, 1260, 1249, 1, 0, 0, 0, 1260, 1250, 1, 0, 0, 0, 1260, 1251, 1, 0, 0,
		0, 1260, 1252, 1, 0, 0, 0, 1260, 1253, 1, 0, 0, 0, 1260, 1254, 1, 0, 0,
		0, 1260, 1255, 1, 0, 0, 0, 1260, 1256, 1, 0, 0, 0, 1260, 1257, 1, 0, 0,
		0, 1260, 1258, 1, 0, 0, 0, 1260, 1259, 1, 0, 0, 0, 1261, 1264, 1, 0, 0,
		0, 1262, 1260, 1, 0, 0, 0, 1262, 1263, 1, 0, 0, 0, 1263, 1265, 1, 0, 0,
		0, 1264, 1262, 1, 0, 0, 0, 1265, 1266, 5, 299, 0, 0, 1266, 1267, 5, 129,
		0, 0, 1267, 189, 1, 0, 0, 0, 1268, 1269, 5, 130, 0, 0, 1269, 1270, 3, 370,
		185, 0, 1270, 191, 1, 0, 0, 0, 1271, 1272, 5, 298, 0, 0, 1272, 1273, 5,
		131, 0, 0, 1273, 1274, 3, 374, 187, 0, 1274, 1278, 3, 370, 185, 0, 1275,
		1277, 3, 194, 97, 0, 1276, 1275, 1, 0, 0, 0, 1277, 1280, 1, 0, 0, 0, 1278,
		1276, 1, 0, 0, 0, 1278, 1279, 1, 0, 0, 0, 1279, 1281, 1, 0, 0, 0, 1280,
		1278, 1, 0, 0, 0, 1281, 1282, 5, 299, 0, 0, 1282, 1283, 5, 131, 0, 0, 1283,
		193, 1, 0, 0, 0, 1284, 1285, 5, 298, 0, 0, 1285, 1289, 5, 132, 0, 0, 1286,
		1288, 3, 370, 185, 0, 1287, 1286, 1, 0, 0, 0, 1288, 1291, 1, 0, 0, 0, 1289,
		1287, 1, 0, 0, 0, 1289, 1290, 1, 0, 0, 0, 1290, 1292, 1, 0, 0, 0, 1291,
		1289, 1, 0, 0, 0, 1292, 1293, 5, 299, 0, 0, 1293, 1294, 5, 132, 0, 0, 1294,
		195, 1, 0, 0, 0, 1295, 1296, 5, 133, 0, 0, 1296, 1297, 3, 374, 187, 0,
		1297, 197, 1, 0, 0, 0, 1298, 1299, 5, 134, 0, 0, 1299, 1300, 3, 374, 187,
		0, 1300, 199, 1, 0, 0, 0, 1301, 1302, 5, 135, 0, 0, 1302, 1303, 3, 374,
		187, 0, 1303, 201, 1, 0, 0, 0, 1304, 1305, 5, 136, 0, 0, 1305, 1306, 3,
		374, 187, 0, 1306, 203, 1, 0, 0, 0, 1307, 1308, 5, 137, 0, 0, 1308, 1309,
		3, 370, 185, 0, 1309, 205, 1, 0, 0, 0, 1310, 1311, 5, 138, 0, 0, 1311,
		1312, 3, 374, 187, 0, 1312, 207, 1, 0, 0, 0, 1313, 1314, 5, 298, 0, 0,
		1314, 1315, 5, 139, 0, 0, 1315, 1316, 7, 8, 0, 0, 1316, 1317, 3, 370, 185,
		0, 1317, 1318, 3, 370, 185, 0, 1318, 1319, 3, 370, 185, 0, 1319, 1320,
		3, 370, 185, 0, 1320, 1321, 3, 370, 185, 0, 1321, 1322, 3, 370, 185, 0,
		1322, 1326, 3, 370, 185, 0, 1323, 1325, 3, 430, 215, 0, 1324, 1323, 1,
		0, 0, 0, 1325, 1328, 1, 0, 0, 0, 1326, 1324, 1, 0, 0, 0, 1326, 1327, 1,
		0, 0, 0, 1327, 1329, 1, 0, 0, 0, 1328, 1326, 1, 0, 0, 0, 1329, 1330, 5,
		299, 0, 0, 1330, 1331, 5, 139, 0, 0, 1331, 209, 1, 0, 0, 0, 1332, 1333,
		5, 298, 0, 0, 1333, 1334, 5, 143, 0, 0, 1334, 1335, 3, 376, 188, 0, 1335,
		1336, 3, 374, 187, 0, 1336, 1337, 7, 9, 0, 0, 1337, 1338, 7, 10, 0, 0,
		1338, 1339, 7, 11, 0, 0, 1339, 1340, 3, 370, 185, 0, 1340, 1341, 3, 370,
		185, 0, 1341, 1342, 3, 370, 185, 0, 1342, 1343, 3, 370, 185, 0, 1343, 1344,
		3, 370, 185, 0, 1344, 1345, 3, 370, 185, 0, 1345, 1349, 3, 370, 185, 0,
		1346, 1348, 3, 430, 215, 0, 1347, 1346, 1, 0, 0, 0, 1348, 1351, 1, 0, 0,
		0, 1349, 1347, 1, 0, 0, 0, 1349, 1350, 1, 0, 0, 0, 1350, 1352, 1, 0, 0,
		0, 1351, 1349, 1, 0, 0, 0, 1352, 1353, 5, 299, 0, 0, 1353, 1354, 5, 143,
		0, 0, 1354, 211, 1, 0, 0, 0, 1355, 1356, 5, 160, 0, 0, 1356, 1357, 3, 370,
		185, 0, 1357, 213, 1, 0, 0, 0, 1358, 1359, 5, 161, 0, 0, 1359, 1360, 3,
		374, 187, 0, 1360, 215, 1, 0, 0, 0, 1361, 1362, 5, 162, 0, 0, 1362, 1363,
		3, 374, 187, 0, 1363, 217, 1, 0, 0, 0, 1364, 1365, 5, 163, 0, 0, 1365,
		1366, 3, 374, 187, 0, 1366, 1367, 3, 374, 187, 0, 1367, 219, 1, 0, 0, 0,
		1368, 1369, 5, 164, 0, 0, 1369, 1370, 3, 374, 187, 0, 1370, 221, 1, 0,
		0, 0, 1371, 1372, 5, 298, 0, 0, 1372, 1373, 5, 165, 0, 0, 1373, 1438, 3,
		376, 188, 0, 1374, 1437, 3, 2, 1, 0, 1375, 1437, 3, 4, 2, 0, 1376, 1437,
		3, 6, 3, 0, 1377, 1437, 3, 8, 4, 0, 1378, 1437, 3, 10, 5, 0, 1379, 1437,
		3, 12, 6, 0, 1380, 1437, 3, 14, 7, 0, 1381, 1437, 3, 224, 112, 0, 1382,
		1437, 3, 226, 113, 0, 1383, 1437, 3, 228, 114, 0, 1384, 1437, 3, 230, 115,
		0, 1385, 1437, 3, 232, 116, 0, 1386, 1437, 3, 234, 117, 0, 1387, 1437,
		3, 236, 118, 0, 1388, 1437, 3, 238, 119, 0, 1389, 1437, 3, 240, 120, 0,
		1390, 1437, 3, 242, 121, 0, 1391, 1437, 3, 244, 122, 0, 1392, 1437, 3,
		246, 123, 0, 1393, 1437, 3, 248, 124, 0, 1394, 1437, 3, 250, 125, 0, 1395,
		1437, 3, 252, 126, 0, 1396, 1437, 3, 254, 127, 0, 1397, 1437, 3, 256, 128,
		0, 1398, 1437, 3, 258, 129, 0, 1399, 1437, 3, 260, 130, 0, 1400, 1437,
		3, 262, 131, 0, 1401, 1437, 3, 264, 132, 0, 1402, 1437, 3, 266, 133, 0,
		1403, 1437, 3, 268, 134, 0, 1404, 1437, 3, 270, 135, 0, 1405, 1437, 3,
		272, 136, 0, 1406, 1437, 3, 274, 137, 0, 1407, 1437, 3, 276, 138, 0, 1408,
		1437, 3, 278, 139, 0, 1409, 1437, 3, 280, 140, 0, 1410, 1437, 3, 282, 141,
		0, 1411, 1437, 3, 284, 142, 0, 1412, 1437, 3, 286, 143, 0, 1413, 1437,
		3, 288, 144, 0, 1414, 1437, 3, 290, 145, 0, 1415, 1437, 3, 292, 146, 0,
		1416, 1437, 3, 294, 147, 0, 1417, 1437, 3, 296, 148, 0, 1418, 1437, 3,
		298, 149, 0, 1419, 1437, 3, 300, 150, 0, 1420, 1437, 3, 302, 151, 0, 1421,
		1437, 3, 304, 152, 0, 1422, 1437, 3, 306, 153, 0, 1423, 1437, 3, 308, 154,
		0, 1424, 1437, 3, 310, 155, 0, 1425, 1437, 3, 312, 156, 0, 1426, 1437,
		3, 314, 157, 0, 1427, 1437, 3, 316, 158, 0, 1428, 1437, 3, 318, 159, 0,
		1429, 1437, 3, 320, 160, 0, 1430, 1437, 3, 322, 161, 0, 1431, 1437, 3,
		324, 162, 0, 1432, 1437, 3, 326, 163, 0, 1433, 1437, 3, 328, 164, 0, 1434,
		1437, 3, 330, 165, 0, 1435, 1437, 3, 332, 166, 0, 1436, 1374, 1, 0, 0,
		0, 1436, 1375, 1, 0, 0, 0, 1436, 1376, 1, 0, 0, 0, 1436, 1377, 1, 0, 0,
		0, 1436, 1378, 1, 0, 0, 0, 1436, 1379, 1, 0, 0, 0, 1436, 1380, 1, 0, 0,
		0, 1436, 1381, 1, 0, 0, 0, 1436, 1382, 1, 0, 0, 0, 1436, 1383, 1, 0, 0,
		0, 1436, 1384, 1, 0, 0, 0, 1436, 1385, 1, 0, 0, 0, 1436, 1386, 1, 0, 0,
		0, 1436, 1387, 1, 0, 0, 0, 1436, 1388, 1, 0, 0, 0, 1436, 1389, 1, 0, 0,
		0, 1436, 1390, 1, 0, 0, 0, 1436, 1391, 1, 0, 0, 0, 1436, 1392, 1, 0, 0,
		0, 1436, 1393, 1, 0, 0, 0, 1436, 1394, 1, 0, 0, 0, 1436, 1395, 1, 0, 0,
		0, 1436, 1396, 1, 0, 0, 0, 1436, 1397, 1, 0, 0, 0, 1436, 1398, 1, 0, 0,
		0, 1436, 1399, 1, 0, 0, 0, 1436, 1400, 1, 0, 0, 0, 1436, 1401, 1, 0, 0,
		0, 1436, 1402, 1, 0, 0, 0, 1436, 1403, 1, 0, 0, 0, 1436, 1404, 1, 0, 0,
		0, 1436, 1405, 1, 0, 0, 0, 1436, 1406, 1, 0, 0, 0, 1436, 1407, 1, 0, 0,
		0, 1436, 1408, 1, 0, 0, 0, 1436, 1409, 1, 0, 0, 0, 1436, 1410, 1, 0, 0,
		0, 1436, 1411, 1, 0, 0, 0, 1436, 1412, 1, 0, 0, 0, 1436, 1413, 1, 0, 0,
		0, 1436, 1414, 1, 0, 0, 0, 1436, 1415, 1, 0, 0, 0, 1436, 1416, 1, 0, 0,
		0, 1436, 1417, 1, 0, 0, 0, 1436, 1418, 1, 0, 0, 0, 1436, 1419, 1, 0, 0,
		0, 1436, 1420, 1, 0, 0, 0, 1436, 1421, 1, 0, 0, 0, 1436, 1422, 1, 0, 0,
		0, 1436, 1423, 1, 0, 0, 0, 1436, 1424, 1, 0, 0, 0, 1436, 1425, 1, 0, 0,
		0, 1436, 1426, 1, 0, 0, 0, 1436, 1427, 1, 0, 0, 0, 1436, 1428, 1, 0, 0,
		0, 1436, 1429, 1, 0, 0, 0, 1436, 1430, 1, 0, 0, 0, 1436, 1431, 1, 0, 0,
		0, 1436, 1432, 1, 0, 0, 0, 1436, 1433, 1, 0, 0, 0, 1436, 1434, 1, 0, 0,
		0, 1436, 1435, 1, 0, 0, 0, 1437, 1440, 1, 0, 0, 0, 1438, 1436, 1, 0, 0,
		0, 1438, 1439, 1, 0, 0, 0, 1439, 1441, 1, 0, 0, 0, 1440, 1438, 1, 0, 0,
		0, 1441, 1442, 5, 299, 0, 0, 1442, 1443, 5, 165, 0, 0, 1443, 223, 1, 0,
		0, 0, 1444, 1445, 5, 166, 0, 0, 1445, 1446, 3, 370, 185, 0, 1446, 1447,
		3, 382, 191, 0, 1447, 1448, 3, 390, 195, 0, 1448, 1449, 3, 386, 193, 0,
		1449, 225, 1, 0, 0, 0, 1450, 1451, 5, 167, 0, 0, 1451, 1452, 3, 370, 185,
		0, 1452, 1453, 3, 382, 191, 0, 1453, 1454, 3, 390, 195, 0, 1454, 1455,
		3, 386, 193, 0, 1455, 227, 1, 0, 0, 0, 1456, 1457, 5, 168, 0, 0, 1457,
		1458, 3, 370, 185, 0, 1458, 1459, 3, 382, 191, 0, 1459, 1460, 3, 390, 195,
		0, 1460, 1461, 3, 386, 193, 0, 1461, 229, 1, 0, 0, 0, 1462, 1463, 5, 169,
		0, 0, 1463, 1464, 3, 370, 185, 0, 1464, 1465, 3, 382, 191, 0, 1465, 1466,
		3, 390, 195, 0, 1466, 1467, 3, 386, 193, 0, 1467, 231, 1, 0, 0, 0, 1468,
		1469, 5, 170, 0, 0, 1469, 1470, 3, 370, 185, 0, 1470, 1471, 3, 382, 191,
		0, 1471, 1472, 3, 390, 195, 0, 1472, 1473, 3, 386, 193, 0, 1473, 233, 1,
		0, 0, 0, 1474, 1475, 5, 171, 0, 0, 1475, 1476, 3, 370, 185, 0, 1476, 1477,
		3, 382, 191, 0, 1477, 1478, 3, 370, 185, 0, 1478, 1479, 3, 390, 195, 0,
		1479, 1480, 3, 386, 193, 0, 1480, 235, 1, 0, 0, 0, 1481, 1482, 5, 172,
		0, 0, 1482, 1483, 3, 370, 185, 0, 1483, 1484, 3, 382, 191, 0, 1484, 1485,
		3, 370, 185, 0, 1485, 1486, 3, 390, 195, 0, 1486, 1487, 3, 386, 193, 0,
		1487, 237, 1, 0, 0, 0, 1488, 1489, 5, 173, 0, 0, 1489, 1490, 3, 370, 185,
		0, 1490, 1491, 3, 382, 191, 0, 1491, 1492, 3, 370, 185, 0, 1492, 1493,
		3, 390, 195, 0, 1493, 1494, 3, 386, 193, 0, 1494, 239, 1, 0, 0, 0, 1495,
		1496, 5, 174, 0, 0, 1496, 1497, 3, 370, 185, 0, 1497, 1498, 3, 382, 191,
		0, 1498, 1499, 3, 370, 185, 0, 1499, 1500, 3, 390, 195, 0, 1500, 1501,
		3, 386, 193, 0, 1501, 241, 1, 0, 0, 0, 1502, 1503, 5, 175, 0, 0, 1503,
		1504, 3, 370, 185, 0, 1504, 1505, 3, 382, 191, 0, 1505, 1506, 3, 370, 185,
		0, 1506, 1507, 3, 390, 195, 0, 1507, 1508, 3, 386, 193, 0, 1508, 243, 1,
		0, 0, 0, 1509, 1510, 5, 176, 0, 0, 1510, 1511, 3, 370, 185, 0, 1511, 1512,
		3, 382, 191, 0, 1512, 245, 1, 0, 0, 0, 1513, 1514, 5, 177, 0, 0, 1514,
		1515, 3, 370, 185, 0, 1515, 1516, 3, 382, 191, 0, 1516, 247, 1, 0, 0, 0,
		1517, 1518, 5, 178, 0, 0, 1518, 1519, 3, 370, 185, 0, 1519, 1520, 3, 382,
		191, 0, 1520, 249, 1, 0, 0, 0, 1521, 1522, 5, 179, 0, 0, 1522, 1523, 3,
		370, 185, 0, 1523, 1524, 3, 382, 191, 0, 1524, 251, 1, 0, 0, 0, 1525, 1526,
		5, 180, 0, 0, 1526, 1527, 3, 370, 185, 0, 1527, 1528, 3, 382, 191, 0, 1528,
		253, 1, 0, 0, 0, 1529, 1530, 5, 181, 0, 0, 1530, 1531, 3, 370, 185, 0,
		1531, 255, 1, 0, 0, 0, 1532, 1533, 5, 182, 0, 0, 1533, 1534, 3, 370, 185,
		0, 1534, 257, 1, 0, 0, 0, 1535, 1536, 5, 183, 0, 0, 1536, 1537, 3, 370,
		185, 0, 1537, 259, 1, 0, 0, 0, 1538, 1539, 5, 184, 0, 0, 1539, 1540, 3,
		370, 185, 0, 1540, 261, 1, 0, 0, 0, 1541, 1542, 5, 185, 0, 0, 1542, 1543,
		3, 370, 185, 0, 1543, 263, 1, 0, 0, 0, 1544, 1545, 5, 186, 0, 0, 1545,
		1546, 3, 370, 185, 0, 1546, 1547, 3, 382, 191, 0, 1547, 1548, 7, 12, 0,
		0, 1548, 1549, 3, 386, 193, 0, 1549, 265, 1, 0, 0, 0, 1550, 1551, 5, 190,
		0, 0, 1551, 1552, 3, 370, 185, 0, 1552, 1553, 3, 382, 191, 0, 1553, 267,
		1, 0, 0, 0, 1554, 1555, 5, 191, 0, 0, 1555, 1556, 3, 370, 185, 0, 1556,
		1557, 3, 382, 191, 0, 1557, 269, 1, 0, 0, 0, 1558, 1559, 5, 192, 0, 0,
		1559, 1560, 3, 370, 185, 0, 1560, 1561, 3, 382, 191, 0, 1561, 271, 1, 0,
		0, 0, 1562, 1563, 5, 193, 0, 0, 1563, 1564, 3, 370, 185, 0, 1564, 1565,
		3, 382, 191, 0, 1565, 273, 1, 0, 0, 0, 1566, 1567, 5, 194, 0, 0, 1567,
		1568, 3, 370, 185, 0, 1568, 1569, 3, 382, 191, 0, 1569, 275, 1, 0, 0, 0,
		1570, 1571, 5, 195, 0, 0, 1571, 1572, 3, 370, 185, 0, 1572, 1573, 3, 382,
		191, 0, 1573, 277, 1, 0, 0, 0, 1574, 1575, 5, 196, 0, 0, 1575, 279, 1,
		0, 0, 0, 1576, 1577, 5, 197, 0, 0, 1577, 1578, 3, 370, 185, 0, 1578, 1579,
		3, 382, 191, 0, 1579, 281, 1, 0, 0, 0, 1580, 1581, 5, 198, 0, 0, 1581,
		1582, 3, 370, 185, 0, 1582, 1583, 3, 382, 191, 0, 1583, 283, 1, 0, 0, 0,
		1584, 1585, 5, 199, 0, 0, 1585, 1586, 3, 370, 185, 0, 1586, 1587, 3, 382,
		191, 0, 1587, 285, 1, 0, 0, 0, 1588, 1589, 5, 200, 0, 0, 1589, 1590, 3,
		370, 185, 0, 1590, 1591, 3, 382, 191, 0, 1591, 287, 1, 0, 0, 0, 1592, 1593,
		5, 201, 0, 0, 1593, 1594, 3, 370, 185, 0, 1594, 1595, 3, 382, 191, 0, 1595,
		289, 1, 0, 0, 0, 1596, 1597, 5, 202, 0, 0, 1597, 1598, 3, 370, 185, 0,
		1598, 1599, 3, 382, 191, 0, 1599, 291, 1, 0, 0, 0, 1600, 1601, 5, 203,
		0, 0, 1601, 1602, 3, 370, 185, 0, 1602, 1603, 3, 382, 191, 0, 1603, 293,
		1, 0, 0, 0, 1604, 1605, 5, 204, 0, 0, 1605, 1606, 3, 370, 185, 0, 1606,
		1607, 3, 382, 191, 0, 1607, 295, 1, 0, 0, 0, 1608, 1609, 5, 205, 0, 0,
		1609, 1610, 3, 370, 185, 0, 1610, 1611, 3, 382, 191, 0, 1611, 297, 1, 0,
		0, 0, 1612, 1613, 5, 206, 0, 0, 1613, 1614, 3, 370, 185, 0, 1614, 1615,
		3, 382, 191, 0, 1615, 299, 1, 0, 0, 0, 1616, 1617, 5, 149, 0, 0, 1617,
		1618, 3, 370, 185, 0, 1618, 1619, 3, 384, 192, 0, 1619, 301, 1, 0, 0, 0,
		1620, 1621, 5, 207, 0, 0, 1621, 1622, 3, 370, 185, 0, 1622, 1623, 3, 382,
		191, 0, 1623, 303, 1, 0, 0, 0, 1624, 1625, 5, 208, 0, 0, 1625, 1626, 3,
		370, 185, 0, 1626, 1627, 3, 382, 191, 0, 1627, 305, 1, 0, 0, 0, 1628, 1629,
		5, 209, 0, 0, 1629, 1630, 3, 370, 185, 0, 1630, 1631, 3, 382, 191, 0, 1631,
		307, 1, 0, 0, 0, 1632, 1633, 5, 210, 0, 0, 1633, 1634, 3, 370, 185, 0,
		1634, 1635, 3, 382, 191, 0, 1635, 309, 1, 0, 0, 0, 1636, 1637, 5, 211,
		0, 0, 1637, 1638, 3, 370, 185, 0, 1638, 1639, 3, 382, 191, 0, 1639, 311,
		1, 0, 0, 0, 1640, 1641, 5, 212, 0, 0, 1641, 1642, 3, 370, 185, 0, 1642,
		1643, 3, 382, 191, 0, 1643, 313, 1, 0, 0, 0, 1644, 1645, 5, 213, 0, 0,
		1645, 1646, 3, 370, 185, 0, 1646, 1647, 3, 382, 191, 0, 1647, 315, 1, 0,
		0, 0, 1648, 1649, 5, 214, 0, 0, 1649, 1650, 3, 370, 185, 0, 1650, 1651,
		3, 382, 191, 0, 1651, 317, 1, 0, 0, 0, 1652, 1653, 5, 215, 0, 0, 1653,
		1654, 3, 370, 185, 0, 1654, 1655, 3, 382, 191, 0, 1655, 319, 1, 0, 0, 0,
		1656, 1657, 5, 216, 0, 0, 1657, 1658, 3, 370, 185, 0, 1658, 1659, 3, 382,
		191, 0, 1659, 321, 1, 0, 0, 0, 1660, 1661, 5, 217, 0, 0, 1661, 1662, 3,
		370, 185, 0, 1662, 1663, 3, 382, 191, 0, 1663, 323, 1, 0, 0, 0, 1664, 1665,
		5, 218, 0, 0, 1665, 1666, 3, 370, 185, 0, 1666, 1667, 3, 382, 191, 0, 1667,
		325, 1, 0, 0, 0, 1668, 1669, 5, 219, 0, 0, 1669, 1670, 3, 370, 185, 0,
		1670, 1671, 3, 382, 191, 0, 1671, 327, 1, 0, 0, 0, 1672, 1673, 5, 220,
		0, 0, 1673, 1674, 3, 370, 185, 0, 1674, 1675, 3, 382, 191, 0, 1675, 329,
		1, 0, 0, 0, 1676, 1677, 5, 221, 0, 0, 1677, 1678, 3, 370, 185, 0, 1678,
		1679, 3, 382, 191, 0, 1679, 331, 1, 0, 0, 0, 1680, 1681, 5, 222, 0, 0,
		1681, 1682, 3, 370, 185, 0, 1682, 1683, 3, 382, 191, 0, 1683, 333, 1, 0,
		0, 0, 1684, 1685, 5, 298, 0, 0, 1685, 1686, 5, 223, 0, 0, 1686, 1687, 3,
		376, 188, 0, 1687, 1688, 3, 374, 187, 0, 1688, 1689, 7, 3, 0, 0, 1689,
		1690, 3, 376, 188, 0, 1690, 1691, 3, 372, 186, 0, 1691, 1692, 3, 376, 188,
		0, 1692, 1693, 3, 372, 186, 0, 1693, 1694, 3, 372, 186, 0, 1694, 1695,
		5, 299, 0, 0, 1695, 1696, 5, 223, 0, 0, 1696, 335, 1, 0, 0, 0, 1697, 1698,
		5, 298, 0, 0, 1698, 1699, 5, 224, 0, 0, 1699, 1700, 3, 376, 188, 0, 1700,
		1701, 3, 374, 187, 0, 1701, 1702, 3, 382, 191, 0, 1702, 1703, 3, 376, 188,
		0, 1703, 1704, 3, 370, 185, 0, 1704, 1705, 3, 372, 186, 0, 1705, 1706,
		3, 372, 186, 0, 1706, 1707, 3, 372, 186, 0, 1707, 1708, 5, 299, 0, 0, 1708,
		1709, 5, 224, 0, 0, 1709, 337, 1, 0, 0, 0, 1710, 1711, 5, 298, 0, 0, 1711,
		1712, 5, 225, 0, 0, 1712, 1713, 3, 376, 188, 0, 1713, 1714, 3, 374, 187,
		0, 1714, 1715, 3, 370, 185, 0, 1715, 1716, 3, 392, 196, 0, 1716, 1720,
		3, 374, 187, 0, 1717, 1719, 3, 340, 170, 0, 1718, 1717, 1, 0, 0, 0, 1719,
		1722, 1, 0, 0, 0, 1720, 1718, 1, 0, 0, 0, 1720, 1721, 1, 0, 0, 0, 1721,
		1723, 1, 0, 0, 0, 1722, 1720, 1, 0, 0, 0, 1723, 1724, 5, 299, 0, 0, 1724,
		1725, 5, 225, 0, 0, 1725, 339, 1, 0, 0, 0, 1726, 1727, 5, 298, 0, 0, 1727,
		1728, 5, 226, 0, 0, 1728, 1729, 3, 376, 188, 0, 1729, 1730, 3, 376, 188,
		0, 1730, 1731, 3, 370, 185, 0, 1731, 1732, 3, 392, 196, 0, 1732, 1733,
		3, 374, 187, 0, 1733, 1734, 5, 299, 0, 0, 1734, 1735, 5, 226, 0, 0, 1735,
		341, 1, 0, 0, 0, 1736, 1737, 5, 298, 0, 0, 1737, 1738, 5, 227, 0, 0, 1738,
		1739, 3, 376, 188, 0, 1739, 1740, 3, 374, 187, 0, 1740, 1741, 3, 374, 187,
		0, 1741, 1747, 7, 13, 0, 0, 1742, 1746, 3, 344, 172, 0, 1743, 1746, 3,
		62, 31, 0, 1744, 1746, 3, 346, 173, 0, 1745, 1742, 1, 0, 0, 0, 1745, 1743,
		1, 0, 0, 0, 1745, 1744, 1, 0, 0, 0, 1746, 1749, 1, 0, 0, 0, 1747, 1745,
		1, 0, 0, 0, 1747, 1748, 1, 0, 0, 0, 1748, 1750, 1, 0, 0, 0, 1749, 1747,
		1, 0, 0, 0, 1750, 1751, 5, 299, 0, 0, 1751, 1752, 5, 227, 0, 0, 1752, 343,
		1, 0, 0, 0, 1753, 1754, 5, 230, 0, 0, 1754, 1755, 3, 370, 185, 0, 1755,
		1756, 3, 370, 185, 0, 1756, 1757, 3, 370, 185, 0, 1757, 1758, 3, 370, 185,
		0, 1758, 1759, 3, 370, 185, 0, 1759, 1760, 3, 370, 185, 0, 1760, 1761,
		3, 370, 185, 0, 1761, 345, 1, 0, 0, 0, 1762, 1763, 5, 231, 0, 0, 1763,
		1764, 3, 372, 186, 0, 1764, 1765, 3, 372, 186, 0, 1765, 347, 1, 0, 0, 0,
		1766, 1767, 5, 298, 0, 0, 1767, 1768, 5, 232, 0, 0, 1768, 1773, 3, 376,
		188, 0, 1769, 1772, 3, 56, 28, 0, 1770, 1772, 3, 350, 175, 0, 1771, 1769,
		1, 0, 0, 0, 1771, 1770, 1, 0, 0, 0, 1772, 1775, 1, 0, 0, 0, 1773, 1771,
		1, 0, 0, 0, 1773, 1774, 1, 0, 0, 0, 1774, 1776, 1, 0, 0, 0, 1775, 1773,
		1, 0, 0, 0, 1776, 1777, 5, 299, 0, 0, 1777, 1778, 5, 232, 0, 0, 1778, 349,
		1, 0, 0, 0, 1779, 1780, 5, 298, 0, 0, 1780, 1784, 5, 233, 0, 0, 1781, 1783,
		3, 376, 188, 0, 1782, 1781, 1, 0, 0, 0, 1783, 1786, 1, 0, 0, 0, 1784, 1782,
		1, 0, 0, 0, 1784, 1785, 1, 0, 0, 0, 1785, 1787, 1, 0, 0, 0, 1786, 1784,
		1, 0, 0, 0, 1787, 1788, 5, 299, 0, 0, 1788, 1789, 5, 233, 0, 0, 1789, 351,
		1, 0, 0, 0, 1790, 1791, 5, 298, 0, 0, 1791, 1799, 5, 234, 0, 0, 1792, 1798,
		3, 354, 177, 0, 1793, 1798, 3, 358, 179, 0, 1794, 1798, 3, 364, 182, 0,
		1795, 1798, 3, 366, 183, 0, 1796, 1798, 3, 368, 184, 0, 1797, 1792, 1,
		0, 0, 0, 1797, 1793, 1, 0, 0, 0, 1797, 1794, 1, 0, 0, 0, 1797, 1795, 1,
		0, 0, 0, 1797, 1796, 1, 0, 0, 0, 1798, 1801, 1, 0, 0, 0, 1799, 1797, 1,
		0, 0, 0, 1799, 1800, 1, 0, 0, 0, 1800, 1802, 1, 0, 0, 0, 1801, 1799, 1,
		0, 0, 0, 1802, 1803, 5, 299, 0, 0, 1803, 1804, 5, 234, 0, 0, 1804, 353,
		1, 0, 0, 0, 1805, 1806, 5, 298, 0, 0, 1806, 1807, 5, 235, 0, 0, 1807, 1811,
		3, 376, 188, 0, 1808, 1810, 3, 376, 188, 0, 1809, 1808, 1, 0, 0, 0, 1810,
		1813, 1, 0, 0, 0, 1811, 1809, 1, 0, 0, 0, 1811, 1812, 1, 0, 0, 0, 1812,
		1817, 1, 0, 0, 0, 1813, 1811, 1, 0, 0, 0, 1814, 1816, 3, 356, 178, 0, 1815,
		1814, 1, 0, 0, 0, 1816, 1819, 1, 0, 0, 0, 1817, 1815, 1, 0, 0, 0, 1817,
		1818, 1, 0, 0, 0, 1818, 1820, 1, 0, 0, 0, 1819, 1817, 1, 0, 0, 0, 1820,
		1821, 5, 299, 0, 0, 1821, 1822, 5, 235, 0, 0, 1822, 355, 1, 0, 0, 0, 1823,
		1824, 5, 298, 0, 0, 1824, 1828, 5, 236, 0, 0, 1825, 1827, 3, 370, 185,
		0, 1826, 1825, 1, 0, 0, 0, 1827, 1830, 1, 0, 0, 0, 1828, 1826, 1, 0, 0,
		0, 1828, 1829, 1, 0, 0, 0, 1829, 1831, 1, 0, 0, 0, 1830, 1828, 1, 0, 0,
		0, 1831, 1832, 5, 299, 0, 0, 1832, 1833, 5, 236, 0, 0, 1833, 357, 1, 0,
		0, 0, 1834, 1835, 5, 298, 0, 0, 1835, 1836, 5, 237, 0, 0, 1836, 1837, 3,
		376, 188, 0, 1837, 1841, 3, 374, 187, 0, 1838, 1840, 3, 376, 188, 0, 1839,
		1838, 1, 0, 0, 0, 1840, 1843, 1, 0, 0, 0, 1841, 1839, 1, 0, 0, 0, 1841,
		1842, 1, 0, 0, 0, 1842, 1848, 1, 0, 0, 0, 1843, 1841, 1, 0, 0, 0, 1844,
		1847, 3, 360, 180, 0, 1845, 1847, 3, 362, 181, 0, 1846, 1844, 1, 0, 0,
		0, 1846, 1845, 1, 0, 0, 0, 1847, 1850, 1, 0, 0, 0, 1848, 1846, 1, 0, 0,
		0, 1848, 1849, 1, 0, 0, 0, 1849, 1851, 1, 0, 0, 0, 1850, 1848, 1, 0, 0,
		0, 1851, 1852, 5, 299, 0, 0, 1852, 1853, 5, 237, 0, 0, 1853, 359, 1, 0,
		0, 0, 1854, 1855, 5, 238, 0, 0, 1855, 1856, 3, 376, 188, 0, 1856, 361,
		1, 0, 0, 0, 1857, 1858, 5, 239, 0, 0, 1858, 1859, 3, 376, 188, 0, 1859,
		363, 1, 0, 0, 0, 1860, 1861, 5, 298, 0, 0, 1861, 1867, 5, 240, 0, 0, 1862,
		1863, 3, 376, 188, 0, 1863, 1864, 3, 376, 188, 0, 1864, 1866, 1, 0, 0,
		0, 1865, 1862, 1, 0, 0, 0, 1866, 1869, 1, 0, 0, 0, 1867, 1865, 1, 0, 0,
		0, 1867, 1868, 1, 0, 0, 0, 1868, 1870, 1, 0, 0, 0, 1869, 1867, 1, 0, 0,
		0, 1870, 1871, 5, 299, 0, 0, 1871, 1872, 5, 240, 0, 0, 1872, 365, 1, 0,
		0, 0, 1873, 1874, 5, 241, 0, 0, 1874, 1875, 7, 14, 0, 0, 1875, 367, 1,
		0, 0, 0, 1876, 1877, 5, 244, 0, 0, 1877, 1878, 3, 374, 187, 0, 1878, 369,
		1, 0, 0, 0, 1879, 1882, 5, 303, 0, 0, 1880, 1882, 5, 302, 0, 0, 1881, 1879,
		1, 0, 0, 0, 1881, 1880, 1, 0, 0, 0, 1882, 371, 1, 0, 0, 0, 1883, 1887,
		5, 301, 0, 0, 1884, 1887, 5, 302, 0, 0, 1885, 1887, 5, 303, 0, 0, 1886,
		1883, 1, 0, 0, 0, 1886, 1884, 1, 0, 0, 0, 1886, 1885, 1, 0, 0, 0, 1887,
		373, 1, 0, 0, 0, 1888, 1889, 5, 306, 0, 0, 1889, 375, 1, 0, 0, 0, 1890,
		1895, 3, 378, 189, 0, 1891, 1892, 5, 245, 0, 0, 1892, 1894, 3, 378, 189,
		0, 1893, 1891, 1, 0, 0, 0, 1894, 1897, 1, 0, 0, 0, 1895, 1893, 1, 0, 0,
		0, 1895, 1896, 1, 0, 0, 0, 1896, 377, 1, 0, 0, 0, 1897, 1895, 1, 0, 0,
		0, 1898, 1902, 5, 300, 0, 0, 1899, 1901, 3, 380, 190, 0, 1900, 1899, 1,
		0, 0, 0, 1901, 1904, 1, 0, 0, 0, 1902, 1900, 1, 0, 0, 0, 1902, 1903, 1,
		0, 0, 0, 1903, 379, 1, 0, 0, 0, 1904, 1902, 1, 0, 0, 0, 1905, 1908, 5,
		246, 0, 0, 1906, 1909, 5, 302, 0, 0, 1907, 1909, 5, 300, 0, 0, 1908, 1906,
		1, 0, 0, 0, 1908, 1907, 1, 0, 0, 0, 1909, 1910, 1, 0, 0, 0, 1910, 1911,
		5, 247, 0, 0, 1911, 381, 1, 0, 0, 0, 1912, 1913, 7, 15, 0, 0, 1913, 383,
		1, 0, 0, 0, 1914, 1915, 7, 16, 0, 0, 1915, 385, 1, 0, 0, 0, 1916, 1917,
		7, 17, 0, 0, 1917, 387, 1, 0, 0, 0, 1918, 1919, 7, 18, 0, 0, 1919, 389,
		1, 0, 0, 0, 1920, 1921, 7, 19, 0, 0, 1921, 391, 1, 0, 0, 0, 1922, 1923,
		5, 272, 0, 0, 1923, 393, 1, 0, 0, 0, 1924, 1925, 5, 298, 0, 0, 1925, 1929,
		5, 273, 0, 0, 1926, 1928, 3, 396, 198, 0, 1927, 1926, 1, 0, 0, 0, 1928,
		1931, 1, 0, 0, 0, 1929, 1927, 1, 0, 0, 0, 1929, 1930, 1, 0, 0, 0, 1930,
		1932, 1, 0, 0, 0, 1931, 1929, 1, 0, 0, 0, 1932, 1933, 5, 299, 0, 0, 1933,
		1934, 5, 273, 0, 0, 1934, 395, 1, 0, 0, 0, 1935, 1938, 3, 398, 199, 0,
		1936, 1938, 3, 404, 202, 0, 1937, 1935, 1, 0, 0, 0, 1937, 1936, 1, 0, 0,
		0, 1938, 1939, 1, 0, 0, 0, 1939, 1940, 5, 274, 0, 0, 1940, 397, 1, 0, 0,
		0, 1941, 1942, 3, 400, 200, 0, 1942, 399, 1, 0, 0, 0, 1943, 1949, 3, 402,
		201, 0, 1944, 1949, 3, 412, 206, 0, 1945, 1949, 3, 418, 209, 0, 1946, 1949,
		3, 424, 212, 0, 1947, 1949, 3, 406, 203, 0, 1948, 1943, 1, 0, 0, 0, 1948,
		1944, 1, 0, 0, 0, 1948, 1945, 1, 0, 0, 0, 1948, 1946, 1, 0, 0, 0, 1948,
		1947, 1, 0, 0, 0, 1949, 401, 1, 0, 0, 0, 1950, 1961, 5, 275, 0, 0, 1951,
		1961, 5, 276, 0, 0, 1952, 1961, 5, 277, 0, 0, 1953, 1961, 5, 278, 0, 0,
		1954, 1961, 5, 279, 0, 0, 1955, 1961, 5, 280, 0, 0, 1956, 1961, 5, 281,
		0, 0, 1957, 1961, 5, 282, 0, 0, 1958, 1961, 5, 283, 0, 0, 1959, 1961, 5,
		284, 0, 0, 1960, 1950, 1, 0, 0, 0, 1960, 1951, 1, 0, 0, 0, 1960, 1952,
		1, 0, 0, 0, 1960, 1953, 1, 0, 0, 0, 1960, 1954, 1, 0, 0, 0, 1960, 1955,
		1, 0, 0, 0, 1960, 1956, 1, 0, 0, 0, 1960, 1957, 1, 0, 0, 0, 1960, 1958,
		1, 0, 0, 0, 1960, 1959, 1, 0, 0, 0, 1961, 403, 1, 0, 0, 0, 1962, 1963,
		5, 285, 0, 0, 1963, 1964, 3, 428, 214, 0, 1964, 1965, 3, 400, 200, 0, 1965,
		1979, 1, 0, 0, 0, 1966, 1967, 5, 285, 0, 0, 1967, 1968, 3, 374, 187, 0,
		1968, 1969, 3, 400, 200, 0, 1969, 1979, 1, 0, 0, 0, 1970, 1971, 5, 285,
		0, 0, 1971, 1972, 3, 374, 187, 0, 1972, 1973, 5, 286, 0, 0, 1973, 1974,
		3, 416, 208, 0, 1974, 1976, 5, 287, 0, 0, 1975, 1977, 5, 288, 0, 0, 1976,
		1975, 1, 0, 0, 0, 1976, 1977, 1, 0, 0, 0, 1977, 1979, 1, 0, 0, 0, 1978,
		1962, 1, 0, 0, 0, 1978, 1966, 1, 0, 0, 0, 1978, 1970, 1, 0, 0, 0, 1979,
		405, 1, 0, 0, 0, 1980, 1982, 5, 289, 0, 0, 1981, 1983, 3, 376, 188, 0,
		1982, 1981, 1, 0, 0, 0, 1982, 1983, 1, 0, 0, 0, 1983, 1984, 1, 0, 0, 0,
		1984, 1985, 5, 290, 0, 0, 1985, 1986, 3, 408, 204, 0, 1986, 1987, 5, 291,
		0, 0, 1987, 1991, 1, 0, 0, 0, 1988, 1989, 5, 289, 0, 0, 1989, 1991, 3,
		376, 188, 0, 1990, 1980, 1, 0, 0, 0, 1990, 1988, 1, 0, 0, 0, 1991, 407,
		1, 0, 0, 0, 1992, 1997, 3, 410, 205, 0, 1993, 1994, 5, 292, 0, 0, 1994,
		1996, 3, 410, 205, 0, 1995, 1993, 1, 0, 0, 0, 1996, 1999, 1, 0, 0, 0, 1997,
		1995, 1, 0, 0, 0, 1997, 1998, 1, 0, 0, 0, 1998, 409, 1, 0, 0, 0, 1999,
		1997, 1, 0, 0, 0, 2000, 2003, 3, 428, 214, 0, 2001, 2002, 5, 293, 0, 0,
		2002, 2004, 3, 372, 186, 0, 2003, 2001, 1, 0, 0, 0, 2003, 2004, 1, 0, 0,
		0, 2004, 2011, 1, 0, 0, 0, 2005, 2008, 3, 374, 187, 0, 2006, 2007, 5, 293,
		0, 0, 2007, 2009, 3, 372, 186, 0, 2008, 2006, 1, 0, 0, 0, 2008, 2009, 1,
		0, 0, 0, 2009, 2011, 1, 0, 0, 0, 2010, 2000, 1, 0, 0, 0, 2010, 2005, 1,
		0, 0, 0, 2011, 411, 1, 0, 0, 0, 2012, 2014, 5, 294, 0, 0, 2013, 2015, 3,
		376, 188, 0, 2014, 2013, 1, 0, 0, 0, 2014, 2015, 1, 0, 0, 0, 2015, 2016,
		1, 0, 0, 0, 2016, 2020, 5, 290, 0, 0, 2017, 2019, 3, 414, 207, 0, 2018,
		2017, 1, 0, 0, 0, 2019, 2022, 1, 0, 0, 0, 2020, 2018, 1, 0, 0, 0, 2020,
		2021, 1, 0, 0, 0, 2021, 2023, 1, 0, 0, 0, 2022, 2020, 1, 0, 0, 0, 2023,
		2027, 5, 291, 0, 0, 2024, 2025, 5, 294, 0, 0, 2025, 2027, 3, 376, 188,
		0, 2026, 2012, 1, 0, 0, 0, 2026, 2024, 1, 0, 0, 0, 2027, 413, 1, 0, 0,
		0, 2028, 2029, 3, 416, 208, 0, 2029, 2030, 5, 274, 0, 0, 2030, 2040, 1,
		0, 0, 0, 2031, 2032, 5, 286, 0, 0, 2032, 2033, 3, 416, 208, 0, 2033, 2035,
		5, 287, 0, 0, 2034, 2036, 5, 288, 0, 0, 2035, 2034, 1, 0, 0, 0, 2035, 2036,
		1, 0, 0, 0, 2036, 2037, 1, 0, 0, 0, 2037, 2038, 5, 274, 0, 0, 2038, 2040,
		1, 0, 0, 0, 2039, 2028, 1, 0, 0, 0, 2039, 2031, 1, 0, 0, 0, 2040, 415,
		1, 0, 0, 0, 2041, 2045, 3, 400, 200, 0, 2042, 2044, 3, 380, 190, 0, 2043,
		2042, 1, 0, 0, 0, 2044, 2047, 1, 0, 0, 0, 2045, 2043, 1, 0, 0, 0, 2045,
		2046, 1, 0, 0, 0, 2046, 417, 1, 0, 0, 0, 2047, 2045, 1, 0, 0, 0, 2048,
		2050, 5, 295, 0, 0, 2049, 2051, 3, 376, 188, 0, 2050, 2049, 1, 0, 0, 0,
		2050, 2051, 1, 0, 0, 0, 2051, 2066, 1, 0, 0, 0, 2052, 2056, 5, 290, 0,
		0, 2053, 2055, 3, 420, 210, 0, 2054, 2053, 1, 0, 0, 0, 2055, 2058, 1, 0,
		0, 0, 2056, 2054, 1, 0, 0, 0, 2056, 2057, 1, 0, 0, 0, 2057, 2059, 1, 0,
		0, 0, 2058, 2056, 1, 0, 0, 0, 2059, 2067, 5, 291, 0, 0, 2060, 2062, 3,
		420, 210, 0, 2061, 2060, 1, 0, 0, 0, 2062, 2065, 1, 0, 0, 0, 2063, 2061,
		1, 0, 0, 0, 2063, 2064, 1, 0, 0, 0, 2064, 2067, 1, 0, 0, 0, 2065, 2063,
		1, 0, 0, 0, 2066, 2052, 1, 0, 0, 0, 2066, 2063, 1, 0, 0, 0, 2067, 419,
		1, 0, 0, 0, 2068, 2069, 5, 286, 0, 0, 2069, 2071, 3, 422, 211, 0, 2070,
		2072, 5, 274, 0, 0, 2071, 2070, 1, 0, 0, 0, 2071, 2072, 1, 0, 0, 0, 2072,
		2073, 1, 0, 0, 0, 2073, 2074, 5, 287, 0, 0, 2074, 2075, 5, 288, 0, 0, 2075,
		2076, 5, 274, 0, 0, 2076, 2093, 1, 0, 0, 0, 2077, 2078, 5, 286, 0, 0, 2078,
		2080, 3, 404, 202, 0, 2079, 2081, 5, 274, 0, 0, 2080, 2079, 1, 0, 0, 0,
		2080, 2081, 1, 0, 0, 0, 2081, 2082, 1, 0, 0, 0, 2082, 2083, 5, 287, 0,
		0, 2083, 2084, 5, 288, 0, 0, 2084, 2085, 5, 274, 0, 0, 2085, 2093, 1, 0,
		0, 0, 2086, 2087, 3, 422, 211, 0, 2087, 2088, 5, 274, 0, 0, 2088, 2093,
		1, 0, 0, 0, 2089, 2090, 3, 404, 202, 0, 2090, 2091, 5, 274, 0, 0, 2091,
		2093, 1, 0, 0, 0, 2092, 2068, 1, 0, 0, 0, 2092, 2077, 1, 0, 0, 0, 2092,
		2086, 1, 0, 0, 0, 2092, 2089, 1, 0, 0, 0, 2093, 421, 1, 0, 0, 0, 2094,
		2096, 3, 428, 214, 0, 2095, 2094, 1, 0, 0, 0, 2095, 2096, 1, 0, 0, 0, 2096,
		2098, 1, 0, 0, 0, 2097, 2099, 3, 416, 208, 0, 2098, 2097, 1, 0, 0, 0, 2098,
		2099, 1, 0, 0, 0, 2099, 2115, 1, 0, 0, 0, 2100, 2102, 3, 428, 214, 0, 2101,
		2100, 1, 0, 0, 0, 2101, 2102, 1, 0, 0, 0, 2102, 2103, 1, 0, 0, 0, 2103,
		2104, 5, 286, 0, 0, 2104, 2105, 3, 416, 208, 0, 2105, 2106, 5, 287, 0,
		0, 2106, 2107, 5, 288, 0, 0, 2107, 2115, 1, 0, 0, 0, 2108, 2110, 3, 374,
		187, 0, 2109, 2108, 1, 0, 0, 0, 2109, 2110, 1, 0, 0, 0, 2110, 2112, 1,
		0, 0, 0, 2111, 2113, 3, 416, 208, 0, 2112, 2111, 1, 0, 0, 0, 2112, 2113,
		1, 0, 0, 0, 2113, 2115, 1, 0, 0, 0, 2114, 2095, 1, 0, 0, 0, 2114, 2101,
		1, 0, 0, 0, 2114, 2109, 1, 0, 0, 0, 2115, 423, 1, 0, 0, 0, 2116, 2118,
		5, 296, 0, 0, 2117, 2119, 3, 376, 188, 0, 2118, 2117, 1, 0, 0, 0, 2118,
		2119, 1, 0, 0, 0, 2119, 2120, 1, 0, 0, 0, 2120, 2124, 5, 290, 0, 0, 2121,
		2123, 3, 426, 213, 0, 2122, 2121, 1, 0, 0, 0, 2123, 2126, 1, 0, 0, 0, 2124,
		2122, 1, 0, 0, 0, 2124, 2125, 1, 0, 0, 0, 2125, 2127, 1, 0, 0, 0, 2126,
		2124, 1, 0, 0, 0, 2127, 2131, 5, 291, 0, 0, 2128, 2129, 5, 296, 0, 0, 2129,
		2131, 3, 376, 188, 0, 2130, 2116, 1, 0, 0, 0, 2130, 2128, 1, 0, 0, 0, 2131,
		425, 1, 0, 0, 0, 2132, 2134, 3, 428, 214, 0, 2133, 2135, 3, 416, 208, 0,
		2134, 2133, 1, 0, 0, 0, 2134, 2135, 1, 0, 0, 0, 2135, 2136, 1, 0, 0, 0,
		2136, 2137, 5, 274, 0, 0, 2137, 2148, 1, 0, 0, 0, 2138, 2140, 3, 374, 187,
		0, 2139, 2141, 3, 416, 208, 0, 2140, 2139, 1, 0, 0, 0, 2140, 2141, 1, 0,
		0, 0, 2141, 2142, 1, 0, 0, 0, 2142, 2143, 5, 274, 0, 0, 2143, 2148, 1,
		0, 0, 0, 2144, 2145, 3, 404, 202, 0, 2145, 2146, 5, 274, 0, 0, 2146, 2148,
		1, 0, 0, 0, 2147, 2132, 1, 0, 0, 0, 2147, 2138, 1, 0, 0, 0, 2147, 2144,
		1, 0, 0, 0, 2148, 427, 1, 0, 0, 0, 2149, 2150, 5, 308, 0, 0, 2150, 429,
		1, 0, 0, 0, 2151, 2152, 5, 298, 0, 0, 2152, 2153, 5, 297, 0, 0, 2153, 2157,
		3, 376, 188, 0, 2154, 2156, 3, 432, 216, 0, 2155, 2154, 1, 0, 0, 0, 2156,
		2159, 1, 0, 0, 0, 2157, 2155, 1, 0, 0, 0, 2157, 2158, 1, 0, 0, 0, 2158,
		2160, 1, 0, 0, 0, 2159, 2157, 1, 0, 0, 0, 2160, 2161, 5, 299, 0, 0, 2161,
		2162, 5, 297, 0, 0, 2162, 431, 1, 0, 0, 0, 2163, 2169, 3, 428, 214, 0,
		2164, 2169, 3, 374, 187, 0, 2165, 2169, 3, 372, 186, 0, 2166, 2169, 3,
		434, 217, 0, 2167, 2169, 3, 376, 188, 0, 2168, 2163, 1, 0, 0, 0, 2168,
		2164, 1, 0, 0, 0, 2168, 2165, 1, 0, 0, 0, 2168, 2166, 1, 0, 0, 0, 2168,
		2167, 1, 0, 0, 0, 2169, 433, 1, 0, 0, 0, 2170, 2171, 5, 298, 0, 0, 2171,
		2175, 3, 376, 188, 0, 2172, 2174, 3, 432, 216, 0, 2173, 2172, 1, 0, 0,
		0, 2174, 2177, 1, 0, 0, 0, 2175, 2173, 1, 0, 0, 0, 2175, 2176, 1, 0, 0,
		0, 2176, 2178, 1, 0, 0, 0, 2177, 2175, 1, 0, 0, 0, 2178, 2179, 5, 299,
		0, 0, 2179, 2180, 3, 376, 188, 0, 2180, 435, 1, 0, 0, 0, 125, 437, 440,
		471, 473, 490, 531, 542, 545, 564, 600, 602, 613, 615, 650, 652, 687, 689,
		731, 733, 762, 764, 791, 809, 820, 835, 854, 856, 883, 906, 912, 932, 938,
		955, 961, 975, 977, 987, 1003, 1005, 1016, 1030, 1041, 1052, 1063, 1080,
		1082, 1093, 1106, 1120, 1122, 1159, 1161, 1175, 1177, 1207, 1227, 1229,
		1260, 1262, 1278, 1289, 1326, 1349, 1436, 1438, 1720, 1745, 1747, 1771,
		1773, 1784, 1797, 1799, 1811, 1817, 1828, 1841, 1846, 1848, 1867, 1881,
		1886, 1895, 1902, 1908, 1929, 1937, 1948, 1960, 1976, 1978, 1982, 1990,
		1997, 2003, 2008, 2010, 2014, 2020, 2026, 2035, 2039, 2045, 2050, 2056,
		2063, 2066, 2071, 2080, 2092, 2095, 2098, 2101, 2109, 2112, 2114, 2118,
		2124, 2130, 2134, 2140, 2147, 2157, 2168, 2175,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// A2LParserInit initializes any static state used to implement A2LParser. By default the
// static state used to implement the parser is lazily initialized during the first call to
// NewA2LParser(). You can call this function if you wish to initialize the static state ahead
// of time.
func A2LParserInit() {
	staticData := &a2lParserStaticData
	staticData.once.Do(a2lParserInit)
}

// NewA2LParser produces a new parser instance for the optional input antlr.TokenStream.
func NewA2LParser(input antlr.TokenStream) *A2LParser {
	A2LParserInit()
	this := new(A2LParser)
	this.BaseParser = antlr.NewBaseParser(input)
	staticData := &a2lParserStaticData
	this.Interpreter = antlr.NewParserATNSimulator(this, staticData.atn, staticData.decisionToDFA, staticData.predictionContextCache)
	this.RuleNames = staticData.ruleNames
	this.LiteralNames = staticData.literalNames
	this.SymbolicNames = staticData.symbolicNames
	this.GrammarFileName = "A2L.g4"

	return this
}

// A2LParser tokens.
const (
	A2LParserEOF     = antlr.TokenEOF
	A2LParserT__0    = 1
	A2LParserT__1    = 2
	A2LParserT__2    = 3
	A2LParserT__3    = 4
	A2LParserT__4    = 5
	A2LParserT__5    = 6
	A2LParserT__6    = 7
	A2LParserT__7    = 8
	A2LParserT__8    = 9
	A2LParserT__9    = 10
	A2LParserT__10   = 11
	A2LParserT__11   = 12
	A2LParserT__12   = 13
	A2LParserT__13   = 14
	A2LParserT__14   = 15
	A2LParserT__15   = 16
	A2LParserT__16   = 17
	A2LParserT__17   = 18
	A2LParserT__18   = 19
	A2LParserT__19   = 20
	A2LParserT__20   = 21
	A2LParserT__21   = 22
	A2LParserT__22   = 23
	A2LParserT__23   = 24
	A2LParserT__24   = 25
	A2LParserT__25   = 26
	A2LParserT__26   = 27
	A2LParserT__27   = 28
	A2LParserT__28   = 29
	A2LParserT__29   = 30
	A2LParserT__30   = 31
	A2LParserT__31   = 32
	A2LParserT__32   = 33
	A2LParserT__33   = 34
	A2LParserT__34   = 35
	A2LParserT__35   = 36
	A2LParserT__36   = 37
	A2LParserT__37   = 38
	A2LParserT__38   = 39
	A2LParserT__39   = 40
	A2LParserT__40   = 41
	A2LParserT__41   = 42
	A2LParserT__42   = 43
	A2LParserT__43   = 44
	A2LParserT__44   = 45
	A2LParserT__45   = 46
	A2LParserT__46   = 47
	A2LParserT__47   = 48
	A2LParserT__48   = 49
	A2LParserT__49   = 50
	A2LParserT__50   = 51
	A2LParserT__51   = 52
	A2LParserT__52   = 53
	A2LParserT__53   = 54
	A2LParserT__54   = 55
	A2LParserT__55   = 56
	A2LParserT__56   = 57
	A2LParserT__57   = 58
	A2LParserT__58   = 59
	A2LParserT__59   = 60
	A2LParserT__60   = 61
	A2LParserT__61   = 62
	A2LParserT__62   = 63
	A2LParserT__63   = 64
	A2LParserT__64   = 65
	A2LParserT__65   = 66
	A2LParserT__66   = 67
	A2LParserT__67   = 68
	A2LParserT__68   = 69
	A2LParserT__69   = 70
	A2LParserT__70   = 71
	A2LParserT__71   = 72
	A2LParserT__72   = 73
	A2LParserT__73   = 74
	A2LParserT__74   = 75
	A2LParserT__75   = 76
	A2LParserT__76   = 77
	A2LParserT__77   = 78
	A2LParserT__78   = 79
	A2LParserT__79   = 80
	A2LParserT__80   = 81
	A2LParserT__81   = 82
	A2LParserT__82   = 83
	A2LParserT__83   = 84
	A2LParserT__84   = 85
	A2LParserT__85   = 86
	A2LParserT__86   = 87
	A2LParserT__87   = 88
	A2LParserT__88   = 89
	A2LParserT__89   = 90
	A2LParserT__90   = 91
	A2LParserT__91   = 92
	A2LParserT__92   = 93
	A2LParserT__93   = 94
	A2LParserT__94   = 95
	A2LParserT__95   = 96
	A2LParserT__96   = 97
	A2LParserT__97   = 98
	A2LParserT__98   = 99
	A2LParserT__99   = 100
	A2LParserT__100  = 101
	A2LParserT__101  = 102
	A2LParserT__102  = 103
	A2LParserT__103  = 104
	A2LParserT__104  = 105
	A2LParserT__105  = 106
	A2LParserT__106  = 107
	A2LParserT__107  = 108
	A2LParserT__108  = 109
	A2LParserT__109  = 110
	A2LParserT__110  = 111
	A2LParserT__111  = 112
	A2LParserT__112  = 113
	A2LParserT__113  = 114
	A2LParserT__114  = 115
	A2LParserT__115  = 116
	A2LParserT__116  = 117
	A2LParserT__117  = 118
	A2LParserT__118  = 119
	A2LParserT__119  = 120
	A2LParserT__120  = 121
	A2LParserT__121  = 122
	A2LParserT__122  = 123
	A2LParserT__123  = 124
	A2LParserT__124  = 125
	A2LParserT__125  = 126
	A2LParserT__126  = 127
	A2LParserT__127  = 128
	A2LParserT__128  = 129
	A2LParserT__129  = 130
	A2LParserT__130  = 131
	A2LParserT__131  = 132
	A2LParserT__132  = 133
	A2LParserT__133  = 134
	A2LParserT__134  = 135
	A2LParserT__135  = 136
	A2LParserT__136  = 137
	A2LParserT__137  = 138
	A2LParserT__138  = 139
	A2LParserT__139  = 140
	A2LParserT__140  = 141
	A2LParserT__141  = 142
	A2LParserT__142  = 143
	A2LParserT__143  = 144
	A2LParserT__144  = 145
	A2LParserT__145  = 146
	A2LParserT__146  = 147
	A2LParserT__147  = 148
	A2LParserT__148  = 149
	A2LParserT__149  = 150
	A2LParserT__150  = 151
	A2LParserT__151  = 152
	A2LParserT__152  = 153
	A2LParserT__153  = 154
	A2LParserT__154  = 155
	A2LParserT__155  = 156
	A2LParserT__156  = 157
	A2LParserT__157  = 158
	A2LParserT__158  = 159
	A2LParserT__159  = 160
	A2LParserT__160  = 161
	A2LParserT__161  = 162
	A2LParserT__162  = 163
	A2LParserT__163  = 164
	A2LParserT__164  = 165
	A2LParserT__165  = 166
	A2LParserT__166  = 167
	A2LParserT__167  = 168
	A2LParserT__168  = 169
	A2LParserT__169  = 170
	A2LParserT__170  = 171
	A2LParserT__171  = 172
	A2LParserT__172  = 173
	A2LParserT__173  = 174
	A2LParserT__174  = 175
	A2LParserT__175  = 176
	A2LParserT__176  = 177
	A2LParserT__177  = 178
	A2LParserT__178  = 179
	A2LParserT__179  = 180
	A2LParserT__180  = 181
	A2LParserT__181  = 182
	A2LParserT__182  = 183
	A2LParserT__183  = 184
	A2LParserT__184  = 185
	A2LParserT__185  = 186
	A2LParserT__186  = 187
	A2LParserT__187  = 188
	A2LParserT__188  = 189
	A2LParserT__189  = 190
	A2LParserT__190  = 191
	A2LParserT__191  = 192
	A2LParserT__192  = 193
	A2LParserT__193  = 194
	A2LParserT__194  = 195
	A2LParserT__195  = 196
	A2LParserT__196  = 197
	A2LParserT__197  = 198
	A2LParserT__198  = 199
	A2LParserT__199  = 200
	A2LParserT__200  = 201
	A2LParserT__201  = 202
	A2LParserT__202  = 203
	A2LParserT__203  = 204
	A2LParserT__204  = 205
	A2LParserT__205  = 206
	A2LParserT__206  = 207
	A2LParserT__207  = 208
	A2LParserT__208  = 209
	A2LParserT__209  = 210
	A2LParserT__210  = 211
	A2LParserT__211  = 212
	A2LParserT__212  = 213
	A2LParserT__213  = 214
	A2LParserT__214  = 215
	A2LParserT__215  = 216
	A2LParserT__216  = 217
	A2LParserT__217  = 218
	A2LParserT__218  = 219
	A2LParserT__219  = 220
	A2LParserT__220  = 221
	A2LParserT__221  = 222
	A2LParserT__222  = 223
	A2LParserT__223  = 224
	A2LParserT__224  = 225
	A2LParserT__225  = 226
	A2LParserT__226  = 227
	A2LParserT__227  = 228
	A2LParserT__228  = 229
	A2LParserT__229  = 230
	A2LParserT__230  = 231
	A2LParserT__231  = 232
	A2LParserT__232  = 233
	A2LParserT__233  = 234
	A2LParserT__234  = 235
	A2LParserT__235  = 236
	A2LParserT__236  = 237
	A2LParserT__237  = 238
	A2LParserT__238  = 239
	A2LParserT__239  = 240
	A2LParserT__240  = 241
	A2LParserT__241  = 242
	A2LParserT__242  = 243
	A2LParserT__243  = 244
	A2LParserT__244  = 245
	A2LParserT__245  = 246
	A2LParserT__246  = 247
	A2LParserT__247  = 248
	A2LParserT__248  = 249
	A2LParserT__249  = 250
	A2LParserT__250  = 251
	A2LParserT__251  = 252
	A2LParserT__252  = 253
	A2LParserT__253  = 254
	A2LParserT__254  = 255
	A2LParserT__255  = 256
	A2LParserT__256  = 257
	A2LParserT__257  = 258
	A2LParserT__258  = 259
	A2LParserT__259  = 260
	A2LParserT__260  = 261
	A2LParserT__261  = 262
	A2LParserT__262  = 263
	A2LParserT__263  = 264
	A2LParserT__264  = 265
	A2LParserT__265  = 266
	A2LParserT__266  = 267
	A2LParserT__267  = 268
	A2LParserT__268  = 269
	A2LParserT__269  = 270
	A2LParserT__270  = 271
	A2LParserT__271  = 272
	A2LParserT__272  = 273
	A2LParserT__273  = 274
	A2LParserT__274  = 275
	A2LParserT__275  = 276
	A2LParserT__276  = 277
	A2LParserT__277  = 278
	A2LParserT__278  = 279
	A2LParserT__279  = 280
	A2LParserT__280  = 281
	A2LParserT__281  = 282
	A2LParserT__282  = 283
	A2LParserT__283  = 284
	A2LParserT__284  = 285
	A2LParserT__285  = 286
	A2LParserT__286  = 287
	A2LParserT__287  = 288
	A2LParserT__288  = 289
	A2LParserT__289  = 290
	A2LParserT__290  = 291
	A2LParserT__291  = 292
	A2LParserT__292  = 293
	A2LParserT__293  = 294
	A2LParserT__294  = 295
	A2LParserT__295  = 296
	A2LParserT__296  = 297
	A2LParserBEGIN   = 298
	A2LParserEND     = 299
	A2LParserIDENT   = 300
	A2LParserFLOAT   = 301
	A2LParserINT     = 302
	A2LParserHEX     = 303
	A2LParserCOMMENT = 304
	A2LParserWS      = 305
	A2LParserSTRING  = 306
	A2LParserID      = 307
	A2LParserTAG     = 308
)

// A2LParser rules.
const (
	A2LParserRULE_a2lFile                    = 0
	A2LParserRULE_alignmentByte              = 1
	A2LParserRULE_alignmentFloat16Ieee       = 2
	A2LParserRULE_alignmentFloat32Ieee       = 3
	A2LParserRULE_alignmentFloat64Ieee       = 4
	A2LParserRULE_alignmentInt64             = 5
	A2LParserRULE_alignmentLong              = 6
	A2LParserRULE_alignmentWord              = 7
	A2LParserRULE_annotation                 = 8
	A2LParserRULE_annotationLabel            = 9
	A2LParserRULE_annotationOrigin           = 10
	A2LParserRULE_annotationText             = 11
	A2LParserRULE_bitMask                    = 12
	A2LParserRULE_byteOrder                  = 13
	A2LParserRULE_calibrationAccess          = 14
	A2LParserRULE_defaultValue               = 15
	A2LParserRULE_deposit                    = 16
	A2LParserRULE_discrete                   = 17
	A2LParserRULE_displayIdentifier          = 18
	A2LParserRULE_ecuAddressExtension        = 19
	A2LParserRULE_extendedLimits             = 20
	A2LParserRULE_format                     = 21
	A2LParserRULE_functionList               = 22
	A2LParserRULE_guardRails                 = 23
	A2LParserRULE_matrixDim                  = 24
	A2LParserRULE_maxRefresh                 = 25
	A2LParserRULE_monotony                   = 26
	A2LParserRULE_physUnit                   = 27
	A2LParserRULE_readOnly                   = 28
	A2LParserRULE_refCharacteristic          = 29
	A2LParserRULE_refMemorySegment           = 30
	A2LParserRULE_refUnit                    = 31
	A2LParserRULE_stepSize                   = 32
	A2LParserRULE_symbolLink                 = 33
	A2LParserRULE_version                    = 34
	A2LParserRULE_asap2Version               = 35
	A2LParserRULE_a2mlVersion                = 36
	A2LParserRULE_project                    = 37
	A2LParserRULE_header                     = 38
	A2LParserRULE_projectNo                  = 39
	A2LParserRULE_module                     = 40
	A2LParserRULE_axisPts                    = 41
	A2LParserRULE_characteristic             = 42
	A2LParserRULE_axisDescr                  = 43
	A2LParserRULE_axisPtsRef                 = 44
	A2LParserRULE_curveAxisRef               = 45
	A2LParserRULE_fixAxisPar                 = 46
	A2LParserRULE_fixAxisParDist             = 47
	A2LParserRULE_fixAxisParList             = 48
	A2LParserRULE_maxGrad                    = 49
	A2LParserRULE_comparisonQuantity         = 50
	A2LParserRULE_dependentCharacteristic    = 51
	A2LParserRULE_mapList                    = 52
	A2LParserRULE_number                     = 53
	A2LParserRULE_virtualCharacteristic      = 54
	A2LParserRULE_compuMethod                = 55
	A2LParserRULE_coeffs                     = 56
	A2LParserRULE_coeffsLinear               = 57
	A2LParserRULE_compuTabRef                = 58
	A2LParserRULE_formula                    = 59
	A2LParserRULE_formulaInv                 = 60
	A2LParserRULE_statusStringRef            = 61
	A2LParserRULE_compuTab                   = 62
	A2LParserRULE_defaultValueNumeric        = 63
	A2LParserRULE_compuVTab                  = 64
	A2LParserRULE_compuVTabRange             = 65
	A2LParserRULE_frame                      = 66
	A2LParserRULE_frameMeasurement           = 67
	A2LParserRULE_function                   = 68
	A2LParserRULE_defCharacteristic          = 69
	A2LParserRULE_functionVersion            = 70
	A2LParserRULE_inMeasurement              = 71
	A2LParserRULE_locMeasurement             = 72
	A2LParserRULE_outMeasurement             = 73
	A2LParserRULE_subFunction                = 74
	A2LParserRULE_group                      = 75
	A2LParserRULE_refMeasurement             = 76
	A2LParserRULE_root                       = 77
	A2LParserRULE_subGroup                   = 78
	A2LParserRULE_instance                   = 79
	A2LParserRULE_measurement                = 80
	A2LParserRULE_arraySize                  = 81
	A2LParserRULE_bitOperation               = 82
	A2LParserRULE_leftShift                  = 83
	A2LParserRULE_rightShift                 = 84
	A2LParserRULE_signExtend                 = 85
	A2LParserRULE_ecuAddress                 = 86
	A2LParserRULE_errorMask                  = 87
	A2LParserRULE_layout                     = 88
	A2LParserRULE_readWrite                  = 89
	A2LParserRULE_virtual                    = 90
	A2LParserRULE_modCommon                  = 91
	A2LParserRULE_dataSize                   = 92
	A2LParserRULE_sRecLayout                 = 93
	A2LParserRULE_modPar                     = 94
	A2LParserRULE_addrEpk                    = 95
	A2LParserRULE_calibrationMethod          = 96
	A2LParserRULE_calibrationHandle          = 97
	A2LParserRULE_cpuType                    = 98
	A2LParserRULE_customer                   = 99
	A2LParserRULE_customerNo                 = 100
	A2LParserRULE_ecu                        = 101
	A2LParserRULE_ecuCalibrationOffset       = 102
	A2LParserRULE_epk                        = 103
	A2LParserRULE_memoryLayout               = 104
	A2LParserRULE_memorySegment              = 105
	A2LParserRULE_noOfInterfaces             = 106
	A2LParserRULE_phoneNo                    = 107
	A2LParserRULE_supplier                   = 108
	A2LParserRULE_systemConstant             = 109
	A2LParserRULE_user                       = 110
	A2LParserRULE_recordLayout               = 111
	A2LParserRULE_axisPtsX                   = 112
	A2LParserRULE_axisPtsY                   = 113
	A2LParserRULE_axisPtsZ                   = 114
	A2LParserRULE_axisPts4                   = 115
	A2LParserRULE_axisPts5                   = 116
	A2LParserRULE_axisRescaleX               = 117
	A2LParserRULE_axisRescaleY               = 118
	A2LParserRULE_axisRescaleZ               = 119
	A2LParserRULE_axisRescale4               = 120
	A2LParserRULE_axisRescale5               = 121
	A2LParserRULE_distOpX                    = 122
	A2LParserRULE_distOpY                    = 123
	A2LParserRULE_distOpZ                    = 124
	A2LParserRULE_distOp4                    = 125
	A2LParserRULE_distOp5                    = 126
	A2LParserRULE_fixNoAxisPtsX              = 127
	A2LParserRULE_fixNoAxisPtsY              = 128
	A2LParserRULE_fixNoAxisPtsZ              = 129
	A2LParserRULE_fixNoAxisPts4              = 130
	A2LParserRULE_fixNoAxisPts5              = 131
	A2LParserRULE_fncValues                  = 132
	A2LParserRULE_identification             = 133
	A2LParserRULE_noAxisPtsX                 = 134
	A2LParserRULE_noAxisPtsY                 = 135
	A2LParserRULE_noAxisPtsZ                 = 136
	A2LParserRULE_noAxisPts4                 = 137
	A2LParserRULE_noAxisPts5                 = 138
	A2LParserRULE_staticRecordLayout         = 139
	A2LParserRULE_noRescaleX                 = 140
	A2LParserRULE_noRescaleY                 = 141
	A2LParserRULE_noRescaleZ                 = 142
	A2LParserRULE_noRescale4                 = 143
	A2LParserRULE_noRescale5                 = 144
	A2LParserRULE_offsetX                    = 145
	A2LParserRULE_offsetY                    = 146
	A2LParserRULE_offsetZ                    = 147
	A2LParserRULE_offset4                    = 148
	A2LParserRULE_offset5                    = 149
	A2LParserRULE_reserved                   = 150
	A2LParserRULE_ripAddrW                   = 151
	A2LParserRULE_ripAddrX                   = 152
	A2LParserRULE_ripAddrY                   = 153
	A2LParserRULE_ripAddrZ                   = 154
	A2LParserRULE_ripAddr4                   = 155
	A2LParserRULE_ripAddr5                   = 156
	A2LParserRULE_shiftOpX                   = 157
	A2LParserRULE_shiftOpY                   = 158
	A2LParserRULE_shiftOpZ                   = 159
	A2LParserRULE_shiftOp4                   = 160
	A2LParserRULE_shiftOp5                   = 161
	A2LParserRULE_srcAddrX                   = 162
	A2LParserRULE_srcAddrY                   = 163
	A2LParserRULE_srcAddrZ                   = 164
	A2LParserRULE_srcAddr4                   = 165
	A2LParserRULE_srcAddr5                   = 166
	A2LParserRULE_typedefCharacteristic      = 167
	A2LParserRULE_typedefMeasurement         = 168
	A2LParserRULE_typedefStructure           = 169
	A2LParserRULE_structureComponent         = 170
	A2LParserRULE_unit                       = 171
	A2LParserRULE_siExponents                = 172
	A2LParserRULE_unitConversion             = 173
	A2LParserRULE_userRights                 = 174
	A2LParserRULE_refGroup                   = 175
	A2LParserRULE_variantCoding              = 176
	A2LParserRULE_varCharacteristic          = 177
	A2LParserRULE_varAddress                 = 178
	A2LParserRULE_varCriterion               = 179
	A2LParserRULE_varMeasurement             = 180
	A2LParserRULE_varSelectionCharacteristic = 181
	A2LParserRULE_varForbiddenComb           = 182
	A2LParserRULE_varNaming                  = 183
	A2LParserRULE_varSeparator               = 184
	A2LParserRULE_integerValue               = 185
	A2LParserRULE_numericValue               = 186
	A2LParserRULE_stringValue                = 187
	A2LParserRULE_identifierValue            = 188
	A2LParserRULE_partialIdentifier          = 189
	A2LParserRULE_arraySpecifier             = 190
	A2LParserRULE_dataType                   = 191
	A2LParserRULE_datasize                   = 192
	A2LParserRULE_addrtype                   = 193
	A2LParserRULE_byteOrderValue             = 194
	A2LParserRULE_indexorder                 = 195
	A2LParserRULE_linkType                   = 196
	A2LParserRULE_a2ml                       = 197
	A2LParserRULE_declaration                = 198
	A2LParserRULE_typeDefinition             = 199
	A2LParserRULE_a2mlTypeName               = 200
	A2LParserRULE_predefinedTypeName         = 201
	A2LParserRULE_blockDefinition            = 202
	A2LParserRULE_enumTypeName               = 203
	A2LParserRULE_enumeratorList             = 204
	A2LParserRULE_enumerator                 = 205
	A2LParserRULE_structTypeName             = 206
	A2LParserRULE_structMember               = 207
	A2LParserRULE_member                     = 208
	A2LParserRULE_taggedStructTypeName       = 209
	A2LParserRULE_taggedStructMember         = 210
	A2LParserRULE_taggedStructDefinition     = 211
	A2LParserRULE_taggedUnionTypeName        = 212
	A2LParserRULE_taggedUnionMember          = 213
	A2LParserRULE_tagValue                   = 214
	A2LParserRULE_ifData                     = 215
	A2LParserRULE_genericParameter           = 216
	A2LParserRULE_genericNode                = 217
)

// IA2lFileContext is an interface to support dynamic dispatch.
type IA2lFileContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Project() IProjectContext
	Asap2Version() IAsap2VersionContext
	A2mlVersion() IA2mlVersionContext

	// IsA2lFileContext differentiates from other interfaces.
	IsA2lFileContext()
}

type A2lFileContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyA2lFileContext() *A2lFileContext {
	var p = new(A2lFileContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_a2lFile
	return p
}

func (*A2lFileContext) IsA2lFileContext() {}

func NewA2lFileContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *A2lFileContext {
	var p = new(A2lFileContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_a2lFile

	return p
}

func (s *A2lFileContext) GetParser() antlr.Parser { return s.parser }

func (s *A2lFileContext) Project() IProjectContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IProjectContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IProjectContext)
}

func (s *A2lFileContext) Asap2Version() IAsap2VersionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAsap2VersionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAsap2VersionContext)
}

func (s *A2lFileContext) A2mlVersion() IA2mlVersionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IA2mlVersionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IA2mlVersionContext)
}

func (s *A2lFileContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *A2lFileContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *A2lFileContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterA2lFile(s)
	}
}

func (s *A2lFileContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitA2lFile(s)
	}
}

func (s *A2lFileContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitA2lFile(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) A2lFile() (localctx IA2lFileContext) {
	this := p
	_ = this

	localctx = NewA2lFileContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, A2LParserRULE_a2lFile)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(437)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == A2LParserT__47 {
		{
			p.SetState(436)
			p.Asap2Version()
		}

	}
	p.SetState(440)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == A2LParserT__48 {
		{
			p.SetState(439)
			p.A2mlVersion()
		}

	}
	{
		p.SetState(442)
		p.Project()
	}

	return localctx
}

// IAlignmentByteContext is an interface to support dynamic dispatch.
type IAlignmentByteContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetAlignmentBorder returns the alignmentBorder rule contexts.
	GetAlignmentBorder() IIntegerValueContext

	// SetAlignmentBorder sets the alignmentBorder rule contexts.
	SetAlignmentBorder(IIntegerValueContext)

	// Getter signatures
	IntegerValue() IIntegerValueContext

	// IsAlignmentByteContext differentiates from other interfaces.
	IsAlignmentByteContext()
}

type AlignmentByteContext struct {
	*antlr.BaseParserRuleContext
	parser          antlr.Parser
	alignmentBorder IIntegerValueContext
}

func NewEmptyAlignmentByteContext() *AlignmentByteContext {
	var p = new(AlignmentByteContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_alignmentByte
	return p
}

func (*AlignmentByteContext) IsAlignmentByteContext() {}

func NewAlignmentByteContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlignmentByteContext {
	var p = new(AlignmentByteContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_alignmentByte

	return p
}

func (s *AlignmentByteContext) GetParser() antlr.Parser { return s.parser }

func (s *AlignmentByteContext) GetAlignmentBorder() IIntegerValueContext { return s.alignmentBorder }

func (s *AlignmentByteContext) SetAlignmentBorder(v IIntegerValueContext) { s.alignmentBorder = v }

func (s *AlignmentByteContext) IntegerValue() IIntegerValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *AlignmentByteContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlignmentByteContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlignmentByteContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterAlignmentByte(s)
	}
}

func (s *AlignmentByteContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitAlignmentByte(s)
	}
}

func (s *AlignmentByteContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitAlignmentByte(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) AlignmentByte() (localctx IAlignmentByteContext) {
	this := p
	_ = this

	localctx = NewAlignmentByteContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, A2LParserRULE_alignmentByte)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(444)
		p.Match(A2LParserT__0)
	}
	{
		p.SetState(445)

		var _x = p.IntegerValue()

		localctx.(*AlignmentByteContext).alignmentBorder = _x
	}

	return localctx
}

// IAlignmentFloat16IeeeContext is an interface to support dynamic dispatch.
type IAlignmentFloat16IeeeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetAlignmentBorder returns the alignmentBorder rule contexts.
	GetAlignmentBorder() IIntegerValueContext

	// SetAlignmentBorder sets the alignmentBorder rule contexts.
	SetAlignmentBorder(IIntegerValueContext)

	// Getter signatures
	IntegerValue() IIntegerValueContext

	// IsAlignmentFloat16IeeeContext differentiates from other interfaces.
	IsAlignmentFloat16IeeeContext()
}

type AlignmentFloat16IeeeContext struct {
	*antlr.BaseParserRuleContext
	parser          antlr.Parser
	alignmentBorder IIntegerValueContext
}

func NewEmptyAlignmentFloat16IeeeContext() *AlignmentFloat16IeeeContext {
	var p = new(AlignmentFloat16IeeeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_alignmentFloat16Ieee
	return p
}

func (*AlignmentFloat16IeeeContext) IsAlignmentFloat16IeeeContext() {}

func NewAlignmentFloat16IeeeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlignmentFloat16IeeeContext {
	var p = new(AlignmentFloat16IeeeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_alignmentFloat16Ieee

	return p
}

func (s *AlignmentFloat16IeeeContext) GetParser() antlr.Parser { return s.parser }

func (s *AlignmentFloat16IeeeContext) GetAlignmentBorder() IIntegerValueContext {
	return s.alignmentBorder
}

func (s *AlignmentFloat16IeeeContext) SetAlignmentBorder(v IIntegerValueContext) {
	s.alignmentBorder = v
}

func (s *AlignmentFloat16IeeeContext) IntegerValue() IIntegerValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *AlignmentFloat16IeeeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlignmentFloat16IeeeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlignmentFloat16IeeeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterAlignmentFloat16Ieee(s)
	}
}

func (s *AlignmentFloat16IeeeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitAlignmentFloat16Ieee(s)
	}
}

func (s *AlignmentFloat16IeeeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitAlignmentFloat16Ieee(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) AlignmentFloat16Ieee() (localctx IAlignmentFloat16IeeeContext) {
	this := p
	_ = this

	localctx = NewAlignmentFloat16IeeeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, A2LParserRULE_alignmentFloat16Ieee)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(447)
		p.Match(A2LParserT__1)
	}
	{
		p.SetState(448)

		var _x = p.IntegerValue()

		localctx.(*AlignmentFloat16IeeeContext).alignmentBorder = _x
	}

	return localctx
}

// IAlignmentFloat32IeeeContext is an interface to support dynamic dispatch.
type IAlignmentFloat32IeeeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetAlignmentBorder returns the alignmentBorder rule contexts.
	GetAlignmentBorder() IIntegerValueContext

	// SetAlignmentBorder sets the alignmentBorder rule contexts.
	SetAlignmentBorder(IIntegerValueContext)

	// Getter signatures
	IntegerValue() IIntegerValueContext

	// IsAlignmentFloat32IeeeContext differentiates from other interfaces.
	IsAlignmentFloat32IeeeContext()
}

type AlignmentFloat32IeeeContext struct {
	*antlr.BaseParserRuleContext
	parser          antlr.Parser
	alignmentBorder IIntegerValueContext
}

func NewEmptyAlignmentFloat32IeeeContext() *AlignmentFloat32IeeeContext {
	var p = new(AlignmentFloat32IeeeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_alignmentFloat32Ieee
	return p
}

func (*AlignmentFloat32IeeeContext) IsAlignmentFloat32IeeeContext() {}

func NewAlignmentFloat32IeeeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlignmentFloat32IeeeContext {
	var p = new(AlignmentFloat32IeeeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_alignmentFloat32Ieee

	return p
}

func (s *AlignmentFloat32IeeeContext) GetParser() antlr.Parser { return s.parser }

func (s *AlignmentFloat32IeeeContext) GetAlignmentBorder() IIntegerValueContext {
	return s.alignmentBorder
}

func (s *AlignmentFloat32IeeeContext) SetAlignmentBorder(v IIntegerValueContext) {
	s.alignmentBorder = v
}

func (s *AlignmentFloat32IeeeContext) IntegerValue() IIntegerValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *AlignmentFloat32IeeeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlignmentFloat32IeeeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlignmentFloat32IeeeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterAlignmentFloat32Ieee(s)
	}
}

func (s *AlignmentFloat32IeeeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitAlignmentFloat32Ieee(s)
	}
}

func (s *AlignmentFloat32IeeeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitAlignmentFloat32Ieee(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) AlignmentFloat32Ieee() (localctx IAlignmentFloat32IeeeContext) {
	this := p
	_ = this

	localctx = NewAlignmentFloat32IeeeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, A2LParserRULE_alignmentFloat32Ieee)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(450)
		p.Match(A2LParserT__2)
	}
	{
		p.SetState(451)

		var _x = p.IntegerValue()

		localctx.(*AlignmentFloat32IeeeContext).alignmentBorder = _x
	}

	return localctx
}

// IAlignmentFloat64IeeeContext is an interface to support dynamic dispatch.
type IAlignmentFloat64IeeeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetAlignmentBorder returns the alignmentBorder rule contexts.
	GetAlignmentBorder() IIntegerValueContext

	// SetAlignmentBorder sets the alignmentBorder rule contexts.
	SetAlignmentBorder(IIntegerValueContext)

	// Getter signatures
	IntegerValue() IIntegerValueContext

	// IsAlignmentFloat64IeeeContext differentiates from other interfaces.
	IsAlignmentFloat64IeeeContext()
}

type AlignmentFloat64IeeeContext struct {
	*antlr.BaseParserRuleContext
	parser          antlr.Parser
	alignmentBorder IIntegerValueContext
}

func NewEmptyAlignmentFloat64IeeeContext() *AlignmentFloat64IeeeContext {
	var p = new(AlignmentFloat64IeeeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_alignmentFloat64Ieee
	return p
}

func (*AlignmentFloat64IeeeContext) IsAlignmentFloat64IeeeContext() {}

func NewAlignmentFloat64IeeeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlignmentFloat64IeeeContext {
	var p = new(AlignmentFloat64IeeeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_alignmentFloat64Ieee

	return p
}

func (s *AlignmentFloat64IeeeContext) GetParser() antlr.Parser { return s.parser }

func (s *AlignmentFloat64IeeeContext) GetAlignmentBorder() IIntegerValueContext {
	return s.alignmentBorder
}

func (s *AlignmentFloat64IeeeContext) SetAlignmentBorder(v IIntegerValueContext) {
	s.alignmentBorder = v
}

func (s *AlignmentFloat64IeeeContext) IntegerValue() IIntegerValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *AlignmentFloat64IeeeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlignmentFloat64IeeeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlignmentFloat64IeeeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterAlignmentFloat64Ieee(s)
	}
}

func (s *AlignmentFloat64IeeeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitAlignmentFloat64Ieee(s)
	}
}

func (s *AlignmentFloat64IeeeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitAlignmentFloat64Ieee(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) AlignmentFloat64Ieee() (localctx IAlignmentFloat64IeeeContext) {
	this := p
	_ = this

	localctx = NewAlignmentFloat64IeeeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, A2LParserRULE_alignmentFloat64Ieee)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(453)
		p.Match(A2LParserT__3)
	}
	{
		p.SetState(454)

		var _x = p.IntegerValue()

		localctx.(*AlignmentFloat64IeeeContext).alignmentBorder = _x
	}

	return localctx
}

// IAlignmentInt64Context is an interface to support dynamic dispatch.
type IAlignmentInt64Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetAlignmentBorder returns the alignmentBorder rule contexts.
	GetAlignmentBorder() IIntegerValueContext

	// SetAlignmentBorder sets the alignmentBorder rule contexts.
	SetAlignmentBorder(IIntegerValueContext)

	// Getter signatures
	IntegerValue() IIntegerValueContext

	// IsAlignmentInt64Context differentiates from other interfaces.
	IsAlignmentInt64Context()
}

type AlignmentInt64Context struct {
	*antlr.BaseParserRuleContext
	parser          antlr.Parser
	alignmentBorder IIntegerValueContext
}

func NewEmptyAlignmentInt64Context() *AlignmentInt64Context {
	var p = new(AlignmentInt64Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_alignmentInt64
	return p
}

func (*AlignmentInt64Context) IsAlignmentInt64Context() {}

func NewAlignmentInt64Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlignmentInt64Context {
	var p = new(AlignmentInt64Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_alignmentInt64

	return p
}

func (s *AlignmentInt64Context) GetParser() antlr.Parser { return s.parser }

func (s *AlignmentInt64Context) GetAlignmentBorder() IIntegerValueContext { return s.alignmentBorder }

func (s *AlignmentInt64Context) SetAlignmentBorder(v IIntegerValueContext) { s.alignmentBorder = v }

func (s *AlignmentInt64Context) IntegerValue() IIntegerValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *AlignmentInt64Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlignmentInt64Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlignmentInt64Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterAlignmentInt64(s)
	}
}

func (s *AlignmentInt64Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitAlignmentInt64(s)
	}
}

func (s *AlignmentInt64Context) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitAlignmentInt64(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) AlignmentInt64() (localctx IAlignmentInt64Context) {
	this := p
	_ = this

	localctx = NewAlignmentInt64Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, A2LParserRULE_alignmentInt64)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(456)
		p.Match(A2LParserT__4)
	}
	{
		p.SetState(457)

		var _x = p.IntegerValue()

		localctx.(*AlignmentInt64Context).alignmentBorder = _x
	}

	return localctx
}

// IAlignmentLongContext is an interface to support dynamic dispatch.
type IAlignmentLongContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetAlignmentBorder returns the alignmentBorder rule contexts.
	GetAlignmentBorder() IIntegerValueContext

	// SetAlignmentBorder sets the alignmentBorder rule contexts.
	SetAlignmentBorder(IIntegerValueContext)

	// Getter signatures
	IntegerValue() IIntegerValueContext

	// IsAlignmentLongContext differentiates from other interfaces.
	IsAlignmentLongContext()
}

type AlignmentLongContext struct {
	*antlr.BaseParserRuleContext
	parser          antlr.Parser
	alignmentBorder IIntegerValueContext
}

func NewEmptyAlignmentLongContext() *AlignmentLongContext {
	var p = new(AlignmentLongContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_alignmentLong
	return p
}

func (*AlignmentLongContext) IsAlignmentLongContext() {}

func NewAlignmentLongContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlignmentLongContext {
	var p = new(AlignmentLongContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_alignmentLong

	return p
}

func (s *AlignmentLongContext) GetParser() antlr.Parser { return s.parser }

func (s *AlignmentLongContext) GetAlignmentBorder() IIntegerValueContext { return s.alignmentBorder }

func (s *AlignmentLongContext) SetAlignmentBorder(v IIntegerValueContext) { s.alignmentBorder = v }

func (s *AlignmentLongContext) IntegerValue() IIntegerValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *AlignmentLongContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlignmentLongContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlignmentLongContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterAlignmentLong(s)
	}
}

func (s *AlignmentLongContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitAlignmentLong(s)
	}
}

func (s *AlignmentLongContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitAlignmentLong(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) AlignmentLong() (localctx IAlignmentLongContext) {
	this := p
	_ = this

	localctx = NewAlignmentLongContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, A2LParserRULE_alignmentLong)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(459)
		p.Match(A2LParserT__5)
	}
	{
		p.SetState(460)

		var _x = p.IntegerValue()

		localctx.(*AlignmentLongContext).alignmentBorder = _x
	}

	return localctx
}

// IAlignmentWordContext is an interface to support dynamic dispatch.
type IAlignmentWordContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetAlignmentBorder returns the alignmentBorder rule contexts.
	GetAlignmentBorder() IIntegerValueContext

	// SetAlignmentBorder sets the alignmentBorder rule contexts.
	SetAlignmentBorder(IIntegerValueContext)

	// Getter signatures
	IntegerValue() IIntegerValueContext

	// IsAlignmentWordContext differentiates from other interfaces.
	IsAlignmentWordContext()
}

type AlignmentWordContext struct {
	*antlr.BaseParserRuleContext
	parser          antlr.Parser
	alignmentBorder IIntegerValueContext
}

func NewEmptyAlignmentWordContext() *AlignmentWordContext {
	var p = new(AlignmentWordContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_alignmentWord
	return p
}

func (*AlignmentWordContext) IsAlignmentWordContext() {}

func NewAlignmentWordContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlignmentWordContext {
	var p = new(AlignmentWordContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_alignmentWord

	return p
}

func (s *AlignmentWordContext) GetParser() antlr.Parser { return s.parser }

func (s *AlignmentWordContext) GetAlignmentBorder() IIntegerValueContext { return s.alignmentBorder }

func (s *AlignmentWordContext) SetAlignmentBorder(v IIntegerValueContext) { s.alignmentBorder = v }

func (s *AlignmentWordContext) IntegerValue() IIntegerValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *AlignmentWordContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlignmentWordContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlignmentWordContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterAlignmentWord(s)
	}
}

func (s *AlignmentWordContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitAlignmentWord(s)
	}
}

func (s *AlignmentWordContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitAlignmentWord(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) AlignmentWord() (localctx IAlignmentWordContext) {
	this := p
	_ = this

	localctx = NewAlignmentWordContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, A2LParserRULE_alignmentWord)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(462)
		p.Match(A2LParserT__6)
	}
	{
		p.SetState(463)

		var _x = p.IntegerValue()

		localctx.(*AlignmentWordContext).alignmentBorder = _x
	}

	return localctx
}

// IAnnotationContext is an interface to support dynamic dispatch.
type IAnnotationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetV_annotationLabel returns the v_annotationLabel rule contexts.
	GetV_annotationLabel() IAnnotationLabelContext

	// GetV_annotationOrigin returns the v_annotationOrigin rule contexts.
	GetV_annotationOrigin() IAnnotationOriginContext

	// GetV_annotationText returns the v_annotationText rule contexts.
	GetV_annotationText() IAnnotationTextContext

	// SetV_annotationLabel sets the v_annotationLabel rule contexts.
	SetV_annotationLabel(IAnnotationLabelContext)

	// SetV_annotationOrigin sets the v_annotationOrigin rule contexts.
	SetV_annotationOrigin(IAnnotationOriginContext)

	// SetV_annotationText sets the v_annotationText rule contexts.
	SetV_annotationText(IAnnotationTextContext)

	// Getter signatures
	BEGIN() antlr.TerminalNode
	END() antlr.TerminalNode
	AllAnnotationLabel() []IAnnotationLabelContext
	AnnotationLabel(i int) IAnnotationLabelContext
	AllAnnotationOrigin() []IAnnotationOriginContext
	AnnotationOrigin(i int) IAnnotationOriginContext
	AllAnnotationText() []IAnnotationTextContext
	AnnotationText(i int) IAnnotationTextContext

	// IsAnnotationContext differentiates from other interfaces.
	IsAnnotationContext()
}

type AnnotationContext struct {
	*antlr.BaseParserRuleContext
	parser             antlr.Parser
	v_annotationLabel  IAnnotationLabelContext
	v_annotationOrigin IAnnotationOriginContext
	v_annotationText   IAnnotationTextContext
}

func NewEmptyAnnotationContext() *AnnotationContext {
	var p = new(AnnotationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_annotation
	return p
}

func (*AnnotationContext) IsAnnotationContext() {}

func NewAnnotationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AnnotationContext {
	var p = new(AnnotationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_annotation

	return p
}

func (s *AnnotationContext) GetParser() antlr.Parser { return s.parser }

func (s *AnnotationContext) GetV_annotationLabel() IAnnotationLabelContext {
	return s.v_annotationLabel
}

func (s *AnnotationContext) GetV_annotationOrigin() IAnnotationOriginContext {
	return s.v_annotationOrigin
}

func (s *AnnotationContext) GetV_annotationText() IAnnotationTextContext { return s.v_annotationText }

func (s *AnnotationContext) SetV_annotationLabel(v IAnnotationLabelContext) { s.v_annotationLabel = v }

func (s *AnnotationContext) SetV_annotationOrigin(v IAnnotationOriginContext) {
	s.v_annotationOrigin = v
}

func (s *AnnotationContext) SetV_annotationText(v IAnnotationTextContext) { s.v_annotationText = v }

func (s *AnnotationContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(A2LParserBEGIN, 0)
}

func (s *AnnotationContext) END() antlr.TerminalNode {
	return s.GetToken(A2LParserEND, 0)
}

func (s *AnnotationContext) AllAnnotationLabel() []IAnnotationLabelContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAnnotationLabelContext); ok {
			len++
		}
	}

	tst := make([]IAnnotationLabelContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAnnotationLabelContext); ok {
			tst[i] = t.(IAnnotationLabelContext)
			i++
		}
	}

	return tst
}

func (s *AnnotationContext) AnnotationLabel(i int) IAnnotationLabelContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAnnotationLabelContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAnnotationLabelContext)
}

func (s *AnnotationContext) AllAnnotationOrigin() []IAnnotationOriginContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAnnotationOriginContext); ok {
			len++
		}
	}

	tst := make([]IAnnotationOriginContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAnnotationOriginContext); ok {
			tst[i] = t.(IAnnotationOriginContext)
			i++
		}
	}

	return tst
}

func (s *AnnotationContext) AnnotationOrigin(i int) IAnnotationOriginContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAnnotationOriginContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAnnotationOriginContext)
}

func (s *AnnotationContext) AllAnnotationText() []IAnnotationTextContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAnnotationTextContext); ok {
			len++
		}
	}

	tst := make([]IAnnotationTextContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAnnotationTextContext); ok {
			tst[i] = t.(IAnnotationTextContext)
			i++
		}
	}

	return tst
}

func (s *AnnotationContext) AnnotationText(i int) IAnnotationTextContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAnnotationTextContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAnnotationTextContext)
}

func (s *AnnotationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AnnotationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AnnotationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterAnnotation(s)
	}
}

func (s *AnnotationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitAnnotation(s)
	}
}

func (s *AnnotationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitAnnotation(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) Annotation() (localctx IAnnotationContext) {
	this := p
	_ = this

	localctx = NewAnnotationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, A2LParserRULE_annotation)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(465)
		p.Match(A2LParserBEGIN)
	}
	{
		p.SetState(466)
		p.Match(A2LParserT__7)
	}
	p.SetState(473)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == A2LParserT__8 || _la == A2LParserT__9 {
		p.SetState(471)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case A2LParserT__8:
			{
				p.SetState(467)

				var _x = p.AnnotationLabel()

				localctx.(*AnnotationContext).v_annotationLabel = _x
			}

		case A2LParserT__9:
			{
				p.SetState(468)

				var _x = p.AnnotationOrigin()

				localctx.(*AnnotationContext).v_annotationOrigin = _x
			}
			{
				p.SetState(469)

				var _x = p.AnnotationText()

				localctx.(*AnnotationContext).v_annotationText = _x
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(475)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(476)
		p.Match(A2LParserEND)
	}
	{
		p.SetState(477)
		p.Match(A2LParserT__7)
	}

	return localctx
}

// IAnnotationLabelContext is an interface to support dynamic dispatch.
type IAnnotationLabelContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetLabel returns the label rule contexts.
	GetLabel() IStringValueContext

	// SetLabel sets the label rule contexts.
	SetLabel(IStringValueContext)

	// Getter signatures
	StringValue() IStringValueContext

	// IsAnnotationLabelContext differentiates from other interfaces.
	IsAnnotationLabelContext()
}

type AnnotationLabelContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	label  IStringValueContext
}

func NewEmptyAnnotationLabelContext() *AnnotationLabelContext {
	var p = new(AnnotationLabelContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_annotationLabel
	return p
}

func (*AnnotationLabelContext) IsAnnotationLabelContext() {}

func NewAnnotationLabelContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AnnotationLabelContext {
	var p = new(AnnotationLabelContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_annotationLabel

	return p
}

func (s *AnnotationLabelContext) GetParser() antlr.Parser { return s.parser }

func (s *AnnotationLabelContext) GetLabel() IStringValueContext { return s.label }

func (s *AnnotationLabelContext) SetLabel(v IStringValueContext) { s.label = v }

func (s *AnnotationLabelContext) StringValue() IStringValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringValueContext)
}

func (s *AnnotationLabelContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AnnotationLabelContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AnnotationLabelContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterAnnotationLabel(s)
	}
}

func (s *AnnotationLabelContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitAnnotationLabel(s)
	}
}

func (s *AnnotationLabelContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitAnnotationLabel(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) AnnotationLabel() (localctx IAnnotationLabelContext) {
	this := p
	_ = this

	localctx = NewAnnotationLabelContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, A2LParserRULE_annotationLabel)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(479)
		p.Match(A2LParserT__8)
	}
	{
		p.SetState(480)

		var _x = p.StringValue()

		localctx.(*AnnotationLabelContext).label = _x
	}

	return localctx
}

// IAnnotationOriginContext is an interface to support dynamic dispatch.
type IAnnotationOriginContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOrigin returns the origin rule contexts.
	GetOrigin() IStringValueContext

	// SetOrigin sets the origin rule contexts.
	SetOrigin(IStringValueContext)

	// Getter signatures
	StringValue() IStringValueContext

	// IsAnnotationOriginContext differentiates from other interfaces.
	IsAnnotationOriginContext()
}

type AnnotationOriginContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	origin IStringValueContext
}

func NewEmptyAnnotationOriginContext() *AnnotationOriginContext {
	var p = new(AnnotationOriginContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_annotationOrigin
	return p
}

func (*AnnotationOriginContext) IsAnnotationOriginContext() {}

func NewAnnotationOriginContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AnnotationOriginContext {
	var p = new(AnnotationOriginContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_annotationOrigin

	return p
}

func (s *AnnotationOriginContext) GetParser() antlr.Parser { return s.parser }

func (s *AnnotationOriginContext) GetOrigin() IStringValueContext { return s.origin }

func (s *AnnotationOriginContext) SetOrigin(v IStringValueContext) { s.origin = v }

func (s *AnnotationOriginContext) StringValue() IStringValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringValueContext)
}

func (s *AnnotationOriginContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AnnotationOriginContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AnnotationOriginContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterAnnotationOrigin(s)
	}
}

func (s *AnnotationOriginContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitAnnotationOrigin(s)
	}
}

func (s *AnnotationOriginContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitAnnotationOrigin(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) AnnotationOrigin() (localctx IAnnotationOriginContext) {
	this := p
	_ = this

	localctx = NewAnnotationOriginContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, A2LParserRULE_annotationOrigin)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(482)
		p.Match(A2LParserT__9)
	}
	{
		p.SetState(483)

		var _x = p.StringValue()

		localctx.(*AnnotationOriginContext).origin = _x
	}

	return localctx
}

// IAnnotationTextContext is an interface to support dynamic dispatch.
type IAnnotationTextContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_stringValue returns the _stringValue rule contexts.
	Get_stringValue() IStringValueContext

	// Set_stringValue sets the _stringValue rule contexts.
	Set_stringValue(IStringValueContext)

	// GetAnnotation_text returns the annotation_text rule context list.
	GetAnnotation_text() []IStringValueContext

	// SetAnnotation_text sets the annotation_text rule context list.
	SetAnnotation_text([]IStringValueContext)

	// Getter signatures
	BEGIN() antlr.TerminalNode
	END() antlr.TerminalNode
	AllStringValue() []IStringValueContext
	StringValue(i int) IStringValueContext

	// IsAnnotationTextContext differentiates from other interfaces.
	IsAnnotationTextContext()
}

type AnnotationTextContext struct {
	*antlr.BaseParserRuleContext
	parser          antlr.Parser
	_stringValue    IStringValueContext
	annotation_text []IStringValueContext
}

func NewEmptyAnnotationTextContext() *AnnotationTextContext {
	var p = new(AnnotationTextContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_annotationText
	return p
}

func (*AnnotationTextContext) IsAnnotationTextContext() {}

func NewAnnotationTextContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AnnotationTextContext {
	var p = new(AnnotationTextContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_annotationText

	return p
}

func (s *AnnotationTextContext) GetParser() antlr.Parser { return s.parser }

func (s *AnnotationTextContext) Get_stringValue() IStringValueContext { return s._stringValue }

func (s *AnnotationTextContext) Set_stringValue(v IStringValueContext) { s._stringValue = v }

func (s *AnnotationTextContext) GetAnnotation_text() []IStringValueContext { return s.annotation_text }

func (s *AnnotationTextContext) SetAnnotation_text(v []IStringValueContext) { s.annotation_text = v }

func (s *AnnotationTextContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(A2LParserBEGIN, 0)
}

func (s *AnnotationTextContext) END() antlr.TerminalNode {
	return s.GetToken(A2LParserEND, 0)
}

func (s *AnnotationTextContext) AllStringValue() []IStringValueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStringValueContext); ok {
			len++
		}
	}

	tst := make([]IStringValueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStringValueContext); ok {
			tst[i] = t.(IStringValueContext)
			i++
		}
	}

	return tst
}

func (s *AnnotationTextContext) StringValue(i int) IStringValueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringValueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringValueContext)
}

func (s *AnnotationTextContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AnnotationTextContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AnnotationTextContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterAnnotationText(s)
	}
}

func (s *AnnotationTextContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitAnnotationText(s)
	}
}

func (s *AnnotationTextContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitAnnotationText(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) AnnotationText() (localctx IAnnotationTextContext) {
	this := p
	_ = this

	localctx = NewAnnotationTextContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, A2LParserRULE_annotationText)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(485)
		p.Match(A2LParserBEGIN)
	}
	{
		p.SetState(486)
		p.Match(A2LParserT__10)
	}
	p.SetState(490)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == A2LParserSTRING {
		{
			p.SetState(487)

			var _x = p.StringValue()

			localctx.(*AnnotationTextContext)._stringValue = _x
		}
		localctx.(*AnnotationTextContext).annotation_text = append(localctx.(*AnnotationTextContext).annotation_text, localctx.(*AnnotationTextContext)._stringValue)

		p.SetState(492)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(493)
		p.Match(A2LParserEND)
	}
	{
		p.SetState(494)
		p.Match(A2LParserT__10)
	}

	return localctx
}

// IBitMaskContext is an interface to support dynamic dispatch.
type IBitMaskContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetMask returns the mask rule contexts.
	GetMask() IIntegerValueContext

	// SetMask sets the mask rule contexts.
	SetMask(IIntegerValueContext)

	// Getter signatures
	IntegerValue() IIntegerValueContext

	// IsBitMaskContext differentiates from other interfaces.
	IsBitMaskContext()
}

type BitMaskContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	mask   IIntegerValueContext
}

func NewEmptyBitMaskContext() *BitMaskContext {
	var p = new(BitMaskContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_bitMask
	return p
}

func (*BitMaskContext) IsBitMaskContext() {}

func NewBitMaskContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BitMaskContext {
	var p = new(BitMaskContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_bitMask

	return p
}

func (s *BitMaskContext) GetParser() antlr.Parser { return s.parser }

func (s *BitMaskContext) GetMask() IIntegerValueContext { return s.mask }

func (s *BitMaskContext) SetMask(v IIntegerValueContext) { s.mask = v }

func (s *BitMaskContext) IntegerValue() IIntegerValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *BitMaskContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BitMaskContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BitMaskContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterBitMask(s)
	}
}

func (s *BitMaskContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitBitMask(s)
	}
}

func (s *BitMaskContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitBitMask(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) BitMask() (localctx IBitMaskContext) {
	this := p
	_ = this

	localctx = NewBitMaskContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, A2LParserRULE_bitMask)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(496)
		p.Match(A2LParserT__11)
	}
	{
		p.SetState(497)

		var _x = p.IntegerValue()

		localctx.(*BitMaskContext).mask = _x
	}

	return localctx
}

// IByteOrderContext is an interface to support dynamic dispatch.
type IByteOrderContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetByteOrder_ returns the byteOrder_ rule contexts.
	GetByteOrder_() IByteOrderValueContext

	// SetByteOrder_ sets the byteOrder_ rule contexts.
	SetByteOrder_(IByteOrderValueContext)

	// Getter signatures
	ByteOrderValue() IByteOrderValueContext

	// IsByteOrderContext differentiates from other interfaces.
	IsByteOrderContext()
}

type ByteOrderContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	byteOrder_ IByteOrderValueContext
}

func NewEmptyByteOrderContext() *ByteOrderContext {
	var p = new(ByteOrderContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_byteOrder
	return p
}

func (*ByteOrderContext) IsByteOrderContext() {}

func NewByteOrderContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ByteOrderContext {
	var p = new(ByteOrderContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_byteOrder

	return p
}

func (s *ByteOrderContext) GetParser() antlr.Parser { return s.parser }

func (s *ByteOrderContext) GetByteOrder_() IByteOrderValueContext { return s.byteOrder_ }

func (s *ByteOrderContext) SetByteOrder_(v IByteOrderValueContext) { s.byteOrder_ = v }

func (s *ByteOrderContext) ByteOrderValue() IByteOrderValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IByteOrderValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IByteOrderValueContext)
}

func (s *ByteOrderContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ByteOrderContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ByteOrderContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterByteOrder(s)
	}
}

func (s *ByteOrderContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitByteOrder(s)
	}
}

func (s *ByteOrderContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitByteOrder(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) ByteOrder() (localctx IByteOrderContext) {
	this := p
	_ = this

	localctx = NewByteOrderContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, A2LParserRULE_byteOrder)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(499)
		p.Match(A2LParserT__12)
	}
	{
		p.SetState(500)

		var _x = p.ByteOrderValue()

		localctx.(*ByteOrderContext).byteOrder_ = _x
	}

	return localctx
}

// ICalibrationAccessContext is an interface to support dynamic dispatch.
type ICalibrationAccessContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetType_ returns the type_ token.
	GetType_() antlr.Token

	// SetType_ sets the type_ token.
	SetType_(antlr.Token)

	// IsCalibrationAccessContext differentiates from other interfaces.
	IsCalibrationAccessContext()
}

type CalibrationAccessContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	type_  antlr.Token
}

func NewEmptyCalibrationAccessContext() *CalibrationAccessContext {
	var p = new(CalibrationAccessContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_calibrationAccess
	return p
}

func (*CalibrationAccessContext) IsCalibrationAccessContext() {}

func NewCalibrationAccessContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CalibrationAccessContext {
	var p = new(CalibrationAccessContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_calibrationAccess

	return p
}

func (s *CalibrationAccessContext) GetParser() antlr.Parser { return s.parser }

func (s *CalibrationAccessContext) GetType_() antlr.Token { return s.type_ }

func (s *CalibrationAccessContext) SetType_(v antlr.Token) { s.type_ = v }

func (s *CalibrationAccessContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CalibrationAccessContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CalibrationAccessContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterCalibrationAccess(s)
	}
}

func (s *CalibrationAccessContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitCalibrationAccess(s)
	}
}

func (s *CalibrationAccessContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitCalibrationAccess(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) CalibrationAccess() (localctx ICalibrationAccessContext) {
	this := p
	_ = this

	localctx = NewCalibrationAccessContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, A2LParserRULE_calibrationAccess)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(502)
		p.Match(A2LParserT__13)
	}
	{
		p.SetState(503)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*CalibrationAccessContext).type_ = _lt

		_la = p.GetTokenStream().LA(1)

		if !((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&491520) != 0) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*CalibrationAccessContext).type_ = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IDefaultValueContext is an interface to support dynamic dispatch.
type IDefaultValueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetDisplay_string returns the display_string rule contexts.
	GetDisplay_string() IStringValueContext

	// SetDisplay_string sets the display_string rule contexts.
	SetDisplay_string(IStringValueContext)

	// Getter signatures
	StringValue() IStringValueContext

	// IsDefaultValueContext differentiates from other interfaces.
	IsDefaultValueContext()
}

type DefaultValueContext struct {
	*antlr.BaseParserRuleContext
	parser         antlr.Parser
	display_string IStringValueContext
}

func NewEmptyDefaultValueContext() *DefaultValueContext {
	var p = new(DefaultValueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_defaultValue
	return p
}

func (*DefaultValueContext) IsDefaultValueContext() {}

func NewDefaultValueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DefaultValueContext {
	var p = new(DefaultValueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_defaultValue

	return p
}

func (s *DefaultValueContext) GetParser() antlr.Parser { return s.parser }

func (s *DefaultValueContext) GetDisplay_string() IStringValueContext { return s.display_string }

func (s *DefaultValueContext) SetDisplay_string(v IStringValueContext) { s.display_string = v }

func (s *DefaultValueContext) StringValue() IStringValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringValueContext)
}

func (s *DefaultValueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DefaultValueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DefaultValueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterDefaultValue(s)
	}
}

func (s *DefaultValueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitDefaultValue(s)
	}
}

func (s *DefaultValueContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitDefaultValue(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) DefaultValue() (localctx IDefaultValueContext) {
	this := p
	_ = this

	localctx = NewDefaultValueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, A2LParserRULE_defaultValue)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(505)
		p.Match(A2LParserT__18)
	}
	{
		p.SetState(506)

		var _x = p.StringValue()

		localctx.(*DefaultValueContext).display_string = _x
	}

	return localctx
}

// IDepositContext is an interface to support dynamic dispatch.
type IDepositContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetMode_ returns the mode_ token.
	GetMode_() antlr.Token

	// SetMode_ sets the mode_ token.
	SetMode_(antlr.Token)

	// IsDepositContext differentiates from other interfaces.
	IsDepositContext()
}

type DepositContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	mode_  antlr.Token
}

func NewEmptyDepositContext() *DepositContext {
	var p = new(DepositContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_deposit
	return p
}

func (*DepositContext) IsDepositContext() {}

func NewDepositContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DepositContext {
	var p = new(DepositContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_deposit

	return p
}

func (s *DepositContext) GetParser() antlr.Parser { return s.parser }

func (s *DepositContext) GetMode_() antlr.Token { return s.mode_ }

func (s *DepositContext) SetMode_(v antlr.Token) { s.mode_ = v }

func (s *DepositContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DepositContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DepositContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterDeposit(s)
	}
}

func (s *DepositContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitDeposit(s)
	}
}

func (s *DepositContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitDeposit(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) Deposit() (localctx IDepositContext) {
	this := p
	_ = this

	localctx = NewDepositContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, A2LParserRULE_deposit)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(508)
		p.Match(A2LParserT__19)
	}
	{
		p.SetState(509)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*DepositContext).mode_ = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == A2LParserT__20 || _la == A2LParserT__21) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*DepositContext).mode_ = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IDiscreteContext is an interface to support dynamic dispatch.
type IDiscreteContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsDiscreteContext differentiates from other interfaces.
	IsDiscreteContext()
}

type DiscreteContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDiscreteContext() *DiscreteContext {
	var p = new(DiscreteContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_discrete
	return p
}

func (*DiscreteContext) IsDiscreteContext() {}

func NewDiscreteContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DiscreteContext {
	var p = new(DiscreteContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_discrete

	return p
}

func (s *DiscreteContext) GetParser() antlr.Parser { return s.parser }
func (s *DiscreteContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DiscreteContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DiscreteContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterDiscrete(s)
	}
}

func (s *DiscreteContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitDiscrete(s)
	}
}

func (s *DiscreteContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitDiscrete(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) Discrete() (localctx IDiscreteContext) {
	this := p
	_ = this

	localctx = NewDiscreteContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, A2LParserRULE_discrete)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(511)
		p.Match(A2LParserT__22)
	}

	return localctx
}

// IDisplayIdentifierContext is an interface to support dynamic dispatch.
type IDisplayIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetDisplay_name returns the display_name rule contexts.
	GetDisplay_name() IIdentifierValueContext

	// SetDisplay_name sets the display_name rule contexts.
	SetDisplay_name(IIdentifierValueContext)

	// Getter signatures
	IdentifierValue() IIdentifierValueContext

	// IsDisplayIdentifierContext differentiates from other interfaces.
	IsDisplayIdentifierContext()
}

type DisplayIdentifierContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	display_name IIdentifierValueContext
}

func NewEmptyDisplayIdentifierContext() *DisplayIdentifierContext {
	var p = new(DisplayIdentifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_displayIdentifier
	return p
}

func (*DisplayIdentifierContext) IsDisplayIdentifierContext() {}

func NewDisplayIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DisplayIdentifierContext {
	var p = new(DisplayIdentifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_displayIdentifier

	return p
}

func (s *DisplayIdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *DisplayIdentifierContext) GetDisplay_name() IIdentifierValueContext { return s.display_name }

func (s *DisplayIdentifierContext) SetDisplay_name(v IIdentifierValueContext) { s.display_name = v }

func (s *DisplayIdentifierContext) IdentifierValue() IIdentifierValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierValueContext)
}

func (s *DisplayIdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DisplayIdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DisplayIdentifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterDisplayIdentifier(s)
	}
}

func (s *DisplayIdentifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitDisplayIdentifier(s)
	}
}

func (s *DisplayIdentifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitDisplayIdentifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) DisplayIdentifier() (localctx IDisplayIdentifierContext) {
	this := p
	_ = this

	localctx = NewDisplayIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, A2LParserRULE_displayIdentifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(513)
		p.Match(A2LParserT__23)
	}
	{
		p.SetState(514)

		var _x = p.IdentifierValue()

		localctx.(*DisplayIdentifierContext).display_name = _x
	}

	return localctx
}

// IEcuAddressExtensionContext is an interface to support dynamic dispatch.
type IEcuAddressExtensionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetExtension returns the extension rule contexts.
	GetExtension() IIntegerValueContext

	// SetExtension sets the extension rule contexts.
	SetExtension(IIntegerValueContext)

	// Getter signatures
	IntegerValue() IIntegerValueContext

	// IsEcuAddressExtensionContext differentiates from other interfaces.
	IsEcuAddressExtensionContext()
}

type EcuAddressExtensionContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	extension IIntegerValueContext
}

func NewEmptyEcuAddressExtensionContext() *EcuAddressExtensionContext {
	var p = new(EcuAddressExtensionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_ecuAddressExtension
	return p
}

func (*EcuAddressExtensionContext) IsEcuAddressExtensionContext() {}

func NewEcuAddressExtensionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EcuAddressExtensionContext {
	var p = new(EcuAddressExtensionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_ecuAddressExtension

	return p
}

func (s *EcuAddressExtensionContext) GetParser() antlr.Parser { return s.parser }

func (s *EcuAddressExtensionContext) GetExtension() IIntegerValueContext { return s.extension }

func (s *EcuAddressExtensionContext) SetExtension(v IIntegerValueContext) { s.extension = v }

func (s *EcuAddressExtensionContext) IntegerValue() IIntegerValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *EcuAddressExtensionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EcuAddressExtensionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EcuAddressExtensionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterEcuAddressExtension(s)
	}
}

func (s *EcuAddressExtensionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitEcuAddressExtension(s)
	}
}

func (s *EcuAddressExtensionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitEcuAddressExtension(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) EcuAddressExtension() (localctx IEcuAddressExtensionContext) {
	this := p
	_ = this

	localctx = NewEcuAddressExtensionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, A2LParserRULE_ecuAddressExtension)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(516)
		p.Match(A2LParserT__24)
	}
	{
		p.SetState(517)

		var _x = p.IntegerValue()

		localctx.(*EcuAddressExtensionContext).extension = _x
	}

	return localctx
}

// IExtendedLimitsContext is an interface to support dynamic dispatch.
type IExtendedLimitsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetLowerLimit returns the lowerLimit rule contexts.
	GetLowerLimit() INumericValueContext

	// GetUpperLimit returns the upperLimit rule contexts.
	GetUpperLimit() INumericValueContext

	// SetLowerLimit sets the lowerLimit rule contexts.
	SetLowerLimit(INumericValueContext)

	// SetUpperLimit sets the upperLimit rule contexts.
	SetUpperLimit(INumericValueContext)

	// Getter signatures
	AllNumericValue() []INumericValueContext
	NumericValue(i int) INumericValueContext

	// IsExtendedLimitsContext differentiates from other interfaces.
	IsExtendedLimitsContext()
}

type ExtendedLimitsContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	lowerLimit INumericValueContext
	upperLimit INumericValueContext
}

func NewEmptyExtendedLimitsContext() *ExtendedLimitsContext {
	var p = new(ExtendedLimitsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_extendedLimits
	return p
}

func (*ExtendedLimitsContext) IsExtendedLimitsContext() {}

func NewExtendedLimitsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExtendedLimitsContext {
	var p = new(ExtendedLimitsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_extendedLimits

	return p
}

func (s *ExtendedLimitsContext) GetParser() antlr.Parser { return s.parser }

func (s *ExtendedLimitsContext) GetLowerLimit() INumericValueContext { return s.lowerLimit }

func (s *ExtendedLimitsContext) GetUpperLimit() INumericValueContext { return s.upperLimit }

func (s *ExtendedLimitsContext) SetLowerLimit(v INumericValueContext) { s.lowerLimit = v }

func (s *ExtendedLimitsContext) SetUpperLimit(v INumericValueContext) { s.upperLimit = v }

func (s *ExtendedLimitsContext) AllNumericValue() []INumericValueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INumericValueContext); ok {
			len++
		}
	}

	tst := make([]INumericValueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INumericValueContext); ok {
			tst[i] = t.(INumericValueContext)
			i++
		}
	}

	return tst
}

func (s *ExtendedLimitsContext) NumericValue(i int) INumericValueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumericValueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumericValueContext)
}

func (s *ExtendedLimitsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExtendedLimitsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExtendedLimitsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterExtendedLimits(s)
	}
}

func (s *ExtendedLimitsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitExtendedLimits(s)
	}
}

func (s *ExtendedLimitsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitExtendedLimits(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) ExtendedLimits() (localctx IExtendedLimitsContext) {
	this := p
	_ = this

	localctx = NewExtendedLimitsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, A2LParserRULE_extendedLimits)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(519)
		p.Match(A2LParserT__25)
	}
	{
		p.SetState(520)

		var _x = p.NumericValue()

		localctx.(*ExtendedLimitsContext).lowerLimit = _x
	}
	{
		p.SetState(521)

		var _x = p.NumericValue()

		localctx.(*ExtendedLimitsContext).upperLimit = _x
	}

	return localctx
}

// IFormatContext is an interface to support dynamic dispatch.
type IFormatContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetFormatString returns the formatString rule contexts.
	GetFormatString() IStringValueContext

	// SetFormatString sets the formatString rule contexts.
	SetFormatString(IStringValueContext)

	// Getter signatures
	StringValue() IStringValueContext

	// IsFormatContext differentiates from other interfaces.
	IsFormatContext()
}

type FormatContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	formatString IStringValueContext
}

func NewEmptyFormatContext() *FormatContext {
	var p = new(FormatContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_format
	return p
}

func (*FormatContext) IsFormatContext() {}

func NewFormatContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FormatContext {
	var p = new(FormatContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_format

	return p
}

func (s *FormatContext) GetParser() antlr.Parser { return s.parser }

func (s *FormatContext) GetFormatString() IStringValueContext { return s.formatString }

func (s *FormatContext) SetFormatString(v IStringValueContext) { s.formatString = v }

func (s *FormatContext) StringValue() IStringValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringValueContext)
}

func (s *FormatContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FormatContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FormatContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterFormat(s)
	}
}

func (s *FormatContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitFormat(s)
	}
}

func (s *FormatContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitFormat(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) Format() (localctx IFormatContext) {
	this := p
	_ = this

	localctx = NewFormatContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, A2LParserRULE_format)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(523)
		p.Match(A2LParserT__26)
	}
	{
		p.SetState(524)

		var _x = p.StringValue()

		localctx.(*FormatContext).formatString = _x
	}

	return localctx
}

// IFunctionListContext is an interface to support dynamic dispatch.
type IFunctionListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_identifierValue returns the _identifierValue rule contexts.
	Get_identifierValue() IIdentifierValueContext

	// Set_identifierValue sets the _identifierValue rule contexts.
	Set_identifierValue(IIdentifierValueContext)

	// GetName returns the name rule context list.
	GetName() []IIdentifierValueContext

	// SetName sets the name rule context list.
	SetName([]IIdentifierValueContext)

	// Getter signatures
	BEGIN() antlr.TerminalNode
	END() antlr.TerminalNode
	AllIdentifierValue() []IIdentifierValueContext
	IdentifierValue(i int) IIdentifierValueContext

	// IsFunctionListContext differentiates from other interfaces.
	IsFunctionListContext()
}

type FunctionListContext struct {
	*antlr.BaseParserRuleContext
	parser           antlr.Parser
	_identifierValue IIdentifierValueContext
	name             []IIdentifierValueContext
}

func NewEmptyFunctionListContext() *FunctionListContext {
	var p = new(FunctionListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_functionList
	return p
}

func (*FunctionListContext) IsFunctionListContext() {}

func NewFunctionListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionListContext {
	var p = new(FunctionListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_functionList

	return p
}

func (s *FunctionListContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionListContext) Get_identifierValue() IIdentifierValueContext {
	return s._identifierValue
}

func (s *FunctionListContext) Set_identifierValue(v IIdentifierValueContext) { s._identifierValue = v }

func (s *FunctionListContext) GetName() []IIdentifierValueContext { return s.name }

func (s *FunctionListContext) SetName(v []IIdentifierValueContext) { s.name = v }

func (s *FunctionListContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(A2LParserBEGIN, 0)
}

func (s *FunctionListContext) END() antlr.TerminalNode {
	return s.GetToken(A2LParserEND, 0)
}

func (s *FunctionListContext) AllIdentifierValue() []IIdentifierValueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierValueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierValueContext); ok {
			tst[i] = t.(IIdentifierValueContext)
			i++
		}
	}

	return tst
}

func (s *FunctionListContext) IdentifierValue(i int) IIdentifierValueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierValueContext)
}

func (s *FunctionListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterFunctionList(s)
	}
}

func (s *FunctionListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitFunctionList(s)
	}
}

func (s *FunctionListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitFunctionList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) FunctionList() (localctx IFunctionListContext) {
	this := p
	_ = this

	localctx = NewFunctionListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, A2LParserRULE_functionList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(526)
		p.Match(A2LParserBEGIN)
	}
	{
		p.SetState(527)
		p.Match(A2LParserT__27)
	}
	p.SetState(531)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == A2LParserIDENT {
		{
			p.SetState(528)

			var _x = p.IdentifierValue()

			localctx.(*FunctionListContext)._identifierValue = _x
		}
		localctx.(*FunctionListContext).name = append(localctx.(*FunctionListContext).name, localctx.(*FunctionListContext)._identifierValue)

		p.SetState(533)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(534)
		p.Match(A2LParserEND)
	}
	{
		p.SetState(535)
		p.Match(A2LParserT__27)
	}

	return localctx
}

// IGuardRailsContext is an interface to support dynamic dispatch.
type IGuardRailsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsGuardRailsContext differentiates from other interfaces.
	IsGuardRailsContext()
}

type GuardRailsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGuardRailsContext() *GuardRailsContext {
	var p = new(GuardRailsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_guardRails
	return p
}

func (*GuardRailsContext) IsGuardRailsContext() {}

func NewGuardRailsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GuardRailsContext {
	var p = new(GuardRailsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_guardRails

	return p
}

func (s *GuardRailsContext) GetParser() antlr.Parser { return s.parser }
func (s *GuardRailsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GuardRailsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GuardRailsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterGuardRails(s)
	}
}

func (s *GuardRailsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitGuardRails(s)
	}
}

func (s *GuardRailsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitGuardRails(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) GuardRails() (localctx IGuardRailsContext) {
	this := p
	_ = this

	localctx = NewGuardRailsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, A2LParserRULE_guardRails)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(537)
		p.Match(A2LParserT__28)
	}

	return localctx
}

// IMatrixDimContext is an interface to support dynamic dispatch.
type IMatrixDimContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetXDim returns the xDim rule contexts.
	GetXDim() IIntegerValueContext

	// GetYDim returns the yDim rule contexts.
	GetYDim() IIntegerValueContext

	// GetZDim returns the zDim rule contexts.
	GetZDim() IIntegerValueContext

	// SetXDim sets the xDim rule contexts.
	SetXDim(IIntegerValueContext)

	// SetYDim sets the yDim rule contexts.
	SetYDim(IIntegerValueContext)

	// SetZDim sets the zDim rule contexts.
	SetZDim(IIntegerValueContext)

	// Getter signatures
	AllIntegerValue() []IIntegerValueContext
	IntegerValue(i int) IIntegerValueContext

	// IsMatrixDimContext differentiates from other interfaces.
	IsMatrixDimContext()
}

type MatrixDimContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	xDim   IIntegerValueContext
	yDim   IIntegerValueContext
	zDim   IIntegerValueContext
}

func NewEmptyMatrixDimContext() *MatrixDimContext {
	var p = new(MatrixDimContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_matrixDim
	return p
}

func (*MatrixDimContext) IsMatrixDimContext() {}

func NewMatrixDimContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MatrixDimContext {
	var p = new(MatrixDimContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_matrixDim

	return p
}

func (s *MatrixDimContext) GetParser() antlr.Parser { return s.parser }

func (s *MatrixDimContext) GetXDim() IIntegerValueContext { return s.xDim }

func (s *MatrixDimContext) GetYDim() IIntegerValueContext { return s.yDim }

func (s *MatrixDimContext) GetZDim() IIntegerValueContext { return s.zDim }

func (s *MatrixDimContext) SetXDim(v IIntegerValueContext) { s.xDim = v }

func (s *MatrixDimContext) SetYDim(v IIntegerValueContext) { s.yDim = v }

func (s *MatrixDimContext) SetZDim(v IIntegerValueContext) { s.zDim = v }

func (s *MatrixDimContext) AllIntegerValue() []IIntegerValueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIntegerValueContext); ok {
			len++
		}
	}

	tst := make([]IIntegerValueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIntegerValueContext); ok {
			tst[i] = t.(IIntegerValueContext)
			i++
		}
	}

	return tst
}

func (s *MatrixDimContext) IntegerValue(i int) IIntegerValueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *MatrixDimContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MatrixDimContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MatrixDimContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterMatrixDim(s)
	}
}

func (s *MatrixDimContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitMatrixDim(s)
	}
}

func (s *MatrixDimContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitMatrixDim(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) MatrixDim() (localctx IMatrixDimContext) {
	this := p
	_ = this

	localctx = NewMatrixDimContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, A2LParserRULE_matrixDim)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(539)
		p.Match(A2LParserT__29)
	}
	{
		p.SetState(540)

		var _x = p.IntegerValue()

		localctx.(*MatrixDimContext).xDim = _x
	}
	p.SetState(542)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 6, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(541)

			var _x = p.IntegerValue()

			localctx.(*MatrixDimContext).yDim = _x
		}

	}
	p.SetState(545)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == A2LParserINT || _la == A2LParserHEX {
		{
			p.SetState(544)

			var _x = p.IntegerValue()

			localctx.(*MatrixDimContext).zDim = _x
		}

	}

	return localctx
}

// IMaxRefreshContext is an interface to support dynamic dispatch.
type IMaxRefreshContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetScalingUnit returns the scalingUnit rule contexts.
	GetScalingUnit() IIntegerValueContext

	// GetRate returns the rate rule contexts.
	GetRate() IIntegerValueContext

	// SetScalingUnit sets the scalingUnit rule contexts.
	SetScalingUnit(IIntegerValueContext)

	// SetRate sets the rate rule contexts.
	SetRate(IIntegerValueContext)

	// Getter signatures
	AllIntegerValue() []IIntegerValueContext
	IntegerValue(i int) IIntegerValueContext

	// IsMaxRefreshContext differentiates from other interfaces.
	IsMaxRefreshContext()
}

type MaxRefreshContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	scalingUnit IIntegerValueContext
	rate        IIntegerValueContext
}

func NewEmptyMaxRefreshContext() *MaxRefreshContext {
	var p = new(MaxRefreshContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_maxRefresh
	return p
}

func (*MaxRefreshContext) IsMaxRefreshContext() {}

func NewMaxRefreshContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MaxRefreshContext {
	var p = new(MaxRefreshContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_maxRefresh

	return p
}

func (s *MaxRefreshContext) GetParser() antlr.Parser { return s.parser }

func (s *MaxRefreshContext) GetScalingUnit() IIntegerValueContext { return s.scalingUnit }

func (s *MaxRefreshContext) GetRate() IIntegerValueContext { return s.rate }

func (s *MaxRefreshContext) SetScalingUnit(v IIntegerValueContext) { s.scalingUnit = v }

func (s *MaxRefreshContext) SetRate(v IIntegerValueContext) { s.rate = v }

func (s *MaxRefreshContext) AllIntegerValue() []IIntegerValueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIntegerValueContext); ok {
			len++
		}
	}

	tst := make([]IIntegerValueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIntegerValueContext); ok {
			tst[i] = t.(IIntegerValueContext)
			i++
		}
	}

	return tst
}

func (s *MaxRefreshContext) IntegerValue(i int) IIntegerValueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *MaxRefreshContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MaxRefreshContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MaxRefreshContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterMaxRefresh(s)
	}
}

func (s *MaxRefreshContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitMaxRefresh(s)
	}
}

func (s *MaxRefreshContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitMaxRefresh(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) MaxRefresh() (localctx IMaxRefreshContext) {
	this := p
	_ = this

	localctx = NewMaxRefreshContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, A2LParserRULE_maxRefresh)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(547)
		p.Match(A2LParserT__30)
	}
	{
		p.SetState(548)

		var _x = p.IntegerValue()

		localctx.(*MaxRefreshContext).scalingUnit = _x
	}
	{
		p.SetState(549)

		var _x = p.IntegerValue()

		localctx.(*MaxRefreshContext).rate = _x
	}

	return localctx
}

// IMonotonyContext is an interface to support dynamic dispatch.
type IMonotonyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetMonotony_ returns the monotony_ token.
	GetMonotony_() antlr.Token

	// SetMonotony_ sets the monotony_ token.
	SetMonotony_(antlr.Token)

	// IsMonotonyContext differentiates from other interfaces.
	IsMonotonyContext()
}

type MonotonyContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	monotony_ antlr.Token
}

func NewEmptyMonotonyContext() *MonotonyContext {
	var p = new(MonotonyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_monotony
	return p
}

func (*MonotonyContext) IsMonotonyContext() {}

func NewMonotonyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MonotonyContext {
	var p = new(MonotonyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_monotony

	return p
}

func (s *MonotonyContext) GetParser() antlr.Parser { return s.parser }

func (s *MonotonyContext) GetMonotony_() antlr.Token { return s.monotony_ }

func (s *MonotonyContext) SetMonotony_(v antlr.Token) { s.monotony_ = v }

func (s *MonotonyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MonotonyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MonotonyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterMonotony(s)
	}
}

func (s *MonotonyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitMonotony(s)
	}
}

func (s *MonotonyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitMonotony(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) Monotony() (localctx IMonotonyContext) {
	this := p
	_ = this

	localctx = NewMonotonyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, A2LParserRULE_monotony)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(551)
		p.Match(A2LParserT__31)
	}
	{
		p.SetState(552)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*MonotonyContext).monotony_ = _lt

		_la = p.GetTokenStream().LA(1)

		if !((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&1090921693184) != 0) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*MonotonyContext).monotony_ = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IPhysUnitContext is an interface to support dynamic dispatch.
type IPhysUnitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetUnit_ returns the unit_ rule contexts.
	GetUnit_() IStringValueContext

	// SetUnit_ sets the unit_ rule contexts.
	SetUnit_(IStringValueContext)

	// Getter signatures
	StringValue() IStringValueContext

	// IsPhysUnitContext differentiates from other interfaces.
	IsPhysUnitContext()
}

type PhysUnitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	unit_  IStringValueContext
}

func NewEmptyPhysUnitContext() *PhysUnitContext {
	var p = new(PhysUnitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_physUnit
	return p
}

func (*PhysUnitContext) IsPhysUnitContext() {}

func NewPhysUnitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PhysUnitContext {
	var p = new(PhysUnitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_physUnit

	return p
}

func (s *PhysUnitContext) GetParser() antlr.Parser { return s.parser }

func (s *PhysUnitContext) GetUnit_() IStringValueContext { return s.unit_ }

func (s *PhysUnitContext) SetUnit_(v IStringValueContext) { s.unit_ = v }

func (s *PhysUnitContext) StringValue() IStringValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringValueContext)
}

func (s *PhysUnitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PhysUnitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PhysUnitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterPhysUnit(s)
	}
}

func (s *PhysUnitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitPhysUnit(s)
	}
}

func (s *PhysUnitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitPhysUnit(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) PhysUnit() (localctx IPhysUnitContext) {
	this := p
	_ = this

	localctx = NewPhysUnitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, A2LParserRULE_physUnit)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(554)
		p.Match(A2LParserT__39)
	}
	{
		p.SetState(555)

		var _x = p.StringValue()

		localctx.(*PhysUnitContext).unit_ = _x
	}

	return localctx
}

// IReadOnlyContext is an interface to support dynamic dispatch.
type IReadOnlyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsReadOnlyContext differentiates from other interfaces.
	IsReadOnlyContext()
}

type ReadOnlyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReadOnlyContext() *ReadOnlyContext {
	var p = new(ReadOnlyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_readOnly
	return p
}

func (*ReadOnlyContext) IsReadOnlyContext() {}

func NewReadOnlyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReadOnlyContext {
	var p = new(ReadOnlyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_readOnly

	return p
}

func (s *ReadOnlyContext) GetParser() antlr.Parser { return s.parser }
func (s *ReadOnlyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReadOnlyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReadOnlyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterReadOnly(s)
	}
}

func (s *ReadOnlyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitReadOnly(s)
	}
}

func (s *ReadOnlyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitReadOnly(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) ReadOnly() (localctx IReadOnlyContext) {
	this := p
	_ = this

	localctx = NewReadOnlyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, A2LParserRULE_readOnly)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(557)
		p.Match(A2LParserT__40)
	}

	return localctx
}

// IRefCharacteristicContext is an interface to support dynamic dispatch.
type IRefCharacteristicContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_identifierValue returns the _identifierValue rule contexts.
	Get_identifierValue() IIdentifierValueContext

	// Set_identifierValue sets the _identifierValue rule contexts.
	Set_identifierValue(IIdentifierValueContext)

	// GetIdentifier returns the identifier rule context list.
	GetIdentifier() []IIdentifierValueContext

	// SetIdentifier sets the identifier rule context list.
	SetIdentifier([]IIdentifierValueContext)

	// Getter signatures
	BEGIN() antlr.TerminalNode
	END() antlr.TerminalNode
	AllIdentifierValue() []IIdentifierValueContext
	IdentifierValue(i int) IIdentifierValueContext

	// IsRefCharacteristicContext differentiates from other interfaces.
	IsRefCharacteristicContext()
}

type RefCharacteristicContext struct {
	*antlr.BaseParserRuleContext
	parser           antlr.Parser
	_identifierValue IIdentifierValueContext
	identifier       []IIdentifierValueContext
}

func NewEmptyRefCharacteristicContext() *RefCharacteristicContext {
	var p = new(RefCharacteristicContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_refCharacteristic
	return p
}

func (*RefCharacteristicContext) IsRefCharacteristicContext() {}

func NewRefCharacteristicContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RefCharacteristicContext {
	var p = new(RefCharacteristicContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_refCharacteristic

	return p
}

func (s *RefCharacteristicContext) GetParser() antlr.Parser { return s.parser }

func (s *RefCharacteristicContext) Get_identifierValue() IIdentifierValueContext {
	return s._identifierValue
}

func (s *RefCharacteristicContext) Set_identifierValue(v IIdentifierValueContext) {
	s._identifierValue = v
}

func (s *RefCharacteristicContext) GetIdentifier() []IIdentifierValueContext { return s.identifier }

func (s *RefCharacteristicContext) SetIdentifier(v []IIdentifierValueContext) { s.identifier = v }

func (s *RefCharacteristicContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(A2LParserBEGIN, 0)
}

func (s *RefCharacteristicContext) END() antlr.TerminalNode {
	return s.GetToken(A2LParserEND, 0)
}

func (s *RefCharacteristicContext) AllIdentifierValue() []IIdentifierValueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierValueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierValueContext); ok {
			tst[i] = t.(IIdentifierValueContext)
			i++
		}
	}

	return tst
}

func (s *RefCharacteristicContext) IdentifierValue(i int) IIdentifierValueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierValueContext)
}

func (s *RefCharacteristicContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RefCharacteristicContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RefCharacteristicContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterRefCharacteristic(s)
	}
}

func (s *RefCharacteristicContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitRefCharacteristic(s)
	}
}

func (s *RefCharacteristicContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitRefCharacteristic(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) RefCharacteristic() (localctx IRefCharacteristicContext) {
	this := p
	_ = this

	localctx = NewRefCharacteristicContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, A2LParserRULE_refCharacteristic)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(559)
		p.Match(A2LParserBEGIN)
	}
	{
		p.SetState(560)
		p.Match(A2LParserT__41)
	}
	p.SetState(564)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == A2LParserIDENT {
		{
			p.SetState(561)

			var _x = p.IdentifierValue()

			localctx.(*RefCharacteristicContext)._identifierValue = _x
		}
		localctx.(*RefCharacteristicContext).identifier = append(localctx.(*RefCharacteristicContext).identifier, localctx.(*RefCharacteristicContext)._identifierValue)

		p.SetState(566)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(567)
		p.Match(A2LParserEND)
	}
	{
		p.SetState(568)
		p.Match(A2LParserT__41)
	}

	return localctx
}

// IRefMemorySegmentContext is an interface to support dynamic dispatch.
type IRefMemorySegmentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierValueContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierValueContext)

	// Getter signatures
	IdentifierValue() IIdentifierValueContext

	// IsRefMemorySegmentContext differentiates from other interfaces.
	IsRefMemorySegmentContext()
}

type RefMemorySegmentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name   IIdentifierValueContext
}

func NewEmptyRefMemorySegmentContext() *RefMemorySegmentContext {
	var p = new(RefMemorySegmentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_refMemorySegment
	return p
}

func (*RefMemorySegmentContext) IsRefMemorySegmentContext() {}

func NewRefMemorySegmentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RefMemorySegmentContext {
	var p = new(RefMemorySegmentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_refMemorySegment

	return p
}

func (s *RefMemorySegmentContext) GetParser() antlr.Parser { return s.parser }

func (s *RefMemorySegmentContext) GetName() IIdentifierValueContext { return s.name }

func (s *RefMemorySegmentContext) SetName(v IIdentifierValueContext) { s.name = v }

func (s *RefMemorySegmentContext) IdentifierValue() IIdentifierValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierValueContext)
}

func (s *RefMemorySegmentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RefMemorySegmentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RefMemorySegmentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterRefMemorySegment(s)
	}
}

func (s *RefMemorySegmentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitRefMemorySegment(s)
	}
}

func (s *RefMemorySegmentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitRefMemorySegment(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) RefMemorySegment() (localctx IRefMemorySegmentContext) {
	this := p
	_ = this

	localctx = NewRefMemorySegmentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, A2LParserRULE_refMemorySegment)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(570)
		p.Match(A2LParserT__42)
	}
	{
		p.SetState(571)

		var _x = p.IdentifierValue()

		localctx.(*RefMemorySegmentContext).name = _x
	}

	return localctx
}

// IRefUnitContext is an interface to support dynamic dispatch.
type IRefUnitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetUnit_ returns the unit_ rule contexts.
	GetUnit_() IIdentifierValueContext

	// SetUnit_ sets the unit_ rule contexts.
	SetUnit_(IIdentifierValueContext)

	// Getter signatures
	IdentifierValue() IIdentifierValueContext

	// IsRefUnitContext differentiates from other interfaces.
	IsRefUnitContext()
}

type RefUnitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	unit_  IIdentifierValueContext
}

func NewEmptyRefUnitContext() *RefUnitContext {
	var p = new(RefUnitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_refUnit
	return p
}

func (*RefUnitContext) IsRefUnitContext() {}

func NewRefUnitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RefUnitContext {
	var p = new(RefUnitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_refUnit

	return p
}

func (s *RefUnitContext) GetParser() antlr.Parser { return s.parser }

func (s *RefUnitContext) GetUnit_() IIdentifierValueContext { return s.unit_ }

func (s *RefUnitContext) SetUnit_(v IIdentifierValueContext) { s.unit_ = v }

func (s *RefUnitContext) IdentifierValue() IIdentifierValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierValueContext)
}

func (s *RefUnitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RefUnitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RefUnitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterRefUnit(s)
	}
}

func (s *RefUnitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitRefUnit(s)
	}
}

func (s *RefUnitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitRefUnit(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) RefUnit() (localctx IRefUnitContext) {
	this := p
	_ = this

	localctx = NewRefUnitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, A2LParserRULE_refUnit)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(573)
		p.Match(A2LParserT__43)
	}
	{
		p.SetState(574)

		var _x = p.IdentifierValue()

		localctx.(*RefUnitContext).unit_ = _x
	}

	return localctx
}

// IStepSizeContext is an interface to support dynamic dispatch.
type IStepSizeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetStepSize_ returns the stepSize_ rule contexts.
	GetStepSize_() INumericValueContext

	// SetStepSize_ sets the stepSize_ rule contexts.
	SetStepSize_(INumericValueContext)

	// Getter signatures
	NumericValue() INumericValueContext

	// IsStepSizeContext differentiates from other interfaces.
	IsStepSizeContext()
}

type StepSizeContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	stepSize_ INumericValueContext
}

func NewEmptyStepSizeContext() *StepSizeContext {
	var p = new(StepSizeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_stepSize
	return p
}

func (*StepSizeContext) IsStepSizeContext() {}

func NewStepSizeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StepSizeContext {
	var p = new(StepSizeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_stepSize

	return p
}

func (s *StepSizeContext) GetParser() antlr.Parser { return s.parser }

func (s *StepSizeContext) GetStepSize_() INumericValueContext { return s.stepSize_ }

func (s *StepSizeContext) SetStepSize_(v INumericValueContext) { s.stepSize_ = v }

func (s *StepSizeContext) NumericValue() INumericValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumericValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumericValueContext)
}

func (s *StepSizeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StepSizeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StepSizeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterStepSize(s)
	}
}

func (s *StepSizeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitStepSize(s)
	}
}

func (s *StepSizeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitStepSize(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) StepSize() (localctx IStepSizeContext) {
	this := p
	_ = this

	localctx = NewStepSizeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, A2LParserRULE_stepSize)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(576)
		p.Match(A2LParserT__44)
	}
	{
		p.SetState(577)

		var _x = p.NumericValue()

		localctx.(*StepSizeContext).stepSize_ = _x
	}

	return localctx
}

// ISymbolLinkContext is an interface to support dynamic dispatch.
type ISymbolLinkContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetSymbolName returns the symbolName rule contexts.
	GetSymbolName() IStringValueContext

	// GetOffset returns the offset rule contexts.
	GetOffset() IIntegerValueContext

	// SetSymbolName sets the symbolName rule contexts.
	SetSymbolName(IStringValueContext)

	// SetOffset sets the offset rule contexts.
	SetOffset(IIntegerValueContext)

	// Getter signatures
	StringValue() IStringValueContext
	IntegerValue() IIntegerValueContext

	// IsSymbolLinkContext differentiates from other interfaces.
	IsSymbolLinkContext()
}

type SymbolLinkContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	symbolName IStringValueContext
	offset     IIntegerValueContext
}

func NewEmptySymbolLinkContext() *SymbolLinkContext {
	var p = new(SymbolLinkContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_symbolLink
	return p
}

func (*SymbolLinkContext) IsSymbolLinkContext() {}

func NewSymbolLinkContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SymbolLinkContext {
	var p = new(SymbolLinkContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_symbolLink

	return p
}

func (s *SymbolLinkContext) GetParser() antlr.Parser { return s.parser }

func (s *SymbolLinkContext) GetSymbolName() IStringValueContext { return s.symbolName }

func (s *SymbolLinkContext) GetOffset() IIntegerValueContext { return s.offset }

func (s *SymbolLinkContext) SetSymbolName(v IStringValueContext) { s.symbolName = v }

func (s *SymbolLinkContext) SetOffset(v IIntegerValueContext) { s.offset = v }

func (s *SymbolLinkContext) StringValue() IStringValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringValueContext)
}

func (s *SymbolLinkContext) IntegerValue() IIntegerValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *SymbolLinkContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SymbolLinkContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SymbolLinkContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterSymbolLink(s)
	}
}

func (s *SymbolLinkContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitSymbolLink(s)
	}
}

func (s *SymbolLinkContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitSymbolLink(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) SymbolLink() (localctx ISymbolLinkContext) {
	this := p
	_ = this

	localctx = NewSymbolLinkContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, A2LParserRULE_symbolLink)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(579)
		p.Match(A2LParserT__45)
	}
	{
		p.SetState(580)

		var _x = p.StringValue()

		localctx.(*SymbolLinkContext).symbolName = _x
	}
	{
		p.SetState(581)

		var _x = p.IntegerValue()

		localctx.(*SymbolLinkContext).offset = _x
	}

	return localctx
}

// IVersionContext is an interface to support dynamic dispatch.
type IVersionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetVersionIdentifier returns the versionIdentifier rule contexts.
	GetVersionIdentifier() IStringValueContext

	// SetVersionIdentifier sets the versionIdentifier rule contexts.
	SetVersionIdentifier(IStringValueContext)

	// Getter signatures
	StringValue() IStringValueContext

	// IsVersionContext differentiates from other interfaces.
	IsVersionContext()
}

type VersionContext struct {
	*antlr.BaseParserRuleContext
	parser            antlr.Parser
	versionIdentifier IStringValueContext
}

func NewEmptyVersionContext() *VersionContext {
	var p = new(VersionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_version
	return p
}

func (*VersionContext) IsVersionContext() {}

func NewVersionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VersionContext {
	var p = new(VersionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_version

	return p
}

func (s *VersionContext) GetParser() antlr.Parser { return s.parser }

func (s *VersionContext) GetVersionIdentifier() IStringValueContext { return s.versionIdentifier }

func (s *VersionContext) SetVersionIdentifier(v IStringValueContext) { s.versionIdentifier = v }

func (s *VersionContext) StringValue() IStringValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringValueContext)
}

func (s *VersionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VersionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VersionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterVersion(s)
	}
}

func (s *VersionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitVersion(s)
	}
}

func (s *VersionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitVersion(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) Version() (localctx IVersionContext) {
	this := p
	_ = this

	localctx = NewVersionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, A2LParserRULE_version)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(583)
		p.Match(A2LParserT__46)
	}
	{
		p.SetState(584)

		var _x = p.StringValue()

		localctx.(*VersionContext).versionIdentifier = _x
	}

	return localctx
}

// IAsap2VersionContext is an interface to support dynamic dispatch.
type IAsap2VersionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetVersionNo returns the versionNo rule contexts.
	GetVersionNo() IIntegerValueContext

	// GetUpgradeNo returns the upgradeNo rule contexts.
	GetUpgradeNo() IIntegerValueContext

	// SetVersionNo sets the versionNo rule contexts.
	SetVersionNo(IIntegerValueContext)

	// SetUpgradeNo sets the upgradeNo rule contexts.
	SetUpgradeNo(IIntegerValueContext)

	// Getter signatures
	AllIntegerValue() []IIntegerValueContext
	IntegerValue(i int) IIntegerValueContext

	// IsAsap2VersionContext differentiates from other interfaces.
	IsAsap2VersionContext()
}

type Asap2VersionContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	versionNo IIntegerValueContext
	upgradeNo IIntegerValueContext
}

func NewEmptyAsap2VersionContext() *Asap2VersionContext {
	var p = new(Asap2VersionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_asap2Version
	return p
}

func (*Asap2VersionContext) IsAsap2VersionContext() {}

func NewAsap2VersionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Asap2VersionContext {
	var p = new(Asap2VersionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_asap2Version

	return p
}

func (s *Asap2VersionContext) GetParser() antlr.Parser { return s.parser }

func (s *Asap2VersionContext) GetVersionNo() IIntegerValueContext { return s.versionNo }

func (s *Asap2VersionContext) GetUpgradeNo() IIntegerValueContext { return s.upgradeNo }

func (s *Asap2VersionContext) SetVersionNo(v IIntegerValueContext) { s.versionNo = v }

func (s *Asap2VersionContext) SetUpgradeNo(v IIntegerValueContext) { s.upgradeNo = v }

func (s *Asap2VersionContext) AllIntegerValue() []IIntegerValueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIntegerValueContext); ok {
			len++
		}
	}

	tst := make([]IIntegerValueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIntegerValueContext); ok {
			tst[i] = t.(IIntegerValueContext)
			i++
		}
	}

	return tst
}

func (s *Asap2VersionContext) IntegerValue(i int) IIntegerValueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *Asap2VersionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Asap2VersionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Asap2VersionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterAsap2Version(s)
	}
}

func (s *Asap2VersionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitAsap2Version(s)
	}
}

func (s *Asap2VersionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitAsap2Version(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) Asap2Version() (localctx IAsap2VersionContext) {
	this := p
	_ = this

	localctx = NewAsap2VersionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, A2LParserRULE_asap2Version)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(586)
		p.Match(A2LParserT__47)
	}
	{
		p.SetState(587)

		var _x = p.IntegerValue()

		localctx.(*Asap2VersionContext).versionNo = _x
	}
	{
		p.SetState(588)

		var _x = p.IntegerValue()

		localctx.(*Asap2VersionContext).upgradeNo = _x
	}

	return localctx
}

// IA2mlVersionContext is an interface to support dynamic dispatch.
type IA2mlVersionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetVersionNo returns the versionNo rule contexts.
	GetVersionNo() IIntegerValueContext

	// GetUpgradeNo returns the upgradeNo rule contexts.
	GetUpgradeNo() IIntegerValueContext

	// SetVersionNo sets the versionNo rule contexts.
	SetVersionNo(IIntegerValueContext)

	// SetUpgradeNo sets the upgradeNo rule contexts.
	SetUpgradeNo(IIntegerValueContext)

	// Getter signatures
	AllIntegerValue() []IIntegerValueContext
	IntegerValue(i int) IIntegerValueContext

	// IsA2mlVersionContext differentiates from other interfaces.
	IsA2mlVersionContext()
}

type A2mlVersionContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	versionNo IIntegerValueContext
	upgradeNo IIntegerValueContext
}

func NewEmptyA2mlVersionContext() *A2mlVersionContext {
	var p = new(A2mlVersionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_a2mlVersion
	return p
}

func (*A2mlVersionContext) IsA2mlVersionContext() {}

func NewA2mlVersionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *A2mlVersionContext {
	var p = new(A2mlVersionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_a2mlVersion

	return p
}

func (s *A2mlVersionContext) GetParser() antlr.Parser { return s.parser }

func (s *A2mlVersionContext) GetVersionNo() IIntegerValueContext { return s.versionNo }

func (s *A2mlVersionContext) GetUpgradeNo() IIntegerValueContext { return s.upgradeNo }

func (s *A2mlVersionContext) SetVersionNo(v IIntegerValueContext) { s.versionNo = v }

func (s *A2mlVersionContext) SetUpgradeNo(v IIntegerValueContext) { s.upgradeNo = v }

func (s *A2mlVersionContext) AllIntegerValue() []IIntegerValueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIntegerValueContext); ok {
			len++
		}
	}

	tst := make([]IIntegerValueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIntegerValueContext); ok {
			tst[i] = t.(IIntegerValueContext)
			i++
		}
	}

	return tst
}

func (s *A2mlVersionContext) IntegerValue(i int) IIntegerValueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *A2mlVersionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *A2mlVersionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *A2mlVersionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterA2mlVersion(s)
	}
}

func (s *A2mlVersionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitA2mlVersion(s)
	}
}

func (s *A2mlVersionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitA2mlVersion(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) A2mlVersion() (localctx IA2mlVersionContext) {
	this := p
	_ = this

	localctx = NewA2mlVersionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, A2LParserRULE_a2mlVersion)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(590)
		p.Match(A2LParserT__48)
	}
	{
		p.SetState(591)

		var _x = p.IntegerValue()

		localctx.(*A2mlVersionContext).versionNo = _x
	}
	{
		p.SetState(592)

		var _x = p.IntegerValue()

		localctx.(*A2mlVersionContext).upgradeNo = _x
	}

	return localctx
}

// IProjectContext is an interface to support dynamic dispatch.
type IProjectContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierValueContext

	// GetLongIdentifier returns the longIdentifier rule contexts.
	GetLongIdentifier() IStringValueContext

	// Get_header returns the _header rule contexts.
	Get_header() IHeaderContext

	// Get_module returns the _module rule contexts.
	Get_module() IModuleContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierValueContext)

	// SetLongIdentifier sets the longIdentifier rule contexts.
	SetLongIdentifier(IStringValueContext)

	// Set_header sets the _header rule contexts.
	Set_header(IHeaderContext)

	// Set_module sets the _module rule contexts.
	Set_module(IModuleContext)

	// GetV_header returns the v_header rule context list.
	GetV_header() []IHeaderContext

	// GetV_module returns the v_module rule context list.
	GetV_module() []IModuleContext

	// SetV_header sets the v_header rule context list.
	SetV_header([]IHeaderContext)

	// SetV_module sets the v_module rule context list.
	SetV_module([]IModuleContext)

	// Getter signatures
	BEGIN() antlr.TerminalNode
	END() antlr.TerminalNode
	IdentifierValue() IIdentifierValueContext
	StringValue() IStringValueContext
	AllHeader() []IHeaderContext
	Header(i int) IHeaderContext
	AllModule() []IModuleContext
	Module(i int) IModuleContext

	// IsProjectContext differentiates from other interfaces.
	IsProjectContext()
}

type ProjectContext struct {
	*antlr.BaseParserRuleContext
	parser         antlr.Parser
	name           IIdentifierValueContext
	longIdentifier IStringValueContext
	_header        IHeaderContext
	v_header       []IHeaderContext
	_module        IModuleContext
	v_module       []IModuleContext
}

func NewEmptyProjectContext() *ProjectContext {
	var p = new(ProjectContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_project
	return p
}

func (*ProjectContext) IsProjectContext() {}

func NewProjectContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ProjectContext {
	var p = new(ProjectContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_project

	return p
}

func (s *ProjectContext) GetParser() antlr.Parser { return s.parser }

func (s *ProjectContext) GetName() IIdentifierValueContext { return s.name }

func (s *ProjectContext) GetLongIdentifier() IStringValueContext { return s.longIdentifier }

func (s *ProjectContext) Get_header() IHeaderContext { return s._header }

func (s *ProjectContext) Get_module() IModuleContext { return s._module }

func (s *ProjectContext) SetName(v IIdentifierValueContext) { s.name = v }

func (s *ProjectContext) SetLongIdentifier(v IStringValueContext) { s.longIdentifier = v }

func (s *ProjectContext) Set_header(v IHeaderContext) { s._header = v }

func (s *ProjectContext) Set_module(v IModuleContext) { s._module = v }

func (s *ProjectContext) GetV_header() []IHeaderContext { return s.v_header }

func (s *ProjectContext) GetV_module() []IModuleContext { return s.v_module }

func (s *ProjectContext) SetV_header(v []IHeaderContext) { s.v_header = v }

func (s *ProjectContext) SetV_module(v []IModuleContext) { s.v_module = v }

func (s *ProjectContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(A2LParserBEGIN, 0)
}

func (s *ProjectContext) END() antlr.TerminalNode {
	return s.GetToken(A2LParserEND, 0)
}

func (s *ProjectContext) IdentifierValue() IIdentifierValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierValueContext)
}

func (s *ProjectContext) StringValue() IStringValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringValueContext)
}

func (s *ProjectContext) AllHeader() []IHeaderContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IHeaderContext); ok {
			len++
		}
	}

	tst := make([]IHeaderContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IHeaderContext); ok {
			tst[i] = t.(IHeaderContext)
			i++
		}
	}

	return tst
}

func (s *ProjectContext) Header(i int) IHeaderContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IHeaderContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IHeaderContext)
}

func (s *ProjectContext) AllModule() []IModuleContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IModuleContext); ok {
			len++
		}
	}

	tst := make([]IModuleContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IModuleContext); ok {
			tst[i] = t.(IModuleContext)
			i++
		}
	}

	return tst
}

func (s *ProjectContext) Module(i int) IModuleContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IModuleContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IModuleContext)
}

func (s *ProjectContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ProjectContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ProjectContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterProject(s)
	}
}

func (s *ProjectContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitProject(s)
	}
}

func (s *ProjectContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitProject(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) Project() (localctx IProjectContext) {
	this := p
	_ = this

	localctx = NewProjectContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, A2LParserRULE_project)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(594)
		p.Match(A2LParserBEGIN)
	}
	{
		p.SetState(595)
		p.Match(A2LParserT__49)
	}
	{
		p.SetState(596)

		var _x = p.IdentifierValue()

		localctx.(*ProjectContext).name = _x
	}
	{
		p.SetState(597)

		var _x = p.StringValue()

		localctx.(*ProjectContext).longIdentifier = _x
	}
	p.SetState(602)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == A2LParserBEGIN {
		p.SetState(600)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 9, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(598)

				var _x = p.Header()

				localctx.(*ProjectContext)._header = _x
			}
			localctx.(*ProjectContext).v_header = append(localctx.(*ProjectContext).v_header, localctx.(*ProjectContext)._header)

		case 2:
			{
				p.SetState(599)

				var _x = p.Module()

				localctx.(*ProjectContext)._module = _x
			}
			localctx.(*ProjectContext).v_module = append(localctx.(*ProjectContext).v_module, localctx.(*ProjectContext)._module)

		}

		p.SetState(604)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(605)
		p.Match(A2LParserEND)
	}
	{
		p.SetState(606)
		p.Match(A2LParserT__49)
	}

	return localctx
}

// IHeaderContext is an interface to support dynamic dispatch.
type IHeaderContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetComment returns the comment rule contexts.
	GetComment() IStringValueContext

	// GetVProjectNo returns the vProjectNo rule contexts.
	GetVProjectNo() IProjectNoContext

	// GetVVersion returns the vVersion rule contexts.
	GetVVersion() IVersionContext

	// SetComment sets the comment rule contexts.
	SetComment(IStringValueContext)

	// SetVProjectNo sets the vProjectNo rule contexts.
	SetVProjectNo(IProjectNoContext)

	// SetVVersion sets the vVersion rule contexts.
	SetVVersion(IVersionContext)

	// Getter signatures
	BEGIN() antlr.TerminalNode
	END() antlr.TerminalNode
	StringValue() IStringValueContext
	AllProjectNo() []IProjectNoContext
	ProjectNo(i int) IProjectNoContext
	AllVersion() []IVersionContext
	Version(i int) IVersionContext

	// IsHeaderContext differentiates from other interfaces.
	IsHeaderContext()
}

type HeaderContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	comment    IStringValueContext
	vProjectNo IProjectNoContext
	vVersion   IVersionContext
}

func NewEmptyHeaderContext() *HeaderContext {
	var p = new(HeaderContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_header
	return p
}

func (*HeaderContext) IsHeaderContext() {}

func NewHeaderContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *HeaderContext {
	var p = new(HeaderContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_header

	return p
}

func (s *HeaderContext) GetParser() antlr.Parser { return s.parser }

func (s *HeaderContext) GetComment() IStringValueContext { return s.comment }

func (s *HeaderContext) GetVProjectNo() IProjectNoContext { return s.vProjectNo }

func (s *HeaderContext) GetVVersion() IVersionContext { return s.vVersion }

func (s *HeaderContext) SetComment(v IStringValueContext) { s.comment = v }

func (s *HeaderContext) SetVProjectNo(v IProjectNoContext) { s.vProjectNo = v }

func (s *HeaderContext) SetVVersion(v IVersionContext) { s.vVersion = v }

func (s *HeaderContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(A2LParserBEGIN, 0)
}

func (s *HeaderContext) END() antlr.TerminalNode {
	return s.GetToken(A2LParserEND, 0)
}

func (s *HeaderContext) StringValue() IStringValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringValueContext)
}

func (s *HeaderContext) AllProjectNo() []IProjectNoContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IProjectNoContext); ok {
			len++
		}
	}

	tst := make([]IProjectNoContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IProjectNoContext); ok {
			tst[i] = t.(IProjectNoContext)
			i++
		}
	}

	return tst
}

func (s *HeaderContext) ProjectNo(i int) IProjectNoContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IProjectNoContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IProjectNoContext)
}

func (s *HeaderContext) AllVersion() []IVersionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IVersionContext); ok {
			len++
		}
	}

	tst := make([]IVersionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IVersionContext); ok {
			tst[i] = t.(IVersionContext)
			i++
		}
	}

	return tst
}

func (s *HeaderContext) Version(i int) IVersionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVersionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVersionContext)
}

func (s *HeaderContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HeaderContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *HeaderContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterHeader(s)
	}
}

func (s *HeaderContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitHeader(s)
	}
}

func (s *HeaderContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitHeader(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) Header() (localctx IHeaderContext) {
	this := p
	_ = this

	localctx = NewHeaderContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 76, A2LParserRULE_header)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(608)
		p.Match(A2LParserBEGIN)
	}
	{
		p.SetState(609)
		p.Match(A2LParserT__50)
	}
	{
		p.SetState(610)

		var _x = p.StringValue()

		localctx.(*HeaderContext).comment = _x
	}
	p.SetState(615)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == A2LParserT__46 || _la == A2LParserT__51 {
		p.SetState(613)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case A2LParserT__51:
			{
				p.SetState(611)

				var _x = p.ProjectNo()

				localctx.(*HeaderContext).vProjectNo = _x
			}

		case A2LParserT__46:
			{
				p.SetState(612)

				var _x = p.Version()

				localctx.(*HeaderContext).vVersion = _x
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(617)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(618)
		p.Match(A2LParserEND)
	}
	{
		p.SetState(619)
		p.Match(A2LParserT__50)
	}

	return localctx
}

// IProjectNoContext is an interface to support dynamic dispatch.
type IProjectNoContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetProjectNumber returns the projectNumber rule contexts.
	GetProjectNumber() IIdentifierValueContext

	// SetProjectNumber sets the projectNumber rule contexts.
	SetProjectNumber(IIdentifierValueContext)

	// Getter signatures
	IdentifierValue() IIdentifierValueContext

	// IsProjectNoContext differentiates from other interfaces.
	IsProjectNoContext()
}

type ProjectNoContext struct {
	*antlr.BaseParserRuleContext
	parser        antlr.Parser
	projectNumber IIdentifierValueContext
}

func NewEmptyProjectNoContext() *ProjectNoContext {
	var p = new(ProjectNoContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_projectNo
	return p
}

func (*ProjectNoContext) IsProjectNoContext() {}

func NewProjectNoContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ProjectNoContext {
	var p = new(ProjectNoContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_projectNo

	return p
}

func (s *ProjectNoContext) GetParser() antlr.Parser { return s.parser }

func (s *ProjectNoContext) GetProjectNumber() IIdentifierValueContext { return s.projectNumber }

func (s *ProjectNoContext) SetProjectNumber(v IIdentifierValueContext) { s.projectNumber = v }

func (s *ProjectNoContext) IdentifierValue() IIdentifierValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierValueContext)
}

func (s *ProjectNoContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ProjectNoContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ProjectNoContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterProjectNo(s)
	}
}

func (s *ProjectNoContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitProjectNo(s)
	}
}

func (s *ProjectNoContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitProjectNo(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) ProjectNo() (localctx IProjectNoContext) {
	this := p
	_ = this

	localctx = NewProjectNoContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 78, A2LParserRULE_projectNo)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(621)
		p.Match(A2LParserT__51)
	}
	{
		p.SetState(622)

		var _x = p.IdentifierValue()

		localctx.(*ProjectNoContext).projectNumber = _x
	}

	return localctx
}

// IModuleContext is an interface to support dynamic dispatch.
type IModuleContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierValueContext

	// GetLongIdentifier returns the longIdentifier rule contexts.
	GetLongIdentifier() IStringValueContext

	// Get_a2ml returns the _a2ml rule contexts.
	Get_a2ml() IA2mlContext

	// Get_ifData returns the _ifData rule contexts.
	Get_ifData() IIfDataContext

	// Get_axisPts returns the _axisPts rule contexts.
	Get_axisPts() IAxisPtsContext

	// Get_characteristic returns the _characteristic rule contexts.
	Get_characteristic() ICharacteristicContext

	// Get_compuMethod returns the _compuMethod rule contexts.
	Get_compuMethod() ICompuMethodContext

	// Get_compuTab returns the _compuTab rule contexts.
	Get_compuTab() ICompuTabContext

	// Get_compuVTab returns the _compuVTab rule contexts.
	Get_compuVTab() ICompuVTabContext

	// Get_compuVTabRange returns the _compuVTabRange rule contexts.
	Get_compuVTabRange() ICompuVTabRangeContext

	// Get_frame returns the _frame rule contexts.
	Get_frame() IFrameContext

	// Get_function returns the _function rule contexts.
	Get_function() IFunctionContext

	// Get_group returns the _group rule contexts.
	Get_group() IGroupContext

	// Get_instance returns the _instance rule contexts.
	Get_instance() IInstanceContext

	// Get_measurement returns the _measurement rule contexts.
	Get_measurement() IMeasurementContext

	// Get_modCommon returns the _modCommon rule contexts.
	Get_modCommon() IModCommonContext

	// Get_modPar returns the _modPar rule contexts.
	Get_modPar() IModParContext

	// Get_recordLayout returns the _recordLayout rule contexts.
	Get_recordLayout() IRecordLayoutContext

	// Get_typedefCharacteristic returns the _typedefCharacteristic rule contexts.
	Get_typedefCharacteristic() ITypedefCharacteristicContext

	// Get_typedefMeasurement returns the _typedefMeasurement rule contexts.
	Get_typedefMeasurement() ITypedefMeasurementContext

	// Get_typedefStructure returns the _typedefStructure rule contexts.
	Get_typedefStructure() ITypedefStructureContext

	// Get_unit returns the _unit rule contexts.
	Get_unit() IUnitContext

	// Get_userRights returns the _userRights rule contexts.
	Get_userRights() IUserRightsContext

	// Get_variantCoding returns the _variantCoding rule contexts.
	Get_variantCoding() IVariantCodingContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierValueContext)

	// SetLongIdentifier sets the longIdentifier rule contexts.
	SetLongIdentifier(IStringValueContext)

	// Set_a2ml sets the _a2ml rule contexts.
	Set_a2ml(IA2mlContext)

	// Set_ifData sets the _ifData rule contexts.
	Set_ifData(IIfDataContext)

	// Set_axisPts sets the _axisPts rule contexts.
	Set_axisPts(IAxisPtsContext)

	// Set_characteristic sets the _characteristic rule contexts.
	Set_characteristic(ICharacteristicContext)

	// Set_compuMethod sets the _compuMethod rule contexts.
	Set_compuMethod(ICompuMethodContext)

	// Set_compuTab sets the _compuTab rule contexts.
	Set_compuTab(ICompuTabContext)

	// Set_compuVTab sets the _compuVTab rule contexts.
	Set_compuVTab(ICompuVTabContext)

	// Set_compuVTabRange sets the _compuVTabRange rule contexts.
	Set_compuVTabRange(ICompuVTabRangeContext)

	// Set_frame sets the _frame rule contexts.
	Set_frame(IFrameContext)

	// Set_function sets the _function rule contexts.
	Set_function(IFunctionContext)

	// Set_group sets the _group rule contexts.
	Set_group(IGroupContext)

	// Set_instance sets the _instance rule contexts.
	Set_instance(IInstanceContext)

	// Set_measurement sets the _measurement rule contexts.
	Set_measurement(IMeasurementContext)

	// Set_modCommon sets the _modCommon rule contexts.
	Set_modCommon(IModCommonContext)

	// Set_modPar sets the _modPar rule contexts.
	Set_modPar(IModParContext)

	// Set_recordLayout sets the _recordLayout rule contexts.
	Set_recordLayout(IRecordLayoutContext)

	// Set_typedefCharacteristic sets the _typedefCharacteristic rule contexts.
	Set_typedefCharacteristic(ITypedefCharacteristicContext)

	// Set_typedefMeasurement sets the _typedefMeasurement rule contexts.
	Set_typedefMeasurement(ITypedefMeasurementContext)

	// Set_typedefStructure sets the _typedefStructure rule contexts.
	Set_typedefStructure(ITypedefStructureContext)

	// Set_unit sets the _unit rule contexts.
	Set_unit(IUnitContext)

	// Set_userRights sets the _userRights rule contexts.
	Set_userRights(IUserRightsContext)

	// Set_variantCoding sets the _variantCoding rule contexts.
	Set_variantCoding(IVariantCodingContext)

	// GetV_a2ml returns the v_a2ml rule context list.
	GetV_a2ml() []IA2mlContext

	// GetV_ifData returns the v_ifData rule context list.
	GetV_ifData() []IIfDataContext

	// GetV_axisPts returns the v_axisPts rule context list.
	GetV_axisPts() []IAxisPtsContext

	// GetV_characteristic returns the v_characteristic rule context list.
	GetV_characteristic() []ICharacteristicContext

	// GetV_compuMethod returns the v_compuMethod rule context list.
	GetV_compuMethod() []ICompuMethodContext

	// GetV_compuTab returns the v_compuTab rule context list.
	GetV_compuTab() []ICompuTabContext

	// GetV_compuVtab returns the v_compuVtab rule context list.
	GetV_compuVtab() []ICompuVTabContext

	// GetV_compuVtabRange returns the v_compuVtabRange rule context list.
	GetV_compuVtabRange() []ICompuVTabRangeContext

	// GetV_frame returns the v_frame rule context list.
	GetV_frame() []IFrameContext

	// GetV_function returns the v_function rule context list.
	GetV_function() []IFunctionContext

	// GetV_group returns the v_group rule context list.
	GetV_group() []IGroupContext

	// GetV_instance returns the v_instance rule context list.
	GetV_instance() []IInstanceContext

	// GetV_measurement returns the v_measurement rule context list.
	GetV_measurement() []IMeasurementContext

	// GetV_modCommon returns the v_modCommon rule context list.
	GetV_modCommon() []IModCommonContext

	// GetV_modPar returns the v_modPar rule context list.
	GetV_modPar() []IModParContext

	// GetV_recordLayout returns the v_recordLayout rule context list.
	GetV_recordLayout() []IRecordLayoutContext

	// GetV_typedefCharacteristic returns the v_typedefCharacteristic rule context list.
	GetV_typedefCharacteristic() []ITypedefCharacteristicContext

	// GetV_typedefMeasurement returns the v_typedefMeasurement rule context list.
	GetV_typedefMeasurement() []ITypedefMeasurementContext

	// GetV_typedefStructure returns the v_typedefStructure rule context list.
	GetV_typedefStructure() []ITypedefStructureContext

	// GetV_unit returns the v_unit rule context list.
	GetV_unit() []IUnitContext

	// GetV_userRights returns the v_userRights rule context list.
	GetV_userRights() []IUserRightsContext

	// GetV_variantCoding returns the v_variantCoding rule context list.
	GetV_variantCoding() []IVariantCodingContext

	// SetV_a2ml sets the v_a2ml rule context list.
	SetV_a2ml([]IA2mlContext)

	// SetV_ifData sets the v_ifData rule context list.
	SetV_ifData([]IIfDataContext)

	// SetV_axisPts sets the v_axisPts rule context list.
	SetV_axisPts([]IAxisPtsContext)

	// SetV_characteristic sets the v_characteristic rule context list.
	SetV_characteristic([]ICharacteristicContext)

	// SetV_compuMethod sets the v_compuMethod rule context list.
	SetV_compuMethod([]ICompuMethodContext)

	// SetV_compuTab sets the v_compuTab rule context list.
	SetV_compuTab([]ICompuTabContext)

	// SetV_compuVtab sets the v_compuVtab rule context list.
	SetV_compuVtab([]ICompuVTabContext)

	// SetV_compuVtabRange sets the v_compuVtabRange rule context list.
	SetV_compuVtabRange([]ICompuVTabRangeContext)

	// SetV_frame sets the v_frame rule context list.
	SetV_frame([]IFrameContext)

	// SetV_function sets the v_function rule context list.
	SetV_function([]IFunctionContext)

	// SetV_group sets the v_group rule context list.
	SetV_group([]IGroupContext)

	// SetV_instance sets the v_instance rule context list.
	SetV_instance([]IInstanceContext)

	// SetV_measurement sets the v_measurement rule context list.
	SetV_measurement([]IMeasurementContext)

	// SetV_modCommon sets the v_modCommon rule context list.
	SetV_modCommon([]IModCommonContext)

	// SetV_modPar sets the v_modPar rule context list.
	SetV_modPar([]IModParContext)

	// SetV_recordLayout sets the v_recordLayout rule context list.
	SetV_recordLayout([]IRecordLayoutContext)

	// SetV_typedefCharacteristic sets the v_typedefCharacteristic rule context list.
	SetV_typedefCharacteristic([]ITypedefCharacteristicContext)

	// SetV_typedefMeasurement sets the v_typedefMeasurement rule context list.
	SetV_typedefMeasurement([]ITypedefMeasurementContext)

	// SetV_typedefStructure sets the v_typedefStructure rule context list.
	SetV_typedefStructure([]ITypedefStructureContext)

	// SetV_unit sets the v_unit rule context list.
	SetV_unit([]IUnitContext)

	// SetV_userRights sets the v_userRights rule context list.
	SetV_userRights([]IUserRightsContext)

	// SetV_variantCoding sets the v_variantCoding rule context list.
	SetV_variantCoding([]IVariantCodingContext)

	// Getter signatures
	BEGIN() antlr.TerminalNode
	END() antlr.TerminalNode
	IdentifierValue() IIdentifierValueContext
	StringValue() IStringValueContext
	AllA2ml() []IA2mlContext
	A2ml(i int) IA2mlContext
	AllIfData() []IIfDataContext
	IfData(i int) IIfDataContext
	AllAxisPts() []IAxisPtsContext
	AxisPts(i int) IAxisPtsContext
	AllCharacteristic() []ICharacteristicContext
	Characteristic(i int) ICharacteristicContext
	AllCompuMethod() []ICompuMethodContext
	CompuMethod(i int) ICompuMethodContext
	AllCompuTab() []ICompuTabContext
	CompuTab(i int) ICompuTabContext
	AllCompuVTab() []ICompuVTabContext
	CompuVTab(i int) ICompuVTabContext
	AllCompuVTabRange() []ICompuVTabRangeContext
	CompuVTabRange(i int) ICompuVTabRangeContext
	AllFrame() []IFrameContext
	Frame(i int) IFrameContext
	AllFunction() []IFunctionContext
	Function(i int) IFunctionContext
	AllGroup() []IGroupContext
	Group(i int) IGroupContext
	AllInstance() []IInstanceContext
	Instance(i int) IInstanceContext
	AllMeasurement() []IMeasurementContext
	Measurement(i int) IMeasurementContext
	AllModCommon() []IModCommonContext
	ModCommon(i int) IModCommonContext
	AllModPar() []IModParContext
	ModPar(i int) IModParContext
	AllRecordLayout() []IRecordLayoutContext
	RecordLayout(i int) IRecordLayoutContext
	AllTypedefCharacteristic() []ITypedefCharacteristicContext
	TypedefCharacteristic(i int) ITypedefCharacteristicContext
	AllTypedefMeasurement() []ITypedefMeasurementContext
	TypedefMeasurement(i int) ITypedefMeasurementContext
	AllTypedefStructure() []ITypedefStructureContext
	TypedefStructure(i int) ITypedefStructureContext
	AllUnit() []IUnitContext
	Unit(i int) IUnitContext
	AllUserRights() []IUserRightsContext
	UserRights(i int) IUserRightsContext
	AllVariantCoding() []IVariantCodingContext
	VariantCoding(i int) IVariantCodingContext

	// IsModuleContext differentiates from other interfaces.
	IsModuleContext()
}

type ModuleContext struct {
	*antlr.BaseParserRuleContext
	parser                  antlr.Parser
	name                    IIdentifierValueContext
	longIdentifier          IStringValueContext
	_a2ml                   IA2mlContext
	v_a2ml                  []IA2mlContext
	_ifData                 IIfDataContext
	v_ifData                []IIfDataContext
	_axisPts                IAxisPtsContext
	v_axisPts               []IAxisPtsContext
	_characteristic         ICharacteristicContext
	v_characteristic        []ICharacteristicContext
	_compuMethod            ICompuMethodContext
	v_compuMethod           []ICompuMethodContext
	_compuTab               ICompuTabContext
	v_compuTab              []ICompuTabContext
	_compuVTab              ICompuVTabContext
	v_compuVtab             []ICompuVTabContext
	_compuVTabRange         ICompuVTabRangeContext
	v_compuVtabRange        []ICompuVTabRangeContext
	_frame                  IFrameContext
	v_frame                 []IFrameContext
	_function               IFunctionContext
	v_function              []IFunctionContext
	_group                  IGroupContext
	v_group                 []IGroupContext
	_instance               IInstanceContext
	v_instance              []IInstanceContext
	_measurement            IMeasurementContext
	v_measurement           []IMeasurementContext
	_modCommon              IModCommonContext
	v_modCommon             []IModCommonContext
	_modPar                 IModParContext
	v_modPar                []IModParContext
	_recordLayout           IRecordLayoutContext
	v_recordLayout          []IRecordLayoutContext
	_typedefCharacteristic  ITypedefCharacteristicContext
	v_typedefCharacteristic []ITypedefCharacteristicContext
	_typedefMeasurement     ITypedefMeasurementContext
	v_typedefMeasurement    []ITypedefMeasurementContext
	_typedefStructure       ITypedefStructureContext
	v_typedefStructure      []ITypedefStructureContext
	_unit                   IUnitContext
	v_unit                  []IUnitContext
	_userRights             IUserRightsContext
	v_userRights            []IUserRightsContext
	_variantCoding          IVariantCodingContext
	v_variantCoding         []IVariantCodingContext
}

func NewEmptyModuleContext() *ModuleContext {
	var p = new(ModuleContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_module
	return p
}

func (*ModuleContext) IsModuleContext() {}

func NewModuleContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ModuleContext {
	var p = new(ModuleContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_module

	return p
}

func (s *ModuleContext) GetParser() antlr.Parser { return s.parser }

func (s *ModuleContext) GetName() IIdentifierValueContext { return s.name }

func (s *ModuleContext) GetLongIdentifier() IStringValueContext { return s.longIdentifier }

func (s *ModuleContext) Get_a2ml() IA2mlContext { return s._a2ml }

func (s *ModuleContext) Get_ifData() IIfDataContext { return s._ifData }

func (s *ModuleContext) Get_axisPts() IAxisPtsContext { return s._axisPts }

func (s *ModuleContext) Get_characteristic() ICharacteristicContext { return s._characteristic }

func (s *ModuleContext) Get_compuMethod() ICompuMethodContext { return s._compuMethod }

func (s *ModuleContext) Get_compuTab() ICompuTabContext { return s._compuTab }

func (s *ModuleContext) Get_compuVTab() ICompuVTabContext { return s._compuVTab }

func (s *ModuleContext) Get_compuVTabRange() ICompuVTabRangeContext { return s._compuVTabRange }

func (s *ModuleContext) Get_frame() IFrameContext { return s._frame }

func (s *ModuleContext) Get_function() IFunctionContext { return s._function }

func (s *ModuleContext) Get_group() IGroupContext { return s._group }

func (s *ModuleContext) Get_instance() IInstanceContext { return s._instance }

func (s *ModuleContext) Get_measurement() IMeasurementContext { return s._measurement }

func (s *ModuleContext) Get_modCommon() IModCommonContext { return s._modCommon }

func (s *ModuleContext) Get_modPar() IModParContext { return s._modPar }

func (s *ModuleContext) Get_recordLayout() IRecordLayoutContext { return s._recordLayout }

func (s *ModuleContext) Get_typedefCharacteristic() ITypedefCharacteristicContext {
	return s._typedefCharacteristic
}

func (s *ModuleContext) Get_typedefMeasurement() ITypedefMeasurementContext {
	return s._typedefMeasurement
}

func (s *ModuleContext) Get_typedefStructure() ITypedefStructureContext { return s._typedefStructure }

func (s *ModuleContext) Get_unit() IUnitContext { return s._unit }

func (s *ModuleContext) Get_userRights() IUserRightsContext { return s._userRights }

func (s *ModuleContext) Get_variantCoding() IVariantCodingContext { return s._variantCoding }

func (s *ModuleContext) SetName(v IIdentifierValueContext) { s.name = v }

func (s *ModuleContext) SetLongIdentifier(v IStringValueContext) { s.longIdentifier = v }

func (s *ModuleContext) Set_a2ml(v IA2mlContext) { s._a2ml = v }

func (s *ModuleContext) Set_ifData(v IIfDataContext) { s._ifData = v }

func (s *ModuleContext) Set_axisPts(v IAxisPtsContext) { s._axisPts = v }

func (s *ModuleContext) Set_characteristic(v ICharacteristicContext) { s._characteristic = v }

func (s *ModuleContext) Set_compuMethod(v ICompuMethodContext) { s._compuMethod = v }

func (s *ModuleContext) Set_compuTab(v ICompuTabContext) { s._compuTab = v }

func (s *ModuleContext) Set_compuVTab(v ICompuVTabContext) { s._compuVTab = v }

func (s *ModuleContext) Set_compuVTabRange(v ICompuVTabRangeContext) { s._compuVTabRange = v }

func (s *ModuleContext) Set_frame(v IFrameContext) { s._frame = v }

func (s *ModuleContext) Set_function(v IFunctionContext) { s._function = v }

func (s *ModuleContext) Set_group(v IGroupContext) { s._group = v }

func (s *ModuleContext) Set_instance(v IInstanceContext) { s._instance = v }

func (s *ModuleContext) Set_measurement(v IMeasurementContext) { s._measurement = v }

func (s *ModuleContext) Set_modCommon(v IModCommonContext) { s._modCommon = v }

func (s *ModuleContext) Set_modPar(v IModParContext) { s._modPar = v }

func (s *ModuleContext) Set_recordLayout(v IRecordLayoutContext) { s._recordLayout = v }

func (s *ModuleContext) Set_typedefCharacteristic(v ITypedefCharacteristicContext) {
	s._typedefCharacteristic = v
}

func (s *ModuleContext) Set_typedefMeasurement(v ITypedefMeasurementContext) {
	s._typedefMeasurement = v
}

func (s *ModuleContext) Set_typedefStructure(v ITypedefStructureContext) { s._typedefStructure = v }

func (s *ModuleContext) Set_unit(v IUnitContext) { s._unit = v }

func (s *ModuleContext) Set_userRights(v IUserRightsContext) { s._userRights = v }

func (s *ModuleContext) Set_variantCoding(v IVariantCodingContext) { s._variantCoding = v }

func (s *ModuleContext) GetV_a2ml() []IA2mlContext { return s.v_a2ml }

func (s *ModuleContext) GetV_ifData() []IIfDataContext { return s.v_ifData }

func (s *ModuleContext) GetV_axisPts() []IAxisPtsContext { return s.v_axisPts }

func (s *ModuleContext) GetV_characteristic() []ICharacteristicContext { return s.v_characteristic }

func (s *ModuleContext) GetV_compuMethod() []ICompuMethodContext { return s.v_compuMethod }

func (s *ModuleContext) GetV_compuTab() []ICompuTabContext { return s.v_compuTab }

func (s *ModuleContext) GetV_compuVtab() []ICompuVTabContext { return s.v_compuVtab }

func (s *ModuleContext) GetV_compuVtabRange() []ICompuVTabRangeContext { return s.v_compuVtabRange }

func (s *ModuleContext) GetV_frame() []IFrameContext { return s.v_frame }

func (s *ModuleContext) GetV_function() []IFunctionContext { return s.v_function }

func (s *ModuleContext) GetV_group() []IGroupContext { return s.v_group }

func (s *ModuleContext) GetV_instance() []IInstanceContext { return s.v_instance }

func (s *ModuleContext) GetV_measurement() []IMeasurementContext { return s.v_measurement }

func (s *ModuleContext) GetV_modCommon() []IModCommonContext { return s.v_modCommon }

func (s *ModuleContext) GetV_modPar() []IModParContext { return s.v_modPar }

func (s *ModuleContext) GetV_recordLayout() []IRecordLayoutContext { return s.v_recordLayout }

func (s *ModuleContext) GetV_typedefCharacteristic() []ITypedefCharacteristicContext {
	return s.v_typedefCharacteristic
}

func (s *ModuleContext) GetV_typedefMeasurement() []ITypedefMeasurementContext {
	return s.v_typedefMeasurement
}

func (s *ModuleContext) GetV_typedefStructure() []ITypedefStructureContext {
	return s.v_typedefStructure
}

func (s *ModuleContext) GetV_unit() []IUnitContext { return s.v_unit }

func (s *ModuleContext) GetV_userRights() []IUserRightsContext { return s.v_userRights }

func (s *ModuleContext) GetV_variantCoding() []IVariantCodingContext { return s.v_variantCoding }

func (s *ModuleContext) SetV_a2ml(v []IA2mlContext) { s.v_a2ml = v }

func (s *ModuleContext) SetV_ifData(v []IIfDataContext) { s.v_ifData = v }

func (s *ModuleContext) SetV_axisPts(v []IAxisPtsContext) { s.v_axisPts = v }

func (s *ModuleContext) SetV_characteristic(v []ICharacteristicContext) { s.v_characteristic = v }

func (s *ModuleContext) SetV_compuMethod(v []ICompuMethodContext) { s.v_compuMethod = v }

func (s *ModuleContext) SetV_compuTab(v []ICompuTabContext) { s.v_compuTab = v }

func (s *ModuleContext) SetV_compuVtab(v []ICompuVTabContext) { s.v_compuVtab = v }

func (s *ModuleContext) SetV_compuVtabRange(v []ICompuVTabRangeContext) { s.v_compuVtabRange = v }

func (s *ModuleContext) SetV_frame(v []IFrameContext) { s.v_frame = v }

func (s *ModuleContext) SetV_function(v []IFunctionContext) { s.v_function = v }

func (s *ModuleContext) SetV_group(v []IGroupContext) { s.v_group = v }

func (s *ModuleContext) SetV_instance(v []IInstanceContext) { s.v_instance = v }

func (s *ModuleContext) SetV_measurement(v []IMeasurementContext) { s.v_measurement = v }

func (s *ModuleContext) SetV_modCommon(v []IModCommonContext) { s.v_modCommon = v }

func (s *ModuleContext) SetV_modPar(v []IModParContext) { s.v_modPar = v }

func (s *ModuleContext) SetV_recordLayout(v []IRecordLayoutContext) { s.v_recordLayout = v }

func (s *ModuleContext) SetV_typedefCharacteristic(v []ITypedefCharacteristicContext) {
	s.v_typedefCharacteristic = v
}

func (s *ModuleContext) SetV_typedefMeasurement(v []ITypedefMeasurementContext) {
	s.v_typedefMeasurement = v
}

func (s *ModuleContext) SetV_typedefStructure(v []ITypedefStructureContext) { s.v_typedefStructure = v }

func (s *ModuleContext) SetV_unit(v []IUnitContext) { s.v_unit = v }

func (s *ModuleContext) SetV_userRights(v []IUserRightsContext) { s.v_userRights = v }

func (s *ModuleContext) SetV_variantCoding(v []IVariantCodingContext) { s.v_variantCoding = v }

func (s *ModuleContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(A2LParserBEGIN, 0)
}

func (s *ModuleContext) END() antlr.TerminalNode {
	return s.GetToken(A2LParserEND, 0)
}

func (s *ModuleContext) IdentifierValue() IIdentifierValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierValueContext)
}

func (s *ModuleContext) StringValue() IStringValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringValueContext)
}

func (s *ModuleContext) AllA2ml() []IA2mlContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IA2mlContext); ok {
			len++
		}
	}

	tst := make([]IA2mlContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IA2mlContext); ok {
			tst[i] = t.(IA2mlContext)
			i++
		}
	}

	return tst
}

func (s *ModuleContext) A2ml(i int) IA2mlContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IA2mlContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IA2mlContext)
}

func (s *ModuleContext) AllIfData() []IIfDataContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIfDataContext); ok {
			len++
		}
	}

	tst := make([]IIfDataContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIfDataContext); ok {
			tst[i] = t.(IIfDataContext)
			i++
		}
	}

	return tst
}

func (s *ModuleContext) IfData(i int) IIfDataContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIfDataContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIfDataContext)
}

func (s *ModuleContext) AllAxisPts() []IAxisPtsContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAxisPtsContext); ok {
			len++
		}
	}

	tst := make([]IAxisPtsContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAxisPtsContext); ok {
			tst[i] = t.(IAxisPtsContext)
			i++
		}
	}

	return tst
}

func (s *ModuleContext) AxisPts(i int) IAxisPtsContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAxisPtsContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAxisPtsContext)
}

func (s *ModuleContext) AllCharacteristic() []ICharacteristicContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ICharacteristicContext); ok {
			len++
		}
	}

	tst := make([]ICharacteristicContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ICharacteristicContext); ok {
			tst[i] = t.(ICharacteristicContext)
			i++
		}
	}

	return tst
}

func (s *ModuleContext) Characteristic(i int) ICharacteristicContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICharacteristicContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICharacteristicContext)
}

func (s *ModuleContext) AllCompuMethod() []ICompuMethodContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ICompuMethodContext); ok {
			len++
		}
	}

	tst := make([]ICompuMethodContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ICompuMethodContext); ok {
			tst[i] = t.(ICompuMethodContext)
			i++
		}
	}

	return tst
}

func (s *ModuleContext) CompuMethod(i int) ICompuMethodContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICompuMethodContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICompuMethodContext)
}

func (s *ModuleContext) AllCompuTab() []ICompuTabContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ICompuTabContext); ok {
			len++
		}
	}

	tst := make([]ICompuTabContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ICompuTabContext); ok {
			tst[i] = t.(ICompuTabContext)
			i++
		}
	}

	return tst
}

func (s *ModuleContext) CompuTab(i int) ICompuTabContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICompuTabContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICompuTabContext)
}

func (s *ModuleContext) AllCompuVTab() []ICompuVTabContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ICompuVTabContext); ok {
			len++
		}
	}

	tst := make([]ICompuVTabContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ICompuVTabContext); ok {
			tst[i] = t.(ICompuVTabContext)
			i++
		}
	}

	return tst
}

func (s *ModuleContext) CompuVTab(i int) ICompuVTabContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICompuVTabContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICompuVTabContext)
}

func (s *ModuleContext) AllCompuVTabRange() []ICompuVTabRangeContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ICompuVTabRangeContext); ok {
			len++
		}
	}

	tst := make([]ICompuVTabRangeContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ICompuVTabRangeContext); ok {
			tst[i] = t.(ICompuVTabRangeContext)
			i++
		}
	}

	return tst
}

func (s *ModuleContext) CompuVTabRange(i int) ICompuVTabRangeContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICompuVTabRangeContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICompuVTabRangeContext)
}

func (s *ModuleContext) AllFrame() []IFrameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IFrameContext); ok {
			len++
		}
	}

	tst := make([]IFrameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IFrameContext); ok {
			tst[i] = t.(IFrameContext)
			i++
		}
	}

	return tst
}

func (s *ModuleContext) Frame(i int) IFrameContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFrameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFrameContext)
}

func (s *ModuleContext) AllFunction() []IFunctionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IFunctionContext); ok {
			len++
		}
	}

	tst := make([]IFunctionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IFunctionContext); ok {
			tst[i] = t.(IFunctionContext)
			i++
		}
	}

	return tst
}

func (s *ModuleContext) Function(i int) IFunctionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunctionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunctionContext)
}

func (s *ModuleContext) AllGroup() []IGroupContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IGroupContext); ok {
			len++
		}
	}

	tst := make([]IGroupContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IGroupContext); ok {
			tst[i] = t.(IGroupContext)
			i++
		}
	}

	return tst
}

func (s *ModuleContext) Group(i int) IGroupContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGroupContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGroupContext)
}

func (s *ModuleContext) AllInstance() []IInstanceContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IInstanceContext); ok {
			len++
		}
	}

	tst := make([]IInstanceContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IInstanceContext); ok {
			tst[i] = t.(IInstanceContext)
			i++
		}
	}

	return tst
}

func (s *ModuleContext) Instance(i int) IInstanceContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInstanceContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInstanceContext)
}

func (s *ModuleContext) AllMeasurement() []IMeasurementContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IMeasurementContext); ok {
			len++
		}
	}

	tst := make([]IMeasurementContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IMeasurementContext); ok {
			tst[i] = t.(IMeasurementContext)
			i++
		}
	}

	return tst
}

func (s *ModuleContext) Measurement(i int) IMeasurementContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMeasurementContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMeasurementContext)
}

func (s *ModuleContext) AllModCommon() []IModCommonContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IModCommonContext); ok {
			len++
		}
	}

	tst := make([]IModCommonContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IModCommonContext); ok {
			tst[i] = t.(IModCommonContext)
			i++
		}
	}

	return tst
}

func (s *ModuleContext) ModCommon(i int) IModCommonContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IModCommonContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IModCommonContext)
}

func (s *ModuleContext) AllModPar() []IModParContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IModParContext); ok {
			len++
		}
	}

	tst := make([]IModParContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IModParContext); ok {
			tst[i] = t.(IModParContext)
			i++
		}
	}

	return tst
}

func (s *ModuleContext) ModPar(i int) IModParContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IModParContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IModParContext)
}

func (s *ModuleContext) AllRecordLayout() []IRecordLayoutContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IRecordLayoutContext); ok {
			len++
		}
	}

	tst := make([]IRecordLayoutContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IRecordLayoutContext); ok {
			tst[i] = t.(IRecordLayoutContext)
			i++
		}
	}

	return tst
}

func (s *ModuleContext) RecordLayout(i int) IRecordLayoutContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRecordLayoutContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRecordLayoutContext)
}

func (s *ModuleContext) AllTypedefCharacteristic() []ITypedefCharacteristicContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITypedefCharacteristicContext); ok {
			len++
		}
	}

	tst := make([]ITypedefCharacteristicContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITypedefCharacteristicContext); ok {
			tst[i] = t.(ITypedefCharacteristicContext)
			i++
		}
	}

	return tst
}

func (s *ModuleContext) TypedefCharacteristic(i int) ITypedefCharacteristicContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypedefCharacteristicContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypedefCharacteristicContext)
}

func (s *ModuleContext) AllTypedefMeasurement() []ITypedefMeasurementContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITypedefMeasurementContext); ok {
			len++
		}
	}

	tst := make([]ITypedefMeasurementContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITypedefMeasurementContext); ok {
			tst[i] = t.(ITypedefMeasurementContext)
			i++
		}
	}

	return tst
}

func (s *ModuleContext) TypedefMeasurement(i int) ITypedefMeasurementContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypedefMeasurementContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypedefMeasurementContext)
}

func (s *ModuleContext) AllTypedefStructure() []ITypedefStructureContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITypedefStructureContext); ok {
			len++
		}
	}

	tst := make([]ITypedefStructureContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITypedefStructureContext); ok {
			tst[i] = t.(ITypedefStructureContext)
			i++
		}
	}

	return tst
}

func (s *ModuleContext) TypedefStructure(i int) ITypedefStructureContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypedefStructureContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypedefStructureContext)
}

func (s *ModuleContext) AllUnit() []IUnitContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IUnitContext); ok {
			len++
		}
	}

	tst := make([]IUnitContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IUnitContext); ok {
			tst[i] = t.(IUnitContext)
			i++
		}
	}

	return tst
}

func (s *ModuleContext) Unit(i int) IUnitContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnitContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnitContext)
}

func (s *ModuleContext) AllUserRights() []IUserRightsContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IUserRightsContext); ok {
			len++
		}
	}

	tst := make([]IUserRightsContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IUserRightsContext); ok {
			tst[i] = t.(IUserRightsContext)
			i++
		}
	}

	return tst
}

func (s *ModuleContext) UserRights(i int) IUserRightsContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUserRightsContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUserRightsContext)
}

func (s *ModuleContext) AllVariantCoding() []IVariantCodingContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IVariantCodingContext); ok {
			len++
		}
	}

	tst := make([]IVariantCodingContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IVariantCodingContext); ok {
			tst[i] = t.(IVariantCodingContext)
			i++
		}
	}

	return tst
}

func (s *ModuleContext) VariantCoding(i int) IVariantCodingContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVariantCodingContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVariantCodingContext)
}

func (s *ModuleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ModuleContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ModuleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterModule(s)
	}
}

func (s *ModuleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitModule(s)
	}
}

func (s *ModuleContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitModule(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) Module() (localctx IModuleContext) {
	this := p
	_ = this

	localctx = NewModuleContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 80, A2LParserRULE_module)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(624)
		p.Match(A2LParserBEGIN)
	}
	{
		p.SetState(625)
		p.Match(A2LParserT__52)
	}
	{
		p.SetState(626)

		var _x = p.IdentifierValue()

		localctx.(*ModuleContext).name = _x
	}
	{
		p.SetState(627)

		var _x = p.StringValue()

		localctx.(*ModuleContext).longIdentifier = _x
	}
	p.SetState(652)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == A2LParserBEGIN {
		p.SetState(650)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 13, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(628)

				var _x = p.A2ml()

				localctx.(*ModuleContext)._a2ml = _x
			}
			localctx.(*ModuleContext).v_a2ml = append(localctx.(*ModuleContext).v_a2ml, localctx.(*ModuleContext)._a2ml)

		case 2:
			{
				p.SetState(629)

				var _x = p.IfData()

				localctx.(*ModuleContext)._ifData = _x
			}
			localctx.(*ModuleContext).v_ifData = append(localctx.(*ModuleContext).v_ifData, localctx.(*ModuleContext)._ifData)

		case 3:
			{
				p.SetState(630)

				var _x = p.AxisPts()

				localctx.(*ModuleContext)._axisPts = _x
			}
			localctx.(*ModuleContext).v_axisPts = append(localctx.(*ModuleContext).v_axisPts, localctx.(*ModuleContext)._axisPts)

		case 4:
			{
				p.SetState(631)

				var _x = p.Characteristic()

				localctx.(*ModuleContext)._characteristic = _x
			}
			localctx.(*ModuleContext).v_characteristic = append(localctx.(*ModuleContext).v_characteristic, localctx.(*ModuleContext)._characteristic)

		case 5:
			{
				p.SetState(632)

				var _x = p.CompuMethod()

				localctx.(*ModuleContext)._compuMethod = _x
			}
			localctx.(*ModuleContext).v_compuMethod = append(localctx.(*ModuleContext).v_compuMethod, localctx.(*ModuleContext)._compuMethod)

		case 6:
			{
				p.SetState(633)

				var _x = p.CompuTab()

				localctx.(*ModuleContext)._compuTab = _x
			}
			localctx.(*ModuleContext).v_compuTab = append(localctx.(*ModuleContext).v_compuTab, localctx.(*ModuleContext)._compuTab)

		case 7:
			{
				p.SetState(634)

				var _x = p.CompuVTab()

				localctx.(*ModuleContext)._compuVTab = _x
			}
			localctx.(*ModuleContext).v_compuVtab = append(localctx.(*ModuleContext).v_compuVtab, localctx.(*ModuleContext)._compuVTab)

		case 8:
			{
				p.SetState(635)

				var _x = p.CompuVTabRange()

				localctx.(*ModuleContext)._compuVTabRange = _x
			}
			localctx.(*ModuleContext).v_compuVtabRange = append(localctx.(*ModuleContext).v_compuVtabRange, localctx.(*ModuleContext)._compuVTabRange)

		case 9:
			{
				p.SetState(636)

				var _x = p.Frame()

				localctx.(*ModuleContext)._frame = _x
			}
			localctx.(*ModuleContext).v_frame = append(localctx.(*ModuleContext).v_frame, localctx.(*ModuleContext)._frame)

		case 10:
			{
				p.SetState(637)

				var _x = p.Function()

				localctx.(*ModuleContext)._function = _x
			}
			localctx.(*ModuleContext).v_function = append(localctx.(*ModuleContext).v_function, localctx.(*ModuleContext)._function)

		case 11:
			{
				p.SetState(638)

				var _x = p.Group()

				localctx.(*ModuleContext)._group = _x
			}
			localctx.(*ModuleContext).v_group = append(localctx.(*ModuleContext).v_group, localctx.(*ModuleContext)._group)

		case 12:
			{
				p.SetState(639)

				var _x = p.Instance()

				localctx.(*ModuleContext)._instance = _x
			}
			localctx.(*ModuleContext).v_instance = append(localctx.(*ModuleContext).v_instance, localctx.(*ModuleContext)._instance)

		case 13:
			{
				p.SetState(640)

				var _x = p.Measurement()

				localctx.(*ModuleContext)._measurement = _x
			}
			localctx.(*ModuleContext).v_measurement = append(localctx.(*ModuleContext).v_measurement, localctx.(*ModuleContext)._measurement)

		case 14:
			{
				p.SetState(641)

				var _x = p.ModCommon()

				localctx.(*ModuleContext)._modCommon = _x
			}
			localctx.(*ModuleContext).v_modCommon = append(localctx.(*ModuleContext).v_modCommon, localctx.(*ModuleContext)._modCommon)

		case 15:
			{
				p.SetState(642)

				var _x = p.ModPar()

				localctx.(*ModuleContext)._modPar = _x
			}
			localctx.(*ModuleContext).v_modPar = append(localctx.(*ModuleContext).v_modPar, localctx.(*ModuleContext)._modPar)

		case 16:
			{
				p.SetState(643)

				var _x = p.RecordLayout()

				localctx.(*ModuleContext)._recordLayout = _x
			}
			localctx.(*ModuleContext).v_recordLayout = append(localctx.(*ModuleContext).v_recordLayout, localctx.(*ModuleContext)._recordLayout)

		case 17:
			{
				p.SetState(644)

				var _x = p.TypedefCharacteristic()

				localctx.(*ModuleContext)._typedefCharacteristic = _x
			}
			localctx.(*ModuleContext).v_typedefCharacteristic = append(localctx.(*ModuleContext).v_typedefCharacteristic, localctx.(*ModuleContext)._typedefCharacteristic)

		case 18:
			{
				p.SetState(645)

				var _x = p.TypedefMeasurement()

				localctx.(*ModuleContext)._typedefMeasurement = _x
			}
			localctx.(*ModuleContext).v_typedefMeasurement = append(localctx.(*ModuleContext).v_typedefMeasurement, localctx.(*ModuleContext)._typedefMeasurement)

		case 19:
			{
				p.SetState(646)

				var _x = p.TypedefStructure()

				localctx.(*ModuleContext)._typedefStructure = _x
			}
			localctx.(*ModuleContext).v_typedefStructure = append(localctx.(*ModuleContext).v_typedefStructure, localctx.(*ModuleContext)._typedefStructure)

		case 20:
			{
				p.SetState(647)

				var _x = p.Unit()

				localctx.(*ModuleContext)._unit = _x
			}
			localctx.(*ModuleContext).v_unit = append(localctx.(*ModuleContext).v_unit, localctx.(*ModuleContext)._unit)

		case 21:
			{
				p.SetState(648)

				var _x = p.UserRights()

				localctx.(*ModuleContext)._userRights = _x
			}
			localctx.(*ModuleContext).v_userRights = append(localctx.(*ModuleContext).v_userRights, localctx.(*ModuleContext)._userRights)

		case 22:
			{
				p.SetState(649)

				var _x = p.VariantCoding()

				localctx.(*ModuleContext)._variantCoding = _x
			}
			localctx.(*ModuleContext).v_variantCoding = append(localctx.(*ModuleContext).v_variantCoding, localctx.(*ModuleContext)._variantCoding)

		}

		p.SetState(654)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(655)
		p.Match(A2LParserEND)
	}
	{
		p.SetState(656)
		p.Match(A2LParserT__52)
	}

	return localctx
}

// IAxisPtsContext is an interface to support dynamic dispatch.
type IAxisPtsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierValueContext

	// GetLongIdentifier returns the longIdentifier rule contexts.
	GetLongIdentifier() IStringValueContext

	// GetAddress returns the address rule contexts.
	GetAddress() IIntegerValueContext

	// GetInputQuantity returns the inputQuantity rule contexts.
	GetInputQuantity() IIdentifierValueContext

	// GetVDeposit returns the vDeposit rule contexts.
	GetVDeposit() IIdentifierValueContext

	// GetMaxDiff returns the maxDiff rule contexts.
	GetMaxDiff() INumericValueContext

	// GetConversion returns the conversion rule contexts.
	GetConversion() IIdentifierValueContext

	// GetMaxAxisPoints returns the maxAxisPoints rule contexts.
	GetMaxAxisPoints() IIntegerValueContext

	// GetLowerLimit returns the lowerLimit rule contexts.
	GetLowerLimit() INumericValueContext

	// GetUpperLimit returns the upperLimit rule contexts.
	GetUpperLimit() INumericValueContext

	// Get_annotation returns the _annotation rule contexts.
	Get_annotation() IAnnotationContext

	// Get_byteOrder returns the _byteOrder rule contexts.
	Get_byteOrder() IByteOrderContext

	// Get_calibrationAccess returns the _calibrationAccess rule contexts.
	Get_calibrationAccess() ICalibrationAccessContext

	// Get_deposit returns the _deposit rule contexts.
	Get_deposit() IDepositContext

	// Get_displayIdentifier returns the _displayIdentifier rule contexts.
	Get_displayIdentifier() IDisplayIdentifierContext

	// Get_ecuAddressExtension returns the _ecuAddressExtension rule contexts.
	Get_ecuAddressExtension() IEcuAddressExtensionContext

	// Get_extendedLimits returns the _extendedLimits rule contexts.
	Get_extendedLimits() IExtendedLimitsContext

	// Get_format returns the _format rule contexts.
	Get_format() IFormatContext

	// Get_functionList returns the _functionList rule contexts.
	Get_functionList() IFunctionListContext

	// Get_guardRails returns the _guardRails rule contexts.
	Get_guardRails() IGuardRailsContext

	// Get_ifData returns the _ifData rule contexts.
	Get_ifData() IIfDataContext

	// Get_monotony returns the _monotony rule contexts.
	Get_monotony() IMonotonyContext

	// Get_physUnit returns the _physUnit rule contexts.
	Get_physUnit() IPhysUnitContext

	// Get_readOnly returns the _readOnly rule contexts.
	Get_readOnly() IReadOnlyContext

	// Get_refMemorySegment returns the _refMemorySegment rule contexts.
	Get_refMemorySegment() IRefMemorySegmentContext

	// Get_stepSize returns the _stepSize rule contexts.
	Get_stepSize() IStepSizeContext

	// Get_symbolLink returns the _symbolLink rule contexts.
	Get_symbolLink() ISymbolLinkContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierValueContext)

	// SetLongIdentifier sets the longIdentifier rule contexts.
	SetLongIdentifier(IStringValueContext)

	// SetAddress sets the address rule contexts.
	SetAddress(IIntegerValueContext)

	// SetInputQuantity sets the inputQuantity rule contexts.
	SetInputQuantity(IIdentifierValueContext)

	// SetVDeposit sets the vDeposit rule contexts.
	SetVDeposit(IIdentifierValueContext)

	// SetMaxDiff sets the maxDiff rule contexts.
	SetMaxDiff(INumericValueContext)

	// SetConversion sets the conversion rule contexts.
	SetConversion(IIdentifierValueContext)

	// SetMaxAxisPoints sets the maxAxisPoints rule contexts.
	SetMaxAxisPoints(IIntegerValueContext)

	// SetLowerLimit sets the lowerLimit rule contexts.
	SetLowerLimit(INumericValueContext)

	// SetUpperLimit sets the upperLimit rule contexts.
	SetUpperLimit(INumericValueContext)

	// Set_annotation sets the _annotation rule contexts.
	Set_annotation(IAnnotationContext)

	// Set_byteOrder sets the _byteOrder rule contexts.
	Set_byteOrder(IByteOrderContext)

	// Set_calibrationAccess sets the _calibrationAccess rule contexts.
	Set_calibrationAccess(ICalibrationAccessContext)

	// Set_deposit sets the _deposit rule contexts.
	Set_deposit(IDepositContext)

	// Set_displayIdentifier sets the _displayIdentifier rule contexts.
	Set_displayIdentifier(IDisplayIdentifierContext)

	// Set_ecuAddressExtension sets the _ecuAddressExtension rule contexts.
	Set_ecuAddressExtension(IEcuAddressExtensionContext)

	// Set_extendedLimits sets the _extendedLimits rule contexts.
	Set_extendedLimits(IExtendedLimitsContext)

	// Set_format sets the _format rule contexts.
	Set_format(IFormatContext)

	// Set_functionList sets the _functionList rule contexts.
	Set_functionList(IFunctionListContext)

	// Set_guardRails sets the _guardRails rule contexts.
	Set_guardRails(IGuardRailsContext)

	// Set_ifData sets the _ifData rule contexts.
	Set_ifData(IIfDataContext)

	// Set_monotony sets the _monotony rule contexts.
	Set_monotony(IMonotonyContext)

	// Set_physUnit sets the _physUnit rule contexts.
	Set_physUnit(IPhysUnitContext)

	// Set_readOnly sets the _readOnly rule contexts.
	Set_readOnly(IReadOnlyContext)

	// Set_refMemorySegment sets the _refMemorySegment rule contexts.
	Set_refMemorySegment(IRefMemorySegmentContext)

	// Set_stepSize sets the _stepSize rule contexts.
	Set_stepSize(IStepSizeContext)

	// Set_symbolLink sets the _symbolLink rule contexts.
	Set_symbolLink(ISymbolLinkContext)

	// GetV_annotation returns the v_annotation rule context list.
	GetV_annotation() []IAnnotationContext

	// GetV_byteOrder returns the v_byteOrder rule context list.
	GetV_byteOrder() []IByteOrderContext

	// GetV_calibrationAccess returns the v_calibrationAccess rule context list.
	GetV_calibrationAccess() []ICalibrationAccessContext

	// GetV_deposit returns the v_deposit rule context list.
	GetV_deposit() []IDepositContext

	// GetV_displayIdentifier returns the v_displayIdentifier rule context list.
	GetV_displayIdentifier() []IDisplayIdentifierContext

	// GetV_ecuAddressExtension returns the v_ecuAddressExtension rule context list.
	GetV_ecuAddressExtension() []IEcuAddressExtensionContext

	// GetV_extendedLimits returns the v_extendedLimits rule context list.
	GetV_extendedLimits() []IExtendedLimitsContext

	// GetV_format_ returns the v_format_ rule context list.
	GetV_format_() []IFormatContext

	// GetV_functionList returns the v_functionList rule context list.
	GetV_functionList() []IFunctionListContext

	// GetV_guardRails returns the v_guardRails rule context list.
	GetV_guardRails() []IGuardRailsContext

	// GetV_ifData returns the v_ifData rule context list.
	GetV_ifData() []IIfDataContext

	// GetV_monotony returns the v_monotony rule context list.
	GetV_monotony() []IMonotonyContext

	// GetV_physUnit returns the v_physUnit rule context list.
	GetV_physUnit() []IPhysUnitContext

	// GetV_readOnly returns the v_readOnly rule context list.
	GetV_readOnly() []IReadOnlyContext

	// GetV_refMemorySegment returns the v_refMemorySegment rule context list.
	GetV_refMemorySegment() []IRefMemorySegmentContext

	// GetV_stepSize returns the v_stepSize rule context list.
	GetV_stepSize() []IStepSizeContext

	// GetV_symbolLink returns the v_symbolLink rule context list.
	GetV_symbolLink() []ISymbolLinkContext

	// SetV_annotation sets the v_annotation rule context list.
	SetV_annotation([]IAnnotationContext)

	// SetV_byteOrder sets the v_byteOrder rule context list.
	SetV_byteOrder([]IByteOrderContext)

	// SetV_calibrationAccess sets the v_calibrationAccess rule context list.
	SetV_calibrationAccess([]ICalibrationAccessContext)

	// SetV_deposit sets the v_deposit rule context list.
	SetV_deposit([]IDepositContext)

	// SetV_displayIdentifier sets the v_displayIdentifier rule context list.
	SetV_displayIdentifier([]IDisplayIdentifierContext)

	// SetV_ecuAddressExtension sets the v_ecuAddressExtension rule context list.
	SetV_ecuAddressExtension([]IEcuAddressExtensionContext)

	// SetV_extendedLimits sets the v_extendedLimits rule context list.
	SetV_extendedLimits([]IExtendedLimitsContext)

	// SetV_format_ sets the v_format_ rule context list.
	SetV_format_([]IFormatContext)

	// SetV_functionList sets the v_functionList rule context list.
	SetV_functionList([]IFunctionListContext)

	// SetV_guardRails sets the v_guardRails rule context list.
	SetV_guardRails([]IGuardRailsContext)

	// SetV_ifData sets the v_ifData rule context list.
	SetV_ifData([]IIfDataContext)

	// SetV_monotony sets the v_monotony rule context list.
	SetV_monotony([]IMonotonyContext)

	// SetV_physUnit sets the v_physUnit rule context list.
	SetV_physUnit([]IPhysUnitContext)

	// SetV_readOnly sets the v_readOnly rule context list.
	SetV_readOnly([]IReadOnlyContext)

	// SetV_refMemorySegment sets the v_refMemorySegment rule context list.
	SetV_refMemorySegment([]IRefMemorySegmentContext)

	// SetV_stepSize sets the v_stepSize rule context list.
	SetV_stepSize([]IStepSizeContext)

	// SetV_symbolLink sets the v_symbolLink rule context list.
	SetV_symbolLink([]ISymbolLinkContext)

	// Getter signatures
	BEGIN() antlr.TerminalNode
	END() antlr.TerminalNode
	AllIdentifierValue() []IIdentifierValueContext
	IdentifierValue(i int) IIdentifierValueContext
	StringValue() IStringValueContext
	AllIntegerValue() []IIntegerValueContext
	IntegerValue(i int) IIntegerValueContext
	AllNumericValue() []INumericValueContext
	NumericValue(i int) INumericValueContext
	AllAnnotation() []IAnnotationContext
	Annotation(i int) IAnnotationContext
	AllByteOrder() []IByteOrderContext
	ByteOrder(i int) IByteOrderContext
	AllCalibrationAccess() []ICalibrationAccessContext
	CalibrationAccess(i int) ICalibrationAccessContext
	AllDeposit() []IDepositContext
	Deposit(i int) IDepositContext
	AllDisplayIdentifier() []IDisplayIdentifierContext
	DisplayIdentifier(i int) IDisplayIdentifierContext
	AllEcuAddressExtension() []IEcuAddressExtensionContext
	EcuAddressExtension(i int) IEcuAddressExtensionContext
	AllExtendedLimits() []IExtendedLimitsContext
	ExtendedLimits(i int) IExtendedLimitsContext
	AllFormat() []IFormatContext
	Format(i int) IFormatContext
	AllFunctionList() []IFunctionListContext
	FunctionList(i int) IFunctionListContext
	AllGuardRails() []IGuardRailsContext
	GuardRails(i int) IGuardRailsContext
	AllIfData() []IIfDataContext
	IfData(i int) IIfDataContext
	AllMonotony() []IMonotonyContext
	Monotony(i int) IMonotonyContext
	AllPhysUnit() []IPhysUnitContext
	PhysUnit(i int) IPhysUnitContext
	AllReadOnly() []IReadOnlyContext
	ReadOnly(i int) IReadOnlyContext
	AllRefMemorySegment() []IRefMemorySegmentContext
	RefMemorySegment(i int) IRefMemorySegmentContext
	AllStepSize() []IStepSizeContext
	StepSize(i int) IStepSizeContext
	AllSymbolLink() []ISymbolLinkContext
	SymbolLink(i int) ISymbolLinkContext

	// IsAxisPtsContext differentiates from other interfaces.
	IsAxisPtsContext()
}

type AxisPtsContext struct {
	*antlr.BaseParserRuleContext
	parser                antlr.Parser
	name                  IIdentifierValueContext
	longIdentifier        IStringValueContext
	address               IIntegerValueContext
	inputQuantity         IIdentifierValueContext
	vDeposit              IIdentifierValueContext
	maxDiff               INumericValueContext
	conversion            IIdentifierValueContext
	maxAxisPoints         IIntegerValueContext
	lowerLimit            INumericValueContext
	upperLimit            INumericValueContext
	_annotation           IAnnotationContext
	v_annotation          []IAnnotationContext
	_byteOrder            IByteOrderContext
	v_byteOrder           []IByteOrderContext
	_calibrationAccess    ICalibrationAccessContext
	v_calibrationAccess   []ICalibrationAccessContext
	_deposit              IDepositContext
	v_deposit             []IDepositContext
	_displayIdentifier    IDisplayIdentifierContext
	v_displayIdentifier   []IDisplayIdentifierContext
	_ecuAddressExtension  IEcuAddressExtensionContext
	v_ecuAddressExtension []IEcuAddressExtensionContext
	_extendedLimits       IExtendedLimitsContext
	v_extendedLimits      []IExtendedLimitsContext
	_format               IFormatContext
	v_format_             []IFormatContext
	_functionList         IFunctionListContext
	v_functionList        []IFunctionListContext
	_guardRails           IGuardRailsContext
	v_guardRails          []IGuardRailsContext
	_ifData               IIfDataContext
	v_ifData              []IIfDataContext
	_monotony             IMonotonyContext
	v_monotony            []IMonotonyContext
	_physUnit             IPhysUnitContext
	v_physUnit            []IPhysUnitContext
	_readOnly             IReadOnlyContext
	v_readOnly            []IReadOnlyContext
	_refMemorySegment     IRefMemorySegmentContext
	v_refMemorySegment    []IRefMemorySegmentContext
	_stepSize             IStepSizeContext
	v_stepSize            []IStepSizeContext
	_symbolLink           ISymbolLinkContext
	v_symbolLink          []ISymbolLinkContext
}

func NewEmptyAxisPtsContext() *AxisPtsContext {
	var p = new(AxisPtsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_axisPts
	return p
}

func (*AxisPtsContext) IsAxisPtsContext() {}

func NewAxisPtsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AxisPtsContext {
	var p = new(AxisPtsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_axisPts

	return p
}

func (s *AxisPtsContext) GetParser() antlr.Parser { return s.parser }

func (s *AxisPtsContext) GetName() IIdentifierValueContext { return s.name }

func (s *AxisPtsContext) GetLongIdentifier() IStringValueContext { return s.longIdentifier }

func (s *AxisPtsContext) GetAddress() IIntegerValueContext { return s.address }

func (s *AxisPtsContext) GetInputQuantity() IIdentifierValueContext { return s.inputQuantity }

func (s *AxisPtsContext) GetVDeposit() IIdentifierValueContext { return s.vDeposit }

func (s *AxisPtsContext) GetMaxDiff() INumericValueContext { return s.maxDiff }

func (s *AxisPtsContext) GetConversion() IIdentifierValueContext { return s.conversion }

func (s *AxisPtsContext) GetMaxAxisPoints() IIntegerValueContext { return s.maxAxisPoints }

func (s *AxisPtsContext) GetLowerLimit() INumericValueContext { return s.lowerLimit }

func (s *AxisPtsContext) GetUpperLimit() INumericValueContext { return s.upperLimit }

func (s *AxisPtsContext) Get_annotation() IAnnotationContext { return s._annotation }

func (s *AxisPtsContext) Get_byteOrder() IByteOrderContext { return s._byteOrder }

func (s *AxisPtsContext) Get_calibrationAccess() ICalibrationAccessContext {
	return s._calibrationAccess
}

func (s *AxisPtsContext) Get_deposit() IDepositContext { return s._deposit }

func (s *AxisPtsContext) Get_displayIdentifier() IDisplayIdentifierContext {
	return s._displayIdentifier
}

func (s *AxisPtsContext) Get_ecuAddressExtension() IEcuAddressExtensionContext {
	return s._ecuAddressExtension
}

func (s *AxisPtsContext) Get_extendedLimits() IExtendedLimitsContext { return s._extendedLimits }

func (s *AxisPtsContext) Get_format() IFormatContext { return s._format }

func (s *AxisPtsContext) Get_functionList() IFunctionListContext { return s._functionList }

func (s *AxisPtsContext) Get_guardRails() IGuardRailsContext { return s._guardRails }

func (s *AxisPtsContext) Get_ifData() IIfDataContext { return s._ifData }

func (s *AxisPtsContext) Get_monotony() IMonotonyContext { return s._monotony }

func (s *AxisPtsContext) Get_physUnit() IPhysUnitContext { return s._physUnit }

func (s *AxisPtsContext) Get_readOnly() IReadOnlyContext { return s._readOnly }

func (s *AxisPtsContext) Get_refMemorySegment() IRefMemorySegmentContext { return s._refMemorySegment }

func (s *AxisPtsContext) Get_stepSize() IStepSizeContext { return s._stepSize }

func (s *AxisPtsContext) Get_symbolLink() ISymbolLinkContext { return s._symbolLink }

func (s *AxisPtsContext) SetName(v IIdentifierValueContext) { s.name = v }

func (s *AxisPtsContext) SetLongIdentifier(v IStringValueContext) { s.longIdentifier = v }

func (s *AxisPtsContext) SetAddress(v IIntegerValueContext) { s.address = v }

func (s *AxisPtsContext) SetInputQuantity(v IIdentifierValueContext) { s.inputQuantity = v }

func (s *AxisPtsContext) SetVDeposit(v IIdentifierValueContext) { s.vDeposit = v }

func (s *AxisPtsContext) SetMaxDiff(v INumericValueContext) { s.maxDiff = v }

func (s *AxisPtsContext) SetConversion(v IIdentifierValueContext) { s.conversion = v }

func (s *AxisPtsContext) SetMaxAxisPoints(v IIntegerValueContext) { s.maxAxisPoints = v }

func (s *AxisPtsContext) SetLowerLimit(v INumericValueContext) { s.lowerLimit = v }

func (s *AxisPtsContext) SetUpperLimit(v INumericValueContext) { s.upperLimit = v }

func (s *AxisPtsContext) Set_annotation(v IAnnotationContext) { s._annotation = v }

func (s *AxisPtsContext) Set_byteOrder(v IByteOrderContext) { s._byteOrder = v }

func (s *AxisPtsContext) Set_calibrationAccess(v ICalibrationAccessContext) { s._calibrationAccess = v }

func (s *AxisPtsContext) Set_deposit(v IDepositContext) { s._deposit = v }

func (s *AxisPtsContext) Set_displayIdentifier(v IDisplayIdentifierContext) { s._displayIdentifier = v }

func (s *AxisPtsContext) Set_ecuAddressExtension(v IEcuAddressExtensionContext) {
	s._ecuAddressExtension = v
}

func (s *AxisPtsContext) Set_extendedLimits(v IExtendedLimitsContext) { s._extendedLimits = v }

func (s *AxisPtsContext) Set_format(v IFormatContext) { s._format = v }

func (s *AxisPtsContext) Set_functionList(v IFunctionListContext) { s._functionList = v }

func (s *AxisPtsContext) Set_guardRails(v IGuardRailsContext) { s._guardRails = v }

func (s *AxisPtsContext) Set_ifData(v IIfDataContext) { s._ifData = v }

func (s *AxisPtsContext) Set_monotony(v IMonotonyContext) { s._monotony = v }

func (s *AxisPtsContext) Set_physUnit(v IPhysUnitContext) { s._physUnit = v }

func (s *AxisPtsContext) Set_readOnly(v IReadOnlyContext) { s._readOnly = v }

func (s *AxisPtsContext) Set_refMemorySegment(v IRefMemorySegmentContext) { s._refMemorySegment = v }

func (s *AxisPtsContext) Set_stepSize(v IStepSizeContext) { s._stepSize = v }

func (s *AxisPtsContext) Set_symbolLink(v ISymbolLinkContext) { s._symbolLink = v }

func (s *AxisPtsContext) GetV_annotation() []IAnnotationContext { return s.v_annotation }

func (s *AxisPtsContext) GetV_byteOrder() []IByteOrderContext { return s.v_byteOrder }

func (s *AxisPtsContext) GetV_calibrationAccess() []ICalibrationAccessContext {
	return s.v_calibrationAccess
}

func (s *AxisPtsContext) GetV_deposit() []IDepositContext { return s.v_deposit }

func (s *AxisPtsContext) GetV_displayIdentifier() []IDisplayIdentifierContext {
	return s.v_displayIdentifier
}

func (s *AxisPtsContext) GetV_ecuAddressExtension() []IEcuAddressExtensionContext {
	return s.v_ecuAddressExtension
}

func (s *AxisPtsContext) GetV_extendedLimits() []IExtendedLimitsContext { return s.v_extendedLimits }

func (s *AxisPtsContext) GetV_format_() []IFormatContext { return s.v_format_ }

func (s *AxisPtsContext) GetV_functionList() []IFunctionListContext { return s.v_functionList }

func (s *AxisPtsContext) GetV_guardRails() []IGuardRailsContext { return s.v_guardRails }

func (s *AxisPtsContext) GetV_ifData() []IIfDataContext { return s.v_ifData }

func (s *AxisPtsContext) GetV_monotony() []IMonotonyContext { return s.v_monotony }

func (s *AxisPtsContext) GetV_physUnit() []IPhysUnitContext { return s.v_physUnit }

func (s *AxisPtsContext) GetV_readOnly() []IReadOnlyContext { return s.v_readOnly }

func (s *AxisPtsContext) GetV_refMemorySegment() []IRefMemorySegmentContext {
	return s.v_refMemorySegment
}

func (s *AxisPtsContext) GetV_stepSize() []IStepSizeContext { return s.v_stepSize }

func (s *AxisPtsContext) GetV_symbolLink() []ISymbolLinkContext { return s.v_symbolLink }

func (s *AxisPtsContext) SetV_annotation(v []IAnnotationContext) { s.v_annotation = v }

func (s *AxisPtsContext) SetV_byteOrder(v []IByteOrderContext) { s.v_byteOrder = v }

func (s *AxisPtsContext) SetV_calibrationAccess(v []ICalibrationAccessContext) {
	s.v_calibrationAccess = v
}

func (s *AxisPtsContext) SetV_deposit(v []IDepositContext) { s.v_deposit = v }

func (s *AxisPtsContext) SetV_displayIdentifier(v []IDisplayIdentifierContext) {
	s.v_displayIdentifier = v
}

func (s *AxisPtsContext) SetV_ecuAddressExtension(v []IEcuAddressExtensionContext) {
	s.v_ecuAddressExtension = v
}

func (s *AxisPtsContext) SetV_extendedLimits(v []IExtendedLimitsContext) { s.v_extendedLimits = v }

func (s *AxisPtsContext) SetV_format_(v []IFormatContext) { s.v_format_ = v }

func (s *AxisPtsContext) SetV_functionList(v []IFunctionListContext) { s.v_functionList = v }

func (s *AxisPtsContext) SetV_guardRails(v []IGuardRailsContext) { s.v_guardRails = v }

func (s *AxisPtsContext) SetV_ifData(v []IIfDataContext) { s.v_ifData = v }

func (s *AxisPtsContext) SetV_monotony(v []IMonotonyContext) { s.v_monotony = v }

func (s *AxisPtsContext) SetV_physUnit(v []IPhysUnitContext) { s.v_physUnit = v }

func (s *AxisPtsContext) SetV_readOnly(v []IReadOnlyContext) { s.v_readOnly = v }

func (s *AxisPtsContext) SetV_refMemorySegment(v []IRefMemorySegmentContext) {
	s.v_refMemorySegment = v
}

func (s *AxisPtsContext) SetV_stepSize(v []IStepSizeContext) { s.v_stepSize = v }

func (s *AxisPtsContext) SetV_symbolLink(v []ISymbolLinkContext) { s.v_symbolLink = v }

func (s *AxisPtsContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(A2LParserBEGIN, 0)
}

func (s *AxisPtsContext) END() antlr.TerminalNode {
	return s.GetToken(A2LParserEND, 0)
}

func (s *AxisPtsContext) AllIdentifierValue() []IIdentifierValueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierValueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierValueContext); ok {
			tst[i] = t.(IIdentifierValueContext)
			i++
		}
	}

	return tst
}

func (s *AxisPtsContext) IdentifierValue(i int) IIdentifierValueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierValueContext)
}

func (s *AxisPtsContext) StringValue() IStringValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringValueContext)
}

func (s *AxisPtsContext) AllIntegerValue() []IIntegerValueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIntegerValueContext); ok {
			len++
		}
	}

	tst := make([]IIntegerValueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIntegerValueContext); ok {
			tst[i] = t.(IIntegerValueContext)
			i++
		}
	}

	return tst
}

func (s *AxisPtsContext) IntegerValue(i int) IIntegerValueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *AxisPtsContext) AllNumericValue() []INumericValueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INumericValueContext); ok {
			len++
		}
	}

	tst := make([]INumericValueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INumericValueContext); ok {
			tst[i] = t.(INumericValueContext)
			i++
		}
	}

	return tst
}

func (s *AxisPtsContext) NumericValue(i int) INumericValueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumericValueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumericValueContext)
}

func (s *AxisPtsContext) AllAnnotation() []IAnnotationContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAnnotationContext); ok {
			len++
		}
	}

	tst := make([]IAnnotationContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAnnotationContext); ok {
			tst[i] = t.(IAnnotationContext)
			i++
		}
	}

	return tst
}

func (s *AxisPtsContext) Annotation(i int) IAnnotationContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAnnotationContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAnnotationContext)
}

func (s *AxisPtsContext) AllByteOrder() []IByteOrderContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IByteOrderContext); ok {
			len++
		}
	}

	tst := make([]IByteOrderContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IByteOrderContext); ok {
			tst[i] = t.(IByteOrderContext)
			i++
		}
	}

	return tst
}

func (s *AxisPtsContext) ByteOrder(i int) IByteOrderContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IByteOrderContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IByteOrderContext)
}

func (s *AxisPtsContext) AllCalibrationAccess() []ICalibrationAccessContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ICalibrationAccessContext); ok {
			len++
		}
	}

	tst := make([]ICalibrationAccessContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ICalibrationAccessContext); ok {
			tst[i] = t.(ICalibrationAccessContext)
			i++
		}
	}

	return tst
}

func (s *AxisPtsContext) CalibrationAccess(i int) ICalibrationAccessContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICalibrationAccessContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICalibrationAccessContext)
}

func (s *AxisPtsContext) AllDeposit() []IDepositContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDepositContext); ok {
			len++
		}
	}

	tst := make([]IDepositContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDepositContext); ok {
			tst[i] = t.(IDepositContext)
			i++
		}
	}

	return tst
}

func (s *AxisPtsContext) Deposit(i int) IDepositContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDepositContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDepositContext)
}

func (s *AxisPtsContext) AllDisplayIdentifier() []IDisplayIdentifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDisplayIdentifierContext); ok {
			len++
		}
	}

	tst := make([]IDisplayIdentifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDisplayIdentifierContext); ok {
			tst[i] = t.(IDisplayIdentifierContext)
			i++
		}
	}

	return tst
}

func (s *AxisPtsContext) DisplayIdentifier(i int) IDisplayIdentifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDisplayIdentifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDisplayIdentifierContext)
}

func (s *AxisPtsContext) AllEcuAddressExtension() []IEcuAddressExtensionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IEcuAddressExtensionContext); ok {
			len++
		}
	}

	tst := make([]IEcuAddressExtensionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IEcuAddressExtensionContext); ok {
			tst[i] = t.(IEcuAddressExtensionContext)
			i++
		}
	}

	return tst
}

func (s *AxisPtsContext) EcuAddressExtension(i int) IEcuAddressExtensionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEcuAddressExtensionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEcuAddressExtensionContext)
}

func (s *AxisPtsContext) AllExtendedLimits() []IExtendedLimitsContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExtendedLimitsContext); ok {
			len++
		}
	}

	tst := make([]IExtendedLimitsContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExtendedLimitsContext); ok {
			tst[i] = t.(IExtendedLimitsContext)
			i++
		}
	}

	return tst
}

func (s *AxisPtsContext) ExtendedLimits(i int) IExtendedLimitsContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExtendedLimitsContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExtendedLimitsContext)
}

func (s *AxisPtsContext) AllFormat() []IFormatContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IFormatContext); ok {
			len++
		}
	}

	tst := make([]IFormatContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IFormatContext); ok {
			tst[i] = t.(IFormatContext)
			i++
		}
	}

	return tst
}

func (s *AxisPtsContext) Format(i int) IFormatContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFormatContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFormatContext)
}

func (s *AxisPtsContext) AllFunctionList() []IFunctionListContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IFunctionListContext); ok {
			len++
		}
	}

	tst := make([]IFunctionListContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IFunctionListContext); ok {
			tst[i] = t.(IFunctionListContext)
			i++
		}
	}

	return tst
}

func (s *AxisPtsContext) FunctionList(i int) IFunctionListContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunctionListContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunctionListContext)
}

func (s *AxisPtsContext) AllGuardRails() []IGuardRailsContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IGuardRailsContext); ok {
			len++
		}
	}

	tst := make([]IGuardRailsContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IGuardRailsContext); ok {
			tst[i] = t.(IGuardRailsContext)
			i++
		}
	}

	return tst
}

func (s *AxisPtsContext) GuardRails(i int) IGuardRailsContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGuardRailsContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGuardRailsContext)
}

func (s *AxisPtsContext) AllIfData() []IIfDataContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIfDataContext); ok {
			len++
		}
	}

	tst := make([]IIfDataContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIfDataContext); ok {
			tst[i] = t.(IIfDataContext)
			i++
		}
	}

	return tst
}

func (s *AxisPtsContext) IfData(i int) IIfDataContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIfDataContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIfDataContext)
}

func (s *AxisPtsContext) AllMonotony() []IMonotonyContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IMonotonyContext); ok {
			len++
		}
	}

	tst := make([]IMonotonyContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IMonotonyContext); ok {
			tst[i] = t.(IMonotonyContext)
			i++
		}
	}

	return tst
}

func (s *AxisPtsContext) Monotony(i int) IMonotonyContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMonotonyContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMonotonyContext)
}

func (s *AxisPtsContext) AllPhysUnit() []IPhysUnitContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IPhysUnitContext); ok {
			len++
		}
	}

	tst := make([]IPhysUnitContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IPhysUnitContext); ok {
			tst[i] = t.(IPhysUnitContext)
			i++
		}
	}

	return tst
}

func (s *AxisPtsContext) PhysUnit(i int) IPhysUnitContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPhysUnitContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPhysUnitContext)
}

func (s *AxisPtsContext) AllReadOnly() []IReadOnlyContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IReadOnlyContext); ok {
			len++
		}
	}

	tst := make([]IReadOnlyContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IReadOnlyContext); ok {
			tst[i] = t.(IReadOnlyContext)
			i++
		}
	}

	return tst
}

func (s *AxisPtsContext) ReadOnly(i int) IReadOnlyContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IReadOnlyContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IReadOnlyContext)
}

func (s *AxisPtsContext) AllRefMemorySegment() []IRefMemorySegmentContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IRefMemorySegmentContext); ok {
			len++
		}
	}

	tst := make([]IRefMemorySegmentContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IRefMemorySegmentContext); ok {
			tst[i] = t.(IRefMemorySegmentContext)
			i++
		}
	}

	return tst
}

func (s *AxisPtsContext) RefMemorySegment(i int) IRefMemorySegmentContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRefMemorySegmentContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRefMemorySegmentContext)
}

func (s *AxisPtsContext) AllStepSize() []IStepSizeContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStepSizeContext); ok {
			len++
		}
	}

	tst := make([]IStepSizeContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStepSizeContext); ok {
			tst[i] = t.(IStepSizeContext)
			i++
		}
	}

	return tst
}

func (s *AxisPtsContext) StepSize(i int) IStepSizeContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStepSizeContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStepSizeContext)
}

func (s *AxisPtsContext) AllSymbolLink() []ISymbolLinkContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISymbolLinkContext); ok {
			len++
		}
	}

	tst := make([]ISymbolLinkContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISymbolLinkContext); ok {
			tst[i] = t.(ISymbolLinkContext)
			i++
		}
	}

	return tst
}

func (s *AxisPtsContext) SymbolLink(i int) ISymbolLinkContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISymbolLinkContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISymbolLinkContext)
}

func (s *AxisPtsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AxisPtsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AxisPtsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterAxisPts(s)
	}
}

func (s *AxisPtsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitAxisPts(s)
	}
}

func (s *AxisPtsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitAxisPts(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) AxisPts() (localctx IAxisPtsContext) {
	this := p
	_ = this

	localctx = NewAxisPtsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, A2LParserRULE_axisPts)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(658)
		p.Match(A2LParserBEGIN)
	}
	{
		p.SetState(659)
		p.Match(A2LParserT__53)
	}
	{
		p.SetState(660)

		var _x = p.IdentifierValue()

		localctx.(*AxisPtsContext).name = _x
	}
	{
		p.SetState(661)

		var _x = p.StringValue()

		localctx.(*AxisPtsContext).longIdentifier = _x
	}
	{
		p.SetState(662)

		var _x = p.IntegerValue()

		localctx.(*AxisPtsContext).address = _x
	}
	{
		p.SetState(663)

		var _x = p.IdentifierValue()

		localctx.(*AxisPtsContext).inputQuantity = _x
	}
	{
		p.SetState(664)

		var _x = p.IdentifierValue()

		localctx.(*AxisPtsContext).vDeposit = _x
	}
	{
		p.SetState(665)

		var _x = p.NumericValue()

		localctx.(*AxisPtsContext).maxDiff = _x
	}
	{
		p.SetState(666)

		var _x = p.IdentifierValue()

		localctx.(*AxisPtsContext).conversion = _x
	}
	{
		p.SetState(667)

		var _x = p.IntegerValue()

		localctx.(*AxisPtsContext).maxAxisPoints = _x
	}
	{
		p.SetState(668)

		var _x = p.NumericValue()

		localctx.(*AxisPtsContext).lowerLimit = _x
	}
	{
		p.SetState(669)

		var _x = p.NumericValue()

		localctx.(*AxisPtsContext).upperLimit = _x
	}
	p.SetState(689)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&117652828741632) != 0) || _la == A2LParserBEGIN {
		p.SetState(687)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 15, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(670)

				var _x = p.Annotation()

				localctx.(*AxisPtsContext)._annotation = _x
			}
			localctx.(*AxisPtsContext).v_annotation = append(localctx.(*AxisPtsContext).v_annotation, localctx.(*AxisPtsContext)._annotation)

		case 2:
			{
				p.SetState(671)

				var _x = p.ByteOrder()

				localctx.(*AxisPtsContext)._byteOrder = _x
			}
			localctx.(*AxisPtsContext).v_byteOrder = append(localctx.(*AxisPtsContext).v_byteOrder, localctx.(*AxisPtsContext)._byteOrder)

		case 3:
			{
				p.SetState(672)

				var _x = p.CalibrationAccess()

				localctx.(*AxisPtsContext)._calibrationAccess = _x
			}
			localctx.(*AxisPtsContext).v_calibrationAccess = append(localctx.(*AxisPtsContext).v_calibrationAccess, localctx.(*AxisPtsContext)._calibrationAccess)

		case 4:
			{
				p.SetState(673)

				var _x = p.Deposit()

				localctx.(*AxisPtsContext)._deposit = _x
			}
			localctx.(*AxisPtsContext).v_deposit = append(localctx.(*AxisPtsContext).v_deposit, localctx.(*AxisPtsContext)._deposit)

		case 5:
			{
				p.SetState(674)

				var _x = p.DisplayIdentifier()

				localctx.(*AxisPtsContext)._displayIdentifier = _x
			}
			localctx.(*AxisPtsContext).v_displayIdentifier = append(localctx.(*AxisPtsContext).v_displayIdentifier, localctx.(*AxisPtsContext)._displayIdentifier)

		case 6:
			{
				p.SetState(675)

				var _x = p.EcuAddressExtension()

				localctx.(*AxisPtsContext)._ecuAddressExtension = _x
			}
			localctx.(*AxisPtsContext).v_ecuAddressExtension = append(localctx.(*AxisPtsContext).v_ecuAddressExtension, localctx.(*AxisPtsContext)._ecuAddressExtension)

		case 7:
			{
				p.SetState(676)

				var _x = p.ExtendedLimits()

				localctx.(*AxisPtsContext)._extendedLimits = _x
			}
			localctx.(*AxisPtsContext).v_extendedLimits = append(localctx.(*AxisPtsContext).v_extendedLimits, localctx.(*AxisPtsContext)._extendedLimits)

		case 8:
			{
				p.SetState(677)

				var _x = p.Format()

				localctx.(*AxisPtsContext)._format = _x
			}
			localctx.(*AxisPtsContext).v_format_ = append(localctx.(*AxisPtsContext).v_format_, localctx.(*AxisPtsContext)._format)

		case 9:
			{
				p.SetState(678)

				var _x = p.FunctionList()

				localctx.(*AxisPtsContext)._functionList = _x
			}
			localctx.(*AxisPtsContext).v_functionList = append(localctx.(*AxisPtsContext).v_functionList, localctx.(*AxisPtsContext)._functionList)

		case 10:
			{
				p.SetState(679)

				var _x = p.GuardRails()

				localctx.(*AxisPtsContext)._guardRails = _x
			}
			localctx.(*AxisPtsContext).v_guardRails = append(localctx.(*AxisPtsContext).v_guardRails, localctx.(*AxisPtsContext)._guardRails)

		case 11:
			{
				p.SetState(680)

				var _x = p.IfData()

				localctx.(*AxisPtsContext)._ifData = _x
			}
			localctx.(*AxisPtsContext).v_ifData = append(localctx.(*AxisPtsContext).v_ifData, localctx.(*AxisPtsContext)._ifData)

		case 12:
			{
				p.SetState(681)

				var _x = p.Monotony()

				localctx.(*AxisPtsContext)._monotony = _x
			}
			localctx.(*AxisPtsContext).v_monotony = append(localctx.(*AxisPtsContext).v_monotony, localctx.(*AxisPtsContext)._monotony)

		case 13:
			{
				p.SetState(682)

				var _x = p.PhysUnit()

				localctx.(*AxisPtsContext)._physUnit = _x
			}
			localctx.(*AxisPtsContext).v_physUnit = append(localctx.(*AxisPtsContext).v_physUnit, localctx.(*AxisPtsContext)._physUnit)

		case 14:
			{
				p.SetState(683)

				var _x = p.ReadOnly()

				localctx.(*AxisPtsContext)._readOnly = _x
			}
			localctx.(*AxisPtsContext).v_readOnly = append(localctx.(*AxisPtsContext).v_readOnly, localctx.(*AxisPtsContext)._readOnly)

		case 15:
			{
				p.SetState(684)

				var _x = p.RefMemorySegment()

				localctx.(*AxisPtsContext)._refMemorySegment = _x
			}
			localctx.(*AxisPtsContext).v_refMemorySegment = append(localctx.(*AxisPtsContext).v_refMemorySegment, localctx.(*AxisPtsContext)._refMemorySegment)

		case 16:
			{
				p.SetState(685)

				var _x = p.StepSize()

				localctx.(*AxisPtsContext)._stepSize = _x
			}
			localctx.(*AxisPtsContext).v_stepSize = append(localctx.(*AxisPtsContext).v_stepSize, localctx.(*AxisPtsContext)._stepSize)

		case 17:
			{
				p.SetState(686)

				var _x = p.SymbolLink()

				localctx.(*AxisPtsContext)._symbolLink = _x
			}
			localctx.(*AxisPtsContext).v_symbolLink = append(localctx.(*AxisPtsContext).v_symbolLink, localctx.(*AxisPtsContext)._symbolLink)

		}

		p.SetState(691)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(692)
		p.Match(A2LParserEND)
	}
	{
		p.SetState(693)
		p.Match(A2LParserT__53)
	}

	return localctx
}

// ICharacteristicContext is an interface to support dynamic dispatch.
type ICharacteristicContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetType_ returns the type_ token.
	GetType_() antlr.Token

	// SetType_ sets the type_ token.
	SetType_(antlr.Token)

	// GetName returns the name rule contexts.
	GetName() IIdentifierValueContext

	// GetLongIdentifier returns the longIdentifier rule contexts.
	GetLongIdentifier() IStringValueContext

	// GetAddress returns the address rule contexts.
	GetAddress() IIntegerValueContext

	// GetDeposit_ returns the deposit_ rule contexts.
	GetDeposit_() IIdentifierValueContext

	// GetMaxDiff returns the maxDiff rule contexts.
	GetMaxDiff() INumericValueContext

	// GetConversion returns the conversion rule contexts.
	GetConversion() IIdentifierValueContext

	// GetLowerLimit returns the lowerLimit rule contexts.
	GetLowerLimit() INumericValueContext

	// GetUpperLimit returns the upperLimit rule contexts.
	GetUpperLimit() INumericValueContext

	// Get_annotation returns the _annotation rule contexts.
	Get_annotation() IAnnotationContext

	// Get_axisDescr returns the _axisDescr rule contexts.
	Get_axisDescr() IAxisDescrContext

	// Get_bitMask returns the _bitMask rule contexts.
	Get_bitMask() IBitMaskContext

	// Get_byteOrder returns the _byteOrder rule contexts.
	Get_byteOrder() IByteOrderContext

	// Get_calibrationAccess returns the _calibrationAccess rule contexts.
	Get_calibrationAccess() ICalibrationAccessContext

	// Get_comparisonQuantity returns the _comparisonQuantity rule contexts.
	Get_comparisonQuantity() IComparisonQuantityContext

	// Get_dependentCharacteristic returns the _dependentCharacteristic rule contexts.
	Get_dependentCharacteristic() IDependentCharacteristicContext

	// Get_discrete returns the _discrete rule contexts.
	Get_discrete() IDiscreteContext

	// Get_displayIdentifier returns the _displayIdentifier rule contexts.
	Get_displayIdentifier() IDisplayIdentifierContext

	// Get_ecuAddressExtension returns the _ecuAddressExtension rule contexts.
	Get_ecuAddressExtension() IEcuAddressExtensionContext

	// Get_extendedLimits returns the _extendedLimits rule contexts.
	Get_extendedLimits() IExtendedLimitsContext

	// Get_format returns the _format rule contexts.
	Get_format() IFormatContext

	// Get_functionList returns the _functionList rule contexts.
	Get_functionList() IFunctionListContext

	// Get_guardRails returns the _guardRails rule contexts.
	Get_guardRails() IGuardRailsContext

	// Get_ifData returns the _ifData rule contexts.
	Get_ifData() IIfDataContext

	// Get_mapList returns the _mapList rule contexts.
	Get_mapList() IMapListContext

	// Get_matrixDim returns the _matrixDim rule contexts.
	Get_matrixDim() IMatrixDimContext

	// Get_maxRefresh returns the _maxRefresh rule contexts.
	Get_maxRefresh() IMaxRefreshContext

	// Get_number returns the _number rule contexts.
	Get_number() INumberContext

	// Get_physUnit returns the _physUnit rule contexts.
	Get_physUnit() IPhysUnitContext

	// Get_readOnly returns the _readOnly rule contexts.
	Get_readOnly() IReadOnlyContext

	// Get_refMemorySegment returns the _refMemorySegment rule contexts.
	Get_refMemorySegment() IRefMemorySegmentContext

	// Get_stepSize returns the _stepSize rule contexts.
	Get_stepSize() IStepSizeContext

	// Get_symbolLink returns the _symbolLink rule contexts.
	Get_symbolLink() ISymbolLinkContext

	// Get_virtualCharacteristic returns the _virtualCharacteristic rule contexts.
	Get_virtualCharacteristic() IVirtualCharacteristicContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierValueContext)

	// SetLongIdentifier sets the longIdentifier rule contexts.
	SetLongIdentifier(IStringValueContext)

	// SetAddress sets the address rule contexts.
	SetAddress(IIntegerValueContext)

	// SetDeposit_ sets the deposit_ rule contexts.
	SetDeposit_(IIdentifierValueContext)

	// SetMaxDiff sets the maxDiff rule contexts.
	SetMaxDiff(INumericValueContext)

	// SetConversion sets the conversion rule contexts.
	SetConversion(IIdentifierValueContext)

	// SetLowerLimit sets the lowerLimit rule contexts.
	SetLowerLimit(INumericValueContext)

	// SetUpperLimit sets the upperLimit rule contexts.
	SetUpperLimit(INumericValueContext)

	// Set_annotation sets the _annotation rule contexts.
	Set_annotation(IAnnotationContext)

	// Set_axisDescr sets the _axisDescr rule contexts.
	Set_axisDescr(IAxisDescrContext)

	// Set_bitMask sets the _bitMask rule contexts.
	Set_bitMask(IBitMaskContext)

	// Set_byteOrder sets the _byteOrder rule contexts.
	Set_byteOrder(IByteOrderContext)

	// Set_calibrationAccess sets the _calibrationAccess rule contexts.
	Set_calibrationAccess(ICalibrationAccessContext)

	// Set_comparisonQuantity sets the _comparisonQuantity rule contexts.
	Set_comparisonQuantity(IComparisonQuantityContext)

	// Set_dependentCharacteristic sets the _dependentCharacteristic rule contexts.
	Set_dependentCharacteristic(IDependentCharacteristicContext)

	// Set_discrete sets the _discrete rule contexts.
	Set_discrete(IDiscreteContext)

	// Set_displayIdentifier sets the _displayIdentifier rule contexts.
	Set_displayIdentifier(IDisplayIdentifierContext)

	// Set_ecuAddressExtension sets the _ecuAddressExtension rule contexts.
	Set_ecuAddressExtension(IEcuAddressExtensionContext)

	// Set_extendedLimits sets the _extendedLimits rule contexts.
	Set_extendedLimits(IExtendedLimitsContext)

	// Set_format sets the _format rule contexts.
	Set_format(IFormatContext)

	// Set_functionList sets the _functionList rule contexts.
	Set_functionList(IFunctionListContext)

	// Set_guardRails sets the _guardRails rule contexts.
	Set_guardRails(IGuardRailsContext)

	// Set_ifData sets the _ifData rule contexts.
	Set_ifData(IIfDataContext)

	// Set_mapList sets the _mapList rule contexts.
	Set_mapList(IMapListContext)

	// Set_matrixDim sets the _matrixDim rule contexts.
	Set_matrixDim(IMatrixDimContext)

	// Set_maxRefresh sets the _maxRefresh rule contexts.
	Set_maxRefresh(IMaxRefreshContext)

	// Set_number sets the _number rule contexts.
	Set_number(INumberContext)

	// Set_physUnit sets the _physUnit rule contexts.
	Set_physUnit(IPhysUnitContext)

	// Set_readOnly sets the _readOnly rule contexts.
	Set_readOnly(IReadOnlyContext)

	// Set_refMemorySegment sets the _refMemorySegment rule contexts.
	Set_refMemorySegment(IRefMemorySegmentContext)

	// Set_stepSize sets the _stepSize rule contexts.
	Set_stepSize(IStepSizeContext)

	// Set_symbolLink sets the _symbolLink rule contexts.
	Set_symbolLink(ISymbolLinkContext)

	// Set_virtualCharacteristic sets the _virtualCharacteristic rule contexts.
	Set_virtualCharacteristic(IVirtualCharacteristicContext)

	// GetV_annotation returns the v_annotation rule context list.
	GetV_annotation() []IAnnotationContext

	// GetV_axisDescr returns the v_axisDescr rule context list.
	GetV_axisDescr() []IAxisDescrContext

	// GetV_bitMask returns the v_bitMask rule context list.
	GetV_bitMask() []IBitMaskContext

	// GetV_byteOrder returns the v_byteOrder rule context list.
	GetV_byteOrder() []IByteOrderContext

	// GetV_calibrationAccess returns the v_calibrationAccess rule context list.
	GetV_calibrationAccess() []ICalibrationAccessContext

	// GetV_comparisonQuantity returns the v_comparisonQuantity rule context list.
	GetV_comparisonQuantity() []IComparisonQuantityContext

	// GetV_dependentCharacteristic returns the v_dependentCharacteristic rule context list.
	GetV_dependentCharacteristic() []IDependentCharacteristicContext

	// GetV_discrete returns the v_discrete rule context list.
	GetV_discrete() []IDiscreteContext

	// GetV_displayIdentifier returns the v_displayIdentifier rule context list.
	GetV_displayIdentifier() []IDisplayIdentifierContext

	// GetV_ecuAddressExtension returns the v_ecuAddressExtension rule context list.
	GetV_ecuAddressExtension() []IEcuAddressExtensionContext

	// GetV_extendedLimits returns the v_extendedLimits rule context list.
	GetV_extendedLimits() []IExtendedLimitsContext

	// GetV_format_ returns the v_format_ rule context list.
	GetV_format_() []IFormatContext

	// GetV_functionList returns the v_functionList rule context list.
	GetV_functionList() []IFunctionListContext

	// GetV_guardRails returns the v_guardRails rule context list.
	GetV_guardRails() []IGuardRailsContext

	// GetV_ifData returns the v_ifData rule context list.
	GetV_ifData() []IIfDataContext

	// GetV_mapList returns the v_mapList rule context list.
	GetV_mapList() []IMapListContext

	// GetV_matrixDim returns the v_matrixDim rule context list.
	GetV_matrixDim() []IMatrixDimContext

	// GetV_maxRefresh returns the v_maxRefresh rule context list.
	GetV_maxRefresh() []IMaxRefreshContext

	// GetV_number returns the v_number rule context list.
	GetV_number() []INumberContext

	// GetV_physUnit returns the v_physUnit rule context list.
	GetV_physUnit() []IPhysUnitContext

	// GetV_readOnly returns the v_readOnly rule context list.
	GetV_readOnly() []IReadOnlyContext

	// GetV_refMemorySegment returns the v_refMemorySegment rule context list.
	GetV_refMemorySegment() []IRefMemorySegmentContext

	// GetV_stepSize returns the v_stepSize rule context list.
	GetV_stepSize() []IStepSizeContext

	// GetV_symbolLink returns the v_symbolLink rule context list.
	GetV_symbolLink() []ISymbolLinkContext

	// GetV_virtualCharacteristic returns the v_virtualCharacteristic rule context list.
	GetV_virtualCharacteristic() []IVirtualCharacteristicContext

	// SetV_annotation sets the v_annotation rule context list.
	SetV_annotation([]IAnnotationContext)

	// SetV_axisDescr sets the v_axisDescr rule context list.
	SetV_axisDescr([]IAxisDescrContext)

	// SetV_bitMask sets the v_bitMask rule context list.
	SetV_bitMask([]IBitMaskContext)

	// SetV_byteOrder sets the v_byteOrder rule context list.
	SetV_byteOrder([]IByteOrderContext)

	// SetV_calibrationAccess sets the v_calibrationAccess rule context list.
	SetV_calibrationAccess([]ICalibrationAccessContext)

	// SetV_comparisonQuantity sets the v_comparisonQuantity rule context list.
	SetV_comparisonQuantity([]IComparisonQuantityContext)

	// SetV_dependentCharacteristic sets the v_dependentCharacteristic rule context list.
	SetV_dependentCharacteristic([]IDependentCharacteristicContext)

	// SetV_discrete sets the v_discrete rule context list.
	SetV_discrete([]IDiscreteContext)

	// SetV_displayIdentifier sets the v_displayIdentifier rule context list.
	SetV_displayIdentifier([]IDisplayIdentifierContext)

	// SetV_ecuAddressExtension sets the v_ecuAddressExtension rule context list.
	SetV_ecuAddressExtension([]IEcuAddressExtensionContext)

	// SetV_extendedLimits sets the v_extendedLimits rule context list.
	SetV_extendedLimits([]IExtendedLimitsContext)

	// SetV_format_ sets the v_format_ rule context list.
	SetV_format_([]IFormatContext)

	// SetV_functionList sets the v_functionList rule context list.
	SetV_functionList([]IFunctionListContext)

	// SetV_guardRails sets the v_guardRails rule context list.
	SetV_guardRails([]IGuardRailsContext)

	// SetV_ifData sets the v_ifData rule context list.
	SetV_ifData([]IIfDataContext)

	// SetV_mapList sets the v_mapList rule context list.
	SetV_mapList([]IMapListContext)

	// SetV_matrixDim sets the v_matrixDim rule context list.
	SetV_matrixDim([]IMatrixDimContext)

	// SetV_maxRefresh sets the v_maxRefresh rule context list.
	SetV_maxRefresh([]IMaxRefreshContext)

	// SetV_number sets the v_number rule context list.
	SetV_number([]INumberContext)

	// SetV_physUnit sets the v_physUnit rule context list.
	SetV_physUnit([]IPhysUnitContext)

	// SetV_readOnly sets the v_readOnly rule context list.
	SetV_readOnly([]IReadOnlyContext)

	// SetV_refMemorySegment sets the v_refMemorySegment rule context list.
	SetV_refMemorySegment([]IRefMemorySegmentContext)

	// SetV_stepSize sets the v_stepSize rule context list.
	SetV_stepSize([]IStepSizeContext)

	// SetV_symbolLink sets the v_symbolLink rule context list.
	SetV_symbolLink([]ISymbolLinkContext)

	// SetV_virtualCharacteristic sets the v_virtualCharacteristic rule context list.
	SetV_virtualCharacteristic([]IVirtualCharacteristicContext)

	// Getter signatures
	BEGIN() antlr.TerminalNode
	END() antlr.TerminalNode
	AllIdentifierValue() []IIdentifierValueContext
	IdentifierValue(i int) IIdentifierValueContext
	StringValue() IStringValueContext
	IntegerValue() IIntegerValueContext
	AllNumericValue() []INumericValueContext
	NumericValue(i int) INumericValueContext
	AllAnnotation() []IAnnotationContext
	Annotation(i int) IAnnotationContext
	AllAxisDescr() []IAxisDescrContext
	AxisDescr(i int) IAxisDescrContext
	AllBitMask() []IBitMaskContext
	BitMask(i int) IBitMaskContext
	AllByteOrder() []IByteOrderContext
	ByteOrder(i int) IByteOrderContext
	AllCalibrationAccess() []ICalibrationAccessContext
	CalibrationAccess(i int) ICalibrationAccessContext
	AllComparisonQuantity() []IComparisonQuantityContext
	ComparisonQuantity(i int) IComparisonQuantityContext
	AllDependentCharacteristic() []IDependentCharacteristicContext
	DependentCharacteristic(i int) IDependentCharacteristicContext
	AllDiscrete() []IDiscreteContext
	Discrete(i int) IDiscreteContext
	AllDisplayIdentifier() []IDisplayIdentifierContext
	DisplayIdentifier(i int) IDisplayIdentifierContext
	AllEcuAddressExtension() []IEcuAddressExtensionContext
	EcuAddressExtension(i int) IEcuAddressExtensionContext
	AllExtendedLimits() []IExtendedLimitsContext
	ExtendedLimits(i int) IExtendedLimitsContext
	AllFormat() []IFormatContext
	Format(i int) IFormatContext
	AllFunctionList() []IFunctionListContext
	FunctionList(i int) IFunctionListContext
	AllGuardRails() []IGuardRailsContext
	GuardRails(i int) IGuardRailsContext
	AllIfData() []IIfDataContext
	IfData(i int) IIfDataContext
	AllMapList() []IMapListContext
	MapList(i int) IMapListContext
	AllMatrixDim() []IMatrixDimContext
	MatrixDim(i int) IMatrixDimContext
	AllMaxRefresh() []IMaxRefreshContext
	MaxRefresh(i int) IMaxRefreshContext
	AllNumber() []INumberContext
	Number(i int) INumberContext
	AllPhysUnit() []IPhysUnitContext
	PhysUnit(i int) IPhysUnitContext
	AllReadOnly() []IReadOnlyContext
	ReadOnly(i int) IReadOnlyContext
	AllRefMemorySegment() []IRefMemorySegmentContext
	RefMemorySegment(i int) IRefMemorySegmentContext
	AllStepSize() []IStepSizeContext
	StepSize(i int) IStepSizeContext
	AllSymbolLink() []ISymbolLinkContext
	SymbolLink(i int) ISymbolLinkContext
	AllVirtualCharacteristic() []IVirtualCharacteristicContext
	VirtualCharacteristic(i int) IVirtualCharacteristicContext

	// IsCharacteristicContext differentiates from other interfaces.
	IsCharacteristicContext()
}

type CharacteristicContext struct {
	*antlr.BaseParserRuleContext
	parser                    antlr.Parser
	name                      IIdentifierValueContext
	longIdentifier            IStringValueContext
	type_                     antlr.Token
	address                   IIntegerValueContext
	deposit_                  IIdentifierValueContext
	maxDiff                   INumericValueContext
	conversion                IIdentifierValueContext
	lowerLimit                INumericValueContext
	upperLimit                INumericValueContext
	_annotation               IAnnotationContext
	v_annotation              []IAnnotationContext
	_axisDescr                IAxisDescrContext
	v_axisDescr               []IAxisDescrContext
	_bitMask                  IBitMaskContext
	v_bitMask                 []IBitMaskContext
	_byteOrder                IByteOrderContext
	v_byteOrder               []IByteOrderContext
	_calibrationAccess        ICalibrationAccessContext
	v_calibrationAccess       []ICalibrationAccessContext
	_comparisonQuantity       IComparisonQuantityContext
	v_comparisonQuantity      []IComparisonQuantityContext
	_dependentCharacteristic  IDependentCharacteristicContext
	v_dependentCharacteristic []IDependentCharacteristicContext
	_discrete                 IDiscreteContext
	v_discrete                []IDiscreteContext
	_displayIdentifier        IDisplayIdentifierContext
	v_displayIdentifier       []IDisplayIdentifierContext
	_ecuAddressExtension      IEcuAddressExtensionContext
	v_ecuAddressExtension     []IEcuAddressExtensionContext
	_extendedLimits           IExtendedLimitsContext
	v_extendedLimits          []IExtendedLimitsContext
	_format                   IFormatContext
	v_format_                 []IFormatContext
	_functionList             IFunctionListContext
	v_functionList            []IFunctionListContext
	_guardRails               IGuardRailsContext
	v_guardRails              []IGuardRailsContext
	_ifData                   IIfDataContext
	v_ifData                  []IIfDataContext
	_mapList                  IMapListContext
	v_mapList                 []IMapListContext
	_matrixDim                IMatrixDimContext
	v_matrixDim               []IMatrixDimContext
	_maxRefresh               IMaxRefreshContext
	v_maxRefresh              []IMaxRefreshContext
	_number                   INumberContext
	v_number                  []INumberContext
	_physUnit                 IPhysUnitContext
	v_physUnit                []IPhysUnitContext
	_readOnly                 IReadOnlyContext
	v_readOnly                []IReadOnlyContext
	_refMemorySegment         IRefMemorySegmentContext
	v_refMemorySegment        []IRefMemorySegmentContext
	_stepSize                 IStepSizeContext
	v_stepSize                []IStepSizeContext
	_symbolLink               ISymbolLinkContext
	v_symbolLink              []ISymbolLinkContext
	_virtualCharacteristic    IVirtualCharacteristicContext
	v_virtualCharacteristic   []IVirtualCharacteristicContext
}

func NewEmptyCharacteristicContext() *CharacteristicContext {
	var p = new(CharacteristicContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_characteristic
	return p
}

func (*CharacteristicContext) IsCharacteristicContext() {}

func NewCharacteristicContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CharacteristicContext {
	var p = new(CharacteristicContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_characteristic

	return p
}

func (s *CharacteristicContext) GetParser() antlr.Parser { return s.parser }

func (s *CharacteristicContext) GetType_() antlr.Token { return s.type_ }

func (s *CharacteristicContext) SetType_(v antlr.Token) { s.type_ = v }

func (s *CharacteristicContext) GetName() IIdentifierValueContext { return s.name }

func (s *CharacteristicContext) GetLongIdentifier() IStringValueContext { return s.longIdentifier }

func (s *CharacteristicContext) GetAddress() IIntegerValueContext { return s.address }

func (s *CharacteristicContext) GetDeposit_() IIdentifierValueContext { return s.deposit_ }

func (s *CharacteristicContext) GetMaxDiff() INumericValueContext { return s.maxDiff }

func (s *CharacteristicContext) GetConversion() IIdentifierValueContext { return s.conversion }

func (s *CharacteristicContext) GetLowerLimit() INumericValueContext { return s.lowerLimit }

func (s *CharacteristicContext) GetUpperLimit() INumericValueContext { return s.upperLimit }

func (s *CharacteristicContext) Get_annotation() IAnnotationContext { return s._annotation }

func (s *CharacteristicContext) Get_axisDescr() IAxisDescrContext { return s._axisDescr }

func (s *CharacteristicContext) Get_bitMask() IBitMaskContext { return s._bitMask }

func (s *CharacteristicContext) Get_byteOrder() IByteOrderContext { return s._byteOrder }

func (s *CharacteristicContext) Get_calibrationAccess() ICalibrationAccessContext {
	return s._calibrationAccess
}

func (s *CharacteristicContext) Get_comparisonQuantity() IComparisonQuantityContext {
	return s._comparisonQuantity
}

func (s *CharacteristicContext) Get_dependentCharacteristic() IDependentCharacteristicContext {
	return s._dependentCharacteristic
}

func (s *CharacteristicContext) Get_discrete() IDiscreteContext { return s._discrete }

func (s *CharacteristicContext) Get_displayIdentifier() IDisplayIdentifierContext {
	return s._displayIdentifier
}

func (s *CharacteristicContext) Get_ecuAddressExtension() IEcuAddressExtensionContext {
	return s._ecuAddressExtension
}

func (s *CharacteristicContext) Get_extendedLimits() IExtendedLimitsContext { return s._extendedLimits }

func (s *CharacteristicContext) Get_format() IFormatContext { return s._format }

func (s *CharacteristicContext) Get_functionList() IFunctionListContext { return s._functionList }

func (s *CharacteristicContext) Get_guardRails() IGuardRailsContext { return s._guardRails }

func (s *CharacteristicContext) Get_ifData() IIfDataContext { return s._ifData }

func (s *CharacteristicContext) Get_mapList() IMapListContext { return s._mapList }

func (s *CharacteristicContext) Get_matrixDim() IMatrixDimContext { return s._matrixDim }

func (s *CharacteristicContext) Get_maxRefresh() IMaxRefreshContext { return s._maxRefresh }

func (s *CharacteristicContext) Get_number() INumberContext { return s._number }

func (s *CharacteristicContext) Get_physUnit() IPhysUnitContext { return s._physUnit }

func (s *CharacteristicContext) Get_readOnly() IReadOnlyContext { return s._readOnly }

func (s *CharacteristicContext) Get_refMemorySegment() IRefMemorySegmentContext {
	return s._refMemorySegment
}

func (s *CharacteristicContext) Get_stepSize() IStepSizeContext { return s._stepSize }

func (s *CharacteristicContext) Get_symbolLink() ISymbolLinkContext { return s._symbolLink }

func (s *CharacteristicContext) Get_virtualCharacteristic() IVirtualCharacteristicContext {
	return s._virtualCharacteristic
}

func (s *CharacteristicContext) SetName(v IIdentifierValueContext) { s.name = v }

func (s *CharacteristicContext) SetLongIdentifier(v IStringValueContext) { s.longIdentifier = v }

func (s *CharacteristicContext) SetAddress(v IIntegerValueContext) { s.address = v }

func (s *CharacteristicContext) SetDeposit_(v IIdentifierValueContext) { s.deposit_ = v }

func (s *CharacteristicContext) SetMaxDiff(v INumericValueContext) { s.maxDiff = v }

func (s *CharacteristicContext) SetConversion(v IIdentifierValueContext) { s.conversion = v }

func (s *CharacteristicContext) SetLowerLimit(v INumericValueContext) { s.lowerLimit = v }

func (s *CharacteristicContext) SetUpperLimit(v INumericValueContext) { s.upperLimit = v }

func (s *CharacteristicContext) Set_annotation(v IAnnotationContext) { s._annotation = v }

func (s *CharacteristicContext) Set_axisDescr(v IAxisDescrContext) { s._axisDescr = v }

func (s *CharacteristicContext) Set_bitMask(v IBitMaskContext) { s._bitMask = v }

func (s *CharacteristicContext) Set_byteOrder(v IByteOrderContext) { s._byteOrder = v }

func (s *CharacteristicContext) Set_calibrationAccess(v ICalibrationAccessContext) {
	s._calibrationAccess = v
}

func (s *CharacteristicContext) Set_comparisonQuantity(v IComparisonQuantityContext) {
	s._comparisonQuantity = v
}

func (s *CharacteristicContext) Set_dependentCharacteristic(v IDependentCharacteristicContext) {
	s._dependentCharacteristic = v
}

func (s *CharacteristicContext) Set_discrete(v IDiscreteContext) { s._discrete = v }

func (s *CharacteristicContext) Set_displayIdentifier(v IDisplayIdentifierContext) {
	s._displayIdentifier = v
}

func (s *CharacteristicContext) Set_ecuAddressExtension(v IEcuAddressExtensionContext) {
	s._ecuAddressExtension = v
}

func (s *CharacteristicContext) Set_extendedLimits(v IExtendedLimitsContext) { s._extendedLimits = v }

func (s *CharacteristicContext) Set_format(v IFormatContext) { s._format = v }

func (s *CharacteristicContext) Set_functionList(v IFunctionListContext) { s._functionList = v }

func (s *CharacteristicContext) Set_guardRails(v IGuardRailsContext) { s._guardRails = v }

func (s *CharacteristicContext) Set_ifData(v IIfDataContext) { s._ifData = v }

func (s *CharacteristicContext) Set_mapList(v IMapListContext) { s._mapList = v }

func (s *CharacteristicContext) Set_matrixDim(v IMatrixDimContext) { s._matrixDim = v }

func (s *CharacteristicContext) Set_maxRefresh(v IMaxRefreshContext) { s._maxRefresh = v }

func (s *CharacteristicContext) Set_number(v INumberContext) { s._number = v }

func (s *CharacteristicContext) Set_physUnit(v IPhysUnitContext) { s._physUnit = v }

func (s *CharacteristicContext) Set_readOnly(v IReadOnlyContext) { s._readOnly = v }

func (s *CharacteristicContext) Set_refMemorySegment(v IRefMemorySegmentContext) {
	s._refMemorySegment = v
}

func (s *CharacteristicContext) Set_stepSize(v IStepSizeContext) { s._stepSize = v }

func (s *CharacteristicContext) Set_symbolLink(v ISymbolLinkContext) { s._symbolLink = v }

func (s *CharacteristicContext) Set_virtualCharacteristic(v IVirtualCharacteristicContext) {
	s._virtualCharacteristic = v
}

func (s *CharacteristicContext) GetV_annotation() []IAnnotationContext { return s.v_annotation }

func (s *CharacteristicContext) GetV_axisDescr() []IAxisDescrContext { return s.v_axisDescr }

func (s *CharacteristicContext) GetV_bitMask() []IBitMaskContext { return s.v_bitMask }

func (s *CharacteristicContext) GetV_byteOrder() []IByteOrderContext { return s.v_byteOrder }

func (s *CharacteristicContext) GetV_calibrationAccess() []ICalibrationAccessContext {
	return s.v_calibrationAccess
}

func (s *CharacteristicContext) GetV_comparisonQuantity() []IComparisonQuantityContext {
	return s.v_comparisonQuantity
}

func (s *CharacteristicContext) GetV_dependentCharacteristic() []IDependentCharacteristicContext {
	return s.v_dependentCharacteristic
}

func (s *CharacteristicContext) GetV_discrete() []IDiscreteContext { return s.v_discrete }

func (s *CharacteristicContext) GetV_displayIdentifier() []IDisplayIdentifierContext {
	return s.v_displayIdentifier
}

func (s *CharacteristicContext) GetV_ecuAddressExtension() []IEcuAddressExtensionContext {
	return s.v_ecuAddressExtension
}

func (s *CharacteristicContext) GetV_extendedLimits() []IExtendedLimitsContext {
	return s.v_extendedLimits
}

func (s *CharacteristicContext) GetV_format_() []IFormatContext { return s.v_format_ }

func (s *CharacteristicContext) GetV_functionList() []IFunctionListContext { return s.v_functionList }

func (s *CharacteristicContext) GetV_guardRails() []IGuardRailsContext { return s.v_guardRails }

func (s *CharacteristicContext) GetV_ifData() []IIfDataContext { return s.v_ifData }

func (s *CharacteristicContext) GetV_mapList() []IMapListContext { return s.v_mapList }

func (s *CharacteristicContext) GetV_matrixDim() []IMatrixDimContext { return s.v_matrixDim }

func (s *CharacteristicContext) GetV_maxRefresh() []IMaxRefreshContext { return s.v_maxRefresh }

func (s *CharacteristicContext) GetV_number() []INumberContext { return s.v_number }

func (s *CharacteristicContext) GetV_physUnit() []IPhysUnitContext { return s.v_physUnit }

func (s *CharacteristicContext) GetV_readOnly() []IReadOnlyContext { return s.v_readOnly }

func (s *CharacteristicContext) GetV_refMemorySegment() []IRefMemorySegmentContext {
	return s.v_refMemorySegment
}

func (s *CharacteristicContext) GetV_stepSize() []IStepSizeContext { return s.v_stepSize }

func (s *CharacteristicContext) GetV_symbolLink() []ISymbolLinkContext { return s.v_symbolLink }

func (s *CharacteristicContext) GetV_virtualCharacteristic() []IVirtualCharacteristicContext {
	return s.v_virtualCharacteristic
}

func (s *CharacteristicContext) SetV_annotation(v []IAnnotationContext) { s.v_annotation = v }

func (s *CharacteristicContext) SetV_axisDescr(v []IAxisDescrContext) { s.v_axisDescr = v }

func (s *CharacteristicContext) SetV_bitMask(v []IBitMaskContext) { s.v_bitMask = v }

func (s *CharacteristicContext) SetV_byteOrder(v []IByteOrderContext) { s.v_byteOrder = v }

func (s *CharacteristicContext) SetV_calibrationAccess(v []ICalibrationAccessContext) {
	s.v_calibrationAccess = v
}

func (s *CharacteristicContext) SetV_comparisonQuantity(v []IComparisonQuantityContext) {
	s.v_comparisonQuantity = v
}

func (s *CharacteristicContext) SetV_dependentCharacteristic(v []IDependentCharacteristicContext) {
	s.v_dependentCharacteristic = v
}

func (s *CharacteristicContext) SetV_discrete(v []IDiscreteContext) { s.v_discrete = v }

func (s *CharacteristicContext) SetV_displayIdentifier(v []IDisplayIdentifierContext) {
	s.v_displayIdentifier = v
}

func (s *CharacteristicContext) SetV_ecuAddressExtension(v []IEcuAddressExtensionContext) {
	s.v_ecuAddressExtension = v
}

func (s *CharacteristicContext) SetV_extendedLimits(v []IExtendedLimitsContext) {
	s.v_extendedLimits = v
}

func (s *CharacteristicContext) SetV_format_(v []IFormatContext) { s.v_format_ = v }

func (s *CharacteristicContext) SetV_functionList(v []IFunctionListContext) { s.v_functionList = v }

func (s *CharacteristicContext) SetV_guardRails(v []IGuardRailsContext) { s.v_guardRails = v }

func (s *CharacteristicContext) SetV_ifData(v []IIfDataContext) { s.v_ifData = v }

func (s *CharacteristicContext) SetV_mapList(v []IMapListContext) { s.v_mapList = v }

func (s *CharacteristicContext) SetV_matrixDim(v []IMatrixDimContext) { s.v_matrixDim = v }

func (s *CharacteristicContext) SetV_maxRefresh(v []IMaxRefreshContext) { s.v_maxRefresh = v }

func (s *CharacteristicContext) SetV_number(v []INumberContext) { s.v_number = v }

func (s *CharacteristicContext) SetV_physUnit(v []IPhysUnitContext) { s.v_physUnit = v }

func (s *CharacteristicContext) SetV_readOnly(v []IReadOnlyContext) { s.v_readOnly = v }

func (s *CharacteristicContext) SetV_refMemorySegment(v []IRefMemorySegmentContext) {
	s.v_refMemorySegment = v
}

func (s *CharacteristicContext) SetV_stepSize(v []IStepSizeContext) { s.v_stepSize = v }

func (s *CharacteristicContext) SetV_symbolLink(v []ISymbolLinkContext) { s.v_symbolLink = v }

func (s *CharacteristicContext) SetV_virtualCharacteristic(v []IVirtualCharacteristicContext) {
	s.v_virtualCharacteristic = v
}

func (s *CharacteristicContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(A2LParserBEGIN, 0)
}

func (s *CharacteristicContext) END() antlr.TerminalNode {
	return s.GetToken(A2LParserEND, 0)
}

func (s *CharacteristicContext) AllIdentifierValue() []IIdentifierValueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierValueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierValueContext); ok {
			tst[i] = t.(IIdentifierValueContext)
			i++
		}
	}

	return tst
}

func (s *CharacteristicContext) IdentifierValue(i int) IIdentifierValueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierValueContext)
}

func (s *CharacteristicContext) StringValue() IStringValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringValueContext)
}

func (s *CharacteristicContext) IntegerValue() IIntegerValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *CharacteristicContext) AllNumericValue() []INumericValueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INumericValueContext); ok {
			len++
		}
	}

	tst := make([]INumericValueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INumericValueContext); ok {
			tst[i] = t.(INumericValueContext)
			i++
		}
	}

	return tst
}

func (s *CharacteristicContext) NumericValue(i int) INumericValueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumericValueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumericValueContext)
}

func (s *CharacteristicContext) AllAnnotation() []IAnnotationContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAnnotationContext); ok {
			len++
		}
	}

	tst := make([]IAnnotationContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAnnotationContext); ok {
			tst[i] = t.(IAnnotationContext)
			i++
		}
	}

	return tst
}

func (s *CharacteristicContext) Annotation(i int) IAnnotationContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAnnotationContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAnnotationContext)
}

func (s *CharacteristicContext) AllAxisDescr() []IAxisDescrContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAxisDescrContext); ok {
			len++
		}
	}

	tst := make([]IAxisDescrContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAxisDescrContext); ok {
			tst[i] = t.(IAxisDescrContext)
			i++
		}
	}

	return tst
}

func (s *CharacteristicContext) AxisDescr(i int) IAxisDescrContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAxisDescrContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAxisDescrContext)
}

func (s *CharacteristicContext) AllBitMask() []IBitMaskContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IBitMaskContext); ok {
			len++
		}
	}

	tst := make([]IBitMaskContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IBitMaskContext); ok {
			tst[i] = t.(IBitMaskContext)
			i++
		}
	}

	return tst
}

func (s *CharacteristicContext) BitMask(i int) IBitMaskContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBitMaskContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBitMaskContext)
}

func (s *CharacteristicContext) AllByteOrder() []IByteOrderContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IByteOrderContext); ok {
			len++
		}
	}

	tst := make([]IByteOrderContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IByteOrderContext); ok {
			tst[i] = t.(IByteOrderContext)
			i++
		}
	}

	return tst
}

func (s *CharacteristicContext) ByteOrder(i int) IByteOrderContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IByteOrderContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IByteOrderContext)
}

func (s *CharacteristicContext) AllCalibrationAccess() []ICalibrationAccessContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ICalibrationAccessContext); ok {
			len++
		}
	}

	tst := make([]ICalibrationAccessContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ICalibrationAccessContext); ok {
			tst[i] = t.(ICalibrationAccessContext)
			i++
		}
	}

	return tst
}

func (s *CharacteristicContext) CalibrationAccess(i int) ICalibrationAccessContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICalibrationAccessContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICalibrationAccessContext)
}

func (s *CharacteristicContext) AllComparisonQuantity() []IComparisonQuantityContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IComparisonQuantityContext); ok {
			len++
		}
	}

	tst := make([]IComparisonQuantityContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IComparisonQuantityContext); ok {
			tst[i] = t.(IComparisonQuantityContext)
			i++
		}
	}

	return tst
}

func (s *CharacteristicContext) ComparisonQuantity(i int) IComparisonQuantityContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IComparisonQuantityContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IComparisonQuantityContext)
}

func (s *CharacteristicContext) AllDependentCharacteristic() []IDependentCharacteristicContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDependentCharacteristicContext); ok {
			len++
		}
	}

	tst := make([]IDependentCharacteristicContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDependentCharacteristicContext); ok {
			tst[i] = t.(IDependentCharacteristicContext)
			i++
		}
	}

	return tst
}

func (s *CharacteristicContext) DependentCharacteristic(i int) IDependentCharacteristicContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDependentCharacteristicContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDependentCharacteristicContext)
}

func (s *CharacteristicContext) AllDiscrete() []IDiscreteContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDiscreteContext); ok {
			len++
		}
	}

	tst := make([]IDiscreteContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDiscreteContext); ok {
			tst[i] = t.(IDiscreteContext)
			i++
		}
	}

	return tst
}

func (s *CharacteristicContext) Discrete(i int) IDiscreteContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDiscreteContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDiscreteContext)
}

func (s *CharacteristicContext) AllDisplayIdentifier() []IDisplayIdentifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDisplayIdentifierContext); ok {
			len++
		}
	}

	tst := make([]IDisplayIdentifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDisplayIdentifierContext); ok {
			tst[i] = t.(IDisplayIdentifierContext)
			i++
		}
	}

	return tst
}

func (s *CharacteristicContext) DisplayIdentifier(i int) IDisplayIdentifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDisplayIdentifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDisplayIdentifierContext)
}

func (s *CharacteristicContext) AllEcuAddressExtension() []IEcuAddressExtensionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IEcuAddressExtensionContext); ok {
			len++
		}
	}

	tst := make([]IEcuAddressExtensionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IEcuAddressExtensionContext); ok {
			tst[i] = t.(IEcuAddressExtensionContext)
			i++
		}
	}

	return tst
}

func (s *CharacteristicContext) EcuAddressExtension(i int) IEcuAddressExtensionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEcuAddressExtensionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEcuAddressExtensionContext)
}

func (s *CharacteristicContext) AllExtendedLimits() []IExtendedLimitsContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExtendedLimitsContext); ok {
			len++
		}
	}

	tst := make([]IExtendedLimitsContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExtendedLimitsContext); ok {
			tst[i] = t.(IExtendedLimitsContext)
			i++
		}
	}

	return tst
}

func (s *CharacteristicContext) ExtendedLimits(i int) IExtendedLimitsContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExtendedLimitsContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExtendedLimitsContext)
}

func (s *CharacteristicContext) AllFormat() []IFormatContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IFormatContext); ok {
			len++
		}
	}

	tst := make([]IFormatContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IFormatContext); ok {
			tst[i] = t.(IFormatContext)
			i++
		}
	}

	return tst
}

func (s *CharacteristicContext) Format(i int) IFormatContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFormatContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFormatContext)
}

func (s *CharacteristicContext) AllFunctionList() []IFunctionListContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IFunctionListContext); ok {
			len++
		}
	}

	tst := make([]IFunctionListContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IFunctionListContext); ok {
			tst[i] = t.(IFunctionListContext)
			i++
		}
	}

	return tst
}

func (s *CharacteristicContext) FunctionList(i int) IFunctionListContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunctionListContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunctionListContext)
}

func (s *CharacteristicContext) AllGuardRails() []IGuardRailsContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IGuardRailsContext); ok {
			len++
		}
	}

	tst := make([]IGuardRailsContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IGuardRailsContext); ok {
			tst[i] = t.(IGuardRailsContext)
			i++
		}
	}

	return tst
}

func (s *CharacteristicContext) GuardRails(i int) IGuardRailsContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGuardRailsContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGuardRailsContext)
}

func (s *CharacteristicContext) AllIfData() []IIfDataContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIfDataContext); ok {
			len++
		}
	}

	tst := make([]IIfDataContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIfDataContext); ok {
			tst[i] = t.(IIfDataContext)
			i++
		}
	}

	return tst
}

func (s *CharacteristicContext) IfData(i int) IIfDataContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIfDataContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIfDataContext)
}

func (s *CharacteristicContext) AllMapList() []IMapListContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IMapListContext); ok {
			len++
		}
	}

	tst := make([]IMapListContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IMapListContext); ok {
			tst[i] = t.(IMapListContext)
			i++
		}
	}

	return tst
}

func (s *CharacteristicContext) MapList(i int) IMapListContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMapListContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMapListContext)
}

func (s *CharacteristicContext) AllMatrixDim() []IMatrixDimContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IMatrixDimContext); ok {
			len++
		}
	}

	tst := make([]IMatrixDimContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IMatrixDimContext); ok {
			tst[i] = t.(IMatrixDimContext)
			i++
		}
	}

	return tst
}

func (s *CharacteristicContext) MatrixDim(i int) IMatrixDimContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMatrixDimContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMatrixDimContext)
}

func (s *CharacteristicContext) AllMaxRefresh() []IMaxRefreshContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IMaxRefreshContext); ok {
			len++
		}
	}

	tst := make([]IMaxRefreshContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IMaxRefreshContext); ok {
			tst[i] = t.(IMaxRefreshContext)
			i++
		}
	}

	return tst
}

func (s *CharacteristicContext) MaxRefresh(i int) IMaxRefreshContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMaxRefreshContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMaxRefreshContext)
}

func (s *CharacteristicContext) AllNumber() []INumberContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INumberContext); ok {
			len++
		}
	}

	tst := make([]INumberContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INumberContext); ok {
			tst[i] = t.(INumberContext)
			i++
		}
	}

	return tst
}

func (s *CharacteristicContext) Number(i int) INumberContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumberContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumberContext)
}

func (s *CharacteristicContext) AllPhysUnit() []IPhysUnitContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IPhysUnitContext); ok {
			len++
		}
	}

	tst := make([]IPhysUnitContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IPhysUnitContext); ok {
			tst[i] = t.(IPhysUnitContext)
			i++
		}
	}

	return tst
}

func (s *CharacteristicContext) PhysUnit(i int) IPhysUnitContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPhysUnitContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPhysUnitContext)
}

func (s *CharacteristicContext) AllReadOnly() []IReadOnlyContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IReadOnlyContext); ok {
			len++
		}
	}

	tst := make([]IReadOnlyContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IReadOnlyContext); ok {
			tst[i] = t.(IReadOnlyContext)
			i++
		}
	}

	return tst
}

func (s *CharacteristicContext) ReadOnly(i int) IReadOnlyContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IReadOnlyContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IReadOnlyContext)
}

func (s *CharacteristicContext) AllRefMemorySegment() []IRefMemorySegmentContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IRefMemorySegmentContext); ok {
			len++
		}
	}

	tst := make([]IRefMemorySegmentContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IRefMemorySegmentContext); ok {
			tst[i] = t.(IRefMemorySegmentContext)
			i++
		}
	}

	return tst
}

func (s *CharacteristicContext) RefMemorySegment(i int) IRefMemorySegmentContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRefMemorySegmentContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRefMemorySegmentContext)
}

func (s *CharacteristicContext) AllStepSize() []IStepSizeContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStepSizeContext); ok {
			len++
		}
	}

	tst := make([]IStepSizeContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStepSizeContext); ok {
			tst[i] = t.(IStepSizeContext)
			i++
		}
	}

	return tst
}

func (s *CharacteristicContext) StepSize(i int) IStepSizeContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStepSizeContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStepSizeContext)
}

func (s *CharacteristicContext) AllSymbolLink() []ISymbolLinkContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISymbolLinkContext); ok {
			len++
		}
	}

	tst := make([]ISymbolLinkContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISymbolLinkContext); ok {
			tst[i] = t.(ISymbolLinkContext)
			i++
		}
	}

	return tst
}

func (s *CharacteristicContext) SymbolLink(i int) ISymbolLinkContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISymbolLinkContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISymbolLinkContext)
}

func (s *CharacteristicContext) AllVirtualCharacteristic() []IVirtualCharacteristicContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IVirtualCharacteristicContext); ok {
			len++
		}
	}

	tst := make([]IVirtualCharacteristicContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IVirtualCharacteristicContext); ok {
			tst[i] = t.(IVirtualCharacteristicContext)
			i++
		}
	}

	return tst
}

func (s *CharacteristicContext) VirtualCharacteristic(i int) IVirtualCharacteristicContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVirtualCharacteristicContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVirtualCharacteristicContext)
}

func (s *CharacteristicContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CharacteristicContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CharacteristicContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterCharacteristic(s)
	}
}

func (s *CharacteristicContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitCharacteristic(s)
	}
}

func (s *CharacteristicContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitCharacteristic(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) Characteristic() (localctx ICharacteristicContext) {
	this := p
	_ = this

	localctx = NewCharacteristicContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 84, A2LParserRULE_characteristic)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(695)
		p.Match(A2LParserBEGIN)
	}
	{
		p.SetState(696)
		p.Match(A2LParserT__54)
	}
	{
		p.SetState(697)

		var _x = p.IdentifierValue()

		localctx.(*CharacteristicContext).name = _x
	}
	{
		p.SetState(698)

		var _x = p.StringValue()

		localctx.(*CharacteristicContext).longIdentifier = _x
	}
	{
		p.SetState(699)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*CharacteristicContext).type_ = _lt

		_la = p.GetTokenStream().LA(1)

		if !((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-72057594037927936) != 0) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*CharacteristicContext).type_ = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(700)

		var _x = p.IntegerValue()

		localctx.(*CharacteristicContext).address = _x
	}
	{
		p.SetState(701)

		var _x = p.IdentifierValue()

		localctx.(*CharacteristicContext).deposit_ = _x
	}
	{
		p.SetState(702)

		var _x = p.NumericValue()

		localctx.(*CharacteristicContext).maxDiff = _x
	}
	{
		p.SetState(703)

		var _x = p.IdentifierValue()

		localctx.(*CharacteristicContext).conversion = _x
	}
	{
		p.SetState(704)

		var _x = p.NumericValue()

		localctx.(*CharacteristicContext).lowerLimit = _x
	}
	{
		p.SetState(705)

		var _x = p.NumericValue()

		localctx.(*CharacteristicContext).upperLimit = _x
	}
	p.SetState(733)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&117651762343936) != 0) || _la == A2LParserT__75 || _la == A2LParserT__78 || _la == A2LParserBEGIN {
		p.SetState(731)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 17, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(706)

				var _x = p.Annotation()

				localctx.(*CharacteristicContext)._annotation = _x
			}
			localctx.(*CharacteristicContext).v_annotation = append(localctx.(*CharacteristicContext).v_annotation, localctx.(*CharacteristicContext)._annotation)

		case 2:
			{
				p.SetState(707)

				var _x = p.AxisDescr()

				localctx.(*CharacteristicContext)._axisDescr = _x
			}
			localctx.(*CharacteristicContext).v_axisDescr = append(localctx.(*CharacteristicContext).v_axisDescr, localctx.(*CharacteristicContext)._axisDescr)

		case 3:
			{
				p.SetState(708)

				var _x = p.BitMask()

				localctx.(*CharacteristicContext)._bitMask = _x
			}
			localctx.(*CharacteristicContext).v_bitMask = append(localctx.(*CharacteristicContext).v_bitMask, localctx.(*CharacteristicContext)._bitMask)

		case 4:
			{
				p.SetState(709)

				var _x = p.ByteOrder()

				localctx.(*CharacteristicContext)._byteOrder = _x
			}
			localctx.(*CharacteristicContext).v_byteOrder = append(localctx.(*CharacteristicContext).v_byteOrder, localctx.(*CharacteristicContext)._byteOrder)

		case 5:
			{
				p.SetState(710)

				var _x = p.CalibrationAccess()

				localctx.(*CharacteristicContext)._calibrationAccess = _x
			}
			localctx.(*CharacteristicContext).v_calibrationAccess = append(localctx.(*CharacteristicContext).v_calibrationAccess, localctx.(*CharacteristicContext)._calibrationAccess)

		case 6:
			{
				p.SetState(711)

				var _x = p.ComparisonQuantity()

				localctx.(*CharacteristicContext)._comparisonQuantity = _x
			}
			localctx.(*CharacteristicContext).v_comparisonQuantity = append(localctx.(*CharacteristicContext).v_comparisonQuantity, localctx.(*CharacteristicContext)._comparisonQuantity)

		case 7:
			{
				p.SetState(712)

				var _x = p.DependentCharacteristic()

				localctx.(*CharacteristicContext)._dependentCharacteristic = _x
			}
			localctx.(*CharacteristicContext).v_dependentCharacteristic = append(localctx.(*CharacteristicContext).v_dependentCharacteristic, localctx.(*CharacteristicContext)._dependentCharacteristic)

		case 8:
			{
				p.SetState(713)

				var _x = p.Discrete()

				localctx.(*CharacteristicContext)._discrete = _x
			}
			localctx.(*CharacteristicContext).v_discrete = append(localctx.(*CharacteristicContext).v_discrete, localctx.(*CharacteristicContext)._discrete)

		case 9:
			{
				p.SetState(714)

				var _x = p.DisplayIdentifier()

				localctx.(*CharacteristicContext)._displayIdentifier = _x
			}
			localctx.(*CharacteristicContext).v_displayIdentifier = append(localctx.(*CharacteristicContext).v_displayIdentifier, localctx.(*CharacteristicContext)._displayIdentifier)

		case 10:
			{
				p.SetState(715)

				var _x = p.EcuAddressExtension()

				localctx.(*CharacteristicContext)._ecuAddressExtension = _x
			}
			localctx.(*CharacteristicContext).v_ecuAddressExtension = append(localctx.(*CharacteristicContext).v_ecuAddressExtension, localctx.(*CharacteristicContext)._ecuAddressExtension)

		case 11:
			{
				p.SetState(716)

				var _x = p.ExtendedLimits()

				localctx.(*CharacteristicContext)._extendedLimits = _x
			}
			localctx.(*CharacteristicContext).v_extendedLimits = append(localctx.(*CharacteristicContext).v_extendedLimits, localctx.(*CharacteristicContext)._extendedLimits)

		case 12:
			{
				p.SetState(717)

				var _x = p.Format()

				localctx.(*CharacteristicContext)._format = _x
			}
			localctx.(*CharacteristicContext).v_format_ = append(localctx.(*CharacteristicContext).v_format_, localctx.(*CharacteristicContext)._format)

		case 13:
			{
				p.SetState(718)

				var _x = p.FunctionList()

				localctx.(*CharacteristicContext)._functionList = _x
			}
			localctx.(*CharacteristicContext).v_functionList = append(localctx.(*CharacteristicContext).v_functionList, localctx.(*CharacteristicContext)._functionList)

		case 14:
			{
				p.SetState(719)

				var _x = p.GuardRails()

				localctx.(*CharacteristicContext)._guardRails = _x
			}
			localctx.(*CharacteristicContext).v_guardRails = append(localctx.(*CharacteristicContext).v_guardRails, localctx.(*CharacteristicContext)._guardRails)

		case 15:
			{
				p.SetState(720)

				var _x = p.IfData()

				localctx.(*CharacteristicContext)._ifData = _x
			}
			localctx.(*CharacteristicContext).v_ifData = append(localctx.(*CharacteristicContext).v_ifData, localctx.(*CharacteristicContext)._ifData)

		case 16:
			{
				p.SetState(721)

				var _x = p.MapList()

				localctx.(*CharacteristicContext)._mapList = _x
			}
			localctx.(*CharacteristicContext).v_mapList = append(localctx.(*CharacteristicContext).v_mapList, localctx.(*CharacteristicContext)._mapList)

		case 17:
			{
				p.SetState(722)

				var _x = p.MatrixDim()

				localctx.(*CharacteristicContext)._matrixDim = _x
			}
			localctx.(*CharacteristicContext).v_matrixDim = append(localctx.(*CharacteristicContext).v_matrixDim, localctx.(*CharacteristicContext)._matrixDim)

		case 18:
			{
				p.SetState(723)

				var _x = p.MaxRefresh()

				localctx.(*CharacteristicContext)._maxRefresh = _x
			}
			localctx.(*CharacteristicContext).v_maxRefresh = append(localctx.(*CharacteristicContext).v_maxRefresh, localctx.(*CharacteristicContext)._maxRefresh)

		case 19:
			{
				p.SetState(724)

				var _x = p.Number()

				localctx.(*CharacteristicContext)._number = _x
			}
			localctx.(*CharacteristicContext).v_number = append(localctx.(*CharacteristicContext).v_number, localctx.(*CharacteristicContext)._number)

		case 20:
			{
				p.SetState(725)

				var _x = p.PhysUnit()

				localctx.(*CharacteristicContext)._physUnit = _x
			}
			localctx.(*CharacteristicContext).v_physUnit = append(localctx.(*CharacteristicContext).v_physUnit, localctx.(*CharacteristicContext)._physUnit)

		case 21:
			{
				p.SetState(726)

				var _x = p.ReadOnly()

				localctx.(*CharacteristicContext)._readOnly = _x
			}
			localctx.(*CharacteristicContext).v_readOnly = append(localctx.(*CharacteristicContext).v_readOnly, localctx.(*CharacteristicContext)._readOnly)

		case 22:
			{
				p.SetState(727)

				var _x = p.RefMemorySegment()

				localctx.(*CharacteristicContext)._refMemorySegment = _x
			}
			localctx.(*CharacteristicContext).v_refMemorySegment = append(localctx.(*CharacteristicContext).v_refMemorySegment, localctx.(*CharacteristicContext)._refMemorySegment)

		case 23:
			{
				p.SetState(728)

				var _x = p.StepSize()

				localctx.(*CharacteristicContext)._stepSize = _x
			}
			localctx.(*CharacteristicContext).v_stepSize = append(localctx.(*CharacteristicContext).v_stepSize, localctx.(*CharacteristicContext)._stepSize)

		case 24:
			{
				p.SetState(729)

				var _x = p.SymbolLink()

				localctx.(*CharacteristicContext)._symbolLink = _x
			}
			localctx.(*CharacteristicContext).v_symbolLink = append(localctx.(*CharacteristicContext).v_symbolLink, localctx.(*CharacteristicContext)._symbolLink)

		case 25:
			{
				p.SetState(730)

				var _x = p.VirtualCharacteristic()

				localctx.(*CharacteristicContext)._virtualCharacteristic = _x
			}
			localctx.(*CharacteristicContext).v_virtualCharacteristic = append(localctx.(*CharacteristicContext).v_virtualCharacteristic, localctx.(*CharacteristicContext)._virtualCharacteristic)

		}

		p.SetState(735)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(736)
		p.Match(A2LParserEND)
	}
	{
		p.SetState(737)
		p.Match(A2LParserT__54)
	}

	return localctx
}

// IAxisDescrContext is an interface to support dynamic dispatch.
type IAxisDescrContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetAttribute returns the attribute token.
	GetAttribute() antlr.Token

	// SetAttribute sets the attribute token.
	SetAttribute(antlr.Token)

	// GetInputQuantity returns the inputQuantity rule contexts.
	GetInputQuantity() IIdentifierValueContext

	// GetConversion returns the conversion rule contexts.
	GetConversion() IIdentifierValueContext

	// GetMaxAxisPoints returns the maxAxisPoints rule contexts.
	GetMaxAxisPoints() IIntegerValueContext

	// GetLowerLimit returns the lowerLimit rule contexts.
	GetLowerLimit() INumericValueContext

	// GetUpperLimit returns the upperLimit rule contexts.
	GetUpperLimit() INumericValueContext

	// Get_annotation returns the _annotation rule contexts.
	Get_annotation() IAnnotationContext

	// Get_axisPtsRef returns the _axisPtsRef rule contexts.
	Get_axisPtsRef() IAxisPtsRefContext

	// Get_byteOrder returns the _byteOrder rule contexts.
	Get_byteOrder() IByteOrderContext

	// Get_curveAxisRef returns the _curveAxisRef rule contexts.
	Get_curveAxisRef() ICurveAxisRefContext

	// Get_deposit returns the _deposit rule contexts.
	Get_deposit() IDepositContext

	// Get_extendedLimits returns the _extendedLimits rule contexts.
	Get_extendedLimits() IExtendedLimitsContext

	// Get_fixAxisPar returns the _fixAxisPar rule contexts.
	Get_fixAxisPar() IFixAxisParContext

	// Get_fixAxisParDist returns the _fixAxisParDist rule contexts.
	Get_fixAxisParDist() IFixAxisParDistContext

	// Get_fixAxisParList returns the _fixAxisParList rule contexts.
	Get_fixAxisParList() IFixAxisParListContext

	// Get_format returns the _format rule contexts.
	Get_format() IFormatContext

	// Get_maxGrad returns the _maxGrad rule contexts.
	Get_maxGrad() IMaxGradContext

	// Get_monotony returns the _monotony rule contexts.
	Get_monotony() IMonotonyContext

	// Get_physUnit returns the _physUnit rule contexts.
	Get_physUnit() IPhysUnitContext

	// Get_readOnly returns the _readOnly rule contexts.
	Get_readOnly() IReadOnlyContext

	// Get_stepSize returns the _stepSize rule contexts.
	Get_stepSize() IStepSizeContext

	// SetInputQuantity sets the inputQuantity rule contexts.
	SetInputQuantity(IIdentifierValueContext)

	// SetConversion sets the conversion rule contexts.
	SetConversion(IIdentifierValueContext)

	// SetMaxAxisPoints sets the maxAxisPoints rule contexts.
	SetMaxAxisPoints(IIntegerValueContext)

	// SetLowerLimit sets the lowerLimit rule contexts.
	SetLowerLimit(INumericValueContext)

	// SetUpperLimit sets the upperLimit rule contexts.
	SetUpperLimit(INumericValueContext)

	// Set_annotation sets the _annotation rule contexts.
	Set_annotation(IAnnotationContext)

	// Set_axisPtsRef sets the _axisPtsRef rule contexts.
	Set_axisPtsRef(IAxisPtsRefContext)

	// Set_byteOrder sets the _byteOrder rule contexts.
	Set_byteOrder(IByteOrderContext)

	// Set_curveAxisRef sets the _curveAxisRef rule contexts.
	Set_curveAxisRef(ICurveAxisRefContext)

	// Set_deposit sets the _deposit rule contexts.
	Set_deposit(IDepositContext)

	// Set_extendedLimits sets the _extendedLimits rule contexts.
	Set_extendedLimits(IExtendedLimitsContext)

	// Set_fixAxisPar sets the _fixAxisPar rule contexts.
	Set_fixAxisPar(IFixAxisParContext)

	// Set_fixAxisParDist sets the _fixAxisParDist rule contexts.
	Set_fixAxisParDist(IFixAxisParDistContext)

	// Set_fixAxisParList sets the _fixAxisParList rule contexts.
	Set_fixAxisParList(IFixAxisParListContext)

	// Set_format sets the _format rule contexts.
	Set_format(IFormatContext)

	// Set_maxGrad sets the _maxGrad rule contexts.
	Set_maxGrad(IMaxGradContext)

	// Set_monotony sets the _monotony rule contexts.
	Set_monotony(IMonotonyContext)

	// Set_physUnit sets the _physUnit rule contexts.
	Set_physUnit(IPhysUnitContext)

	// Set_readOnly sets the _readOnly rule contexts.
	Set_readOnly(IReadOnlyContext)

	// Set_stepSize sets the _stepSize rule contexts.
	Set_stepSize(IStepSizeContext)

	// GetV_annotation returns the v_annotation rule context list.
	GetV_annotation() []IAnnotationContext

	// GetV_axisPtsRef returns the v_axisPtsRef rule context list.
	GetV_axisPtsRef() []IAxisPtsRefContext

	// GetV_byteOrder returns the v_byteOrder rule context list.
	GetV_byteOrder() []IByteOrderContext

	// GetV_curveAxisRef returns the v_curveAxisRef rule context list.
	GetV_curveAxisRef() []ICurveAxisRefContext

	// GetV_deposit returns the v_deposit rule context list.
	GetV_deposit() []IDepositContext

	// GetV_extendedLimits returns the v_extendedLimits rule context list.
	GetV_extendedLimits() []IExtendedLimitsContext

	// GetV_fixAxisPar returns the v_fixAxisPar rule context list.
	GetV_fixAxisPar() []IFixAxisParContext

	// GetV_fixAxisParDist returns the v_fixAxisParDist rule context list.
	GetV_fixAxisParDist() []IFixAxisParDistContext

	// GetV_fixAxisParList returns the v_fixAxisParList rule context list.
	GetV_fixAxisParList() []IFixAxisParListContext

	// GetV_format_ returns the v_format_ rule context list.
	GetV_format_() []IFormatContext

	// GetV_maxGrad returns the v_maxGrad rule context list.
	GetV_maxGrad() []IMaxGradContext

	// GetV_monotony returns the v_monotony rule context list.
	GetV_monotony() []IMonotonyContext

	// GetV_physUnit returns the v_physUnit rule context list.
	GetV_physUnit() []IPhysUnitContext

	// GetV_readOnly returns the v_readOnly rule context list.
	GetV_readOnly() []IReadOnlyContext

	// GetV_stepSize returns the v_stepSize rule context list.
	GetV_stepSize() []IStepSizeContext

	// SetV_annotation sets the v_annotation rule context list.
	SetV_annotation([]IAnnotationContext)

	// SetV_axisPtsRef sets the v_axisPtsRef rule context list.
	SetV_axisPtsRef([]IAxisPtsRefContext)

	// SetV_byteOrder sets the v_byteOrder rule context list.
	SetV_byteOrder([]IByteOrderContext)

	// SetV_curveAxisRef sets the v_curveAxisRef rule context list.
	SetV_curveAxisRef([]ICurveAxisRefContext)

	// SetV_deposit sets the v_deposit rule context list.
	SetV_deposit([]IDepositContext)

	// SetV_extendedLimits sets the v_extendedLimits rule context list.
	SetV_extendedLimits([]IExtendedLimitsContext)

	// SetV_fixAxisPar sets the v_fixAxisPar rule context list.
	SetV_fixAxisPar([]IFixAxisParContext)

	// SetV_fixAxisParDist sets the v_fixAxisParDist rule context list.
	SetV_fixAxisParDist([]IFixAxisParDistContext)

	// SetV_fixAxisParList sets the v_fixAxisParList rule context list.
	SetV_fixAxisParList([]IFixAxisParListContext)

	// SetV_format_ sets the v_format_ rule context list.
	SetV_format_([]IFormatContext)

	// SetV_maxGrad sets the v_maxGrad rule context list.
	SetV_maxGrad([]IMaxGradContext)

	// SetV_monotony sets the v_monotony rule context list.
	SetV_monotony([]IMonotonyContext)

	// SetV_physUnit sets the v_physUnit rule context list.
	SetV_physUnit([]IPhysUnitContext)

	// SetV_readOnly sets the v_readOnly rule context list.
	SetV_readOnly([]IReadOnlyContext)

	// SetV_stepSize sets the v_stepSize rule context list.
	SetV_stepSize([]IStepSizeContext)

	// Getter signatures
	BEGIN() antlr.TerminalNode
	END() antlr.TerminalNode
	AllIdentifierValue() []IIdentifierValueContext
	IdentifierValue(i int) IIdentifierValueContext
	IntegerValue() IIntegerValueContext
	AllNumericValue() []INumericValueContext
	NumericValue(i int) INumericValueContext
	AllAnnotation() []IAnnotationContext
	Annotation(i int) IAnnotationContext
	AllAxisPtsRef() []IAxisPtsRefContext
	AxisPtsRef(i int) IAxisPtsRefContext
	AllByteOrder() []IByteOrderContext
	ByteOrder(i int) IByteOrderContext
	AllCurveAxisRef() []ICurveAxisRefContext
	CurveAxisRef(i int) ICurveAxisRefContext
	AllDeposit() []IDepositContext
	Deposit(i int) IDepositContext
	AllExtendedLimits() []IExtendedLimitsContext
	ExtendedLimits(i int) IExtendedLimitsContext
	AllFixAxisPar() []IFixAxisParContext
	FixAxisPar(i int) IFixAxisParContext
	AllFixAxisParDist() []IFixAxisParDistContext
	FixAxisParDist(i int) IFixAxisParDistContext
	AllFixAxisParList() []IFixAxisParListContext
	FixAxisParList(i int) IFixAxisParListContext
	AllFormat() []IFormatContext
	Format(i int) IFormatContext
	AllMaxGrad() []IMaxGradContext
	MaxGrad(i int) IMaxGradContext
	AllMonotony() []IMonotonyContext
	Monotony(i int) IMonotonyContext
	AllPhysUnit() []IPhysUnitContext
	PhysUnit(i int) IPhysUnitContext
	AllReadOnly() []IReadOnlyContext
	ReadOnly(i int) IReadOnlyContext
	AllStepSize() []IStepSizeContext
	StepSize(i int) IStepSizeContext

	// IsAxisDescrContext differentiates from other interfaces.
	IsAxisDescrContext()
}

type AxisDescrContext struct {
	*antlr.BaseParserRuleContext
	parser           antlr.Parser
	attribute        antlr.Token
	inputQuantity    IIdentifierValueContext
	conversion       IIdentifierValueContext
	maxAxisPoints    IIntegerValueContext
	lowerLimit       INumericValueContext
	upperLimit       INumericValueContext
	_annotation      IAnnotationContext
	v_annotation     []IAnnotationContext
	_axisPtsRef      IAxisPtsRefContext
	v_axisPtsRef     []IAxisPtsRefContext
	_byteOrder       IByteOrderContext
	v_byteOrder      []IByteOrderContext
	_curveAxisRef    ICurveAxisRefContext
	v_curveAxisRef   []ICurveAxisRefContext
	_deposit         IDepositContext
	v_deposit        []IDepositContext
	_extendedLimits  IExtendedLimitsContext
	v_extendedLimits []IExtendedLimitsContext
	_fixAxisPar      IFixAxisParContext
	v_fixAxisPar     []IFixAxisParContext
	_fixAxisParDist  IFixAxisParDistContext
	v_fixAxisParDist []IFixAxisParDistContext
	_fixAxisParList  IFixAxisParListContext
	v_fixAxisParList []IFixAxisParListContext
	_format          IFormatContext
	v_format_        []IFormatContext
	_maxGrad         IMaxGradContext
	v_maxGrad        []IMaxGradContext
	_monotony        IMonotonyContext
	v_monotony       []IMonotonyContext
	_physUnit        IPhysUnitContext
	v_physUnit       []IPhysUnitContext
	_readOnly        IReadOnlyContext
	v_readOnly       []IReadOnlyContext
	_stepSize        IStepSizeContext
	v_stepSize       []IStepSizeContext
}

func NewEmptyAxisDescrContext() *AxisDescrContext {
	var p = new(AxisDescrContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_axisDescr
	return p
}

func (*AxisDescrContext) IsAxisDescrContext() {}

func NewAxisDescrContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AxisDescrContext {
	var p = new(AxisDescrContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_axisDescr

	return p
}

func (s *AxisDescrContext) GetParser() antlr.Parser { return s.parser }

func (s *AxisDescrContext) GetAttribute() antlr.Token { return s.attribute }

func (s *AxisDescrContext) SetAttribute(v antlr.Token) { s.attribute = v }

func (s *AxisDescrContext) GetInputQuantity() IIdentifierValueContext { return s.inputQuantity }

func (s *AxisDescrContext) GetConversion() IIdentifierValueContext { return s.conversion }

func (s *AxisDescrContext) GetMaxAxisPoints() IIntegerValueContext { return s.maxAxisPoints }

func (s *AxisDescrContext) GetLowerLimit() INumericValueContext { return s.lowerLimit }

func (s *AxisDescrContext) GetUpperLimit() INumericValueContext { return s.upperLimit }

func (s *AxisDescrContext) Get_annotation() IAnnotationContext { return s._annotation }

func (s *AxisDescrContext) Get_axisPtsRef() IAxisPtsRefContext { return s._axisPtsRef }

func (s *AxisDescrContext) Get_byteOrder() IByteOrderContext { return s._byteOrder }

func (s *AxisDescrContext) Get_curveAxisRef() ICurveAxisRefContext { return s._curveAxisRef }

func (s *AxisDescrContext) Get_deposit() IDepositContext { return s._deposit }

func (s *AxisDescrContext) Get_extendedLimits() IExtendedLimitsContext { return s._extendedLimits }

func (s *AxisDescrContext) Get_fixAxisPar() IFixAxisParContext { return s._fixAxisPar }

func (s *AxisDescrContext) Get_fixAxisParDist() IFixAxisParDistContext { return s._fixAxisParDist }

func (s *AxisDescrContext) Get_fixAxisParList() IFixAxisParListContext { return s._fixAxisParList }

func (s *AxisDescrContext) Get_format() IFormatContext { return s._format }

func (s *AxisDescrContext) Get_maxGrad() IMaxGradContext { return s._maxGrad }

func (s *AxisDescrContext) Get_monotony() IMonotonyContext { return s._monotony }

func (s *AxisDescrContext) Get_physUnit() IPhysUnitContext { return s._physUnit }

func (s *AxisDescrContext) Get_readOnly() IReadOnlyContext { return s._readOnly }

func (s *AxisDescrContext) Get_stepSize() IStepSizeContext { return s._stepSize }

func (s *AxisDescrContext) SetInputQuantity(v IIdentifierValueContext) { s.inputQuantity = v }

func (s *AxisDescrContext) SetConversion(v IIdentifierValueContext) { s.conversion = v }

func (s *AxisDescrContext) SetMaxAxisPoints(v IIntegerValueContext) { s.maxAxisPoints = v }

func (s *AxisDescrContext) SetLowerLimit(v INumericValueContext) { s.lowerLimit = v }

func (s *AxisDescrContext) SetUpperLimit(v INumericValueContext) { s.upperLimit = v }

func (s *AxisDescrContext) Set_annotation(v IAnnotationContext) { s._annotation = v }

func (s *AxisDescrContext) Set_axisPtsRef(v IAxisPtsRefContext) { s._axisPtsRef = v }

func (s *AxisDescrContext) Set_byteOrder(v IByteOrderContext) { s._byteOrder = v }

func (s *AxisDescrContext) Set_curveAxisRef(v ICurveAxisRefContext) { s._curveAxisRef = v }

func (s *AxisDescrContext) Set_deposit(v IDepositContext) { s._deposit = v }

func (s *AxisDescrContext) Set_extendedLimits(v IExtendedLimitsContext) { s._extendedLimits = v }

func (s *AxisDescrContext) Set_fixAxisPar(v IFixAxisParContext) { s._fixAxisPar = v }

func (s *AxisDescrContext) Set_fixAxisParDist(v IFixAxisParDistContext) { s._fixAxisParDist = v }

func (s *AxisDescrContext) Set_fixAxisParList(v IFixAxisParListContext) { s._fixAxisParList = v }

func (s *AxisDescrContext) Set_format(v IFormatContext) { s._format = v }

func (s *AxisDescrContext) Set_maxGrad(v IMaxGradContext) { s._maxGrad = v }

func (s *AxisDescrContext) Set_monotony(v IMonotonyContext) { s._monotony = v }

func (s *AxisDescrContext) Set_physUnit(v IPhysUnitContext) { s._physUnit = v }

func (s *AxisDescrContext) Set_readOnly(v IReadOnlyContext) { s._readOnly = v }

func (s *AxisDescrContext) Set_stepSize(v IStepSizeContext) { s._stepSize = v }

func (s *AxisDescrContext) GetV_annotation() []IAnnotationContext { return s.v_annotation }

func (s *AxisDescrContext) GetV_axisPtsRef() []IAxisPtsRefContext { return s.v_axisPtsRef }

func (s *AxisDescrContext) GetV_byteOrder() []IByteOrderContext { return s.v_byteOrder }

func (s *AxisDescrContext) GetV_curveAxisRef() []ICurveAxisRefContext { return s.v_curveAxisRef }

func (s *AxisDescrContext) GetV_deposit() []IDepositContext { return s.v_deposit }

func (s *AxisDescrContext) GetV_extendedLimits() []IExtendedLimitsContext { return s.v_extendedLimits }

func (s *AxisDescrContext) GetV_fixAxisPar() []IFixAxisParContext { return s.v_fixAxisPar }

func (s *AxisDescrContext) GetV_fixAxisParDist() []IFixAxisParDistContext { return s.v_fixAxisParDist }

func (s *AxisDescrContext) GetV_fixAxisParList() []IFixAxisParListContext { return s.v_fixAxisParList }

func (s *AxisDescrContext) GetV_format_() []IFormatContext { return s.v_format_ }

func (s *AxisDescrContext) GetV_maxGrad() []IMaxGradContext { return s.v_maxGrad }

func (s *AxisDescrContext) GetV_monotony() []IMonotonyContext { return s.v_monotony }

func (s *AxisDescrContext) GetV_physUnit() []IPhysUnitContext { return s.v_physUnit }

func (s *AxisDescrContext) GetV_readOnly() []IReadOnlyContext { return s.v_readOnly }

func (s *AxisDescrContext) GetV_stepSize() []IStepSizeContext { return s.v_stepSize }

func (s *AxisDescrContext) SetV_annotation(v []IAnnotationContext) { s.v_annotation = v }

func (s *AxisDescrContext) SetV_axisPtsRef(v []IAxisPtsRefContext) { s.v_axisPtsRef = v }

func (s *AxisDescrContext) SetV_byteOrder(v []IByteOrderContext) { s.v_byteOrder = v }

func (s *AxisDescrContext) SetV_curveAxisRef(v []ICurveAxisRefContext) { s.v_curveAxisRef = v }

func (s *AxisDescrContext) SetV_deposit(v []IDepositContext) { s.v_deposit = v }

func (s *AxisDescrContext) SetV_extendedLimits(v []IExtendedLimitsContext) { s.v_extendedLimits = v }

func (s *AxisDescrContext) SetV_fixAxisPar(v []IFixAxisParContext) { s.v_fixAxisPar = v }

func (s *AxisDescrContext) SetV_fixAxisParDist(v []IFixAxisParDistContext) { s.v_fixAxisParDist = v }

func (s *AxisDescrContext) SetV_fixAxisParList(v []IFixAxisParListContext) { s.v_fixAxisParList = v }

func (s *AxisDescrContext) SetV_format_(v []IFormatContext) { s.v_format_ = v }

func (s *AxisDescrContext) SetV_maxGrad(v []IMaxGradContext) { s.v_maxGrad = v }

func (s *AxisDescrContext) SetV_monotony(v []IMonotonyContext) { s.v_monotony = v }

func (s *AxisDescrContext) SetV_physUnit(v []IPhysUnitContext) { s.v_physUnit = v }

func (s *AxisDescrContext) SetV_readOnly(v []IReadOnlyContext) { s.v_readOnly = v }

func (s *AxisDescrContext) SetV_stepSize(v []IStepSizeContext) { s.v_stepSize = v }

func (s *AxisDescrContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(A2LParserBEGIN, 0)
}

func (s *AxisDescrContext) END() antlr.TerminalNode {
	return s.GetToken(A2LParserEND, 0)
}

func (s *AxisDescrContext) AllIdentifierValue() []IIdentifierValueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierValueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierValueContext); ok {
			tst[i] = t.(IIdentifierValueContext)
			i++
		}
	}

	return tst
}

func (s *AxisDescrContext) IdentifierValue(i int) IIdentifierValueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierValueContext)
}

func (s *AxisDescrContext) IntegerValue() IIntegerValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *AxisDescrContext) AllNumericValue() []INumericValueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INumericValueContext); ok {
			len++
		}
	}

	tst := make([]INumericValueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INumericValueContext); ok {
			tst[i] = t.(INumericValueContext)
			i++
		}
	}

	return tst
}

func (s *AxisDescrContext) NumericValue(i int) INumericValueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumericValueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumericValueContext)
}

func (s *AxisDescrContext) AllAnnotation() []IAnnotationContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAnnotationContext); ok {
			len++
		}
	}

	tst := make([]IAnnotationContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAnnotationContext); ok {
			tst[i] = t.(IAnnotationContext)
			i++
		}
	}

	return tst
}

func (s *AxisDescrContext) Annotation(i int) IAnnotationContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAnnotationContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAnnotationContext)
}

func (s *AxisDescrContext) AllAxisPtsRef() []IAxisPtsRefContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAxisPtsRefContext); ok {
			len++
		}
	}

	tst := make([]IAxisPtsRefContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAxisPtsRefContext); ok {
			tst[i] = t.(IAxisPtsRefContext)
			i++
		}
	}

	return tst
}

func (s *AxisDescrContext) AxisPtsRef(i int) IAxisPtsRefContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAxisPtsRefContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAxisPtsRefContext)
}

func (s *AxisDescrContext) AllByteOrder() []IByteOrderContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IByteOrderContext); ok {
			len++
		}
	}

	tst := make([]IByteOrderContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IByteOrderContext); ok {
			tst[i] = t.(IByteOrderContext)
			i++
		}
	}

	return tst
}

func (s *AxisDescrContext) ByteOrder(i int) IByteOrderContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IByteOrderContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IByteOrderContext)
}

func (s *AxisDescrContext) AllCurveAxisRef() []ICurveAxisRefContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ICurveAxisRefContext); ok {
			len++
		}
	}

	tst := make([]ICurveAxisRefContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ICurveAxisRefContext); ok {
			tst[i] = t.(ICurveAxisRefContext)
			i++
		}
	}

	return tst
}

func (s *AxisDescrContext) CurveAxisRef(i int) ICurveAxisRefContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICurveAxisRefContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICurveAxisRefContext)
}

func (s *AxisDescrContext) AllDeposit() []IDepositContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDepositContext); ok {
			len++
		}
	}

	tst := make([]IDepositContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDepositContext); ok {
			tst[i] = t.(IDepositContext)
			i++
		}
	}

	return tst
}

func (s *AxisDescrContext) Deposit(i int) IDepositContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDepositContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDepositContext)
}

func (s *AxisDescrContext) AllExtendedLimits() []IExtendedLimitsContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExtendedLimitsContext); ok {
			len++
		}
	}

	tst := make([]IExtendedLimitsContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExtendedLimitsContext); ok {
			tst[i] = t.(IExtendedLimitsContext)
			i++
		}
	}

	return tst
}

func (s *AxisDescrContext) ExtendedLimits(i int) IExtendedLimitsContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExtendedLimitsContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExtendedLimitsContext)
}

func (s *AxisDescrContext) AllFixAxisPar() []IFixAxisParContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IFixAxisParContext); ok {
			len++
		}
	}

	tst := make([]IFixAxisParContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IFixAxisParContext); ok {
			tst[i] = t.(IFixAxisParContext)
			i++
		}
	}

	return tst
}

func (s *AxisDescrContext) FixAxisPar(i int) IFixAxisParContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFixAxisParContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFixAxisParContext)
}

func (s *AxisDescrContext) AllFixAxisParDist() []IFixAxisParDistContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IFixAxisParDistContext); ok {
			len++
		}
	}

	tst := make([]IFixAxisParDistContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IFixAxisParDistContext); ok {
			tst[i] = t.(IFixAxisParDistContext)
			i++
		}
	}

	return tst
}

func (s *AxisDescrContext) FixAxisParDist(i int) IFixAxisParDistContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFixAxisParDistContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFixAxisParDistContext)
}

func (s *AxisDescrContext) AllFixAxisParList() []IFixAxisParListContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IFixAxisParListContext); ok {
			len++
		}
	}

	tst := make([]IFixAxisParListContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IFixAxisParListContext); ok {
			tst[i] = t.(IFixAxisParListContext)
			i++
		}
	}

	return tst
}

func (s *AxisDescrContext) FixAxisParList(i int) IFixAxisParListContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFixAxisParListContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFixAxisParListContext)
}

func (s *AxisDescrContext) AllFormat() []IFormatContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IFormatContext); ok {
			len++
		}
	}

	tst := make([]IFormatContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IFormatContext); ok {
			tst[i] = t.(IFormatContext)
			i++
		}
	}

	return tst
}

func (s *AxisDescrContext) Format(i int) IFormatContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFormatContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFormatContext)
}

func (s *AxisDescrContext) AllMaxGrad() []IMaxGradContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IMaxGradContext); ok {
			len++
		}
	}

	tst := make([]IMaxGradContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IMaxGradContext); ok {
			tst[i] = t.(IMaxGradContext)
			i++
		}
	}

	return tst
}

func (s *AxisDescrContext) MaxGrad(i int) IMaxGradContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMaxGradContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMaxGradContext)
}

func (s *AxisDescrContext) AllMonotony() []IMonotonyContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IMonotonyContext); ok {
			len++
		}
	}

	tst := make([]IMonotonyContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IMonotonyContext); ok {
			tst[i] = t.(IMonotonyContext)
			i++
		}
	}

	return tst
}

func (s *AxisDescrContext) Monotony(i int) IMonotonyContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMonotonyContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMonotonyContext)
}

func (s *AxisDescrContext) AllPhysUnit() []IPhysUnitContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IPhysUnitContext); ok {
			len++
		}
	}

	tst := make([]IPhysUnitContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IPhysUnitContext); ok {
			tst[i] = t.(IPhysUnitContext)
			i++
		}
	}

	return tst
}

func (s *AxisDescrContext) PhysUnit(i int) IPhysUnitContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPhysUnitContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPhysUnitContext)
}

func (s *AxisDescrContext) AllReadOnly() []IReadOnlyContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IReadOnlyContext); ok {
			len++
		}
	}

	tst := make([]IReadOnlyContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IReadOnlyContext); ok {
			tst[i] = t.(IReadOnlyContext)
			i++
		}
	}

	return tst
}

func (s *AxisDescrContext) ReadOnly(i int) IReadOnlyContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IReadOnlyContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IReadOnlyContext)
}

func (s *AxisDescrContext) AllStepSize() []IStepSizeContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStepSizeContext); ok {
			len++
		}
	}

	tst := make([]IStepSizeContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStepSizeContext); ok {
			tst[i] = t.(IStepSizeContext)
			i++
		}
	}

	return tst
}

func (s *AxisDescrContext) StepSize(i int) IStepSizeContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStepSizeContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStepSizeContext)
}

func (s *AxisDescrContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AxisDescrContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AxisDescrContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterAxisDescr(s)
	}
}

func (s *AxisDescrContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitAxisDescr(s)
	}
}

func (s *AxisDescrContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitAxisDescr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) AxisDescr() (localctx IAxisDescrContext) {
	this := p
	_ = this

	localctx = NewAxisDescrContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 86, A2LParserRULE_axisDescr)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(739)
		p.Match(A2LParserBEGIN)
	}
	{
		p.SetState(740)
		p.Match(A2LParserT__63)
	}
	{
		p.SetState(741)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*AxisDescrContext).attribute = _lt

		_la = p.GetTokenStream().LA(1)

		if !((int64((_la-65)) & ^0x3f) == 0 && ((int64(1)<<(_la-65))&31) != 0) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*AxisDescrContext).attribute = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(742)

		var _x = p.IdentifierValue()

		localctx.(*AxisDescrContext).inputQuantity = _x
	}
	{
		p.SetState(743)

		var _x = p.IdentifierValue()

		localctx.(*AxisDescrContext).conversion = _x
	}
	{
		p.SetState(744)

		var _x = p.IntegerValue()

		localctx.(*AxisDescrContext).maxAxisPoints = _x
	}
	{
		p.SetState(745)

		var _x = p.NumericValue()

		localctx.(*AxisDescrContext).lowerLimit = _x
	}
	{
		p.SetState(746)

		var _x = p.NumericValue()

		localctx.(*AxisDescrContext).upperLimit = _x
	}
	p.SetState(764)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ((int64((_la-13)) & ^0x3f) == 0 && ((int64(1)<<(_la-13))&6773413844263395457) != 0) || _la == A2LParserBEGIN {
		p.SetState(762)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 19, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(747)

				var _x = p.Annotation()

				localctx.(*AxisDescrContext)._annotation = _x
			}
			localctx.(*AxisDescrContext).v_annotation = append(localctx.(*AxisDescrContext).v_annotation, localctx.(*AxisDescrContext)._annotation)

		case 2:
			{
				p.SetState(748)

				var _x = p.AxisPtsRef()

				localctx.(*AxisDescrContext)._axisPtsRef = _x
			}
			localctx.(*AxisDescrContext).v_axisPtsRef = append(localctx.(*AxisDescrContext).v_axisPtsRef, localctx.(*AxisDescrContext)._axisPtsRef)

		case 3:
			{
				p.SetState(749)

				var _x = p.ByteOrder()

				localctx.(*AxisDescrContext)._byteOrder = _x
			}
			localctx.(*AxisDescrContext).v_byteOrder = append(localctx.(*AxisDescrContext).v_byteOrder, localctx.(*AxisDescrContext)._byteOrder)

		case 4:
			{
				p.SetState(750)

				var _x = p.CurveAxisRef()

				localctx.(*AxisDescrContext)._curveAxisRef = _x
			}
			localctx.(*AxisDescrContext).v_curveAxisRef = append(localctx.(*AxisDescrContext).v_curveAxisRef, localctx.(*AxisDescrContext)._curveAxisRef)

		case 5:
			{
				p.SetState(751)

				var _x = p.Deposit()

				localctx.(*AxisDescrContext)._deposit = _x
			}
			localctx.(*AxisDescrContext).v_deposit = append(localctx.(*AxisDescrContext).v_deposit, localctx.(*AxisDescrContext)._deposit)

		case 6:
			{
				p.SetState(752)

				var _x = p.ExtendedLimits()

				localctx.(*AxisDescrContext)._extendedLimits = _x
			}
			localctx.(*AxisDescrContext).v_extendedLimits = append(localctx.(*AxisDescrContext).v_extendedLimits, localctx.(*AxisDescrContext)._extendedLimits)

		case 7:
			{
				p.SetState(753)

				var _x = p.FixAxisPar()

				localctx.(*AxisDescrContext)._fixAxisPar = _x
			}
			localctx.(*AxisDescrContext).v_fixAxisPar = append(localctx.(*AxisDescrContext).v_fixAxisPar, localctx.(*AxisDescrContext)._fixAxisPar)

		case 8:
			{
				p.SetState(754)

				var _x = p.FixAxisParDist()

				localctx.(*AxisDescrContext)._fixAxisParDist = _x
			}
			localctx.(*AxisDescrContext).v_fixAxisParDist = append(localctx.(*AxisDescrContext).v_fixAxisParDist, localctx.(*AxisDescrContext)._fixAxisParDist)

		case 9:
			{
				p.SetState(755)

				var _x = p.FixAxisParList()

				localctx.(*AxisDescrContext)._fixAxisParList = _x
			}
			localctx.(*AxisDescrContext).v_fixAxisParList = append(localctx.(*AxisDescrContext).v_fixAxisParList, localctx.(*AxisDescrContext)._fixAxisParList)

		case 10:
			{
				p.SetState(756)

				var _x = p.Format()

				localctx.(*AxisDescrContext)._format = _x
			}
			localctx.(*AxisDescrContext).v_format_ = append(localctx.(*AxisDescrContext).v_format_, localctx.(*AxisDescrContext)._format)

		case 11:
			{
				p.SetState(757)

				var _x = p.MaxGrad()

				localctx.(*AxisDescrContext)._maxGrad = _x
			}
			localctx.(*AxisDescrContext).v_maxGrad = append(localctx.(*AxisDescrContext).v_maxGrad, localctx.(*AxisDescrContext)._maxGrad)

		case 12:
			{
				p.SetState(758)

				var _x = p.Monotony()

				localctx.(*AxisDescrContext)._monotony = _x
			}
			localctx.(*AxisDescrContext).v_monotony = append(localctx.(*AxisDescrContext).v_monotony, localctx.(*AxisDescrContext)._monotony)

		case 13:
			{
				p.SetState(759)

				var _x = p.PhysUnit()

				localctx.(*AxisDescrContext)._physUnit = _x
			}
			localctx.(*AxisDescrContext).v_physUnit = append(localctx.(*AxisDescrContext).v_physUnit, localctx.(*AxisDescrContext)._physUnit)

		case 14:
			{
				p.SetState(760)

				var _x = p.ReadOnly()

				localctx.(*AxisDescrContext)._readOnly = _x
			}
			localctx.(*AxisDescrContext).v_readOnly = append(localctx.(*AxisDescrContext).v_readOnly, localctx.(*AxisDescrContext)._readOnly)

		case 15:
			{
				p.SetState(761)

				var _x = p.StepSize()

				localctx.(*AxisDescrContext)._stepSize = _x
			}
			localctx.(*AxisDescrContext).v_stepSize = append(localctx.(*AxisDescrContext).v_stepSize, localctx.(*AxisDescrContext)._stepSize)

		}

		p.SetState(766)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(767)
		p.Match(A2LParserEND)
	}
	{
		p.SetState(768)
		p.Match(A2LParserT__63)
	}

	return localctx
}

// IAxisPtsRefContext is an interface to support dynamic dispatch.
type IAxisPtsRefContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetAxisPoints returns the axisPoints rule contexts.
	GetAxisPoints() IIdentifierValueContext

	// SetAxisPoints sets the axisPoints rule contexts.
	SetAxisPoints(IIdentifierValueContext)

	// Getter signatures
	IdentifierValue() IIdentifierValueContext

	// IsAxisPtsRefContext differentiates from other interfaces.
	IsAxisPtsRefContext()
}

type AxisPtsRefContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	axisPoints IIdentifierValueContext
}

func NewEmptyAxisPtsRefContext() *AxisPtsRefContext {
	var p = new(AxisPtsRefContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_axisPtsRef
	return p
}

func (*AxisPtsRefContext) IsAxisPtsRefContext() {}

func NewAxisPtsRefContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AxisPtsRefContext {
	var p = new(AxisPtsRefContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_axisPtsRef

	return p
}

func (s *AxisPtsRefContext) GetParser() antlr.Parser { return s.parser }

func (s *AxisPtsRefContext) GetAxisPoints() IIdentifierValueContext { return s.axisPoints }

func (s *AxisPtsRefContext) SetAxisPoints(v IIdentifierValueContext) { s.axisPoints = v }

func (s *AxisPtsRefContext) IdentifierValue() IIdentifierValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierValueContext)
}

func (s *AxisPtsRefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AxisPtsRefContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AxisPtsRefContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterAxisPtsRef(s)
	}
}

func (s *AxisPtsRefContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitAxisPtsRef(s)
	}
}

func (s *AxisPtsRefContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitAxisPtsRef(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) AxisPtsRef() (localctx IAxisPtsRefContext) {
	this := p
	_ = this

	localctx = NewAxisPtsRefContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 88, A2LParserRULE_axisPtsRef)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(770)
		p.Match(A2LParserT__69)
	}
	{
		p.SetState(771)

		var _x = p.IdentifierValue()

		localctx.(*AxisPtsRefContext).axisPoints = _x
	}

	return localctx
}

// ICurveAxisRefContext is an interface to support dynamic dispatch.
type ICurveAxisRefContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetCurveAxis returns the curveAxis rule contexts.
	GetCurveAxis() IIdentifierValueContext

	// SetCurveAxis sets the curveAxis rule contexts.
	SetCurveAxis(IIdentifierValueContext)

	// Getter signatures
	IdentifierValue() IIdentifierValueContext

	// IsCurveAxisRefContext differentiates from other interfaces.
	IsCurveAxisRefContext()
}

type CurveAxisRefContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	curveAxis IIdentifierValueContext
}

func NewEmptyCurveAxisRefContext() *CurveAxisRefContext {
	var p = new(CurveAxisRefContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_curveAxisRef
	return p
}

func (*CurveAxisRefContext) IsCurveAxisRefContext() {}

func NewCurveAxisRefContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CurveAxisRefContext {
	var p = new(CurveAxisRefContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_curveAxisRef

	return p
}

func (s *CurveAxisRefContext) GetParser() antlr.Parser { return s.parser }

func (s *CurveAxisRefContext) GetCurveAxis() IIdentifierValueContext { return s.curveAxis }

func (s *CurveAxisRefContext) SetCurveAxis(v IIdentifierValueContext) { s.curveAxis = v }

func (s *CurveAxisRefContext) IdentifierValue() IIdentifierValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierValueContext)
}

func (s *CurveAxisRefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CurveAxisRefContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CurveAxisRefContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterCurveAxisRef(s)
	}
}

func (s *CurveAxisRefContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitCurveAxisRef(s)
	}
}

func (s *CurveAxisRefContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitCurveAxisRef(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) CurveAxisRef() (localctx ICurveAxisRefContext) {
	this := p
	_ = this

	localctx = NewCurveAxisRefContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 90, A2LParserRULE_curveAxisRef)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(773)
		p.Match(A2LParserT__70)
	}
	{
		p.SetState(774)

		var _x = p.IdentifierValue()

		localctx.(*CurveAxisRefContext).curveAxis = _x
	}

	return localctx
}

// IFixAxisParContext is an interface to support dynamic dispatch.
type IFixAxisParContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOffset returns the offset rule contexts.
	GetOffset() IIntegerValueContext

	// GetShift returns the shift rule contexts.
	GetShift() IIntegerValueContext

	// GetNumberapo returns the numberapo rule contexts.
	GetNumberapo() IIntegerValueContext

	// SetOffset sets the offset rule contexts.
	SetOffset(IIntegerValueContext)

	// SetShift sets the shift rule contexts.
	SetShift(IIntegerValueContext)

	// SetNumberapo sets the numberapo rule contexts.
	SetNumberapo(IIntegerValueContext)

	// Getter signatures
	AllIntegerValue() []IIntegerValueContext
	IntegerValue(i int) IIntegerValueContext

	// IsFixAxisParContext differentiates from other interfaces.
	IsFixAxisParContext()
}

type FixAxisParContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	offset    IIntegerValueContext
	shift     IIntegerValueContext
	numberapo IIntegerValueContext
}

func NewEmptyFixAxisParContext() *FixAxisParContext {
	var p = new(FixAxisParContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_fixAxisPar
	return p
}

func (*FixAxisParContext) IsFixAxisParContext() {}

func NewFixAxisParContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FixAxisParContext {
	var p = new(FixAxisParContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_fixAxisPar

	return p
}

func (s *FixAxisParContext) GetParser() antlr.Parser { return s.parser }

func (s *FixAxisParContext) GetOffset() IIntegerValueContext { return s.offset }

func (s *FixAxisParContext) GetShift() IIntegerValueContext { return s.shift }

func (s *FixAxisParContext) GetNumberapo() IIntegerValueContext { return s.numberapo }

func (s *FixAxisParContext) SetOffset(v IIntegerValueContext) { s.offset = v }

func (s *FixAxisParContext) SetShift(v IIntegerValueContext) { s.shift = v }

func (s *FixAxisParContext) SetNumberapo(v IIntegerValueContext) { s.numberapo = v }

func (s *FixAxisParContext) AllIntegerValue() []IIntegerValueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIntegerValueContext); ok {
			len++
		}
	}

	tst := make([]IIntegerValueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIntegerValueContext); ok {
			tst[i] = t.(IIntegerValueContext)
			i++
		}
	}

	return tst
}

func (s *FixAxisParContext) IntegerValue(i int) IIntegerValueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *FixAxisParContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FixAxisParContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FixAxisParContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterFixAxisPar(s)
	}
}

func (s *FixAxisParContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitFixAxisPar(s)
	}
}

func (s *FixAxisParContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitFixAxisPar(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) FixAxisPar() (localctx IFixAxisParContext) {
	this := p
	_ = this

	localctx = NewFixAxisParContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 92, A2LParserRULE_fixAxisPar)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(776)
		p.Match(A2LParserT__71)
	}
	{
		p.SetState(777)

		var _x = p.IntegerValue()

		localctx.(*FixAxisParContext).offset = _x
	}
	{
		p.SetState(778)

		var _x = p.IntegerValue()

		localctx.(*FixAxisParContext).shift = _x
	}
	{
		p.SetState(779)

		var _x = p.IntegerValue()

		localctx.(*FixAxisParContext).numberapo = _x
	}

	return localctx
}

// IFixAxisParDistContext is an interface to support dynamic dispatch.
type IFixAxisParDistContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOffset returns the offset rule contexts.
	GetOffset() IIntegerValueContext

	// GetDistance returns the distance rule contexts.
	GetDistance() IIntegerValueContext

	// GetNumberapo returns the numberapo rule contexts.
	GetNumberapo() IIntegerValueContext

	// SetOffset sets the offset rule contexts.
	SetOffset(IIntegerValueContext)

	// SetDistance sets the distance rule contexts.
	SetDistance(IIntegerValueContext)

	// SetNumberapo sets the numberapo rule contexts.
	SetNumberapo(IIntegerValueContext)

	// Getter signatures
	AllIntegerValue() []IIntegerValueContext
	IntegerValue(i int) IIntegerValueContext

	// IsFixAxisParDistContext differentiates from other interfaces.
	IsFixAxisParDistContext()
}

type FixAxisParDistContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	offset    IIntegerValueContext
	distance  IIntegerValueContext
	numberapo IIntegerValueContext
}

func NewEmptyFixAxisParDistContext() *FixAxisParDistContext {
	var p = new(FixAxisParDistContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_fixAxisParDist
	return p
}

func (*FixAxisParDistContext) IsFixAxisParDistContext() {}

func NewFixAxisParDistContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FixAxisParDistContext {
	var p = new(FixAxisParDistContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_fixAxisParDist

	return p
}

func (s *FixAxisParDistContext) GetParser() antlr.Parser { return s.parser }

func (s *FixAxisParDistContext) GetOffset() IIntegerValueContext { return s.offset }

func (s *FixAxisParDistContext) GetDistance() IIntegerValueContext { return s.distance }

func (s *FixAxisParDistContext) GetNumberapo() IIntegerValueContext { return s.numberapo }

func (s *FixAxisParDistContext) SetOffset(v IIntegerValueContext) { s.offset = v }

func (s *FixAxisParDistContext) SetDistance(v IIntegerValueContext) { s.distance = v }

func (s *FixAxisParDistContext) SetNumberapo(v IIntegerValueContext) { s.numberapo = v }

func (s *FixAxisParDistContext) AllIntegerValue() []IIntegerValueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIntegerValueContext); ok {
			len++
		}
	}

	tst := make([]IIntegerValueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIntegerValueContext); ok {
			tst[i] = t.(IIntegerValueContext)
			i++
		}
	}

	return tst
}

func (s *FixAxisParDistContext) IntegerValue(i int) IIntegerValueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *FixAxisParDistContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FixAxisParDistContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FixAxisParDistContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterFixAxisParDist(s)
	}
}

func (s *FixAxisParDistContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitFixAxisParDist(s)
	}
}

func (s *FixAxisParDistContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitFixAxisParDist(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) FixAxisParDist() (localctx IFixAxisParDistContext) {
	this := p
	_ = this

	localctx = NewFixAxisParDistContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 94, A2LParserRULE_fixAxisParDist)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(781)
		p.Match(A2LParserT__72)
	}
	{
		p.SetState(782)

		var _x = p.IntegerValue()

		localctx.(*FixAxisParDistContext).offset = _x
	}
	{
		p.SetState(783)

		var _x = p.IntegerValue()

		localctx.(*FixAxisParDistContext).distance = _x
	}
	{
		p.SetState(784)

		var _x = p.IntegerValue()

		localctx.(*FixAxisParDistContext).numberapo = _x
	}

	return localctx
}

// IFixAxisParListContext is an interface to support dynamic dispatch.
type IFixAxisParListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_numericValue returns the _numericValue rule contexts.
	Get_numericValue() INumericValueContext

	// Set_numericValue sets the _numericValue rule contexts.
	Set_numericValue(INumericValueContext)

	// GetAxisPts_Value returns the axisPts_Value rule context list.
	GetAxisPts_Value() []INumericValueContext

	// SetAxisPts_Value sets the axisPts_Value rule context list.
	SetAxisPts_Value([]INumericValueContext)

	// Getter signatures
	BEGIN() antlr.TerminalNode
	END() antlr.TerminalNode
	AllNumericValue() []INumericValueContext
	NumericValue(i int) INumericValueContext

	// IsFixAxisParListContext differentiates from other interfaces.
	IsFixAxisParListContext()
}

type FixAxisParListContext struct {
	*antlr.BaseParserRuleContext
	parser        antlr.Parser
	_numericValue INumericValueContext
	axisPts_Value []INumericValueContext
}

func NewEmptyFixAxisParListContext() *FixAxisParListContext {
	var p = new(FixAxisParListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_fixAxisParList
	return p
}

func (*FixAxisParListContext) IsFixAxisParListContext() {}

func NewFixAxisParListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FixAxisParListContext {
	var p = new(FixAxisParListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_fixAxisParList

	return p
}

func (s *FixAxisParListContext) GetParser() antlr.Parser { return s.parser }

func (s *FixAxisParListContext) Get_numericValue() INumericValueContext { return s._numericValue }

func (s *FixAxisParListContext) Set_numericValue(v INumericValueContext) { s._numericValue = v }

func (s *FixAxisParListContext) GetAxisPts_Value() []INumericValueContext { return s.axisPts_Value }

func (s *FixAxisParListContext) SetAxisPts_Value(v []INumericValueContext) { s.axisPts_Value = v }

func (s *FixAxisParListContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(A2LParserBEGIN, 0)
}

func (s *FixAxisParListContext) END() antlr.TerminalNode {
	return s.GetToken(A2LParserEND, 0)
}

func (s *FixAxisParListContext) AllNumericValue() []INumericValueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INumericValueContext); ok {
			len++
		}
	}

	tst := make([]INumericValueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INumericValueContext); ok {
			tst[i] = t.(INumericValueContext)
			i++
		}
	}

	return tst
}

func (s *FixAxisParListContext) NumericValue(i int) INumericValueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumericValueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumericValueContext)
}

func (s *FixAxisParListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FixAxisParListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FixAxisParListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterFixAxisParList(s)
	}
}

func (s *FixAxisParListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitFixAxisParList(s)
	}
}

func (s *FixAxisParListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitFixAxisParList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) FixAxisParList() (localctx IFixAxisParListContext) {
	this := p
	_ = this

	localctx = NewFixAxisParListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 96, A2LParserRULE_fixAxisParList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(786)
		p.Match(A2LParserBEGIN)
	}
	{
		p.SetState(787)
		p.Match(A2LParserT__73)
	}
	p.SetState(791)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (int64((_la-301)) & ^0x3f) == 0 && ((int64(1)<<(_la-301))&7) != 0 {
		{
			p.SetState(788)

			var _x = p.NumericValue()

			localctx.(*FixAxisParListContext)._numericValue = _x
		}
		localctx.(*FixAxisParListContext).axisPts_Value = append(localctx.(*FixAxisParListContext).axisPts_Value, localctx.(*FixAxisParListContext)._numericValue)

		p.SetState(793)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(794)
		p.Match(A2LParserEND)
	}
	{
		p.SetState(795)
		p.Match(A2LParserT__73)
	}

	return localctx
}

// IMaxGradContext is an interface to support dynamic dispatch.
type IMaxGradContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetMaxGradient returns the maxGradient rule contexts.
	GetMaxGradient() INumericValueContext

	// SetMaxGradient sets the maxGradient rule contexts.
	SetMaxGradient(INumericValueContext)

	// Getter signatures
	NumericValue() INumericValueContext

	// IsMaxGradContext differentiates from other interfaces.
	IsMaxGradContext()
}

type MaxGradContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	maxGradient INumericValueContext
}

func NewEmptyMaxGradContext() *MaxGradContext {
	var p = new(MaxGradContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_maxGrad
	return p
}

func (*MaxGradContext) IsMaxGradContext() {}

func NewMaxGradContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MaxGradContext {
	var p = new(MaxGradContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_maxGrad

	return p
}

func (s *MaxGradContext) GetParser() antlr.Parser { return s.parser }

func (s *MaxGradContext) GetMaxGradient() INumericValueContext { return s.maxGradient }

func (s *MaxGradContext) SetMaxGradient(v INumericValueContext) { s.maxGradient = v }

func (s *MaxGradContext) NumericValue() INumericValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumericValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumericValueContext)
}

func (s *MaxGradContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MaxGradContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MaxGradContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterMaxGrad(s)
	}
}

func (s *MaxGradContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitMaxGrad(s)
	}
}

func (s *MaxGradContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitMaxGrad(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) MaxGrad() (localctx IMaxGradContext) {
	this := p
	_ = this

	localctx = NewMaxGradContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 98, A2LParserRULE_maxGrad)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(797)
		p.Match(A2LParserT__74)
	}
	{
		p.SetState(798)

		var _x = p.NumericValue()

		localctx.(*MaxGradContext).maxGradient = _x
	}

	return localctx
}

// IComparisonQuantityContext is an interface to support dynamic dispatch.
type IComparisonQuantityContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierValueContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierValueContext)

	// Getter signatures
	IdentifierValue() IIdentifierValueContext

	// IsComparisonQuantityContext differentiates from other interfaces.
	IsComparisonQuantityContext()
}

type ComparisonQuantityContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name   IIdentifierValueContext
}

func NewEmptyComparisonQuantityContext() *ComparisonQuantityContext {
	var p = new(ComparisonQuantityContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_comparisonQuantity
	return p
}

func (*ComparisonQuantityContext) IsComparisonQuantityContext() {}

func NewComparisonQuantityContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ComparisonQuantityContext {
	var p = new(ComparisonQuantityContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_comparisonQuantity

	return p
}

func (s *ComparisonQuantityContext) GetParser() antlr.Parser { return s.parser }

func (s *ComparisonQuantityContext) GetName() IIdentifierValueContext { return s.name }

func (s *ComparisonQuantityContext) SetName(v IIdentifierValueContext) { s.name = v }

func (s *ComparisonQuantityContext) IdentifierValue() IIdentifierValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierValueContext)
}

func (s *ComparisonQuantityContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ComparisonQuantityContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ComparisonQuantityContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterComparisonQuantity(s)
	}
}

func (s *ComparisonQuantityContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitComparisonQuantity(s)
	}
}

func (s *ComparisonQuantityContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitComparisonQuantity(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) ComparisonQuantity() (localctx IComparisonQuantityContext) {
	this := p
	_ = this

	localctx = NewComparisonQuantityContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 100, A2LParserRULE_comparisonQuantity)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(800)
		p.Match(A2LParserT__75)
	}
	{
		p.SetState(801)

		var _x = p.IdentifierValue()

		localctx.(*ComparisonQuantityContext).name = _x
	}

	return localctx
}

// IDependentCharacteristicContext is an interface to support dynamic dispatch.
type IDependentCharacteristicContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetFormula_ returns the formula_ rule contexts.
	GetFormula_() IStringValueContext

	// Get_identifierValue returns the _identifierValue rule contexts.
	Get_identifierValue() IIdentifierValueContext

	// SetFormula_ sets the formula_ rule contexts.
	SetFormula_(IStringValueContext)

	// Set_identifierValue sets the _identifierValue rule contexts.
	Set_identifierValue(IIdentifierValueContext)

	// GetCharacteristic_ returns the characteristic_ rule context list.
	GetCharacteristic_() []IIdentifierValueContext

	// SetCharacteristic_ sets the characteristic_ rule context list.
	SetCharacteristic_([]IIdentifierValueContext)

	// Getter signatures
	BEGIN() antlr.TerminalNode
	END() antlr.TerminalNode
	StringValue() IStringValueContext
	AllIdentifierValue() []IIdentifierValueContext
	IdentifierValue(i int) IIdentifierValueContext

	// IsDependentCharacteristicContext differentiates from other interfaces.
	IsDependentCharacteristicContext()
}

type DependentCharacteristicContext struct {
	*antlr.BaseParserRuleContext
	parser           antlr.Parser
	formula_         IStringValueContext
	_identifierValue IIdentifierValueContext
	characteristic_  []IIdentifierValueContext
}

func NewEmptyDependentCharacteristicContext() *DependentCharacteristicContext {
	var p = new(DependentCharacteristicContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_dependentCharacteristic
	return p
}

func (*DependentCharacteristicContext) IsDependentCharacteristicContext() {}

func NewDependentCharacteristicContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DependentCharacteristicContext {
	var p = new(DependentCharacteristicContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_dependentCharacteristic

	return p
}

func (s *DependentCharacteristicContext) GetParser() antlr.Parser { return s.parser }

func (s *DependentCharacteristicContext) GetFormula_() IStringValueContext { return s.formula_ }

func (s *DependentCharacteristicContext) Get_identifierValue() IIdentifierValueContext {
	return s._identifierValue
}

func (s *DependentCharacteristicContext) SetFormula_(v IStringValueContext) { s.formula_ = v }

func (s *DependentCharacteristicContext) Set_identifierValue(v IIdentifierValueContext) {
	s._identifierValue = v
}

func (s *DependentCharacteristicContext) GetCharacteristic_() []IIdentifierValueContext {
	return s.characteristic_
}

func (s *DependentCharacteristicContext) SetCharacteristic_(v []IIdentifierValueContext) {
	s.characteristic_ = v
}

func (s *DependentCharacteristicContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(A2LParserBEGIN, 0)
}

func (s *DependentCharacteristicContext) END() antlr.TerminalNode {
	return s.GetToken(A2LParserEND, 0)
}

func (s *DependentCharacteristicContext) StringValue() IStringValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringValueContext)
}

func (s *DependentCharacteristicContext) AllIdentifierValue() []IIdentifierValueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierValueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierValueContext); ok {
			tst[i] = t.(IIdentifierValueContext)
			i++
		}
	}

	return tst
}

func (s *DependentCharacteristicContext) IdentifierValue(i int) IIdentifierValueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierValueContext)
}

func (s *DependentCharacteristicContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DependentCharacteristicContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DependentCharacteristicContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterDependentCharacteristic(s)
	}
}

func (s *DependentCharacteristicContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitDependentCharacteristic(s)
	}
}

func (s *DependentCharacteristicContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitDependentCharacteristic(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) DependentCharacteristic() (localctx IDependentCharacteristicContext) {
	this := p
	_ = this

	localctx = NewDependentCharacteristicContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 102, A2LParserRULE_dependentCharacteristic)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(803)
		p.Match(A2LParserBEGIN)
	}
	{
		p.SetState(804)
		p.Match(A2LParserT__76)
	}
	{
		p.SetState(805)

		var _x = p.StringValue()

		localctx.(*DependentCharacteristicContext).formula_ = _x
	}
	p.SetState(809)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == A2LParserIDENT {
		{
			p.SetState(806)

			var _x = p.IdentifierValue()

			localctx.(*DependentCharacteristicContext)._identifierValue = _x
		}
		localctx.(*DependentCharacteristicContext).characteristic_ = append(localctx.(*DependentCharacteristicContext).characteristic_, localctx.(*DependentCharacteristicContext)._identifierValue)

		p.SetState(811)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(812)
		p.Match(A2LParserEND)
	}
	{
		p.SetState(813)
		p.Match(A2LParserT__76)
	}

	return localctx
}

// IMapListContext is an interface to support dynamic dispatch.
type IMapListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_identifierValue returns the _identifierValue rule contexts.
	Get_identifierValue() IIdentifierValueContext

	// Set_identifierValue sets the _identifierValue rule contexts.
	Set_identifierValue(IIdentifierValueContext)

	// GetName returns the name rule context list.
	GetName() []IIdentifierValueContext

	// SetName sets the name rule context list.
	SetName([]IIdentifierValueContext)

	// Getter signatures
	BEGIN() antlr.TerminalNode
	END() antlr.TerminalNode
	AllIdentifierValue() []IIdentifierValueContext
	IdentifierValue(i int) IIdentifierValueContext

	// IsMapListContext differentiates from other interfaces.
	IsMapListContext()
}

type MapListContext struct {
	*antlr.BaseParserRuleContext
	parser           antlr.Parser
	_identifierValue IIdentifierValueContext
	name             []IIdentifierValueContext
}

func NewEmptyMapListContext() *MapListContext {
	var p = new(MapListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_mapList
	return p
}

func (*MapListContext) IsMapListContext() {}

func NewMapListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MapListContext {
	var p = new(MapListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_mapList

	return p
}

func (s *MapListContext) GetParser() antlr.Parser { return s.parser }

func (s *MapListContext) Get_identifierValue() IIdentifierValueContext { return s._identifierValue }

func (s *MapListContext) Set_identifierValue(v IIdentifierValueContext) { s._identifierValue = v }

func (s *MapListContext) GetName() []IIdentifierValueContext { return s.name }

func (s *MapListContext) SetName(v []IIdentifierValueContext) { s.name = v }

func (s *MapListContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(A2LParserBEGIN, 0)
}

func (s *MapListContext) END() antlr.TerminalNode {
	return s.GetToken(A2LParserEND, 0)
}

func (s *MapListContext) AllIdentifierValue() []IIdentifierValueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierValueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierValueContext); ok {
			tst[i] = t.(IIdentifierValueContext)
			i++
		}
	}

	return tst
}

func (s *MapListContext) IdentifierValue(i int) IIdentifierValueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierValueContext)
}

func (s *MapListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MapListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MapListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterMapList(s)
	}
}

func (s *MapListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitMapList(s)
	}
}

func (s *MapListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitMapList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) MapList() (localctx IMapListContext) {
	this := p
	_ = this

	localctx = NewMapListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 104, A2LParserRULE_mapList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(815)
		p.Match(A2LParserBEGIN)
	}
	{
		p.SetState(816)
		p.Match(A2LParserT__77)
	}
	p.SetState(820)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == A2LParserIDENT {
		{
			p.SetState(817)

			var _x = p.IdentifierValue()

			localctx.(*MapListContext)._identifierValue = _x
		}
		localctx.(*MapListContext).name = append(localctx.(*MapListContext).name, localctx.(*MapListContext)._identifierValue)

		p.SetState(822)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(823)
		p.Match(A2LParserEND)
	}
	{
		p.SetState(824)
		p.Match(A2LParserT__77)
	}

	return localctx
}

// INumberContext is an interface to support dynamic dispatch.
type INumberContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetNumber_ returns the number_ rule contexts.
	GetNumber_() IIntegerValueContext

	// SetNumber_ sets the number_ rule contexts.
	SetNumber_(IIntegerValueContext)

	// Getter signatures
	IntegerValue() IIntegerValueContext

	// IsNumberContext differentiates from other interfaces.
	IsNumberContext()
}

type NumberContext struct {
	*antlr.BaseParserRuleContext
	parser  antlr.Parser
	number_ IIntegerValueContext
}

func NewEmptyNumberContext() *NumberContext {
	var p = new(NumberContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_number
	return p
}

func (*NumberContext) IsNumberContext() {}

func NewNumberContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NumberContext {
	var p = new(NumberContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_number

	return p
}

func (s *NumberContext) GetParser() antlr.Parser { return s.parser }

func (s *NumberContext) GetNumber_() IIntegerValueContext { return s.number_ }

func (s *NumberContext) SetNumber_(v IIntegerValueContext) { s.number_ = v }

func (s *NumberContext) IntegerValue() IIntegerValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *NumberContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NumberContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NumberContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterNumber(s)
	}
}

func (s *NumberContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitNumber(s)
	}
}

func (s *NumberContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitNumber(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) Number() (localctx INumberContext) {
	this := p
	_ = this

	localctx = NewNumberContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 106, A2LParserRULE_number)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(826)
		p.Match(A2LParserT__78)
	}
	{
		p.SetState(827)

		var _x = p.IntegerValue()

		localctx.(*NumberContext).number_ = _x
	}

	return localctx
}

// IVirtualCharacteristicContext is an interface to support dynamic dispatch.
type IVirtualCharacteristicContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetFormula_ returns the formula_ rule contexts.
	GetFormula_() IStringValueContext

	// Get_identifierValue returns the _identifierValue rule contexts.
	Get_identifierValue() IIdentifierValueContext

	// SetFormula_ sets the formula_ rule contexts.
	SetFormula_(IStringValueContext)

	// Set_identifierValue sets the _identifierValue rule contexts.
	Set_identifierValue(IIdentifierValueContext)

	// GetCharacteristic_ returns the characteristic_ rule context list.
	GetCharacteristic_() []IIdentifierValueContext

	// SetCharacteristic_ sets the characteristic_ rule context list.
	SetCharacteristic_([]IIdentifierValueContext)

	// Getter signatures
	BEGIN() antlr.TerminalNode
	END() antlr.TerminalNode
	StringValue() IStringValueContext
	AllIdentifierValue() []IIdentifierValueContext
	IdentifierValue(i int) IIdentifierValueContext

	// IsVirtualCharacteristicContext differentiates from other interfaces.
	IsVirtualCharacteristicContext()
}

type VirtualCharacteristicContext struct {
	*antlr.BaseParserRuleContext
	parser           antlr.Parser
	formula_         IStringValueContext
	_identifierValue IIdentifierValueContext
	characteristic_  []IIdentifierValueContext
}

func NewEmptyVirtualCharacteristicContext() *VirtualCharacteristicContext {
	var p = new(VirtualCharacteristicContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_virtualCharacteristic
	return p
}

func (*VirtualCharacteristicContext) IsVirtualCharacteristicContext() {}

func NewVirtualCharacteristicContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VirtualCharacteristicContext {
	var p = new(VirtualCharacteristicContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_virtualCharacteristic

	return p
}

func (s *VirtualCharacteristicContext) GetParser() antlr.Parser { return s.parser }

func (s *VirtualCharacteristicContext) GetFormula_() IStringValueContext { return s.formula_ }

func (s *VirtualCharacteristicContext) Get_identifierValue() IIdentifierValueContext {
	return s._identifierValue
}

func (s *VirtualCharacteristicContext) SetFormula_(v IStringValueContext) { s.formula_ = v }

func (s *VirtualCharacteristicContext) Set_identifierValue(v IIdentifierValueContext) {
	s._identifierValue = v
}

func (s *VirtualCharacteristicContext) GetCharacteristic_() []IIdentifierValueContext {
	return s.characteristic_
}

func (s *VirtualCharacteristicContext) SetCharacteristic_(v []IIdentifierValueContext) {
	s.characteristic_ = v
}

func (s *VirtualCharacteristicContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(A2LParserBEGIN, 0)
}

func (s *VirtualCharacteristicContext) END() antlr.TerminalNode {
	return s.GetToken(A2LParserEND, 0)
}

func (s *VirtualCharacteristicContext) StringValue() IStringValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringValueContext)
}

func (s *VirtualCharacteristicContext) AllIdentifierValue() []IIdentifierValueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierValueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierValueContext); ok {
			tst[i] = t.(IIdentifierValueContext)
			i++
		}
	}

	return tst
}

func (s *VirtualCharacteristicContext) IdentifierValue(i int) IIdentifierValueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierValueContext)
}

func (s *VirtualCharacteristicContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VirtualCharacteristicContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VirtualCharacteristicContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterVirtualCharacteristic(s)
	}
}

func (s *VirtualCharacteristicContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitVirtualCharacteristic(s)
	}
}

func (s *VirtualCharacteristicContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitVirtualCharacteristic(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) VirtualCharacteristic() (localctx IVirtualCharacteristicContext) {
	this := p
	_ = this

	localctx = NewVirtualCharacteristicContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 108, A2LParserRULE_virtualCharacteristic)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(829)
		p.Match(A2LParserBEGIN)
	}
	{
		p.SetState(830)
		p.Match(A2LParserT__79)
	}
	{
		p.SetState(831)

		var _x = p.StringValue()

		localctx.(*VirtualCharacteristicContext).formula_ = _x
	}
	p.SetState(835)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == A2LParserIDENT {
		{
			p.SetState(832)

			var _x = p.IdentifierValue()

			localctx.(*VirtualCharacteristicContext)._identifierValue = _x
		}
		localctx.(*VirtualCharacteristicContext).characteristic_ = append(localctx.(*VirtualCharacteristicContext).characteristic_, localctx.(*VirtualCharacteristicContext)._identifierValue)

		p.SetState(837)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(838)
		p.Match(A2LParserEND)
	}
	{
		p.SetState(839)
		p.Match(A2LParserT__79)
	}

	return localctx
}

// ICompuMethodContext is an interface to support dynamic dispatch.
type ICompuMethodContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetConversionType returns the conversionType token.
	GetConversionType() antlr.Token

	// SetConversionType sets the conversionType token.
	SetConversionType(antlr.Token)

	// GetName returns the name rule contexts.
	GetName() IIdentifierValueContext

	// GetLongIdentifier returns the longIdentifier rule contexts.
	GetLongIdentifier() IStringValueContext

	// GetVFormat returns the vFormat rule contexts.
	GetVFormat() IStringValueContext

	// GetVUnit returns the vUnit rule contexts.
	GetVUnit() IStringValueContext

	// GetVCoeffs returns the vCoeffs rule contexts.
	GetVCoeffs() ICoeffsContext

	// Get_coeffsLinear returns the _coeffsLinear rule contexts.
	Get_coeffsLinear() ICoeffsLinearContext

	// GetVCompuTabRef returns the vCompuTabRef rule contexts.
	GetVCompuTabRef() ICompuTabRefContext

	// Get_formula returns the _formula rule contexts.
	Get_formula() IFormulaContext

	// GetVRefUnit returns the vRefUnit rule contexts.
	GetVRefUnit() IRefUnitContext

	// Get_statusStringRef returns the _statusStringRef rule contexts.
	Get_statusStringRef() IStatusStringRefContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierValueContext)

	// SetLongIdentifier sets the longIdentifier rule contexts.
	SetLongIdentifier(IStringValueContext)

	// SetVFormat sets the vFormat rule contexts.
	SetVFormat(IStringValueContext)

	// SetVUnit sets the vUnit rule contexts.
	SetVUnit(IStringValueContext)

	// SetVCoeffs sets the vCoeffs rule contexts.
	SetVCoeffs(ICoeffsContext)

	// Set_coeffsLinear sets the _coeffsLinear rule contexts.
	Set_coeffsLinear(ICoeffsLinearContext)

	// SetVCompuTabRef sets the vCompuTabRef rule contexts.
	SetVCompuTabRef(ICompuTabRefContext)

	// Set_formula sets the _formula rule contexts.
	Set_formula(IFormulaContext)

	// SetVRefUnit sets the vRefUnit rule contexts.
	SetVRefUnit(IRefUnitContext)

	// Set_statusStringRef sets the _statusStringRef rule contexts.
	Set_statusStringRef(IStatusStringRefContext)

	// GetV_coeffsLinear returns the v_coeffsLinear rule context list.
	GetV_coeffsLinear() []ICoeffsLinearContext

	// GetV_formula returns the v_formula rule context list.
	GetV_formula() []IFormulaContext

	// GetV_statusStringRef returns the v_statusStringRef rule context list.
	GetV_statusStringRef() []IStatusStringRefContext

	// SetV_coeffsLinear sets the v_coeffsLinear rule context list.
	SetV_coeffsLinear([]ICoeffsLinearContext)

	// SetV_formula sets the v_formula rule context list.
	SetV_formula([]IFormulaContext)

	// SetV_statusStringRef sets the v_statusStringRef rule context list.
	SetV_statusStringRef([]IStatusStringRefContext)

	// Getter signatures
	BEGIN() antlr.TerminalNode
	END() antlr.TerminalNode
	IdentifierValue() IIdentifierValueContext
	AllStringValue() []IStringValueContext
	StringValue(i int) IStringValueContext
	AllCoeffs() []ICoeffsContext
	Coeffs(i int) ICoeffsContext
	AllCoeffsLinear() []ICoeffsLinearContext
	CoeffsLinear(i int) ICoeffsLinearContext
	AllCompuTabRef() []ICompuTabRefContext
	CompuTabRef(i int) ICompuTabRefContext
	AllFormula() []IFormulaContext
	Formula(i int) IFormulaContext
	AllRefUnit() []IRefUnitContext
	RefUnit(i int) IRefUnitContext
	AllStatusStringRef() []IStatusStringRefContext
	StatusStringRef(i int) IStatusStringRefContext

	// IsCompuMethodContext differentiates from other interfaces.
	IsCompuMethodContext()
}

type CompuMethodContext struct {
	*antlr.BaseParserRuleContext
	parser            antlr.Parser
	name              IIdentifierValueContext
	longIdentifier    IStringValueContext
	conversionType    antlr.Token
	vFormat           IStringValueContext
	vUnit             IStringValueContext
	vCoeffs           ICoeffsContext
	_coeffsLinear     ICoeffsLinearContext
	v_coeffsLinear    []ICoeffsLinearContext
	vCompuTabRef      ICompuTabRefContext
	_formula          IFormulaContext
	v_formula         []IFormulaContext
	vRefUnit          IRefUnitContext
	_statusStringRef  IStatusStringRefContext
	v_statusStringRef []IStatusStringRefContext
}

func NewEmptyCompuMethodContext() *CompuMethodContext {
	var p = new(CompuMethodContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_compuMethod
	return p
}

func (*CompuMethodContext) IsCompuMethodContext() {}

func NewCompuMethodContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CompuMethodContext {
	var p = new(CompuMethodContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_compuMethod

	return p
}

func (s *CompuMethodContext) GetParser() antlr.Parser { return s.parser }

func (s *CompuMethodContext) GetConversionType() antlr.Token { return s.conversionType }

func (s *CompuMethodContext) SetConversionType(v antlr.Token) { s.conversionType = v }

func (s *CompuMethodContext) GetName() IIdentifierValueContext { return s.name }

func (s *CompuMethodContext) GetLongIdentifier() IStringValueContext { return s.longIdentifier }

func (s *CompuMethodContext) GetVFormat() IStringValueContext { return s.vFormat }

func (s *CompuMethodContext) GetVUnit() IStringValueContext { return s.vUnit }

func (s *CompuMethodContext) GetVCoeffs() ICoeffsContext { return s.vCoeffs }

func (s *CompuMethodContext) Get_coeffsLinear() ICoeffsLinearContext { return s._coeffsLinear }

func (s *CompuMethodContext) GetVCompuTabRef() ICompuTabRefContext { return s.vCompuTabRef }

func (s *CompuMethodContext) Get_formula() IFormulaContext { return s._formula }

func (s *CompuMethodContext) GetVRefUnit() IRefUnitContext { return s.vRefUnit }

func (s *CompuMethodContext) Get_statusStringRef() IStatusStringRefContext { return s._statusStringRef }

func (s *CompuMethodContext) SetName(v IIdentifierValueContext) { s.name = v }

func (s *CompuMethodContext) SetLongIdentifier(v IStringValueContext) { s.longIdentifier = v }

func (s *CompuMethodContext) SetVFormat(v IStringValueContext) { s.vFormat = v }

func (s *CompuMethodContext) SetVUnit(v IStringValueContext) { s.vUnit = v }

func (s *CompuMethodContext) SetVCoeffs(v ICoeffsContext) { s.vCoeffs = v }

func (s *CompuMethodContext) Set_coeffsLinear(v ICoeffsLinearContext) { s._coeffsLinear = v }

func (s *CompuMethodContext) SetVCompuTabRef(v ICompuTabRefContext) { s.vCompuTabRef = v }

func (s *CompuMethodContext) Set_formula(v IFormulaContext) { s._formula = v }

func (s *CompuMethodContext) SetVRefUnit(v IRefUnitContext) { s.vRefUnit = v }

func (s *CompuMethodContext) Set_statusStringRef(v IStatusStringRefContext) { s._statusStringRef = v }

func (s *CompuMethodContext) GetV_coeffsLinear() []ICoeffsLinearContext { return s.v_coeffsLinear }

func (s *CompuMethodContext) GetV_formula() []IFormulaContext { return s.v_formula }

func (s *CompuMethodContext) GetV_statusStringRef() []IStatusStringRefContext {
	return s.v_statusStringRef
}

func (s *CompuMethodContext) SetV_coeffsLinear(v []ICoeffsLinearContext) { s.v_coeffsLinear = v }

func (s *CompuMethodContext) SetV_formula(v []IFormulaContext) { s.v_formula = v }

func (s *CompuMethodContext) SetV_statusStringRef(v []IStatusStringRefContext) {
	s.v_statusStringRef = v
}

func (s *CompuMethodContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(A2LParserBEGIN, 0)
}

func (s *CompuMethodContext) END() antlr.TerminalNode {
	return s.GetToken(A2LParserEND, 0)
}

func (s *CompuMethodContext) IdentifierValue() IIdentifierValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierValueContext)
}

func (s *CompuMethodContext) AllStringValue() []IStringValueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStringValueContext); ok {
			len++
		}
	}

	tst := make([]IStringValueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStringValueContext); ok {
			tst[i] = t.(IStringValueContext)
			i++
		}
	}

	return tst
}

func (s *CompuMethodContext) StringValue(i int) IStringValueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringValueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringValueContext)
}

func (s *CompuMethodContext) AllCoeffs() []ICoeffsContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ICoeffsContext); ok {
			len++
		}
	}

	tst := make([]ICoeffsContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ICoeffsContext); ok {
			tst[i] = t.(ICoeffsContext)
			i++
		}
	}

	return tst
}

func (s *CompuMethodContext) Coeffs(i int) ICoeffsContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICoeffsContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICoeffsContext)
}

func (s *CompuMethodContext) AllCoeffsLinear() []ICoeffsLinearContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ICoeffsLinearContext); ok {
			len++
		}
	}

	tst := make([]ICoeffsLinearContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ICoeffsLinearContext); ok {
			tst[i] = t.(ICoeffsLinearContext)
			i++
		}
	}

	return tst
}

func (s *CompuMethodContext) CoeffsLinear(i int) ICoeffsLinearContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICoeffsLinearContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICoeffsLinearContext)
}

func (s *CompuMethodContext) AllCompuTabRef() []ICompuTabRefContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ICompuTabRefContext); ok {
			len++
		}
	}

	tst := make([]ICompuTabRefContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ICompuTabRefContext); ok {
			tst[i] = t.(ICompuTabRefContext)
			i++
		}
	}

	return tst
}

func (s *CompuMethodContext) CompuTabRef(i int) ICompuTabRefContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICompuTabRefContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICompuTabRefContext)
}

func (s *CompuMethodContext) AllFormula() []IFormulaContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IFormulaContext); ok {
			len++
		}
	}

	tst := make([]IFormulaContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IFormulaContext); ok {
			tst[i] = t.(IFormulaContext)
			i++
		}
	}

	return tst
}

func (s *CompuMethodContext) Formula(i int) IFormulaContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFormulaContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFormulaContext)
}

func (s *CompuMethodContext) AllRefUnit() []IRefUnitContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IRefUnitContext); ok {
			len++
		}
	}

	tst := make([]IRefUnitContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IRefUnitContext); ok {
			tst[i] = t.(IRefUnitContext)
			i++
		}
	}

	return tst
}

func (s *CompuMethodContext) RefUnit(i int) IRefUnitContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRefUnitContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRefUnitContext)
}

func (s *CompuMethodContext) AllStatusStringRef() []IStatusStringRefContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStatusStringRefContext); ok {
			len++
		}
	}

	tst := make([]IStatusStringRefContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStatusStringRefContext); ok {
			tst[i] = t.(IStatusStringRefContext)
			i++
		}
	}

	return tst
}

func (s *CompuMethodContext) StatusStringRef(i int) IStatusStringRefContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatusStringRefContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatusStringRefContext)
}

func (s *CompuMethodContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CompuMethodContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CompuMethodContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterCompuMethod(s)
	}
}

func (s *CompuMethodContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitCompuMethod(s)
	}
}

func (s *CompuMethodContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitCompuMethod(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) CompuMethod() (localctx ICompuMethodContext) {
	this := p
	_ = this

	localctx = NewCompuMethodContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 110, A2LParserRULE_compuMethod)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(841)
		p.Match(A2LParserBEGIN)
	}
	{
		p.SetState(842)
		p.Match(A2LParserT__80)
	}
	{
		p.SetState(843)

		var _x = p.IdentifierValue()

		localctx.(*CompuMethodContext).name = _x
	}
	{
		p.SetState(844)

		var _x = p.StringValue()

		localctx.(*CompuMethodContext).longIdentifier = _x
	}
	{
		p.SetState(845)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*CompuMethodContext).conversionType = _lt

		_la = p.GetTokenStream().LA(1)

		if !((int64((_la-82)) & ^0x3f) == 0 && ((int64(1)<<(_la-82))&127) != 0) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*CompuMethodContext).conversionType = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(846)

		var _x = p.StringValue()

		localctx.(*CompuMethodContext).vFormat = _x
	}
	{
		p.SetState(847)

		var _x = p.StringValue()

		localctx.(*CompuMethodContext).vUnit = _x
	}
	p.SetState(856)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ((int64((_la-44)) & ^0x3f) == 0 && ((int64(1)<<(_la-44))&1372190511464449) != 0) || _la == A2LParserBEGIN {
		p.SetState(854)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case A2LParserT__88:
			{
				p.SetState(848)

				var _x = p.Coeffs()

				localctx.(*CompuMethodContext).vCoeffs = _x
			}

		case A2LParserT__89:
			{
				p.SetState(849)

				var _x = p.CoeffsLinear()

				localctx.(*CompuMethodContext)._coeffsLinear = _x
			}
			localctx.(*CompuMethodContext).v_coeffsLinear = append(localctx.(*CompuMethodContext).v_coeffsLinear, localctx.(*CompuMethodContext)._coeffsLinear)

		case A2LParserT__90:
			{
				p.SetState(850)

				var _x = p.CompuTabRef()

				localctx.(*CompuMethodContext).vCompuTabRef = _x
			}

		case A2LParserBEGIN:
			{
				p.SetState(851)

				var _x = p.Formula()

				localctx.(*CompuMethodContext)._formula = _x
			}
			localctx.(*CompuMethodContext).v_formula = append(localctx.(*CompuMethodContext).v_formula, localctx.(*CompuMethodContext)._formula)

		case A2LParserT__43:
			{
				p.SetState(852)

				var _x = p.RefUnit()

				localctx.(*CompuMethodContext).vRefUnit = _x
			}

		case A2LParserT__93:
			{
				p.SetState(853)

				var _x = p.StatusStringRef()

				localctx.(*CompuMethodContext)._statusStringRef = _x
			}
			localctx.(*CompuMethodContext).v_statusStringRef = append(localctx.(*CompuMethodContext).v_statusStringRef, localctx.(*CompuMethodContext)._statusStringRef)

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(858)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(859)
		p.Match(A2LParserEND)
	}
	{
		p.SetState(860)
		p.Match(A2LParserT__80)
	}

	return localctx
}

// ICoeffsContext is an interface to support dynamic dispatch.
type ICoeffsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetA returns the a rule contexts.
	GetA() INumericValueContext

	// GetB returns the b rule contexts.
	GetB() INumericValueContext

	// GetC returns the c rule contexts.
	GetC() INumericValueContext

	// GetD returns the d rule contexts.
	GetD() INumericValueContext

	// GetE returns the e rule contexts.
	GetE() INumericValueContext

	// GetF returns the f rule contexts.
	GetF() INumericValueContext

	// SetA sets the a rule contexts.
	SetA(INumericValueContext)

	// SetB sets the b rule contexts.
	SetB(INumericValueContext)

	// SetC sets the c rule contexts.
	SetC(INumericValueContext)

	// SetD sets the d rule contexts.
	SetD(INumericValueContext)

	// SetE sets the e rule contexts.
	SetE(INumericValueContext)

	// SetF sets the f rule contexts.
	SetF(INumericValueContext)

	// Getter signatures
	AllNumericValue() []INumericValueContext
	NumericValue(i int) INumericValueContext

	// IsCoeffsContext differentiates from other interfaces.
	IsCoeffsContext()
}

type CoeffsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	a      INumericValueContext
	b      INumericValueContext
	c      INumericValueContext
	d      INumericValueContext
	e      INumericValueContext
	f      INumericValueContext
}

func NewEmptyCoeffsContext() *CoeffsContext {
	var p = new(CoeffsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_coeffs
	return p
}

func (*CoeffsContext) IsCoeffsContext() {}

func NewCoeffsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CoeffsContext {
	var p = new(CoeffsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_coeffs

	return p
}

func (s *CoeffsContext) GetParser() antlr.Parser { return s.parser }

func (s *CoeffsContext) GetA() INumericValueContext { return s.a }

func (s *CoeffsContext) GetB() INumericValueContext { return s.b }

func (s *CoeffsContext) GetC() INumericValueContext { return s.c }

func (s *CoeffsContext) GetD() INumericValueContext { return s.d }

func (s *CoeffsContext) GetE() INumericValueContext { return s.e }

func (s *CoeffsContext) GetF() INumericValueContext { return s.f }

func (s *CoeffsContext) SetA(v INumericValueContext) { s.a = v }

func (s *CoeffsContext) SetB(v INumericValueContext) { s.b = v }

func (s *CoeffsContext) SetC(v INumericValueContext) { s.c = v }

func (s *CoeffsContext) SetD(v INumericValueContext) { s.d = v }

func (s *CoeffsContext) SetE(v INumericValueContext) { s.e = v }

func (s *CoeffsContext) SetF(v INumericValueContext) { s.f = v }

func (s *CoeffsContext) AllNumericValue() []INumericValueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INumericValueContext); ok {
			len++
		}
	}

	tst := make([]INumericValueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INumericValueContext); ok {
			tst[i] = t.(INumericValueContext)
			i++
		}
	}

	return tst
}

func (s *CoeffsContext) NumericValue(i int) INumericValueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumericValueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumericValueContext)
}

func (s *CoeffsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CoeffsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CoeffsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterCoeffs(s)
	}
}

func (s *CoeffsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitCoeffs(s)
	}
}

func (s *CoeffsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitCoeffs(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) Coeffs() (localctx ICoeffsContext) {
	this := p
	_ = this

	localctx = NewCoeffsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 112, A2LParserRULE_coeffs)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(862)
		p.Match(A2LParserT__88)
	}
	{
		p.SetState(863)

		var _x = p.NumericValue()

		localctx.(*CoeffsContext).a = _x
	}
	{
		p.SetState(864)

		var _x = p.NumericValue()

		localctx.(*CoeffsContext).b = _x
	}
	{
		p.SetState(865)

		var _x = p.NumericValue()

		localctx.(*CoeffsContext).c = _x
	}
	{
		p.SetState(866)

		var _x = p.NumericValue()

		localctx.(*CoeffsContext).d = _x
	}
	{
		p.SetState(867)

		var _x = p.NumericValue()

		localctx.(*CoeffsContext).e = _x
	}
	{
		p.SetState(868)

		var _x = p.NumericValue()

		localctx.(*CoeffsContext).f = _x
	}

	return localctx
}

// ICoeffsLinearContext is an interface to support dynamic dispatch.
type ICoeffsLinearContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetA returns the a rule contexts.
	GetA() INumericValueContext

	// GetB returns the b rule contexts.
	GetB() INumericValueContext

	// SetA sets the a rule contexts.
	SetA(INumericValueContext)

	// SetB sets the b rule contexts.
	SetB(INumericValueContext)

	// Getter signatures
	AllNumericValue() []INumericValueContext
	NumericValue(i int) INumericValueContext

	// IsCoeffsLinearContext differentiates from other interfaces.
	IsCoeffsLinearContext()
}

type CoeffsLinearContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	a      INumericValueContext
	b      INumericValueContext
}

func NewEmptyCoeffsLinearContext() *CoeffsLinearContext {
	var p = new(CoeffsLinearContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_coeffsLinear
	return p
}

func (*CoeffsLinearContext) IsCoeffsLinearContext() {}

func NewCoeffsLinearContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CoeffsLinearContext {
	var p = new(CoeffsLinearContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_coeffsLinear

	return p
}

func (s *CoeffsLinearContext) GetParser() antlr.Parser { return s.parser }

func (s *CoeffsLinearContext) GetA() INumericValueContext { return s.a }

func (s *CoeffsLinearContext) GetB() INumericValueContext { return s.b }

func (s *CoeffsLinearContext) SetA(v INumericValueContext) { s.a = v }

func (s *CoeffsLinearContext) SetB(v INumericValueContext) { s.b = v }

func (s *CoeffsLinearContext) AllNumericValue() []INumericValueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INumericValueContext); ok {
			len++
		}
	}

	tst := make([]INumericValueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INumericValueContext); ok {
			tst[i] = t.(INumericValueContext)
			i++
		}
	}

	return tst
}

func (s *CoeffsLinearContext) NumericValue(i int) INumericValueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumericValueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumericValueContext)
}

func (s *CoeffsLinearContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CoeffsLinearContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CoeffsLinearContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterCoeffsLinear(s)
	}
}

func (s *CoeffsLinearContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitCoeffsLinear(s)
	}
}

func (s *CoeffsLinearContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitCoeffsLinear(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) CoeffsLinear() (localctx ICoeffsLinearContext) {
	this := p
	_ = this

	localctx = NewCoeffsLinearContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 114, A2LParserRULE_coeffsLinear)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(870)
		p.Match(A2LParserT__89)
	}
	{
		p.SetState(871)

		var _x = p.NumericValue()

		localctx.(*CoeffsLinearContext).a = _x
	}
	{
		p.SetState(872)

		var _x = p.NumericValue()

		localctx.(*CoeffsLinearContext).b = _x
	}

	return localctx
}

// ICompuTabRefContext is an interface to support dynamic dispatch.
type ICompuTabRefContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetConversionTable returns the conversionTable rule contexts.
	GetConversionTable() IIdentifierValueContext

	// SetConversionTable sets the conversionTable rule contexts.
	SetConversionTable(IIdentifierValueContext)

	// Getter signatures
	IdentifierValue() IIdentifierValueContext

	// IsCompuTabRefContext differentiates from other interfaces.
	IsCompuTabRefContext()
}

type CompuTabRefContext struct {
	*antlr.BaseParserRuleContext
	parser          antlr.Parser
	conversionTable IIdentifierValueContext
}

func NewEmptyCompuTabRefContext() *CompuTabRefContext {
	var p = new(CompuTabRefContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_compuTabRef
	return p
}

func (*CompuTabRefContext) IsCompuTabRefContext() {}

func NewCompuTabRefContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CompuTabRefContext {
	var p = new(CompuTabRefContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_compuTabRef

	return p
}

func (s *CompuTabRefContext) GetParser() antlr.Parser { return s.parser }

func (s *CompuTabRefContext) GetConversionTable() IIdentifierValueContext { return s.conversionTable }

func (s *CompuTabRefContext) SetConversionTable(v IIdentifierValueContext) { s.conversionTable = v }

func (s *CompuTabRefContext) IdentifierValue() IIdentifierValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierValueContext)
}

func (s *CompuTabRefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CompuTabRefContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CompuTabRefContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterCompuTabRef(s)
	}
}

func (s *CompuTabRefContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitCompuTabRef(s)
	}
}

func (s *CompuTabRefContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitCompuTabRef(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) CompuTabRef() (localctx ICompuTabRefContext) {
	this := p
	_ = this

	localctx = NewCompuTabRefContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 116, A2LParserRULE_compuTabRef)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(874)
		p.Match(A2LParserT__90)
	}
	{
		p.SetState(875)

		var _x = p.IdentifierValue()

		localctx.(*CompuTabRefContext).conversionTable = _x
	}

	return localctx
}

// IFormulaContext is an interface to support dynamic dispatch.
type IFormulaContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetF_x returns the f_x rule contexts.
	GetF_x() IStringValueContext

	// Get_formulaInv returns the _formulaInv rule contexts.
	Get_formulaInv() IFormulaInvContext

	// SetF_x sets the f_x rule contexts.
	SetF_x(IStringValueContext)

	// Set_formulaInv sets the _formulaInv rule contexts.
	Set_formulaInv(IFormulaInvContext)

	// GetV_formulaInv returns the v_formulaInv rule context list.
	GetV_formulaInv() []IFormulaInvContext

	// SetV_formulaInv sets the v_formulaInv rule context list.
	SetV_formulaInv([]IFormulaInvContext)

	// Getter signatures
	BEGIN() antlr.TerminalNode
	END() antlr.TerminalNode
	StringValue() IStringValueContext
	AllFormulaInv() []IFormulaInvContext
	FormulaInv(i int) IFormulaInvContext

	// IsFormulaContext differentiates from other interfaces.
	IsFormulaContext()
}

type FormulaContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	f_x          IStringValueContext
	_formulaInv  IFormulaInvContext
	v_formulaInv []IFormulaInvContext
}

func NewEmptyFormulaContext() *FormulaContext {
	var p = new(FormulaContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_formula
	return p
}

func (*FormulaContext) IsFormulaContext() {}

func NewFormulaContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FormulaContext {
	var p = new(FormulaContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_formula

	return p
}

func (s *FormulaContext) GetParser() antlr.Parser { return s.parser }

func (s *FormulaContext) GetF_x() IStringValueContext { return s.f_x }

func (s *FormulaContext) Get_formulaInv() IFormulaInvContext { return s._formulaInv }

func (s *FormulaContext) SetF_x(v IStringValueContext) { s.f_x = v }

func (s *FormulaContext) Set_formulaInv(v IFormulaInvContext) { s._formulaInv = v }

func (s *FormulaContext) GetV_formulaInv() []IFormulaInvContext { return s.v_formulaInv }

func (s *FormulaContext) SetV_formulaInv(v []IFormulaInvContext) { s.v_formulaInv = v }

func (s *FormulaContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(A2LParserBEGIN, 0)
}

func (s *FormulaContext) END() antlr.TerminalNode {
	return s.GetToken(A2LParserEND, 0)
}

func (s *FormulaContext) StringValue() IStringValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringValueContext)
}

func (s *FormulaContext) AllFormulaInv() []IFormulaInvContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IFormulaInvContext); ok {
			len++
		}
	}

	tst := make([]IFormulaInvContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IFormulaInvContext); ok {
			tst[i] = t.(IFormulaInvContext)
			i++
		}
	}

	return tst
}

func (s *FormulaContext) FormulaInv(i int) IFormulaInvContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFormulaInvContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFormulaInvContext)
}

func (s *FormulaContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FormulaContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FormulaContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterFormula(s)
	}
}

func (s *FormulaContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitFormula(s)
	}
}

func (s *FormulaContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitFormula(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) Formula() (localctx IFormulaContext) {
	this := p
	_ = this

	localctx = NewFormulaContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 118, A2LParserRULE_formula)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(877)
		p.Match(A2LParserBEGIN)
	}
	{
		p.SetState(878)
		p.Match(A2LParserT__91)
	}
	{
		p.SetState(879)

		var _x = p.StringValue()

		localctx.(*FormulaContext).f_x = _x
	}
	p.SetState(883)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == A2LParserT__92 {
		{
			p.SetState(880)

			var _x = p.FormulaInv()

			localctx.(*FormulaContext)._formulaInv = _x
		}
		localctx.(*FormulaContext).v_formulaInv = append(localctx.(*FormulaContext).v_formulaInv, localctx.(*FormulaContext)._formulaInv)

		p.SetState(885)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(886)
		p.Match(A2LParserEND)
	}
	{
		p.SetState(887)
		p.Match(A2LParserT__91)
	}

	return localctx
}

// IFormulaInvContext is an interface to support dynamic dispatch.
type IFormulaInvContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetG_x returns the g_x rule contexts.
	GetG_x() IStringValueContext

	// SetG_x sets the g_x rule contexts.
	SetG_x(IStringValueContext)

	// Getter signatures
	StringValue() IStringValueContext

	// IsFormulaInvContext differentiates from other interfaces.
	IsFormulaInvContext()
}

type FormulaInvContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	g_x    IStringValueContext
}

func NewEmptyFormulaInvContext() *FormulaInvContext {
	var p = new(FormulaInvContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_formulaInv
	return p
}

func (*FormulaInvContext) IsFormulaInvContext() {}

func NewFormulaInvContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FormulaInvContext {
	var p = new(FormulaInvContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_formulaInv

	return p
}

func (s *FormulaInvContext) GetParser() antlr.Parser { return s.parser }

func (s *FormulaInvContext) GetG_x() IStringValueContext { return s.g_x }

func (s *FormulaInvContext) SetG_x(v IStringValueContext) { s.g_x = v }

func (s *FormulaInvContext) StringValue() IStringValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringValueContext)
}

func (s *FormulaInvContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FormulaInvContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FormulaInvContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterFormulaInv(s)
	}
}

func (s *FormulaInvContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitFormulaInv(s)
	}
}

func (s *FormulaInvContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitFormulaInv(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) FormulaInv() (localctx IFormulaInvContext) {
	this := p
	_ = this

	localctx = NewFormulaInvContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 120, A2LParserRULE_formulaInv)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(889)
		p.Match(A2LParserT__92)
	}
	{
		p.SetState(890)

		var _x = p.StringValue()

		localctx.(*FormulaInvContext).g_x = _x
	}

	return localctx
}

// IStatusStringRefContext is an interface to support dynamic dispatch.
type IStatusStringRefContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetConversionTable returns the conversionTable rule contexts.
	GetConversionTable() IIdentifierValueContext

	// SetConversionTable sets the conversionTable rule contexts.
	SetConversionTable(IIdentifierValueContext)

	// Getter signatures
	IdentifierValue() IIdentifierValueContext

	// IsStatusStringRefContext differentiates from other interfaces.
	IsStatusStringRefContext()
}

type StatusStringRefContext struct {
	*antlr.BaseParserRuleContext
	parser          antlr.Parser
	conversionTable IIdentifierValueContext
}

func NewEmptyStatusStringRefContext() *StatusStringRefContext {
	var p = new(StatusStringRefContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_statusStringRef
	return p
}

func (*StatusStringRefContext) IsStatusStringRefContext() {}

func NewStatusStringRefContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StatusStringRefContext {
	var p = new(StatusStringRefContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_statusStringRef

	return p
}

func (s *StatusStringRefContext) GetParser() antlr.Parser { return s.parser }

func (s *StatusStringRefContext) GetConversionTable() IIdentifierValueContext {
	return s.conversionTable
}

func (s *StatusStringRefContext) SetConversionTable(v IIdentifierValueContext) { s.conversionTable = v }

func (s *StatusStringRefContext) IdentifierValue() IIdentifierValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierValueContext)
}

func (s *StatusStringRefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatusStringRefContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StatusStringRefContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterStatusStringRef(s)
	}
}

func (s *StatusStringRefContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitStatusStringRef(s)
	}
}

func (s *StatusStringRefContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitStatusStringRef(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) StatusStringRef() (localctx IStatusStringRefContext) {
	this := p
	_ = this

	localctx = NewStatusStringRefContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 122, A2LParserRULE_statusStringRef)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(892)
		p.Match(A2LParserT__93)
	}
	{
		p.SetState(893)

		var _x = p.IdentifierValue()

		localctx.(*StatusStringRefContext).conversionTable = _x
	}

	return localctx
}

// ICompuTabContext is an interface to support dynamic dispatch.
type ICompuTabContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetConversionType returns the conversionType token.
	GetConversionType() antlr.Token

	// SetConversionType sets the conversionType token.
	SetConversionType(antlr.Token)

	// GetName returns the name rule contexts.
	GetName() IIdentifierValueContext

	// GetLongIdentifier returns the longIdentifier rule contexts.
	GetLongIdentifier() IStringValueContext

	// GetNumberValuePairs returns the numberValuePairs rule contexts.
	GetNumberValuePairs() IIntegerValueContext

	// Get_numericValue returns the _numericValue rule contexts.
	Get_numericValue() INumericValueContext

	// GetVDefaultValue returns the vDefaultValue rule contexts.
	GetVDefaultValue() IDefaultValueContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierValueContext)

	// SetLongIdentifier sets the longIdentifier rule contexts.
	SetLongIdentifier(IStringValueContext)

	// SetNumberValuePairs sets the numberValuePairs rule contexts.
	SetNumberValuePairs(IIntegerValueContext)

	// Set_numericValue sets the _numericValue rule contexts.
	Set_numericValue(INumericValueContext)

	// SetVDefaultValue sets the vDefaultValue rule contexts.
	SetVDefaultValue(IDefaultValueContext)

	// GetInVal returns the inVal rule context list.
	GetInVal() []INumericValueContext

	// GetOutVal returns the outVal rule context list.
	GetOutVal() []INumericValueContext

	// SetInVal sets the inVal rule context list.
	SetInVal([]INumericValueContext)

	// SetOutVal sets the outVal rule context list.
	SetOutVal([]INumericValueContext)

	// Getter signatures
	BEGIN() antlr.TerminalNode
	END() antlr.TerminalNode
	IdentifierValue() IIdentifierValueContext
	StringValue() IStringValueContext
	IntegerValue() IIntegerValueContext
	AllNumericValue() []INumericValueContext
	NumericValue(i int) INumericValueContext
	AllDefaultValue() []IDefaultValueContext
	DefaultValue(i int) IDefaultValueContext

	// IsCompuTabContext differentiates from other interfaces.
	IsCompuTabContext()
}

type CompuTabContext struct {
	*antlr.BaseParserRuleContext
	parser           antlr.Parser
	name             IIdentifierValueContext
	longIdentifier   IStringValueContext
	conversionType   antlr.Token
	numberValuePairs IIntegerValueContext
	_numericValue    INumericValueContext
	inVal            []INumericValueContext
	outVal           []INumericValueContext
	vDefaultValue    IDefaultValueContext
}

func NewEmptyCompuTabContext() *CompuTabContext {
	var p = new(CompuTabContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_compuTab
	return p
}

func (*CompuTabContext) IsCompuTabContext() {}

func NewCompuTabContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CompuTabContext {
	var p = new(CompuTabContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_compuTab

	return p
}

func (s *CompuTabContext) GetParser() antlr.Parser { return s.parser }

func (s *CompuTabContext) GetConversionType() antlr.Token { return s.conversionType }

func (s *CompuTabContext) SetConversionType(v antlr.Token) { s.conversionType = v }

func (s *CompuTabContext) GetName() IIdentifierValueContext { return s.name }

func (s *CompuTabContext) GetLongIdentifier() IStringValueContext { return s.longIdentifier }

func (s *CompuTabContext) GetNumberValuePairs() IIntegerValueContext { return s.numberValuePairs }

func (s *CompuTabContext) Get_numericValue() INumericValueContext { return s._numericValue }

func (s *CompuTabContext) GetVDefaultValue() IDefaultValueContext { return s.vDefaultValue }

func (s *CompuTabContext) SetName(v IIdentifierValueContext) { s.name = v }

func (s *CompuTabContext) SetLongIdentifier(v IStringValueContext) { s.longIdentifier = v }

func (s *CompuTabContext) SetNumberValuePairs(v IIntegerValueContext) { s.numberValuePairs = v }

func (s *CompuTabContext) Set_numericValue(v INumericValueContext) { s._numericValue = v }

func (s *CompuTabContext) SetVDefaultValue(v IDefaultValueContext) { s.vDefaultValue = v }

func (s *CompuTabContext) GetInVal() []INumericValueContext { return s.inVal }

func (s *CompuTabContext) GetOutVal() []INumericValueContext { return s.outVal }

func (s *CompuTabContext) SetInVal(v []INumericValueContext) { s.inVal = v }

func (s *CompuTabContext) SetOutVal(v []INumericValueContext) { s.outVal = v }

func (s *CompuTabContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(A2LParserBEGIN, 0)
}

func (s *CompuTabContext) END() antlr.TerminalNode {
	return s.GetToken(A2LParserEND, 0)
}

func (s *CompuTabContext) IdentifierValue() IIdentifierValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierValueContext)
}

func (s *CompuTabContext) StringValue() IStringValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringValueContext)
}

func (s *CompuTabContext) IntegerValue() IIntegerValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *CompuTabContext) AllNumericValue() []INumericValueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INumericValueContext); ok {
			len++
		}
	}

	tst := make([]INumericValueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INumericValueContext); ok {
			tst[i] = t.(INumericValueContext)
			i++
		}
	}

	return tst
}

func (s *CompuTabContext) NumericValue(i int) INumericValueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumericValueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumericValueContext)
}

func (s *CompuTabContext) AllDefaultValue() []IDefaultValueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDefaultValueContext); ok {
			len++
		}
	}

	tst := make([]IDefaultValueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDefaultValueContext); ok {
			tst[i] = t.(IDefaultValueContext)
			i++
		}
	}

	return tst
}

func (s *CompuTabContext) DefaultValue(i int) IDefaultValueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefaultValueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefaultValueContext)
}

func (s *CompuTabContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CompuTabContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CompuTabContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterCompuTab(s)
	}
}

func (s *CompuTabContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitCompuTab(s)
	}
}

func (s *CompuTabContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitCompuTab(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) CompuTab() (localctx ICompuTabContext) {
	this := p
	_ = this

	localctx = NewCompuTabContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 124, A2LParserRULE_compuTab)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(895)
		p.Match(A2LParserBEGIN)
	}
	{
		p.SetState(896)
		p.Match(A2LParserT__94)
	}
	{
		p.SetState(897)

		var _x = p.IdentifierValue()

		localctx.(*CompuTabContext).name = _x
	}
	{
		p.SetState(898)

		var _x = p.StringValue()

		localctx.(*CompuTabContext).longIdentifier = _x
	}
	{
		p.SetState(899)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*CompuTabContext).conversionType = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == A2LParserT__85 || _la == A2LParserT__86) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*CompuTabContext).conversionType = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(900)

		var _x = p.IntegerValue()

		localctx.(*CompuTabContext).numberValuePairs = _x
	}
	p.SetState(906)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (int64((_la-301)) & ^0x3f) == 0 && ((int64(1)<<(_la-301))&7) != 0 {
		{
			p.SetState(901)

			var _x = p.NumericValue()

			localctx.(*CompuTabContext)._numericValue = _x
		}
		localctx.(*CompuTabContext).inVal = append(localctx.(*CompuTabContext).inVal, localctx.(*CompuTabContext)._numericValue)
		{
			p.SetState(902)

			var _x = p.NumericValue()

			localctx.(*CompuTabContext)._numericValue = _x
		}
		localctx.(*CompuTabContext).outVal = append(localctx.(*CompuTabContext).outVal, localctx.(*CompuTabContext)._numericValue)

		p.SetState(908)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(912)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == A2LParserT__18 {
		{
			p.SetState(909)

			var _x = p.DefaultValue()

			localctx.(*CompuTabContext).vDefaultValue = _x
		}

		p.SetState(914)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(915)
		p.Match(A2LParserEND)
	}
	{
		p.SetState(916)
		p.Match(A2LParserT__94)
	}

	return localctx
}

// IDefaultValueNumericContext is an interface to support dynamic dispatch.
type IDefaultValueNumericContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetDisplay_value returns the display_value rule contexts.
	GetDisplay_value() INumericValueContext

	// SetDisplay_value sets the display_value rule contexts.
	SetDisplay_value(INumericValueContext)

	// Getter signatures
	NumericValue() INumericValueContext

	// IsDefaultValueNumericContext differentiates from other interfaces.
	IsDefaultValueNumericContext()
}

type DefaultValueNumericContext struct {
	*antlr.BaseParserRuleContext
	parser        antlr.Parser
	display_value INumericValueContext
}

func NewEmptyDefaultValueNumericContext() *DefaultValueNumericContext {
	var p = new(DefaultValueNumericContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_defaultValueNumeric
	return p
}

func (*DefaultValueNumericContext) IsDefaultValueNumericContext() {}

func NewDefaultValueNumericContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DefaultValueNumericContext {
	var p = new(DefaultValueNumericContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_defaultValueNumeric

	return p
}

func (s *DefaultValueNumericContext) GetParser() antlr.Parser { return s.parser }

func (s *DefaultValueNumericContext) GetDisplay_value() INumericValueContext { return s.display_value }

func (s *DefaultValueNumericContext) SetDisplay_value(v INumericValueContext) { s.display_value = v }

func (s *DefaultValueNumericContext) NumericValue() INumericValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumericValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumericValueContext)
}

func (s *DefaultValueNumericContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DefaultValueNumericContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DefaultValueNumericContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterDefaultValueNumeric(s)
	}
}

func (s *DefaultValueNumericContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitDefaultValueNumeric(s)
	}
}

func (s *DefaultValueNumericContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitDefaultValueNumeric(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) DefaultValueNumeric() (localctx IDefaultValueNumericContext) {
	this := p
	_ = this

	localctx = NewDefaultValueNumericContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 126, A2LParserRULE_defaultValueNumeric)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(918)
		p.Match(A2LParserT__95)
	}
	{
		p.SetState(919)

		var _x = p.NumericValue()

		localctx.(*DefaultValueNumericContext).display_value = _x
	}

	return localctx
}

// ICompuVTabContext is an interface to support dynamic dispatch.
type ICompuVTabContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetConversionType returns the conversionType token.
	GetConversionType() antlr.Token

	// SetConversionType sets the conversionType token.
	SetConversionType(antlr.Token)

	// GetName returns the name rule contexts.
	GetName() IIdentifierValueContext

	// GetLongIdentifier returns the longIdentifier rule contexts.
	GetLongIdentifier() IStringValueContext

	// GetNumberValuePairs returns the numberValuePairs rule contexts.
	GetNumberValuePairs() IIntegerValueContext

	// Get_numericValue returns the _numericValue rule contexts.
	Get_numericValue() INumericValueContext

	// Get_stringValue returns the _stringValue rule contexts.
	Get_stringValue() IStringValueContext

	// GetVDefaultValue returns the vDefaultValue rule contexts.
	GetVDefaultValue() IDefaultValueContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierValueContext)

	// SetLongIdentifier sets the longIdentifier rule contexts.
	SetLongIdentifier(IStringValueContext)

	// SetNumberValuePairs sets the numberValuePairs rule contexts.
	SetNumberValuePairs(IIntegerValueContext)

	// Set_numericValue sets the _numericValue rule contexts.
	Set_numericValue(INumericValueContext)

	// Set_stringValue sets the _stringValue rule contexts.
	Set_stringValue(IStringValueContext)

	// SetVDefaultValue sets the vDefaultValue rule contexts.
	SetVDefaultValue(IDefaultValueContext)

	// GetInVal returns the inVal rule context list.
	GetInVal() []INumericValueContext

	// GetOutVal returns the outVal rule context list.
	GetOutVal() []IStringValueContext

	// SetInVal sets the inVal rule context list.
	SetInVal([]INumericValueContext)

	// SetOutVal sets the outVal rule context list.
	SetOutVal([]IStringValueContext)

	// Getter signatures
	BEGIN() antlr.TerminalNode
	END() antlr.TerminalNode
	IdentifierValue() IIdentifierValueContext
	AllStringValue() []IStringValueContext
	StringValue(i int) IStringValueContext
	IntegerValue() IIntegerValueContext
	AllNumericValue() []INumericValueContext
	NumericValue(i int) INumericValueContext
	AllDefaultValue() []IDefaultValueContext
	DefaultValue(i int) IDefaultValueContext

	// IsCompuVTabContext differentiates from other interfaces.
	IsCompuVTabContext()
}

type CompuVTabContext struct {
	*antlr.BaseParserRuleContext
	parser           antlr.Parser
	name             IIdentifierValueContext
	longIdentifier   IStringValueContext
	conversionType   antlr.Token
	numberValuePairs IIntegerValueContext
	_numericValue    INumericValueContext
	inVal            []INumericValueContext
	_stringValue     IStringValueContext
	outVal           []IStringValueContext
	vDefaultValue    IDefaultValueContext
}

func NewEmptyCompuVTabContext() *CompuVTabContext {
	var p = new(CompuVTabContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_compuVTab
	return p
}

func (*CompuVTabContext) IsCompuVTabContext() {}

func NewCompuVTabContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CompuVTabContext {
	var p = new(CompuVTabContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_compuVTab

	return p
}

func (s *CompuVTabContext) GetParser() antlr.Parser { return s.parser }

func (s *CompuVTabContext) GetConversionType() antlr.Token { return s.conversionType }

func (s *CompuVTabContext) SetConversionType(v antlr.Token) { s.conversionType = v }

func (s *CompuVTabContext) GetName() IIdentifierValueContext { return s.name }

func (s *CompuVTabContext) GetLongIdentifier() IStringValueContext { return s.longIdentifier }

func (s *CompuVTabContext) GetNumberValuePairs() IIntegerValueContext { return s.numberValuePairs }

func (s *CompuVTabContext) Get_numericValue() INumericValueContext { return s._numericValue }

func (s *CompuVTabContext) Get_stringValue() IStringValueContext { return s._stringValue }

func (s *CompuVTabContext) GetVDefaultValue() IDefaultValueContext { return s.vDefaultValue }

func (s *CompuVTabContext) SetName(v IIdentifierValueContext) { s.name = v }

func (s *CompuVTabContext) SetLongIdentifier(v IStringValueContext) { s.longIdentifier = v }

func (s *CompuVTabContext) SetNumberValuePairs(v IIntegerValueContext) { s.numberValuePairs = v }

func (s *CompuVTabContext) Set_numericValue(v INumericValueContext) { s._numericValue = v }

func (s *CompuVTabContext) Set_stringValue(v IStringValueContext) { s._stringValue = v }

func (s *CompuVTabContext) SetVDefaultValue(v IDefaultValueContext) { s.vDefaultValue = v }

func (s *CompuVTabContext) GetInVal() []INumericValueContext { return s.inVal }

func (s *CompuVTabContext) GetOutVal() []IStringValueContext { return s.outVal }

func (s *CompuVTabContext) SetInVal(v []INumericValueContext) { s.inVal = v }

func (s *CompuVTabContext) SetOutVal(v []IStringValueContext) { s.outVal = v }

func (s *CompuVTabContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(A2LParserBEGIN, 0)
}

func (s *CompuVTabContext) END() antlr.TerminalNode {
	return s.GetToken(A2LParserEND, 0)
}

func (s *CompuVTabContext) IdentifierValue() IIdentifierValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierValueContext)
}

func (s *CompuVTabContext) AllStringValue() []IStringValueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStringValueContext); ok {
			len++
		}
	}

	tst := make([]IStringValueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStringValueContext); ok {
			tst[i] = t.(IStringValueContext)
			i++
		}
	}

	return tst
}

func (s *CompuVTabContext) StringValue(i int) IStringValueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringValueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringValueContext)
}

func (s *CompuVTabContext) IntegerValue() IIntegerValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *CompuVTabContext) AllNumericValue() []INumericValueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INumericValueContext); ok {
			len++
		}
	}

	tst := make([]INumericValueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INumericValueContext); ok {
			tst[i] = t.(INumericValueContext)
			i++
		}
	}

	return tst
}

func (s *CompuVTabContext) NumericValue(i int) INumericValueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumericValueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumericValueContext)
}

func (s *CompuVTabContext) AllDefaultValue() []IDefaultValueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDefaultValueContext); ok {
			len++
		}
	}

	tst := make([]IDefaultValueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDefaultValueContext); ok {
			tst[i] = t.(IDefaultValueContext)
			i++
		}
	}

	return tst
}

func (s *CompuVTabContext) DefaultValue(i int) IDefaultValueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefaultValueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefaultValueContext)
}

func (s *CompuVTabContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CompuVTabContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CompuVTabContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterCompuVTab(s)
	}
}

func (s *CompuVTabContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitCompuVTab(s)
	}
}

func (s *CompuVTabContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitCompuVTab(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) CompuVTab() (localctx ICompuVTabContext) {
	this := p
	_ = this

	localctx = NewCompuVTabContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 128, A2LParserRULE_compuVTab)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(921)
		p.Match(A2LParserBEGIN)
	}
	{
		p.SetState(922)
		p.Match(A2LParserT__96)
	}
	{
		p.SetState(923)

		var _x = p.IdentifierValue()

		localctx.(*CompuVTabContext).name = _x
	}
	{
		p.SetState(924)

		var _x = p.StringValue()

		localctx.(*CompuVTabContext).longIdentifier = _x
	}
	{
		p.SetState(925)

		var _m = p.Match(A2LParserT__87)

		localctx.(*CompuVTabContext).conversionType = _m
	}
	{
		p.SetState(926)

		var _x = p.IntegerValue()

		localctx.(*CompuVTabContext).numberValuePairs = _x
	}
	p.SetState(932)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (int64((_la-301)) & ^0x3f) == 0 && ((int64(1)<<(_la-301))&7) != 0 {
		{
			p.SetState(927)

			var _x = p.NumericValue()

			localctx.(*CompuVTabContext)._numericValue = _x
		}
		localctx.(*CompuVTabContext).inVal = append(localctx.(*CompuVTabContext).inVal, localctx.(*CompuVTabContext)._numericValue)
		{
			p.SetState(928)

			var _x = p.StringValue()

			localctx.(*CompuVTabContext)._stringValue = _x
		}
		localctx.(*CompuVTabContext).outVal = append(localctx.(*CompuVTabContext).outVal, localctx.(*CompuVTabContext)._stringValue)

		p.SetState(934)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(938)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == A2LParserT__18 {
		{
			p.SetState(935)

			var _x = p.DefaultValue()

			localctx.(*CompuVTabContext).vDefaultValue = _x
		}

		p.SetState(940)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(941)
		p.Match(A2LParserEND)
	}
	{
		p.SetState(942)
		p.Match(A2LParserT__96)
	}

	return localctx
}

// ICompuVTabRangeContext is an interface to support dynamic dispatch.
type ICompuVTabRangeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierValueContext

	// GetLongIdentifier returns the longIdentifier rule contexts.
	GetLongIdentifier() IStringValueContext

	// GetNumberValueTriples returns the numberValueTriples rule contexts.
	GetNumberValueTriples() IIntegerValueContext

	// Get_numericValue returns the _numericValue rule contexts.
	Get_numericValue() INumericValueContext

	// Get_stringValue returns the _stringValue rule contexts.
	Get_stringValue() IStringValueContext

	// GetVDefaultValue returns the vDefaultValue rule contexts.
	GetVDefaultValue() IDefaultValueContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierValueContext)

	// SetLongIdentifier sets the longIdentifier rule contexts.
	SetLongIdentifier(IStringValueContext)

	// SetNumberValueTriples sets the numberValueTriples rule contexts.
	SetNumberValueTriples(IIntegerValueContext)

	// Set_numericValue sets the _numericValue rule contexts.
	Set_numericValue(INumericValueContext)

	// Set_stringValue sets the _stringValue rule contexts.
	Set_stringValue(IStringValueContext)

	// SetVDefaultValue sets the vDefaultValue rule contexts.
	SetVDefaultValue(IDefaultValueContext)

	// GetInValMin returns the inValMin rule context list.
	GetInValMin() []INumericValueContext

	// GetInValMax returns the inValMax rule context list.
	GetInValMax() []INumericValueContext

	// GetOutVal returns the outVal rule context list.
	GetOutVal() []IStringValueContext

	// SetInValMin sets the inValMin rule context list.
	SetInValMin([]INumericValueContext)

	// SetInValMax sets the inValMax rule context list.
	SetInValMax([]INumericValueContext)

	// SetOutVal sets the outVal rule context list.
	SetOutVal([]IStringValueContext)

	// Getter signatures
	BEGIN() antlr.TerminalNode
	END() antlr.TerminalNode
	IdentifierValue() IIdentifierValueContext
	AllStringValue() []IStringValueContext
	StringValue(i int) IStringValueContext
	IntegerValue() IIntegerValueContext
	AllNumericValue() []INumericValueContext
	NumericValue(i int) INumericValueContext
	AllDefaultValue() []IDefaultValueContext
	DefaultValue(i int) IDefaultValueContext

	// IsCompuVTabRangeContext differentiates from other interfaces.
	IsCompuVTabRangeContext()
}

type CompuVTabRangeContext struct {
	*antlr.BaseParserRuleContext
	parser             antlr.Parser
	name               IIdentifierValueContext
	longIdentifier     IStringValueContext
	numberValueTriples IIntegerValueContext
	_numericValue      INumericValueContext
	inValMin           []INumericValueContext
	inValMax           []INumericValueContext
	_stringValue       IStringValueContext
	outVal             []IStringValueContext
	vDefaultValue      IDefaultValueContext
}

func NewEmptyCompuVTabRangeContext() *CompuVTabRangeContext {
	var p = new(CompuVTabRangeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_compuVTabRange
	return p
}

func (*CompuVTabRangeContext) IsCompuVTabRangeContext() {}

func NewCompuVTabRangeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CompuVTabRangeContext {
	var p = new(CompuVTabRangeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_compuVTabRange

	return p
}

func (s *CompuVTabRangeContext) GetParser() antlr.Parser { return s.parser }

func (s *CompuVTabRangeContext) GetName() IIdentifierValueContext { return s.name }

func (s *CompuVTabRangeContext) GetLongIdentifier() IStringValueContext { return s.longIdentifier }

func (s *CompuVTabRangeContext) GetNumberValueTriples() IIntegerValueContext {
	return s.numberValueTriples
}

func (s *CompuVTabRangeContext) Get_numericValue() INumericValueContext { return s._numericValue }

func (s *CompuVTabRangeContext) Get_stringValue() IStringValueContext { return s._stringValue }

func (s *CompuVTabRangeContext) GetVDefaultValue() IDefaultValueContext { return s.vDefaultValue }

func (s *CompuVTabRangeContext) SetName(v IIdentifierValueContext) { s.name = v }

func (s *CompuVTabRangeContext) SetLongIdentifier(v IStringValueContext) { s.longIdentifier = v }

func (s *CompuVTabRangeContext) SetNumberValueTriples(v IIntegerValueContext) {
	s.numberValueTriples = v
}

func (s *CompuVTabRangeContext) Set_numericValue(v INumericValueContext) { s._numericValue = v }

func (s *CompuVTabRangeContext) Set_stringValue(v IStringValueContext) { s._stringValue = v }

func (s *CompuVTabRangeContext) SetVDefaultValue(v IDefaultValueContext) { s.vDefaultValue = v }

func (s *CompuVTabRangeContext) GetInValMin() []INumericValueContext { return s.inValMin }

func (s *CompuVTabRangeContext) GetInValMax() []INumericValueContext { return s.inValMax }

func (s *CompuVTabRangeContext) GetOutVal() []IStringValueContext { return s.outVal }

func (s *CompuVTabRangeContext) SetInValMin(v []INumericValueContext) { s.inValMin = v }

func (s *CompuVTabRangeContext) SetInValMax(v []INumericValueContext) { s.inValMax = v }

func (s *CompuVTabRangeContext) SetOutVal(v []IStringValueContext) { s.outVal = v }

func (s *CompuVTabRangeContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(A2LParserBEGIN, 0)
}

func (s *CompuVTabRangeContext) END() antlr.TerminalNode {
	return s.GetToken(A2LParserEND, 0)
}

func (s *CompuVTabRangeContext) IdentifierValue() IIdentifierValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierValueContext)
}

func (s *CompuVTabRangeContext) AllStringValue() []IStringValueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStringValueContext); ok {
			len++
		}
	}

	tst := make([]IStringValueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStringValueContext); ok {
			tst[i] = t.(IStringValueContext)
			i++
		}
	}

	return tst
}

func (s *CompuVTabRangeContext) StringValue(i int) IStringValueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringValueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringValueContext)
}

func (s *CompuVTabRangeContext) IntegerValue() IIntegerValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *CompuVTabRangeContext) AllNumericValue() []INumericValueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INumericValueContext); ok {
			len++
		}
	}

	tst := make([]INumericValueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INumericValueContext); ok {
			tst[i] = t.(INumericValueContext)
			i++
		}
	}

	return tst
}

func (s *CompuVTabRangeContext) NumericValue(i int) INumericValueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumericValueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumericValueContext)
}

func (s *CompuVTabRangeContext) AllDefaultValue() []IDefaultValueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDefaultValueContext); ok {
			len++
		}
	}

	tst := make([]IDefaultValueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDefaultValueContext); ok {
			tst[i] = t.(IDefaultValueContext)
			i++
		}
	}

	return tst
}

func (s *CompuVTabRangeContext) DefaultValue(i int) IDefaultValueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefaultValueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefaultValueContext)
}

func (s *CompuVTabRangeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CompuVTabRangeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CompuVTabRangeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterCompuVTabRange(s)
	}
}

func (s *CompuVTabRangeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitCompuVTabRange(s)
	}
}

func (s *CompuVTabRangeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitCompuVTabRange(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) CompuVTabRange() (localctx ICompuVTabRangeContext) {
	this := p
	_ = this

	localctx = NewCompuVTabRangeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 130, A2LParserRULE_compuVTabRange)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(944)
		p.Match(A2LParserBEGIN)
	}
	{
		p.SetState(945)
		p.Match(A2LParserT__97)
	}
	{
		p.SetState(946)

		var _x = p.IdentifierValue()

		localctx.(*CompuVTabRangeContext).name = _x
	}
	{
		p.SetState(947)

		var _x = p.StringValue()

		localctx.(*CompuVTabRangeContext).longIdentifier = _x
	}
	{
		p.SetState(948)

		var _x = p.IntegerValue()

		localctx.(*CompuVTabRangeContext).numberValueTriples = _x
	}
	p.SetState(955)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (int64((_la-301)) & ^0x3f) == 0 && ((int64(1)<<(_la-301))&7) != 0 {
		{
			p.SetState(949)

			var _x = p.NumericValue()

			localctx.(*CompuVTabRangeContext)._numericValue = _x
		}
		localctx.(*CompuVTabRangeContext).inValMin = append(localctx.(*CompuVTabRangeContext).inValMin, localctx.(*CompuVTabRangeContext)._numericValue)
		{
			p.SetState(950)

			var _x = p.NumericValue()

			localctx.(*CompuVTabRangeContext)._numericValue = _x
		}
		localctx.(*CompuVTabRangeContext).inValMax = append(localctx.(*CompuVTabRangeContext).inValMax, localctx.(*CompuVTabRangeContext)._numericValue)
		{
			p.SetState(951)

			var _x = p.StringValue()

			localctx.(*CompuVTabRangeContext)._stringValue = _x
		}
		localctx.(*CompuVTabRangeContext).outVal = append(localctx.(*CompuVTabRangeContext).outVal, localctx.(*CompuVTabRangeContext)._stringValue)

		p.SetState(957)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(961)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == A2LParserT__18 {
		{
			p.SetState(958)

			var _x = p.DefaultValue()

			localctx.(*CompuVTabRangeContext).vDefaultValue = _x
		}

		p.SetState(963)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(964)
		p.Match(A2LParserEND)
	}
	{
		p.SetState(965)
		p.Match(A2LParserT__97)
	}

	return localctx
}

// IFrameContext is an interface to support dynamic dispatch.
type IFrameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierValueContext

	// GetLongIdentifier returns the longIdentifier rule contexts.
	GetLongIdentifier() IStringValueContext

	// GetScalingUnit returns the scalingUnit rule contexts.
	GetScalingUnit() IIntegerValueContext

	// GetRate returns the rate rule contexts.
	GetRate() IIntegerValueContext

	// Get_frameMeasurement returns the _frameMeasurement rule contexts.
	Get_frameMeasurement() IFrameMeasurementContext

	// Get_ifData returns the _ifData rule contexts.
	Get_ifData() IIfDataContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierValueContext)

	// SetLongIdentifier sets the longIdentifier rule contexts.
	SetLongIdentifier(IStringValueContext)

	// SetScalingUnit sets the scalingUnit rule contexts.
	SetScalingUnit(IIntegerValueContext)

	// SetRate sets the rate rule contexts.
	SetRate(IIntegerValueContext)

	// Set_frameMeasurement sets the _frameMeasurement rule contexts.
	Set_frameMeasurement(IFrameMeasurementContext)

	// Set_ifData sets the _ifData rule contexts.
	Set_ifData(IIfDataContext)

	// GetV_frameMeasurement returns the v_frameMeasurement rule context list.
	GetV_frameMeasurement() []IFrameMeasurementContext

	// GetV_ifData returns the v_ifData rule context list.
	GetV_ifData() []IIfDataContext

	// SetV_frameMeasurement sets the v_frameMeasurement rule context list.
	SetV_frameMeasurement([]IFrameMeasurementContext)

	// SetV_ifData sets the v_ifData rule context list.
	SetV_ifData([]IIfDataContext)

	// Getter signatures
	BEGIN() antlr.TerminalNode
	END() antlr.TerminalNode
	IdentifierValue() IIdentifierValueContext
	StringValue() IStringValueContext
	AllIntegerValue() []IIntegerValueContext
	IntegerValue(i int) IIntegerValueContext
	AllFrameMeasurement() []IFrameMeasurementContext
	FrameMeasurement(i int) IFrameMeasurementContext
	AllIfData() []IIfDataContext
	IfData(i int) IIfDataContext

	// IsFrameContext differentiates from other interfaces.
	IsFrameContext()
}

type FrameContext struct {
	*antlr.BaseParserRuleContext
	parser             antlr.Parser
	name               IIdentifierValueContext
	longIdentifier     IStringValueContext
	scalingUnit        IIntegerValueContext
	rate               IIntegerValueContext
	_frameMeasurement  IFrameMeasurementContext
	v_frameMeasurement []IFrameMeasurementContext
	_ifData            IIfDataContext
	v_ifData           []IIfDataContext
}

func NewEmptyFrameContext() *FrameContext {
	var p = new(FrameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_frame
	return p
}

func (*FrameContext) IsFrameContext() {}

func NewFrameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FrameContext {
	var p = new(FrameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_frame

	return p
}

func (s *FrameContext) GetParser() antlr.Parser { return s.parser }

func (s *FrameContext) GetName() IIdentifierValueContext { return s.name }

func (s *FrameContext) GetLongIdentifier() IStringValueContext { return s.longIdentifier }

func (s *FrameContext) GetScalingUnit() IIntegerValueContext { return s.scalingUnit }

func (s *FrameContext) GetRate() IIntegerValueContext { return s.rate }

func (s *FrameContext) Get_frameMeasurement() IFrameMeasurementContext { return s._frameMeasurement }

func (s *FrameContext) Get_ifData() IIfDataContext { return s._ifData }

func (s *FrameContext) SetName(v IIdentifierValueContext) { s.name = v }

func (s *FrameContext) SetLongIdentifier(v IStringValueContext) { s.longIdentifier = v }

func (s *FrameContext) SetScalingUnit(v IIntegerValueContext) { s.scalingUnit = v }

func (s *FrameContext) SetRate(v IIntegerValueContext) { s.rate = v }

func (s *FrameContext) Set_frameMeasurement(v IFrameMeasurementContext) { s._frameMeasurement = v }

func (s *FrameContext) Set_ifData(v IIfDataContext) { s._ifData = v }

func (s *FrameContext) GetV_frameMeasurement() []IFrameMeasurementContext {
	return s.v_frameMeasurement
}

func (s *FrameContext) GetV_ifData() []IIfDataContext { return s.v_ifData }

func (s *FrameContext) SetV_frameMeasurement(v []IFrameMeasurementContext) { s.v_frameMeasurement = v }

func (s *FrameContext) SetV_ifData(v []IIfDataContext) { s.v_ifData = v }

func (s *FrameContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(A2LParserBEGIN, 0)
}

func (s *FrameContext) END() antlr.TerminalNode {
	return s.GetToken(A2LParserEND, 0)
}

func (s *FrameContext) IdentifierValue() IIdentifierValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierValueContext)
}

func (s *FrameContext) StringValue() IStringValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringValueContext)
}

func (s *FrameContext) AllIntegerValue() []IIntegerValueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIntegerValueContext); ok {
			len++
		}
	}

	tst := make([]IIntegerValueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIntegerValueContext); ok {
			tst[i] = t.(IIntegerValueContext)
			i++
		}
	}

	return tst
}

func (s *FrameContext) IntegerValue(i int) IIntegerValueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *FrameContext) AllFrameMeasurement() []IFrameMeasurementContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IFrameMeasurementContext); ok {
			len++
		}
	}

	tst := make([]IFrameMeasurementContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IFrameMeasurementContext); ok {
			tst[i] = t.(IFrameMeasurementContext)
			i++
		}
	}

	return tst
}

func (s *FrameContext) FrameMeasurement(i int) IFrameMeasurementContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFrameMeasurementContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFrameMeasurementContext)
}

func (s *FrameContext) AllIfData() []IIfDataContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIfDataContext); ok {
			len++
		}
	}

	tst := make([]IIfDataContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIfDataContext); ok {
			tst[i] = t.(IIfDataContext)
			i++
		}
	}

	return tst
}

func (s *FrameContext) IfData(i int) IIfDataContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIfDataContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIfDataContext)
}

func (s *FrameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FrameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FrameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterFrame(s)
	}
}

func (s *FrameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitFrame(s)
	}
}

func (s *FrameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitFrame(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) Frame() (localctx IFrameContext) {
	this := p
	_ = this

	localctx = NewFrameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 132, A2LParserRULE_frame)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(967)
		p.Match(A2LParserBEGIN)
	}
	{
		p.SetState(968)
		p.Match(A2LParserT__98)
	}
	{
		p.SetState(969)

		var _x = p.IdentifierValue()

		localctx.(*FrameContext).name = _x
	}
	{
		p.SetState(970)

		var _x = p.StringValue()

		localctx.(*FrameContext).longIdentifier = _x
	}
	{
		p.SetState(971)

		var _x = p.IntegerValue()

		localctx.(*FrameContext).scalingUnit = _x
	}
	{
		p.SetState(972)

		var _x = p.IntegerValue()

		localctx.(*FrameContext).rate = _x
	}
	p.SetState(977)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == A2LParserT__99 || _la == A2LParserBEGIN {
		p.SetState(975)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case A2LParserT__99:
			{
				p.SetState(973)

				var _x = p.FrameMeasurement()

				localctx.(*FrameContext)._frameMeasurement = _x
			}
			localctx.(*FrameContext).v_frameMeasurement = append(localctx.(*FrameContext).v_frameMeasurement, localctx.(*FrameContext)._frameMeasurement)

		case A2LParserBEGIN:
			{
				p.SetState(974)

				var _x = p.IfData()

				localctx.(*FrameContext)._ifData = _x
			}
			localctx.(*FrameContext).v_ifData = append(localctx.(*FrameContext).v_ifData, localctx.(*FrameContext)._ifData)

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(979)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(980)
		p.Match(A2LParserEND)
	}
	{
		p.SetState(981)
		p.Match(A2LParserT__98)
	}

	return localctx
}

// IFrameMeasurementContext is an interface to support dynamic dispatch.
type IFrameMeasurementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_identifierValue returns the _identifierValue rule contexts.
	Get_identifierValue() IIdentifierValueContext

	// Set_identifierValue sets the _identifierValue rule contexts.
	Set_identifierValue(IIdentifierValueContext)

	// GetIdentifier returns the identifier rule context list.
	GetIdentifier() []IIdentifierValueContext

	// SetIdentifier sets the identifier rule context list.
	SetIdentifier([]IIdentifierValueContext)

	// Getter signatures
	AllIdentifierValue() []IIdentifierValueContext
	IdentifierValue(i int) IIdentifierValueContext

	// IsFrameMeasurementContext differentiates from other interfaces.
	IsFrameMeasurementContext()
}

type FrameMeasurementContext struct {
	*antlr.BaseParserRuleContext
	parser           antlr.Parser
	_identifierValue IIdentifierValueContext
	identifier       []IIdentifierValueContext
}

func NewEmptyFrameMeasurementContext() *FrameMeasurementContext {
	var p = new(FrameMeasurementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_frameMeasurement
	return p
}

func (*FrameMeasurementContext) IsFrameMeasurementContext() {}

func NewFrameMeasurementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FrameMeasurementContext {
	var p = new(FrameMeasurementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_frameMeasurement

	return p
}

func (s *FrameMeasurementContext) GetParser() antlr.Parser { return s.parser }

func (s *FrameMeasurementContext) Get_identifierValue() IIdentifierValueContext {
	return s._identifierValue
}

func (s *FrameMeasurementContext) Set_identifierValue(v IIdentifierValueContext) {
	s._identifierValue = v
}

func (s *FrameMeasurementContext) GetIdentifier() []IIdentifierValueContext { return s.identifier }

func (s *FrameMeasurementContext) SetIdentifier(v []IIdentifierValueContext) { s.identifier = v }

func (s *FrameMeasurementContext) AllIdentifierValue() []IIdentifierValueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierValueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierValueContext); ok {
			tst[i] = t.(IIdentifierValueContext)
			i++
		}
	}

	return tst
}

func (s *FrameMeasurementContext) IdentifierValue(i int) IIdentifierValueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierValueContext)
}

func (s *FrameMeasurementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FrameMeasurementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FrameMeasurementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterFrameMeasurement(s)
	}
}

func (s *FrameMeasurementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitFrameMeasurement(s)
	}
}

func (s *FrameMeasurementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitFrameMeasurement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) FrameMeasurement() (localctx IFrameMeasurementContext) {
	this := p
	_ = this

	localctx = NewFrameMeasurementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 134, A2LParserRULE_frameMeasurement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(983)
		p.Match(A2LParserT__99)
	}
	p.SetState(987)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == A2LParserIDENT {
		{
			p.SetState(984)

			var _x = p.IdentifierValue()

			localctx.(*FrameMeasurementContext)._identifierValue = _x
		}
		localctx.(*FrameMeasurementContext).identifier = append(localctx.(*FrameMeasurementContext).identifier, localctx.(*FrameMeasurementContext)._identifierValue)

		p.SetState(989)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IFunctionContext is an interface to support dynamic dispatch.
type IFunctionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierValueContext

	// GetLongIdentifier returns the longIdentifier rule contexts.
	GetLongIdentifier() IStringValueContext

	// Get_annotation returns the _annotation rule contexts.
	Get_annotation() IAnnotationContext

	// Get_defCharacteristic returns the _defCharacteristic rule contexts.
	Get_defCharacteristic() IDefCharacteristicContext

	// Get_functionVersion returns the _functionVersion rule contexts.
	Get_functionVersion() IFunctionVersionContext

	// Get_ifData returns the _ifData rule contexts.
	Get_ifData() IIfDataContext

	// Get_inMeasurement returns the _inMeasurement rule contexts.
	Get_inMeasurement() IInMeasurementContext

	// Get_locMeasurement returns the _locMeasurement rule contexts.
	Get_locMeasurement() ILocMeasurementContext

	// Get_outMeasurement returns the _outMeasurement rule contexts.
	Get_outMeasurement() IOutMeasurementContext

	// Get_refCharacteristic returns the _refCharacteristic rule contexts.
	Get_refCharacteristic() IRefCharacteristicContext

	// Get_subFunction returns the _subFunction rule contexts.
	Get_subFunction() ISubFunctionContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierValueContext)

	// SetLongIdentifier sets the longIdentifier rule contexts.
	SetLongIdentifier(IStringValueContext)

	// Set_annotation sets the _annotation rule contexts.
	Set_annotation(IAnnotationContext)

	// Set_defCharacteristic sets the _defCharacteristic rule contexts.
	Set_defCharacteristic(IDefCharacteristicContext)

	// Set_functionVersion sets the _functionVersion rule contexts.
	Set_functionVersion(IFunctionVersionContext)

	// Set_ifData sets the _ifData rule contexts.
	Set_ifData(IIfDataContext)

	// Set_inMeasurement sets the _inMeasurement rule contexts.
	Set_inMeasurement(IInMeasurementContext)

	// Set_locMeasurement sets the _locMeasurement rule contexts.
	Set_locMeasurement(ILocMeasurementContext)

	// Set_outMeasurement sets the _outMeasurement rule contexts.
	Set_outMeasurement(IOutMeasurementContext)

	// Set_refCharacteristic sets the _refCharacteristic rule contexts.
	Set_refCharacteristic(IRefCharacteristicContext)

	// Set_subFunction sets the _subFunction rule contexts.
	Set_subFunction(ISubFunctionContext)

	// GetV_annotation returns the v_annotation rule context list.
	GetV_annotation() []IAnnotationContext

	// GetV_defCharacteristic returns the v_defCharacteristic rule context list.
	GetV_defCharacteristic() []IDefCharacteristicContext

	// GetV_functionVersion returns the v_functionVersion rule context list.
	GetV_functionVersion() []IFunctionVersionContext

	// GetV_ifData returns the v_ifData rule context list.
	GetV_ifData() []IIfDataContext

	// GetV_inMeasurement returns the v_inMeasurement rule context list.
	GetV_inMeasurement() []IInMeasurementContext

	// GetV_locMeasurement returns the v_locMeasurement rule context list.
	GetV_locMeasurement() []ILocMeasurementContext

	// GetV_outMeasurement returns the v_outMeasurement rule context list.
	GetV_outMeasurement() []IOutMeasurementContext

	// GetV_refCharacteristic returns the v_refCharacteristic rule context list.
	GetV_refCharacteristic() []IRefCharacteristicContext

	// GetV_subFunction returns the v_subFunction rule context list.
	GetV_subFunction() []ISubFunctionContext

	// SetV_annotation sets the v_annotation rule context list.
	SetV_annotation([]IAnnotationContext)

	// SetV_defCharacteristic sets the v_defCharacteristic rule context list.
	SetV_defCharacteristic([]IDefCharacteristicContext)

	// SetV_functionVersion sets the v_functionVersion rule context list.
	SetV_functionVersion([]IFunctionVersionContext)

	// SetV_ifData sets the v_ifData rule context list.
	SetV_ifData([]IIfDataContext)

	// SetV_inMeasurement sets the v_inMeasurement rule context list.
	SetV_inMeasurement([]IInMeasurementContext)

	// SetV_locMeasurement sets the v_locMeasurement rule context list.
	SetV_locMeasurement([]ILocMeasurementContext)

	// SetV_outMeasurement sets the v_outMeasurement rule context list.
	SetV_outMeasurement([]IOutMeasurementContext)

	// SetV_refCharacteristic sets the v_refCharacteristic rule context list.
	SetV_refCharacteristic([]IRefCharacteristicContext)

	// SetV_subFunction sets the v_subFunction rule context list.
	SetV_subFunction([]ISubFunctionContext)

	// Getter signatures
	BEGIN() antlr.TerminalNode
	END() antlr.TerminalNode
	IdentifierValue() IIdentifierValueContext
	StringValue() IStringValueContext
	AllAnnotation() []IAnnotationContext
	Annotation(i int) IAnnotationContext
	AllDefCharacteristic() []IDefCharacteristicContext
	DefCharacteristic(i int) IDefCharacteristicContext
	AllFunctionVersion() []IFunctionVersionContext
	FunctionVersion(i int) IFunctionVersionContext
	AllIfData() []IIfDataContext
	IfData(i int) IIfDataContext
	AllInMeasurement() []IInMeasurementContext
	InMeasurement(i int) IInMeasurementContext
	AllLocMeasurement() []ILocMeasurementContext
	LocMeasurement(i int) ILocMeasurementContext
	AllOutMeasurement() []IOutMeasurementContext
	OutMeasurement(i int) IOutMeasurementContext
	AllRefCharacteristic() []IRefCharacteristicContext
	RefCharacteristic(i int) IRefCharacteristicContext
	AllSubFunction() []ISubFunctionContext
	SubFunction(i int) ISubFunctionContext

	// IsFunctionContext differentiates from other interfaces.
	IsFunctionContext()
}

type FunctionContext struct {
	*antlr.BaseParserRuleContext
	parser              antlr.Parser
	name                IIdentifierValueContext
	longIdentifier      IStringValueContext
	_annotation         IAnnotationContext
	v_annotation        []IAnnotationContext
	_defCharacteristic  IDefCharacteristicContext
	v_defCharacteristic []IDefCharacteristicContext
	_functionVersion    IFunctionVersionContext
	v_functionVersion   []IFunctionVersionContext
	_ifData             IIfDataContext
	v_ifData            []IIfDataContext
	_inMeasurement      IInMeasurementContext
	v_inMeasurement     []IInMeasurementContext
	_locMeasurement     ILocMeasurementContext
	v_locMeasurement    []ILocMeasurementContext
	_outMeasurement     IOutMeasurementContext
	v_outMeasurement    []IOutMeasurementContext
	_refCharacteristic  IRefCharacteristicContext
	v_refCharacteristic []IRefCharacteristicContext
	_subFunction        ISubFunctionContext
	v_subFunction       []ISubFunctionContext
}

func NewEmptyFunctionContext() *FunctionContext {
	var p = new(FunctionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_function
	return p
}

func (*FunctionContext) IsFunctionContext() {}

func NewFunctionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionContext {
	var p = new(FunctionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_function

	return p
}

func (s *FunctionContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionContext) GetName() IIdentifierValueContext { return s.name }

func (s *FunctionContext) GetLongIdentifier() IStringValueContext { return s.longIdentifier }

func (s *FunctionContext) Get_annotation() IAnnotationContext { return s._annotation }

func (s *FunctionContext) Get_defCharacteristic() IDefCharacteristicContext {
	return s._defCharacteristic
}

func (s *FunctionContext) Get_functionVersion() IFunctionVersionContext { return s._functionVersion }

func (s *FunctionContext) Get_ifData() IIfDataContext { return s._ifData }

func (s *FunctionContext) Get_inMeasurement() IInMeasurementContext { return s._inMeasurement }

func (s *FunctionContext) Get_locMeasurement() ILocMeasurementContext { return s._locMeasurement }

func (s *FunctionContext) Get_outMeasurement() IOutMeasurementContext { return s._outMeasurement }

func (s *FunctionContext) Get_refCharacteristic() IRefCharacteristicContext {
	return s._refCharacteristic
}

func (s *FunctionContext) Get_subFunction() ISubFunctionContext { return s._subFunction }

func (s *FunctionContext) SetName(v IIdentifierValueContext) { s.name = v }

func (s *FunctionContext) SetLongIdentifier(v IStringValueContext) { s.longIdentifier = v }

func (s *FunctionContext) Set_annotation(v IAnnotationContext) { s._annotation = v }

func (s *FunctionContext) Set_defCharacteristic(v IDefCharacteristicContext) {
	s._defCharacteristic = v
}

func (s *FunctionContext) Set_functionVersion(v IFunctionVersionContext) { s._functionVersion = v }

func (s *FunctionContext) Set_ifData(v IIfDataContext) { s._ifData = v }

func (s *FunctionContext) Set_inMeasurement(v IInMeasurementContext) { s._inMeasurement = v }

func (s *FunctionContext) Set_locMeasurement(v ILocMeasurementContext) { s._locMeasurement = v }

func (s *FunctionContext) Set_outMeasurement(v IOutMeasurementContext) { s._outMeasurement = v }

func (s *FunctionContext) Set_refCharacteristic(v IRefCharacteristicContext) {
	s._refCharacteristic = v
}

func (s *FunctionContext) Set_subFunction(v ISubFunctionContext) { s._subFunction = v }

func (s *FunctionContext) GetV_annotation() []IAnnotationContext { return s.v_annotation }

func (s *FunctionContext) GetV_defCharacteristic() []IDefCharacteristicContext {
	return s.v_defCharacteristic
}

func (s *FunctionContext) GetV_functionVersion() []IFunctionVersionContext {
	return s.v_functionVersion
}

func (s *FunctionContext) GetV_ifData() []IIfDataContext { return s.v_ifData }

func (s *FunctionContext) GetV_inMeasurement() []IInMeasurementContext { return s.v_inMeasurement }

func (s *FunctionContext) GetV_locMeasurement() []ILocMeasurementContext { return s.v_locMeasurement }

func (s *FunctionContext) GetV_outMeasurement() []IOutMeasurementContext { return s.v_outMeasurement }

func (s *FunctionContext) GetV_refCharacteristic() []IRefCharacteristicContext {
	return s.v_refCharacteristic
}

func (s *FunctionContext) GetV_subFunction() []ISubFunctionContext { return s.v_subFunction }

func (s *FunctionContext) SetV_annotation(v []IAnnotationContext) { s.v_annotation = v }

func (s *FunctionContext) SetV_defCharacteristic(v []IDefCharacteristicContext) {
	s.v_defCharacteristic = v
}

func (s *FunctionContext) SetV_functionVersion(v []IFunctionVersionContext) { s.v_functionVersion = v }

func (s *FunctionContext) SetV_ifData(v []IIfDataContext) { s.v_ifData = v }

func (s *FunctionContext) SetV_inMeasurement(v []IInMeasurementContext) { s.v_inMeasurement = v }

func (s *FunctionContext) SetV_locMeasurement(v []ILocMeasurementContext) { s.v_locMeasurement = v }

func (s *FunctionContext) SetV_outMeasurement(v []IOutMeasurementContext) { s.v_outMeasurement = v }

func (s *FunctionContext) SetV_refCharacteristic(v []IRefCharacteristicContext) {
	s.v_refCharacteristic = v
}

func (s *FunctionContext) SetV_subFunction(v []ISubFunctionContext) { s.v_subFunction = v }

func (s *FunctionContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(A2LParserBEGIN, 0)
}

func (s *FunctionContext) END() antlr.TerminalNode {
	return s.GetToken(A2LParserEND, 0)
}

func (s *FunctionContext) IdentifierValue() IIdentifierValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierValueContext)
}

func (s *FunctionContext) StringValue() IStringValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringValueContext)
}

func (s *FunctionContext) AllAnnotation() []IAnnotationContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAnnotationContext); ok {
			len++
		}
	}

	tst := make([]IAnnotationContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAnnotationContext); ok {
			tst[i] = t.(IAnnotationContext)
			i++
		}
	}

	return tst
}

func (s *FunctionContext) Annotation(i int) IAnnotationContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAnnotationContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAnnotationContext)
}

func (s *FunctionContext) AllDefCharacteristic() []IDefCharacteristicContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDefCharacteristicContext); ok {
			len++
		}
	}

	tst := make([]IDefCharacteristicContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDefCharacteristicContext); ok {
			tst[i] = t.(IDefCharacteristicContext)
			i++
		}
	}

	return tst
}

func (s *FunctionContext) DefCharacteristic(i int) IDefCharacteristicContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefCharacteristicContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefCharacteristicContext)
}

func (s *FunctionContext) AllFunctionVersion() []IFunctionVersionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IFunctionVersionContext); ok {
			len++
		}
	}

	tst := make([]IFunctionVersionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IFunctionVersionContext); ok {
			tst[i] = t.(IFunctionVersionContext)
			i++
		}
	}

	return tst
}

func (s *FunctionContext) FunctionVersion(i int) IFunctionVersionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunctionVersionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunctionVersionContext)
}

func (s *FunctionContext) AllIfData() []IIfDataContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIfDataContext); ok {
			len++
		}
	}

	tst := make([]IIfDataContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIfDataContext); ok {
			tst[i] = t.(IIfDataContext)
			i++
		}
	}

	return tst
}

func (s *FunctionContext) IfData(i int) IIfDataContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIfDataContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIfDataContext)
}

func (s *FunctionContext) AllInMeasurement() []IInMeasurementContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IInMeasurementContext); ok {
			len++
		}
	}

	tst := make([]IInMeasurementContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IInMeasurementContext); ok {
			tst[i] = t.(IInMeasurementContext)
			i++
		}
	}

	return tst
}

func (s *FunctionContext) InMeasurement(i int) IInMeasurementContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInMeasurementContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInMeasurementContext)
}

func (s *FunctionContext) AllLocMeasurement() []ILocMeasurementContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ILocMeasurementContext); ok {
			len++
		}
	}

	tst := make([]ILocMeasurementContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ILocMeasurementContext); ok {
			tst[i] = t.(ILocMeasurementContext)
			i++
		}
	}

	return tst
}

func (s *FunctionContext) LocMeasurement(i int) ILocMeasurementContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILocMeasurementContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILocMeasurementContext)
}

func (s *FunctionContext) AllOutMeasurement() []IOutMeasurementContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IOutMeasurementContext); ok {
			len++
		}
	}

	tst := make([]IOutMeasurementContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IOutMeasurementContext); ok {
			tst[i] = t.(IOutMeasurementContext)
			i++
		}
	}

	return tst
}

func (s *FunctionContext) OutMeasurement(i int) IOutMeasurementContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOutMeasurementContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOutMeasurementContext)
}

func (s *FunctionContext) AllRefCharacteristic() []IRefCharacteristicContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IRefCharacteristicContext); ok {
			len++
		}
	}

	tst := make([]IRefCharacteristicContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IRefCharacteristicContext); ok {
			tst[i] = t.(IRefCharacteristicContext)
			i++
		}
	}

	return tst
}

func (s *FunctionContext) RefCharacteristic(i int) IRefCharacteristicContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRefCharacteristicContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRefCharacteristicContext)
}

func (s *FunctionContext) AllSubFunction() []ISubFunctionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISubFunctionContext); ok {
			len++
		}
	}

	tst := make([]ISubFunctionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISubFunctionContext); ok {
			tst[i] = t.(ISubFunctionContext)
			i++
		}
	}

	return tst
}

func (s *FunctionContext) SubFunction(i int) ISubFunctionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISubFunctionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISubFunctionContext)
}

func (s *FunctionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterFunction(s)
	}
}

func (s *FunctionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitFunction(s)
	}
}

func (s *FunctionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitFunction(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) Function() (localctx IFunctionContext) {
	this := p
	_ = this

	localctx = NewFunctionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 136, A2LParserRULE_function)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(990)
		p.Match(A2LParserBEGIN)
	}
	{
		p.SetState(991)
		p.Match(A2LParserT__100)
	}
	{
		p.SetState(992)

		var _x = p.IdentifierValue()

		localctx.(*FunctionContext).name = _x
	}
	{
		p.SetState(993)

		var _x = p.StringValue()

		localctx.(*FunctionContext).longIdentifier = _x
	}
	p.SetState(1005)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == A2LParserT__102 || _la == A2LParserBEGIN {
		p.SetState(1003)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 37, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(994)

				var _x = p.Annotation()

				localctx.(*FunctionContext)._annotation = _x
			}
			localctx.(*FunctionContext).v_annotation = append(localctx.(*FunctionContext).v_annotation, localctx.(*FunctionContext)._annotation)

		case 2:
			{
				p.SetState(995)

				var _x = p.DefCharacteristic()

				localctx.(*FunctionContext)._defCharacteristic = _x
			}
			localctx.(*FunctionContext).v_defCharacteristic = append(localctx.(*FunctionContext).v_defCharacteristic, localctx.(*FunctionContext)._defCharacteristic)

		case 3:
			{
				p.SetState(996)

				var _x = p.FunctionVersion()

				localctx.(*FunctionContext)._functionVersion = _x
			}
			localctx.(*FunctionContext).v_functionVersion = append(localctx.(*FunctionContext).v_functionVersion, localctx.(*FunctionContext)._functionVersion)

		case 4:
			{
				p.SetState(997)

				var _x = p.IfData()

				localctx.(*FunctionContext)._ifData = _x
			}
			localctx.(*FunctionContext).v_ifData = append(localctx.(*FunctionContext).v_ifData, localctx.(*FunctionContext)._ifData)

		case 5:
			{
				p.SetState(998)

				var _x = p.InMeasurement()

				localctx.(*FunctionContext)._inMeasurement = _x
			}
			localctx.(*FunctionContext).v_inMeasurement = append(localctx.(*FunctionContext).v_inMeasurement, localctx.(*FunctionContext)._inMeasurement)

		case 6:
			{
				p.SetState(999)

				var _x = p.LocMeasurement()

				localctx.(*FunctionContext)._locMeasurement = _x
			}
			localctx.(*FunctionContext).v_locMeasurement = append(localctx.(*FunctionContext).v_locMeasurement, localctx.(*FunctionContext)._locMeasurement)

		case 7:
			{
				p.SetState(1000)

				var _x = p.OutMeasurement()

				localctx.(*FunctionContext)._outMeasurement = _x
			}
			localctx.(*FunctionContext).v_outMeasurement = append(localctx.(*FunctionContext).v_outMeasurement, localctx.(*FunctionContext)._outMeasurement)

		case 8:
			{
				p.SetState(1001)

				var _x = p.RefCharacteristic()

				localctx.(*FunctionContext)._refCharacteristic = _x
			}
			localctx.(*FunctionContext).v_refCharacteristic = append(localctx.(*FunctionContext).v_refCharacteristic, localctx.(*FunctionContext)._refCharacteristic)

		case 9:
			{
				p.SetState(1002)

				var _x = p.SubFunction()

				localctx.(*FunctionContext)._subFunction = _x
			}
			localctx.(*FunctionContext).v_subFunction = append(localctx.(*FunctionContext).v_subFunction, localctx.(*FunctionContext)._subFunction)

		}

		p.SetState(1007)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1008)
		p.Match(A2LParserEND)
	}
	{
		p.SetState(1009)
		p.Match(A2LParserT__100)
	}

	return localctx
}

// IDefCharacteristicContext is an interface to support dynamic dispatch.
type IDefCharacteristicContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_identifierValue returns the _identifierValue rule contexts.
	Get_identifierValue() IIdentifierValueContext

	// Set_identifierValue sets the _identifierValue rule contexts.
	Set_identifierValue(IIdentifierValueContext)

	// GetIdentifier returns the identifier rule context list.
	GetIdentifier() []IIdentifierValueContext

	// SetIdentifier sets the identifier rule context list.
	SetIdentifier([]IIdentifierValueContext)

	// Getter signatures
	BEGIN() antlr.TerminalNode
	END() antlr.TerminalNode
	AllIdentifierValue() []IIdentifierValueContext
	IdentifierValue(i int) IIdentifierValueContext

	// IsDefCharacteristicContext differentiates from other interfaces.
	IsDefCharacteristicContext()
}

type DefCharacteristicContext struct {
	*antlr.BaseParserRuleContext
	parser           antlr.Parser
	_identifierValue IIdentifierValueContext
	identifier       []IIdentifierValueContext
}

func NewEmptyDefCharacteristicContext() *DefCharacteristicContext {
	var p = new(DefCharacteristicContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_defCharacteristic
	return p
}

func (*DefCharacteristicContext) IsDefCharacteristicContext() {}

func NewDefCharacteristicContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DefCharacteristicContext {
	var p = new(DefCharacteristicContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_defCharacteristic

	return p
}

func (s *DefCharacteristicContext) GetParser() antlr.Parser { return s.parser }

func (s *DefCharacteristicContext) Get_identifierValue() IIdentifierValueContext {
	return s._identifierValue
}

func (s *DefCharacteristicContext) Set_identifierValue(v IIdentifierValueContext) {
	s._identifierValue = v
}

func (s *DefCharacteristicContext) GetIdentifier() []IIdentifierValueContext { return s.identifier }

func (s *DefCharacteristicContext) SetIdentifier(v []IIdentifierValueContext) { s.identifier = v }

func (s *DefCharacteristicContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(A2LParserBEGIN, 0)
}

func (s *DefCharacteristicContext) END() antlr.TerminalNode {
	return s.GetToken(A2LParserEND, 0)
}

func (s *DefCharacteristicContext) AllIdentifierValue() []IIdentifierValueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierValueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierValueContext); ok {
			tst[i] = t.(IIdentifierValueContext)
			i++
		}
	}

	return tst
}

func (s *DefCharacteristicContext) IdentifierValue(i int) IIdentifierValueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierValueContext)
}

func (s *DefCharacteristicContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DefCharacteristicContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DefCharacteristicContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterDefCharacteristic(s)
	}
}

func (s *DefCharacteristicContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitDefCharacteristic(s)
	}
}

func (s *DefCharacteristicContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitDefCharacteristic(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) DefCharacteristic() (localctx IDefCharacteristicContext) {
	this := p
	_ = this

	localctx = NewDefCharacteristicContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 138, A2LParserRULE_defCharacteristic)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1011)
		p.Match(A2LParserBEGIN)
	}
	{
		p.SetState(1012)
		p.Match(A2LParserT__101)
	}
	p.SetState(1016)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == A2LParserIDENT {
		{
			p.SetState(1013)

			var _x = p.IdentifierValue()

			localctx.(*DefCharacteristicContext)._identifierValue = _x
		}
		localctx.(*DefCharacteristicContext).identifier = append(localctx.(*DefCharacteristicContext).identifier, localctx.(*DefCharacteristicContext)._identifierValue)

		p.SetState(1018)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1019)
		p.Match(A2LParserEND)
	}
	{
		p.SetState(1020)
		p.Match(A2LParserT__101)
	}

	return localctx
}

// IFunctionVersionContext is an interface to support dynamic dispatch.
type IFunctionVersionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetVersionIdentifier returns the versionIdentifier rule contexts.
	GetVersionIdentifier() IStringValueContext

	// SetVersionIdentifier sets the versionIdentifier rule contexts.
	SetVersionIdentifier(IStringValueContext)

	// Getter signatures
	StringValue() IStringValueContext

	// IsFunctionVersionContext differentiates from other interfaces.
	IsFunctionVersionContext()
}

type FunctionVersionContext struct {
	*antlr.BaseParserRuleContext
	parser            antlr.Parser
	versionIdentifier IStringValueContext
}

func NewEmptyFunctionVersionContext() *FunctionVersionContext {
	var p = new(FunctionVersionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_functionVersion
	return p
}

func (*FunctionVersionContext) IsFunctionVersionContext() {}

func NewFunctionVersionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionVersionContext {
	var p = new(FunctionVersionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_functionVersion

	return p
}

func (s *FunctionVersionContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionVersionContext) GetVersionIdentifier() IStringValueContext {
	return s.versionIdentifier
}

func (s *FunctionVersionContext) SetVersionIdentifier(v IStringValueContext) { s.versionIdentifier = v }

func (s *FunctionVersionContext) StringValue() IStringValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringValueContext)
}

func (s *FunctionVersionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionVersionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionVersionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterFunctionVersion(s)
	}
}

func (s *FunctionVersionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitFunctionVersion(s)
	}
}

func (s *FunctionVersionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitFunctionVersion(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) FunctionVersion() (localctx IFunctionVersionContext) {
	this := p
	_ = this

	localctx = NewFunctionVersionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 140, A2LParserRULE_functionVersion)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1022)
		p.Match(A2LParserT__102)
	}
	{
		p.SetState(1023)

		var _x = p.StringValue()

		localctx.(*FunctionVersionContext).versionIdentifier = _x
	}

	return localctx
}

// IInMeasurementContext is an interface to support dynamic dispatch.
type IInMeasurementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_identifierValue returns the _identifierValue rule contexts.
	Get_identifierValue() IIdentifierValueContext

	// Set_identifierValue sets the _identifierValue rule contexts.
	Set_identifierValue(IIdentifierValueContext)

	// GetIdentifier returns the identifier rule context list.
	GetIdentifier() []IIdentifierValueContext

	// SetIdentifier sets the identifier rule context list.
	SetIdentifier([]IIdentifierValueContext)

	// Getter signatures
	BEGIN() antlr.TerminalNode
	END() antlr.TerminalNode
	AllIdentifierValue() []IIdentifierValueContext
	IdentifierValue(i int) IIdentifierValueContext

	// IsInMeasurementContext differentiates from other interfaces.
	IsInMeasurementContext()
}

type InMeasurementContext struct {
	*antlr.BaseParserRuleContext
	parser           antlr.Parser
	_identifierValue IIdentifierValueContext
	identifier       []IIdentifierValueContext
}

func NewEmptyInMeasurementContext() *InMeasurementContext {
	var p = new(InMeasurementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_inMeasurement
	return p
}

func (*InMeasurementContext) IsInMeasurementContext() {}

func NewInMeasurementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InMeasurementContext {
	var p = new(InMeasurementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_inMeasurement

	return p
}

func (s *InMeasurementContext) GetParser() antlr.Parser { return s.parser }

func (s *InMeasurementContext) Get_identifierValue() IIdentifierValueContext {
	return s._identifierValue
}

func (s *InMeasurementContext) Set_identifierValue(v IIdentifierValueContext) { s._identifierValue = v }

func (s *InMeasurementContext) GetIdentifier() []IIdentifierValueContext { return s.identifier }

func (s *InMeasurementContext) SetIdentifier(v []IIdentifierValueContext) { s.identifier = v }

func (s *InMeasurementContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(A2LParserBEGIN, 0)
}

func (s *InMeasurementContext) END() antlr.TerminalNode {
	return s.GetToken(A2LParserEND, 0)
}

func (s *InMeasurementContext) AllIdentifierValue() []IIdentifierValueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierValueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierValueContext); ok {
			tst[i] = t.(IIdentifierValueContext)
			i++
		}
	}

	return tst
}

func (s *InMeasurementContext) IdentifierValue(i int) IIdentifierValueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierValueContext)
}

func (s *InMeasurementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InMeasurementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InMeasurementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterInMeasurement(s)
	}
}

func (s *InMeasurementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitInMeasurement(s)
	}
}

func (s *InMeasurementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitInMeasurement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) InMeasurement() (localctx IInMeasurementContext) {
	this := p
	_ = this

	localctx = NewInMeasurementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 142, A2LParserRULE_inMeasurement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1025)
		p.Match(A2LParserBEGIN)
	}
	{
		p.SetState(1026)
		p.Match(A2LParserT__103)
	}
	p.SetState(1030)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == A2LParserIDENT {
		{
			p.SetState(1027)

			var _x = p.IdentifierValue()

			localctx.(*InMeasurementContext)._identifierValue = _x
		}
		localctx.(*InMeasurementContext).identifier = append(localctx.(*InMeasurementContext).identifier, localctx.(*InMeasurementContext)._identifierValue)

		p.SetState(1032)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1033)
		p.Match(A2LParserEND)
	}
	{
		p.SetState(1034)
		p.Match(A2LParserT__103)
	}

	return localctx
}

// ILocMeasurementContext is an interface to support dynamic dispatch.
type ILocMeasurementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_identifierValue returns the _identifierValue rule contexts.
	Get_identifierValue() IIdentifierValueContext

	// Set_identifierValue sets the _identifierValue rule contexts.
	Set_identifierValue(IIdentifierValueContext)

	// GetIdentifier returns the identifier rule context list.
	GetIdentifier() []IIdentifierValueContext

	// SetIdentifier sets the identifier rule context list.
	SetIdentifier([]IIdentifierValueContext)

	// Getter signatures
	BEGIN() antlr.TerminalNode
	END() antlr.TerminalNode
	AllIdentifierValue() []IIdentifierValueContext
	IdentifierValue(i int) IIdentifierValueContext

	// IsLocMeasurementContext differentiates from other interfaces.
	IsLocMeasurementContext()
}

type LocMeasurementContext struct {
	*antlr.BaseParserRuleContext
	parser           antlr.Parser
	_identifierValue IIdentifierValueContext
	identifier       []IIdentifierValueContext
}

func NewEmptyLocMeasurementContext() *LocMeasurementContext {
	var p = new(LocMeasurementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_locMeasurement
	return p
}

func (*LocMeasurementContext) IsLocMeasurementContext() {}

func NewLocMeasurementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LocMeasurementContext {
	var p = new(LocMeasurementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_locMeasurement

	return p
}

func (s *LocMeasurementContext) GetParser() antlr.Parser { return s.parser }

func (s *LocMeasurementContext) Get_identifierValue() IIdentifierValueContext {
	return s._identifierValue
}

func (s *LocMeasurementContext) Set_identifierValue(v IIdentifierValueContext) {
	s._identifierValue = v
}

func (s *LocMeasurementContext) GetIdentifier() []IIdentifierValueContext { return s.identifier }

func (s *LocMeasurementContext) SetIdentifier(v []IIdentifierValueContext) { s.identifier = v }

func (s *LocMeasurementContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(A2LParserBEGIN, 0)
}

func (s *LocMeasurementContext) END() antlr.TerminalNode {
	return s.GetToken(A2LParserEND, 0)
}

func (s *LocMeasurementContext) AllIdentifierValue() []IIdentifierValueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierValueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierValueContext); ok {
			tst[i] = t.(IIdentifierValueContext)
			i++
		}
	}

	return tst
}

func (s *LocMeasurementContext) IdentifierValue(i int) IIdentifierValueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierValueContext)
}

func (s *LocMeasurementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LocMeasurementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LocMeasurementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterLocMeasurement(s)
	}
}

func (s *LocMeasurementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitLocMeasurement(s)
	}
}

func (s *LocMeasurementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitLocMeasurement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) LocMeasurement() (localctx ILocMeasurementContext) {
	this := p
	_ = this

	localctx = NewLocMeasurementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 144, A2LParserRULE_locMeasurement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1036)
		p.Match(A2LParserBEGIN)
	}
	{
		p.SetState(1037)
		p.Match(A2LParserT__104)
	}
	p.SetState(1041)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == A2LParserIDENT {
		{
			p.SetState(1038)

			var _x = p.IdentifierValue()

			localctx.(*LocMeasurementContext)._identifierValue = _x
		}
		localctx.(*LocMeasurementContext).identifier = append(localctx.(*LocMeasurementContext).identifier, localctx.(*LocMeasurementContext)._identifierValue)

		p.SetState(1043)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1044)
		p.Match(A2LParserEND)
	}
	{
		p.SetState(1045)
		p.Match(A2LParserT__104)
	}

	return localctx
}

// IOutMeasurementContext is an interface to support dynamic dispatch.
type IOutMeasurementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_identifierValue returns the _identifierValue rule contexts.
	Get_identifierValue() IIdentifierValueContext

	// Set_identifierValue sets the _identifierValue rule contexts.
	Set_identifierValue(IIdentifierValueContext)

	// GetIdentifier returns the identifier rule context list.
	GetIdentifier() []IIdentifierValueContext

	// SetIdentifier sets the identifier rule context list.
	SetIdentifier([]IIdentifierValueContext)

	// Getter signatures
	BEGIN() antlr.TerminalNode
	END() antlr.TerminalNode
	AllIdentifierValue() []IIdentifierValueContext
	IdentifierValue(i int) IIdentifierValueContext

	// IsOutMeasurementContext differentiates from other interfaces.
	IsOutMeasurementContext()
}

type OutMeasurementContext struct {
	*antlr.BaseParserRuleContext
	parser           antlr.Parser
	_identifierValue IIdentifierValueContext
	identifier       []IIdentifierValueContext
}

func NewEmptyOutMeasurementContext() *OutMeasurementContext {
	var p = new(OutMeasurementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_outMeasurement
	return p
}

func (*OutMeasurementContext) IsOutMeasurementContext() {}

func NewOutMeasurementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OutMeasurementContext {
	var p = new(OutMeasurementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_outMeasurement

	return p
}

func (s *OutMeasurementContext) GetParser() antlr.Parser { return s.parser }

func (s *OutMeasurementContext) Get_identifierValue() IIdentifierValueContext {
	return s._identifierValue
}

func (s *OutMeasurementContext) Set_identifierValue(v IIdentifierValueContext) {
	s._identifierValue = v
}

func (s *OutMeasurementContext) GetIdentifier() []IIdentifierValueContext { return s.identifier }

func (s *OutMeasurementContext) SetIdentifier(v []IIdentifierValueContext) { s.identifier = v }

func (s *OutMeasurementContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(A2LParserBEGIN, 0)
}

func (s *OutMeasurementContext) END() antlr.TerminalNode {
	return s.GetToken(A2LParserEND, 0)
}

func (s *OutMeasurementContext) AllIdentifierValue() []IIdentifierValueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierValueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierValueContext); ok {
			tst[i] = t.(IIdentifierValueContext)
			i++
		}
	}

	return tst
}

func (s *OutMeasurementContext) IdentifierValue(i int) IIdentifierValueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierValueContext)
}

func (s *OutMeasurementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OutMeasurementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OutMeasurementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterOutMeasurement(s)
	}
}

func (s *OutMeasurementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitOutMeasurement(s)
	}
}

func (s *OutMeasurementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitOutMeasurement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) OutMeasurement() (localctx IOutMeasurementContext) {
	this := p
	_ = this

	localctx = NewOutMeasurementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 146, A2LParserRULE_outMeasurement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1047)
		p.Match(A2LParserBEGIN)
	}
	{
		p.SetState(1048)
		p.Match(A2LParserT__105)
	}
	p.SetState(1052)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == A2LParserIDENT {
		{
			p.SetState(1049)

			var _x = p.IdentifierValue()

			localctx.(*OutMeasurementContext)._identifierValue = _x
		}
		localctx.(*OutMeasurementContext).identifier = append(localctx.(*OutMeasurementContext).identifier, localctx.(*OutMeasurementContext)._identifierValue)

		p.SetState(1054)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1055)
		p.Match(A2LParserEND)
	}
	{
		p.SetState(1056)
		p.Match(A2LParserT__105)
	}

	return localctx
}

// ISubFunctionContext is an interface to support dynamic dispatch.
type ISubFunctionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_identifierValue returns the _identifierValue rule contexts.
	Get_identifierValue() IIdentifierValueContext

	// Set_identifierValue sets the _identifierValue rule contexts.
	Set_identifierValue(IIdentifierValueContext)

	// GetIdentifier returns the identifier rule context list.
	GetIdentifier() []IIdentifierValueContext

	// SetIdentifier sets the identifier rule context list.
	SetIdentifier([]IIdentifierValueContext)

	// Getter signatures
	BEGIN() antlr.TerminalNode
	END() antlr.TerminalNode
	AllIdentifierValue() []IIdentifierValueContext
	IdentifierValue(i int) IIdentifierValueContext

	// IsSubFunctionContext differentiates from other interfaces.
	IsSubFunctionContext()
}

type SubFunctionContext struct {
	*antlr.BaseParserRuleContext
	parser           antlr.Parser
	_identifierValue IIdentifierValueContext
	identifier       []IIdentifierValueContext
}

func NewEmptySubFunctionContext() *SubFunctionContext {
	var p = new(SubFunctionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_subFunction
	return p
}

func (*SubFunctionContext) IsSubFunctionContext() {}

func NewSubFunctionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SubFunctionContext {
	var p = new(SubFunctionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_subFunction

	return p
}

func (s *SubFunctionContext) GetParser() antlr.Parser { return s.parser }

func (s *SubFunctionContext) Get_identifierValue() IIdentifierValueContext { return s._identifierValue }

func (s *SubFunctionContext) Set_identifierValue(v IIdentifierValueContext) { s._identifierValue = v }

func (s *SubFunctionContext) GetIdentifier() []IIdentifierValueContext { return s.identifier }

func (s *SubFunctionContext) SetIdentifier(v []IIdentifierValueContext) { s.identifier = v }

func (s *SubFunctionContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(A2LParserBEGIN, 0)
}

func (s *SubFunctionContext) END() antlr.TerminalNode {
	return s.GetToken(A2LParserEND, 0)
}

func (s *SubFunctionContext) AllIdentifierValue() []IIdentifierValueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierValueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierValueContext); ok {
			tst[i] = t.(IIdentifierValueContext)
			i++
		}
	}

	return tst
}

func (s *SubFunctionContext) IdentifierValue(i int) IIdentifierValueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierValueContext)
}

func (s *SubFunctionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SubFunctionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SubFunctionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterSubFunction(s)
	}
}

func (s *SubFunctionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitSubFunction(s)
	}
}

func (s *SubFunctionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitSubFunction(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) SubFunction() (localctx ISubFunctionContext) {
	this := p
	_ = this

	localctx = NewSubFunctionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 148, A2LParserRULE_subFunction)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1058)
		p.Match(A2LParserBEGIN)
	}
	{
		p.SetState(1059)
		p.Match(A2LParserT__106)
	}
	p.SetState(1063)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == A2LParserIDENT {
		{
			p.SetState(1060)

			var _x = p.IdentifierValue()

			localctx.(*SubFunctionContext)._identifierValue = _x
		}
		localctx.(*SubFunctionContext).identifier = append(localctx.(*SubFunctionContext).identifier, localctx.(*SubFunctionContext)._identifierValue)

		p.SetState(1065)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1066)
		p.Match(A2LParserEND)
	}
	{
		p.SetState(1067)
		p.Match(A2LParserT__106)
	}

	return localctx
}

// IGroupContext is an interface to support dynamic dispatch.
type IGroupContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetGroupName returns the groupName rule contexts.
	GetGroupName() IIdentifierValueContext

	// GetGroupLongIdentifier returns the groupLongIdentifier rule contexts.
	GetGroupLongIdentifier() IStringValueContext

	// Get_annotation returns the _annotation rule contexts.
	Get_annotation() IAnnotationContext

	// Get_functionList returns the _functionList rule contexts.
	Get_functionList() IFunctionListContext

	// Get_ifData returns the _ifData rule contexts.
	Get_ifData() IIfDataContext

	// Get_refCharacteristic returns the _refCharacteristic rule contexts.
	Get_refCharacteristic() IRefCharacteristicContext

	// Get_refMeasurement returns the _refMeasurement rule contexts.
	Get_refMeasurement() IRefMeasurementContext

	// Get_root returns the _root rule contexts.
	Get_root() IRootContext

	// Get_subGroup returns the _subGroup rule contexts.
	Get_subGroup() ISubGroupContext

	// SetGroupName sets the groupName rule contexts.
	SetGroupName(IIdentifierValueContext)

	// SetGroupLongIdentifier sets the groupLongIdentifier rule contexts.
	SetGroupLongIdentifier(IStringValueContext)

	// Set_annotation sets the _annotation rule contexts.
	Set_annotation(IAnnotationContext)

	// Set_functionList sets the _functionList rule contexts.
	Set_functionList(IFunctionListContext)

	// Set_ifData sets the _ifData rule contexts.
	Set_ifData(IIfDataContext)

	// Set_refCharacteristic sets the _refCharacteristic rule contexts.
	Set_refCharacteristic(IRefCharacteristicContext)

	// Set_refMeasurement sets the _refMeasurement rule contexts.
	Set_refMeasurement(IRefMeasurementContext)

	// Set_root sets the _root rule contexts.
	Set_root(IRootContext)

	// Set_subGroup sets the _subGroup rule contexts.
	Set_subGroup(ISubGroupContext)

	// GetV_annotation returns the v_annotation rule context list.
	GetV_annotation() []IAnnotationContext

	// GetV_functionList returns the v_functionList rule context list.
	GetV_functionList() []IFunctionListContext

	// GetV_ifData returns the v_ifData rule context list.
	GetV_ifData() []IIfDataContext

	// GetV_refCharacteristic returns the v_refCharacteristic rule context list.
	GetV_refCharacteristic() []IRefCharacteristicContext

	// GetV_refMeasurement returns the v_refMeasurement rule context list.
	GetV_refMeasurement() []IRefMeasurementContext

	// GetV_root returns the v_root rule context list.
	GetV_root() []IRootContext

	// GetV_subGroup returns the v_subGroup rule context list.
	GetV_subGroup() []ISubGroupContext

	// SetV_annotation sets the v_annotation rule context list.
	SetV_annotation([]IAnnotationContext)

	// SetV_functionList sets the v_functionList rule context list.
	SetV_functionList([]IFunctionListContext)

	// SetV_ifData sets the v_ifData rule context list.
	SetV_ifData([]IIfDataContext)

	// SetV_refCharacteristic sets the v_refCharacteristic rule context list.
	SetV_refCharacteristic([]IRefCharacteristicContext)

	// SetV_refMeasurement sets the v_refMeasurement rule context list.
	SetV_refMeasurement([]IRefMeasurementContext)

	// SetV_root sets the v_root rule context list.
	SetV_root([]IRootContext)

	// SetV_subGroup sets the v_subGroup rule context list.
	SetV_subGroup([]ISubGroupContext)

	// Getter signatures
	BEGIN() antlr.TerminalNode
	END() antlr.TerminalNode
	IdentifierValue() IIdentifierValueContext
	StringValue() IStringValueContext
	AllAnnotation() []IAnnotationContext
	Annotation(i int) IAnnotationContext
	AllFunctionList() []IFunctionListContext
	FunctionList(i int) IFunctionListContext
	AllIfData() []IIfDataContext
	IfData(i int) IIfDataContext
	AllRefCharacteristic() []IRefCharacteristicContext
	RefCharacteristic(i int) IRefCharacteristicContext
	AllRefMeasurement() []IRefMeasurementContext
	RefMeasurement(i int) IRefMeasurementContext
	AllRoot() []IRootContext
	Root(i int) IRootContext
	AllSubGroup() []ISubGroupContext
	SubGroup(i int) ISubGroupContext

	// IsGroupContext differentiates from other interfaces.
	IsGroupContext()
}

type GroupContext struct {
	*antlr.BaseParserRuleContext
	parser              antlr.Parser
	groupName           IIdentifierValueContext
	groupLongIdentifier IStringValueContext
	_annotation         IAnnotationContext
	v_annotation        []IAnnotationContext
	_functionList       IFunctionListContext
	v_functionList      []IFunctionListContext
	_ifData             IIfDataContext
	v_ifData            []IIfDataContext
	_refCharacteristic  IRefCharacteristicContext
	v_refCharacteristic []IRefCharacteristicContext
	_refMeasurement     IRefMeasurementContext
	v_refMeasurement    []IRefMeasurementContext
	_root               IRootContext
	v_root              []IRootContext
	_subGroup           ISubGroupContext
	v_subGroup          []ISubGroupContext
}

func NewEmptyGroupContext() *GroupContext {
	var p = new(GroupContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_group
	return p
}

func (*GroupContext) IsGroupContext() {}

func NewGroupContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GroupContext {
	var p = new(GroupContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_group

	return p
}

func (s *GroupContext) GetParser() antlr.Parser { return s.parser }

func (s *GroupContext) GetGroupName() IIdentifierValueContext { return s.groupName }

func (s *GroupContext) GetGroupLongIdentifier() IStringValueContext { return s.groupLongIdentifier }

func (s *GroupContext) Get_annotation() IAnnotationContext { return s._annotation }

func (s *GroupContext) Get_functionList() IFunctionListContext { return s._functionList }

func (s *GroupContext) Get_ifData() IIfDataContext { return s._ifData }

func (s *GroupContext) Get_refCharacteristic() IRefCharacteristicContext { return s._refCharacteristic }

func (s *GroupContext) Get_refMeasurement() IRefMeasurementContext { return s._refMeasurement }

func (s *GroupContext) Get_root() IRootContext { return s._root }

func (s *GroupContext) Get_subGroup() ISubGroupContext { return s._subGroup }

func (s *GroupContext) SetGroupName(v IIdentifierValueContext) { s.groupName = v }

func (s *GroupContext) SetGroupLongIdentifier(v IStringValueContext) { s.groupLongIdentifier = v }

func (s *GroupContext) Set_annotation(v IAnnotationContext) { s._annotation = v }

func (s *GroupContext) Set_functionList(v IFunctionListContext) { s._functionList = v }

func (s *GroupContext) Set_ifData(v IIfDataContext) { s._ifData = v }

func (s *GroupContext) Set_refCharacteristic(v IRefCharacteristicContext) { s._refCharacteristic = v }

func (s *GroupContext) Set_refMeasurement(v IRefMeasurementContext) { s._refMeasurement = v }

func (s *GroupContext) Set_root(v IRootContext) { s._root = v }

func (s *GroupContext) Set_subGroup(v ISubGroupContext) { s._subGroup = v }

func (s *GroupContext) GetV_annotation() []IAnnotationContext { return s.v_annotation }

func (s *GroupContext) GetV_functionList() []IFunctionListContext { return s.v_functionList }

func (s *GroupContext) GetV_ifData() []IIfDataContext { return s.v_ifData }

func (s *GroupContext) GetV_refCharacteristic() []IRefCharacteristicContext {
	return s.v_refCharacteristic
}

func (s *GroupContext) GetV_refMeasurement() []IRefMeasurementContext { return s.v_refMeasurement }

func (s *GroupContext) GetV_root() []IRootContext { return s.v_root }

func (s *GroupContext) GetV_subGroup() []ISubGroupContext { return s.v_subGroup }

func (s *GroupContext) SetV_annotation(v []IAnnotationContext) { s.v_annotation = v }

func (s *GroupContext) SetV_functionList(v []IFunctionListContext) { s.v_functionList = v }

func (s *GroupContext) SetV_ifData(v []IIfDataContext) { s.v_ifData = v }

func (s *GroupContext) SetV_refCharacteristic(v []IRefCharacteristicContext) {
	s.v_refCharacteristic = v
}

func (s *GroupContext) SetV_refMeasurement(v []IRefMeasurementContext) { s.v_refMeasurement = v }

func (s *GroupContext) SetV_root(v []IRootContext) { s.v_root = v }

func (s *GroupContext) SetV_subGroup(v []ISubGroupContext) { s.v_subGroup = v }

func (s *GroupContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(A2LParserBEGIN, 0)
}

func (s *GroupContext) END() antlr.TerminalNode {
	return s.GetToken(A2LParserEND, 0)
}

func (s *GroupContext) IdentifierValue() IIdentifierValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierValueContext)
}

func (s *GroupContext) StringValue() IStringValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringValueContext)
}

func (s *GroupContext) AllAnnotation() []IAnnotationContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAnnotationContext); ok {
			len++
		}
	}

	tst := make([]IAnnotationContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAnnotationContext); ok {
			tst[i] = t.(IAnnotationContext)
			i++
		}
	}

	return tst
}

func (s *GroupContext) Annotation(i int) IAnnotationContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAnnotationContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAnnotationContext)
}

func (s *GroupContext) AllFunctionList() []IFunctionListContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IFunctionListContext); ok {
			len++
		}
	}

	tst := make([]IFunctionListContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IFunctionListContext); ok {
			tst[i] = t.(IFunctionListContext)
			i++
		}
	}

	return tst
}

func (s *GroupContext) FunctionList(i int) IFunctionListContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunctionListContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunctionListContext)
}

func (s *GroupContext) AllIfData() []IIfDataContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIfDataContext); ok {
			len++
		}
	}

	tst := make([]IIfDataContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIfDataContext); ok {
			tst[i] = t.(IIfDataContext)
			i++
		}
	}

	return tst
}

func (s *GroupContext) IfData(i int) IIfDataContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIfDataContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIfDataContext)
}

func (s *GroupContext) AllRefCharacteristic() []IRefCharacteristicContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IRefCharacteristicContext); ok {
			len++
		}
	}

	tst := make([]IRefCharacteristicContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IRefCharacteristicContext); ok {
			tst[i] = t.(IRefCharacteristicContext)
			i++
		}
	}

	return tst
}

func (s *GroupContext) RefCharacteristic(i int) IRefCharacteristicContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRefCharacteristicContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRefCharacteristicContext)
}

func (s *GroupContext) AllRefMeasurement() []IRefMeasurementContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IRefMeasurementContext); ok {
			len++
		}
	}

	tst := make([]IRefMeasurementContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IRefMeasurementContext); ok {
			tst[i] = t.(IRefMeasurementContext)
			i++
		}
	}

	return tst
}

func (s *GroupContext) RefMeasurement(i int) IRefMeasurementContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRefMeasurementContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRefMeasurementContext)
}

func (s *GroupContext) AllRoot() []IRootContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IRootContext); ok {
			len++
		}
	}

	tst := make([]IRootContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IRootContext); ok {
			tst[i] = t.(IRootContext)
			i++
		}
	}

	return tst
}

func (s *GroupContext) Root(i int) IRootContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRootContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRootContext)
}

func (s *GroupContext) AllSubGroup() []ISubGroupContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISubGroupContext); ok {
			len++
		}
	}

	tst := make([]ISubGroupContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISubGroupContext); ok {
			tst[i] = t.(ISubGroupContext)
			i++
		}
	}

	return tst
}

func (s *GroupContext) SubGroup(i int) ISubGroupContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISubGroupContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISubGroupContext)
}

func (s *GroupContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GroupContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GroupContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterGroup(s)
	}
}

func (s *GroupContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitGroup(s)
	}
}

func (s *GroupContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitGroup(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) Group() (localctx IGroupContext) {
	this := p
	_ = this

	localctx = NewGroupContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 150, A2LParserRULE_group)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1069)
		p.Match(A2LParserBEGIN)
	}
	{
		p.SetState(1070)
		p.Match(A2LParserT__107)
	}
	{
		p.SetState(1071)

		var _x = p.IdentifierValue()

		localctx.(*GroupContext).groupName = _x
	}
	{
		p.SetState(1072)

		var _x = p.StringValue()

		localctx.(*GroupContext).groupLongIdentifier = _x
	}
	p.SetState(1082)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == A2LParserT__109 || _la == A2LParserBEGIN {
		p.SetState(1080)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 44, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(1073)

				var _x = p.Annotation()

				localctx.(*GroupContext)._annotation = _x
			}
			localctx.(*GroupContext).v_annotation = append(localctx.(*GroupContext).v_annotation, localctx.(*GroupContext)._annotation)

		case 2:
			{
				p.SetState(1074)

				var _x = p.FunctionList()

				localctx.(*GroupContext)._functionList = _x
			}
			localctx.(*GroupContext).v_functionList = append(localctx.(*GroupContext).v_functionList, localctx.(*GroupContext)._functionList)

		case 3:
			{
				p.SetState(1075)

				var _x = p.IfData()

				localctx.(*GroupContext)._ifData = _x
			}
			localctx.(*GroupContext).v_ifData = append(localctx.(*GroupContext).v_ifData, localctx.(*GroupContext)._ifData)

		case 4:
			{
				p.SetState(1076)

				var _x = p.RefCharacteristic()

				localctx.(*GroupContext)._refCharacteristic = _x
			}
			localctx.(*GroupContext).v_refCharacteristic = append(localctx.(*GroupContext).v_refCharacteristic, localctx.(*GroupContext)._refCharacteristic)

		case 5:
			{
				p.SetState(1077)

				var _x = p.RefMeasurement()

				localctx.(*GroupContext)._refMeasurement = _x
			}
			localctx.(*GroupContext).v_refMeasurement = append(localctx.(*GroupContext).v_refMeasurement, localctx.(*GroupContext)._refMeasurement)

		case 6:
			{
				p.SetState(1078)

				var _x = p.Root()

				localctx.(*GroupContext)._root = _x
			}
			localctx.(*GroupContext).v_root = append(localctx.(*GroupContext).v_root, localctx.(*GroupContext)._root)

		case 7:
			{
				p.SetState(1079)

				var _x = p.SubGroup()

				localctx.(*GroupContext)._subGroup = _x
			}
			localctx.(*GroupContext).v_subGroup = append(localctx.(*GroupContext).v_subGroup, localctx.(*GroupContext)._subGroup)

		}

		p.SetState(1084)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1085)
		p.Match(A2LParserEND)
	}
	{
		p.SetState(1086)
		p.Match(A2LParserT__107)
	}

	return localctx
}

// IRefMeasurementContext is an interface to support dynamic dispatch.
type IRefMeasurementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_identifierValue returns the _identifierValue rule contexts.
	Get_identifierValue() IIdentifierValueContext

	// Set_identifierValue sets the _identifierValue rule contexts.
	Set_identifierValue(IIdentifierValueContext)

	// GetIdentifier returns the identifier rule context list.
	GetIdentifier() []IIdentifierValueContext

	// SetIdentifier sets the identifier rule context list.
	SetIdentifier([]IIdentifierValueContext)

	// Getter signatures
	BEGIN() antlr.TerminalNode
	END() antlr.TerminalNode
	AllIdentifierValue() []IIdentifierValueContext
	IdentifierValue(i int) IIdentifierValueContext

	// IsRefMeasurementContext differentiates from other interfaces.
	IsRefMeasurementContext()
}

type RefMeasurementContext struct {
	*antlr.BaseParserRuleContext
	parser           antlr.Parser
	_identifierValue IIdentifierValueContext
	identifier       []IIdentifierValueContext
}

func NewEmptyRefMeasurementContext() *RefMeasurementContext {
	var p = new(RefMeasurementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_refMeasurement
	return p
}

func (*RefMeasurementContext) IsRefMeasurementContext() {}

func NewRefMeasurementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RefMeasurementContext {
	var p = new(RefMeasurementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_refMeasurement

	return p
}

func (s *RefMeasurementContext) GetParser() antlr.Parser { return s.parser }

func (s *RefMeasurementContext) Get_identifierValue() IIdentifierValueContext {
	return s._identifierValue
}

func (s *RefMeasurementContext) Set_identifierValue(v IIdentifierValueContext) {
	s._identifierValue = v
}

func (s *RefMeasurementContext) GetIdentifier() []IIdentifierValueContext { return s.identifier }

func (s *RefMeasurementContext) SetIdentifier(v []IIdentifierValueContext) { s.identifier = v }

func (s *RefMeasurementContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(A2LParserBEGIN, 0)
}

func (s *RefMeasurementContext) END() antlr.TerminalNode {
	return s.GetToken(A2LParserEND, 0)
}

func (s *RefMeasurementContext) AllIdentifierValue() []IIdentifierValueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierValueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierValueContext); ok {
			tst[i] = t.(IIdentifierValueContext)
			i++
		}
	}

	return tst
}

func (s *RefMeasurementContext) IdentifierValue(i int) IIdentifierValueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierValueContext)
}

func (s *RefMeasurementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RefMeasurementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RefMeasurementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterRefMeasurement(s)
	}
}

func (s *RefMeasurementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitRefMeasurement(s)
	}
}

func (s *RefMeasurementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitRefMeasurement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) RefMeasurement() (localctx IRefMeasurementContext) {
	this := p
	_ = this

	localctx = NewRefMeasurementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 152, A2LParserRULE_refMeasurement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1088)
		p.Match(A2LParserBEGIN)
	}
	{
		p.SetState(1089)
		p.Match(A2LParserT__108)
	}
	p.SetState(1093)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == A2LParserIDENT {
		{
			p.SetState(1090)

			var _x = p.IdentifierValue()

			localctx.(*RefMeasurementContext)._identifierValue = _x
		}
		localctx.(*RefMeasurementContext).identifier = append(localctx.(*RefMeasurementContext).identifier, localctx.(*RefMeasurementContext)._identifierValue)

		p.SetState(1095)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1096)
		p.Match(A2LParserEND)
	}
	{
		p.SetState(1097)
		p.Match(A2LParserT__108)
	}

	return localctx
}

// IRootContext is an interface to support dynamic dispatch.
type IRootContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsRootContext differentiates from other interfaces.
	IsRootContext()
}

type RootContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRootContext() *RootContext {
	var p = new(RootContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_root
	return p
}

func (*RootContext) IsRootContext() {}

func NewRootContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RootContext {
	var p = new(RootContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_root

	return p
}

func (s *RootContext) GetParser() antlr.Parser { return s.parser }
func (s *RootContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RootContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RootContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterRoot(s)
	}
}

func (s *RootContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitRoot(s)
	}
}

func (s *RootContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitRoot(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) Root() (localctx IRootContext) {
	this := p
	_ = this

	localctx = NewRootContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 154, A2LParserRULE_root)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1099)
		p.Match(A2LParserT__109)
	}

	return localctx
}

// ISubGroupContext is an interface to support dynamic dispatch.
type ISubGroupContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_identifierValue returns the _identifierValue rule contexts.
	Get_identifierValue() IIdentifierValueContext

	// Set_identifierValue sets the _identifierValue rule contexts.
	Set_identifierValue(IIdentifierValueContext)

	// GetIdentifier returns the identifier rule context list.
	GetIdentifier() []IIdentifierValueContext

	// SetIdentifier sets the identifier rule context list.
	SetIdentifier([]IIdentifierValueContext)

	// Getter signatures
	BEGIN() antlr.TerminalNode
	END() antlr.TerminalNode
	AllIdentifierValue() []IIdentifierValueContext
	IdentifierValue(i int) IIdentifierValueContext

	// IsSubGroupContext differentiates from other interfaces.
	IsSubGroupContext()
}

type SubGroupContext struct {
	*antlr.BaseParserRuleContext
	parser           antlr.Parser
	_identifierValue IIdentifierValueContext
	identifier       []IIdentifierValueContext
}

func NewEmptySubGroupContext() *SubGroupContext {
	var p = new(SubGroupContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_subGroup
	return p
}

func (*SubGroupContext) IsSubGroupContext() {}

func NewSubGroupContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SubGroupContext {
	var p = new(SubGroupContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_subGroup

	return p
}

func (s *SubGroupContext) GetParser() antlr.Parser { return s.parser }

func (s *SubGroupContext) Get_identifierValue() IIdentifierValueContext { return s._identifierValue }

func (s *SubGroupContext) Set_identifierValue(v IIdentifierValueContext) { s._identifierValue = v }

func (s *SubGroupContext) GetIdentifier() []IIdentifierValueContext { return s.identifier }

func (s *SubGroupContext) SetIdentifier(v []IIdentifierValueContext) { s.identifier = v }

func (s *SubGroupContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(A2LParserBEGIN, 0)
}

func (s *SubGroupContext) END() antlr.TerminalNode {
	return s.GetToken(A2LParserEND, 0)
}

func (s *SubGroupContext) AllIdentifierValue() []IIdentifierValueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierValueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierValueContext); ok {
			tst[i] = t.(IIdentifierValueContext)
			i++
		}
	}

	return tst
}

func (s *SubGroupContext) IdentifierValue(i int) IIdentifierValueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierValueContext)
}

func (s *SubGroupContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SubGroupContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SubGroupContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterSubGroup(s)
	}
}

func (s *SubGroupContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitSubGroup(s)
	}
}

func (s *SubGroupContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitSubGroup(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) SubGroup() (localctx ISubGroupContext) {
	this := p
	_ = this

	localctx = NewSubGroupContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 156, A2LParserRULE_subGroup)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1101)
		p.Match(A2LParserBEGIN)
	}
	{
		p.SetState(1102)
		p.Match(A2LParserT__110)
	}
	p.SetState(1106)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == A2LParserIDENT {
		{
			p.SetState(1103)

			var _x = p.IdentifierValue()

			localctx.(*SubGroupContext)._identifierValue = _x
		}
		localctx.(*SubGroupContext).identifier = append(localctx.(*SubGroupContext).identifier, localctx.(*SubGroupContext)._identifierValue)

		p.SetState(1108)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1109)
		p.Match(A2LParserEND)
	}
	{
		p.SetState(1110)
		p.Match(A2LParserT__110)
	}

	return localctx
}

// IInstanceContext is an interface to support dynamic dispatch.
type IInstanceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierValueContext

	// GetLongIdentifier returns the longIdentifier rule contexts.
	GetLongIdentifier() IStringValueContext

	// GetTypeName returns the typeName rule contexts.
	GetTypeName() IIdentifierValueContext

	// GetAddress returns the address rule contexts.
	GetAddress() IIntegerValueContext

	// Get_ifData returns the _ifData rule contexts.
	Get_ifData() IIfDataContext

	// Get_ecuAddressExtension returns the _ecuAddressExtension rule contexts.
	Get_ecuAddressExtension() IEcuAddressExtensionContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierValueContext)

	// SetLongIdentifier sets the longIdentifier rule contexts.
	SetLongIdentifier(IStringValueContext)

	// SetTypeName sets the typeName rule contexts.
	SetTypeName(IIdentifierValueContext)

	// SetAddress sets the address rule contexts.
	SetAddress(IIntegerValueContext)

	// Set_ifData sets the _ifData rule contexts.
	Set_ifData(IIfDataContext)

	// Set_ecuAddressExtension sets the _ecuAddressExtension rule contexts.
	Set_ecuAddressExtension(IEcuAddressExtensionContext)

	// GetV_ifData returns the v_ifData rule context list.
	GetV_ifData() []IIfDataContext

	// GetV_ecuAddressExtension returns the v_ecuAddressExtension rule context list.
	GetV_ecuAddressExtension() []IEcuAddressExtensionContext

	// SetV_ifData sets the v_ifData rule context list.
	SetV_ifData([]IIfDataContext)

	// SetV_ecuAddressExtension sets the v_ecuAddressExtension rule context list.
	SetV_ecuAddressExtension([]IEcuAddressExtensionContext)

	// Getter signatures
	BEGIN() antlr.TerminalNode
	END() antlr.TerminalNode
	AllIdentifierValue() []IIdentifierValueContext
	IdentifierValue(i int) IIdentifierValueContext
	StringValue() IStringValueContext
	IntegerValue() IIntegerValueContext
	AllIfData() []IIfDataContext
	IfData(i int) IIfDataContext
	AllEcuAddressExtension() []IEcuAddressExtensionContext
	EcuAddressExtension(i int) IEcuAddressExtensionContext

	// IsInstanceContext differentiates from other interfaces.
	IsInstanceContext()
}

type InstanceContext struct {
	*antlr.BaseParserRuleContext
	parser                antlr.Parser
	name                  IIdentifierValueContext
	longIdentifier        IStringValueContext
	typeName              IIdentifierValueContext
	address               IIntegerValueContext
	_ifData               IIfDataContext
	v_ifData              []IIfDataContext
	_ecuAddressExtension  IEcuAddressExtensionContext
	v_ecuAddressExtension []IEcuAddressExtensionContext
}

func NewEmptyInstanceContext() *InstanceContext {
	var p = new(InstanceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_instance
	return p
}

func (*InstanceContext) IsInstanceContext() {}

func NewInstanceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InstanceContext {
	var p = new(InstanceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_instance

	return p
}

func (s *InstanceContext) GetParser() antlr.Parser { return s.parser }

func (s *InstanceContext) GetName() IIdentifierValueContext { return s.name }

func (s *InstanceContext) GetLongIdentifier() IStringValueContext { return s.longIdentifier }

func (s *InstanceContext) GetTypeName() IIdentifierValueContext { return s.typeName }

func (s *InstanceContext) GetAddress() IIntegerValueContext { return s.address }

func (s *InstanceContext) Get_ifData() IIfDataContext { return s._ifData }

func (s *InstanceContext) Get_ecuAddressExtension() IEcuAddressExtensionContext {
	return s._ecuAddressExtension
}

func (s *InstanceContext) SetName(v IIdentifierValueContext) { s.name = v }

func (s *InstanceContext) SetLongIdentifier(v IStringValueContext) { s.longIdentifier = v }

func (s *InstanceContext) SetTypeName(v IIdentifierValueContext) { s.typeName = v }

func (s *InstanceContext) SetAddress(v IIntegerValueContext) { s.address = v }

func (s *InstanceContext) Set_ifData(v IIfDataContext) { s._ifData = v }

func (s *InstanceContext) Set_ecuAddressExtension(v IEcuAddressExtensionContext) {
	s._ecuAddressExtension = v
}

func (s *InstanceContext) GetV_ifData() []IIfDataContext { return s.v_ifData }

func (s *InstanceContext) GetV_ecuAddressExtension() []IEcuAddressExtensionContext {
	return s.v_ecuAddressExtension
}

func (s *InstanceContext) SetV_ifData(v []IIfDataContext) { s.v_ifData = v }

func (s *InstanceContext) SetV_ecuAddressExtension(v []IEcuAddressExtensionContext) {
	s.v_ecuAddressExtension = v
}

func (s *InstanceContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(A2LParserBEGIN, 0)
}

func (s *InstanceContext) END() antlr.TerminalNode {
	return s.GetToken(A2LParserEND, 0)
}

func (s *InstanceContext) AllIdentifierValue() []IIdentifierValueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierValueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierValueContext); ok {
			tst[i] = t.(IIdentifierValueContext)
			i++
		}
	}

	return tst
}

func (s *InstanceContext) IdentifierValue(i int) IIdentifierValueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierValueContext)
}

func (s *InstanceContext) StringValue() IStringValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringValueContext)
}

func (s *InstanceContext) IntegerValue() IIntegerValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *InstanceContext) AllIfData() []IIfDataContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIfDataContext); ok {
			len++
		}
	}

	tst := make([]IIfDataContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIfDataContext); ok {
			tst[i] = t.(IIfDataContext)
			i++
		}
	}

	return tst
}

func (s *InstanceContext) IfData(i int) IIfDataContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIfDataContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIfDataContext)
}

func (s *InstanceContext) AllEcuAddressExtension() []IEcuAddressExtensionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IEcuAddressExtensionContext); ok {
			len++
		}
	}

	tst := make([]IEcuAddressExtensionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IEcuAddressExtensionContext); ok {
			tst[i] = t.(IEcuAddressExtensionContext)
			i++
		}
	}

	return tst
}

func (s *InstanceContext) EcuAddressExtension(i int) IEcuAddressExtensionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEcuAddressExtensionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEcuAddressExtensionContext)
}

func (s *InstanceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InstanceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InstanceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterInstance(s)
	}
}

func (s *InstanceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitInstance(s)
	}
}

func (s *InstanceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitInstance(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) Instance() (localctx IInstanceContext) {
	this := p
	_ = this

	localctx = NewInstanceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 158, A2LParserRULE_instance)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1112)
		p.Match(A2LParserBEGIN)
	}
	{
		p.SetState(1113)
		p.Match(A2LParserT__111)
	}
	{
		p.SetState(1114)

		var _x = p.IdentifierValue()

		localctx.(*InstanceContext).name = _x
	}
	{
		p.SetState(1115)

		var _x = p.StringValue()

		localctx.(*InstanceContext).longIdentifier = _x
	}
	{
		p.SetState(1116)

		var _x = p.IdentifierValue()

		localctx.(*InstanceContext).typeName = _x
	}
	{
		p.SetState(1117)

		var _x = p.IntegerValue()

		localctx.(*InstanceContext).address = _x
	}
	p.SetState(1122)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == A2LParserT__24 || _la == A2LParserBEGIN {
		p.SetState(1120)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case A2LParserBEGIN:
			{
				p.SetState(1118)

				var _x = p.IfData()

				localctx.(*InstanceContext)._ifData = _x
			}
			localctx.(*InstanceContext).v_ifData = append(localctx.(*InstanceContext).v_ifData, localctx.(*InstanceContext)._ifData)

		case A2LParserT__24:
			{
				p.SetState(1119)

				var _x = p.EcuAddressExtension()

				localctx.(*InstanceContext)._ecuAddressExtension = _x
			}
			localctx.(*InstanceContext).v_ecuAddressExtension = append(localctx.(*InstanceContext).v_ecuAddressExtension, localctx.(*InstanceContext)._ecuAddressExtension)

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(1124)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1125)
		p.Match(A2LParserEND)
	}
	{
		p.SetState(1126)
		p.Match(A2LParserT__111)
	}

	return localctx
}

// IMeasurementContext is an interface to support dynamic dispatch.
type IMeasurementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierValueContext

	// GetLongIdentifier returns the longIdentifier rule contexts.
	GetLongIdentifier() IStringValueContext

	// GetDatatype returns the datatype rule contexts.
	GetDatatype() IDataTypeContext

	// GetConversion returns the conversion rule contexts.
	GetConversion() IIdentifierValueContext

	// GetResolution returns the resolution rule contexts.
	GetResolution() IIntegerValueContext

	// GetAccuracy returns the accuracy rule contexts.
	GetAccuracy() INumericValueContext

	// GetLowerLimit returns the lowerLimit rule contexts.
	GetLowerLimit() INumericValueContext

	// GetUpperLimit returns the upperLimit rule contexts.
	GetUpperLimit() INumericValueContext

	// Get_annotation returns the _annotation rule contexts.
	Get_annotation() IAnnotationContext

	// GetVArraySize returns the vArraySize rule contexts.
	GetVArraySize() IArraySizeContext

	// GetVBitMask returns the vBitMask rule contexts.
	GetVBitMask() IBitMaskContext

	// Get_bitOperation returns the _bitOperation rule contexts.
	Get_bitOperation() IBitOperationContext

	// Get_byteOrder returns the _byteOrder rule contexts.
	Get_byteOrder() IByteOrderContext

	// Get_discrete returns the _discrete rule contexts.
	Get_discrete() IDiscreteContext

	// Get_displayIdentifier returns the _displayIdentifier rule contexts.
	Get_displayIdentifier() IDisplayIdentifierContext

	// GetVEcuAddress returns the vEcuAddress rule contexts.
	GetVEcuAddress() IEcuAddressContext

	// GetVEcuAddressExtension returns the vEcuAddressExtension rule contexts.
	GetVEcuAddressExtension() IEcuAddressExtensionContext

	// Get_errorMask returns the _errorMask rule contexts.
	Get_errorMask() IErrorMaskContext

	// GetVFormat returns the vFormat rule contexts.
	GetVFormat() IFormatContext

	// Get_functionList returns the _functionList rule contexts.
	Get_functionList() IFunctionListContext

	// Get_ifData returns the _ifData rule contexts.
	Get_ifData() IIfDataContext

	// Get_layout returns the _layout rule contexts.
	Get_layout() ILayoutContext

	// GetVMatrixDim returns the vMatrixDim rule contexts.
	GetVMatrixDim() IMatrixDimContext

	// Get_maxRefresh returns the _maxRefresh rule contexts.
	Get_maxRefresh() IMaxRefreshContext

	// Get_physUnit returns the _physUnit rule contexts.
	Get_physUnit() IPhysUnitContext

	// Get_readWrite returns the _readWrite rule contexts.
	Get_readWrite() IReadWriteContext

	// Get_refMemorySegment returns the _refMemorySegment rule contexts.
	Get_refMemorySegment() IRefMemorySegmentContext

	// Get_symbolLink returns the _symbolLink rule contexts.
	Get_symbolLink() ISymbolLinkContext

	// Get_virtual returns the _virtual rule contexts.
	Get_virtual() IVirtualContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierValueContext)

	// SetLongIdentifier sets the longIdentifier rule contexts.
	SetLongIdentifier(IStringValueContext)

	// SetDatatype sets the datatype rule contexts.
	SetDatatype(IDataTypeContext)

	// SetConversion sets the conversion rule contexts.
	SetConversion(IIdentifierValueContext)

	// SetResolution sets the resolution rule contexts.
	SetResolution(IIntegerValueContext)

	// SetAccuracy sets the accuracy rule contexts.
	SetAccuracy(INumericValueContext)

	// SetLowerLimit sets the lowerLimit rule contexts.
	SetLowerLimit(INumericValueContext)

	// SetUpperLimit sets the upperLimit rule contexts.
	SetUpperLimit(INumericValueContext)

	// Set_annotation sets the _annotation rule contexts.
	Set_annotation(IAnnotationContext)

	// SetVArraySize sets the vArraySize rule contexts.
	SetVArraySize(IArraySizeContext)

	// SetVBitMask sets the vBitMask rule contexts.
	SetVBitMask(IBitMaskContext)

	// Set_bitOperation sets the _bitOperation rule contexts.
	Set_bitOperation(IBitOperationContext)

	// Set_byteOrder sets the _byteOrder rule contexts.
	Set_byteOrder(IByteOrderContext)

	// Set_discrete sets the _discrete rule contexts.
	Set_discrete(IDiscreteContext)

	// Set_displayIdentifier sets the _displayIdentifier rule contexts.
	Set_displayIdentifier(IDisplayIdentifierContext)

	// SetVEcuAddress sets the vEcuAddress rule contexts.
	SetVEcuAddress(IEcuAddressContext)

	// SetVEcuAddressExtension sets the vEcuAddressExtension rule contexts.
	SetVEcuAddressExtension(IEcuAddressExtensionContext)

	// Set_errorMask sets the _errorMask rule contexts.
	Set_errorMask(IErrorMaskContext)

	// SetVFormat sets the vFormat rule contexts.
	SetVFormat(IFormatContext)

	// Set_functionList sets the _functionList rule contexts.
	Set_functionList(IFunctionListContext)

	// Set_ifData sets the _ifData rule contexts.
	Set_ifData(IIfDataContext)

	// Set_layout sets the _layout rule contexts.
	Set_layout(ILayoutContext)

	// SetVMatrixDim sets the vMatrixDim rule contexts.
	SetVMatrixDim(IMatrixDimContext)

	// Set_maxRefresh sets the _maxRefresh rule contexts.
	Set_maxRefresh(IMaxRefreshContext)

	// Set_physUnit sets the _physUnit rule contexts.
	Set_physUnit(IPhysUnitContext)

	// Set_readWrite sets the _readWrite rule contexts.
	Set_readWrite(IReadWriteContext)

	// Set_refMemorySegment sets the _refMemorySegment rule contexts.
	Set_refMemorySegment(IRefMemorySegmentContext)

	// Set_symbolLink sets the _symbolLink rule contexts.
	Set_symbolLink(ISymbolLinkContext)

	// Set_virtual sets the _virtual rule contexts.
	Set_virtual(IVirtualContext)

	// GetV_annotation returns the v_annotation rule context list.
	GetV_annotation() []IAnnotationContext

	// GetV_bitOperation returns the v_bitOperation rule context list.
	GetV_bitOperation() []IBitOperationContext

	// GetV_byteOrder returns the v_byteOrder rule context list.
	GetV_byteOrder() []IByteOrderContext

	// GetV_discrete returns the v_discrete rule context list.
	GetV_discrete() []IDiscreteContext

	// GetV_displayIdentifier returns the v_displayIdentifier rule context list.
	GetV_displayIdentifier() []IDisplayIdentifierContext

	// GetV_errorMask returns the v_errorMask rule context list.
	GetV_errorMask() []IErrorMaskContext

	// GetV_functionList returns the v_functionList rule context list.
	GetV_functionList() []IFunctionListContext

	// GetV_ifData returns the v_ifData rule context list.
	GetV_ifData() []IIfDataContext

	// GetV_layout returns the v_layout rule context list.
	GetV_layout() []ILayoutContext

	// GetV_maxRefresh returns the v_maxRefresh rule context list.
	GetV_maxRefresh() []IMaxRefreshContext

	// GetV_physUnit returns the v_physUnit rule context list.
	GetV_physUnit() []IPhysUnitContext

	// GetV_readWrite returns the v_readWrite rule context list.
	GetV_readWrite() []IReadWriteContext

	// GetV_refMemorySegment returns the v_refMemorySegment rule context list.
	GetV_refMemorySegment() []IRefMemorySegmentContext

	// GetV_symbolLink returns the v_symbolLink rule context list.
	GetV_symbolLink() []ISymbolLinkContext

	// GetV_virtual returns the v_virtual rule context list.
	GetV_virtual() []IVirtualContext

	// SetV_annotation sets the v_annotation rule context list.
	SetV_annotation([]IAnnotationContext)

	// SetV_bitOperation sets the v_bitOperation rule context list.
	SetV_bitOperation([]IBitOperationContext)

	// SetV_byteOrder sets the v_byteOrder rule context list.
	SetV_byteOrder([]IByteOrderContext)

	// SetV_discrete sets the v_discrete rule context list.
	SetV_discrete([]IDiscreteContext)

	// SetV_displayIdentifier sets the v_displayIdentifier rule context list.
	SetV_displayIdentifier([]IDisplayIdentifierContext)

	// SetV_errorMask sets the v_errorMask rule context list.
	SetV_errorMask([]IErrorMaskContext)

	// SetV_functionList sets the v_functionList rule context list.
	SetV_functionList([]IFunctionListContext)

	// SetV_ifData sets the v_ifData rule context list.
	SetV_ifData([]IIfDataContext)

	// SetV_layout sets the v_layout rule context list.
	SetV_layout([]ILayoutContext)

	// SetV_maxRefresh sets the v_maxRefresh rule context list.
	SetV_maxRefresh([]IMaxRefreshContext)

	// SetV_physUnit sets the v_physUnit rule context list.
	SetV_physUnit([]IPhysUnitContext)

	// SetV_readWrite sets the v_readWrite rule context list.
	SetV_readWrite([]IReadWriteContext)

	// SetV_refMemorySegment sets the v_refMemorySegment rule context list.
	SetV_refMemorySegment([]IRefMemorySegmentContext)

	// SetV_symbolLink sets the v_symbolLink rule context list.
	SetV_symbolLink([]ISymbolLinkContext)

	// SetV_virtual sets the v_virtual rule context list.
	SetV_virtual([]IVirtualContext)

	// Getter signatures
	BEGIN() antlr.TerminalNode
	END() antlr.TerminalNode
	AllIdentifierValue() []IIdentifierValueContext
	IdentifierValue(i int) IIdentifierValueContext
	StringValue() IStringValueContext
	DataType() IDataTypeContext
	IntegerValue() IIntegerValueContext
	AllNumericValue() []INumericValueContext
	NumericValue(i int) INumericValueContext
	AllAnnotation() []IAnnotationContext
	Annotation(i int) IAnnotationContext
	AllArraySize() []IArraySizeContext
	ArraySize(i int) IArraySizeContext
	AllBitMask() []IBitMaskContext
	BitMask(i int) IBitMaskContext
	AllBitOperation() []IBitOperationContext
	BitOperation(i int) IBitOperationContext
	AllByteOrder() []IByteOrderContext
	ByteOrder(i int) IByteOrderContext
	AllDiscrete() []IDiscreteContext
	Discrete(i int) IDiscreteContext
	AllDisplayIdentifier() []IDisplayIdentifierContext
	DisplayIdentifier(i int) IDisplayIdentifierContext
	AllEcuAddress() []IEcuAddressContext
	EcuAddress(i int) IEcuAddressContext
	AllEcuAddressExtension() []IEcuAddressExtensionContext
	EcuAddressExtension(i int) IEcuAddressExtensionContext
	AllErrorMask() []IErrorMaskContext
	ErrorMask(i int) IErrorMaskContext
	AllFormat() []IFormatContext
	Format(i int) IFormatContext
	AllFunctionList() []IFunctionListContext
	FunctionList(i int) IFunctionListContext
	AllIfData() []IIfDataContext
	IfData(i int) IIfDataContext
	AllLayout() []ILayoutContext
	Layout(i int) ILayoutContext
	AllMatrixDim() []IMatrixDimContext
	MatrixDim(i int) IMatrixDimContext
	AllMaxRefresh() []IMaxRefreshContext
	MaxRefresh(i int) IMaxRefreshContext
	AllPhysUnit() []IPhysUnitContext
	PhysUnit(i int) IPhysUnitContext
	AllReadWrite() []IReadWriteContext
	ReadWrite(i int) IReadWriteContext
	AllRefMemorySegment() []IRefMemorySegmentContext
	RefMemorySegment(i int) IRefMemorySegmentContext
	AllSymbolLink() []ISymbolLinkContext
	SymbolLink(i int) ISymbolLinkContext
	AllVirtual() []IVirtualContext
	Virtual(i int) IVirtualContext

	// IsMeasurementContext differentiates from other interfaces.
	IsMeasurementContext()
}

type MeasurementContext struct {
	*antlr.BaseParserRuleContext
	parser               antlr.Parser
	name                 IIdentifierValueContext
	longIdentifier       IStringValueContext
	datatype             IDataTypeContext
	conversion           IIdentifierValueContext
	resolution           IIntegerValueContext
	accuracy             INumericValueContext
	lowerLimit           INumericValueContext
	upperLimit           INumericValueContext
	_annotation          IAnnotationContext
	v_annotation         []IAnnotationContext
	vArraySize           IArraySizeContext
	vBitMask             IBitMaskContext
	_bitOperation        IBitOperationContext
	v_bitOperation       []IBitOperationContext
	_byteOrder           IByteOrderContext
	v_byteOrder          []IByteOrderContext
	_discrete            IDiscreteContext
	v_discrete           []IDiscreteContext
	_displayIdentifier   IDisplayIdentifierContext
	v_displayIdentifier  []IDisplayIdentifierContext
	vEcuAddress          IEcuAddressContext
	vEcuAddressExtension IEcuAddressExtensionContext
	_errorMask           IErrorMaskContext
	v_errorMask          []IErrorMaskContext
	vFormat              IFormatContext
	_functionList        IFunctionListContext
	v_functionList       []IFunctionListContext
	_ifData              IIfDataContext
	v_ifData             []IIfDataContext
	_layout              ILayoutContext
	v_layout             []ILayoutContext
	vMatrixDim           IMatrixDimContext
	_maxRefresh          IMaxRefreshContext
	v_maxRefresh         []IMaxRefreshContext
	_physUnit            IPhysUnitContext
	v_physUnit           []IPhysUnitContext
	_readWrite           IReadWriteContext
	v_readWrite          []IReadWriteContext
	_refMemorySegment    IRefMemorySegmentContext
	v_refMemorySegment   []IRefMemorySegmentContext
	_symbolLink          ISymbolLinkContext
	v_symbolLink         []ISymbolLinkContext
	_virtual             IVirtualContext
	v_virtual            []IVirtualContext
}

func NewEmptyMeasurementContext() *MeasurementContext {
	var p = new(MeasurementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_measurement
	return p
}

func (*MeasurementContext) IsMeasurementContext() {}

func NewMeasurementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MeasurementContext {
	var p = new(MeasurementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_measurement

	return p
}

func (s *MeasurementContext) GetParser() antlr.Parser { return s.parser }

func (s *MeasurementContext) GetName() IIdentifierValueContext { return s.name }

func (s *MeasurementContext) GetLongIdentifier() IStringValueContext { return s.longIdentifier }

func (s *MeasurementContext) GetDatatype() IDataTypeContext { return s.datatype }

func (s *MeasurementContext) GetConversion() IIdentifierValueContext { return s.conversion }

func (s *MeasurementContext) GetResolution() IIntegerValueContext { return s.resolution }

func (s *MeasurementContext) GetAccuracy() INumericValueContext { return s.accuracy }

func (s *MeasurementContext) GetLowerLimit() INumericValueContext { return s.lowerLimit }

func (s *MeasurementContext) GetUpperLimit() INumericValueContext { return s.upperLimit }

func (s *MeasurementContext) Get_annotation() IAnnotationContext { return s._annotation }

func (s *MeasurementContext) GetVArraySize() IArraySizeContext { return s.vArraySize }

func (s *MeasurementContext) GetVBitMask() IBitMaskContext { return s.vBitMask }

func (s *MeasurementContext) Get_bitOperation() IBitOperationContext { return s._bitOperation }

func (s *MeasurementContext) Get_byteOrder() IByteOrderContext { return s._byteOrder }

func (s *MeasurementContext) Get_discrete() IDiscreteContext { return s._discrete }

func (s *MeasurementContext) Get_displayIdentifier() IDisplayIdentifierContext {
	return s._displayIdentifier
}

func (s *MeasurementContext) GetVEcuAddress() IEcuAddressContext { return s.vEcuAddress }

func (s *MeasurementContext) GetVEcuAddressExtension() IEcuAddressExtensionContext {
	return s.vEcuAddressExtension
}

func (s *MeasurementContext) Get_errorMask() IErrorMaskContext { return s._errorMask }

func (s *MeasurementContext) GetVFormat() IFormatContext { return s.vFormat }

func (s *MeasurementContext) Get_functionList() IFunctionListContext { return s._functionList }

func (s *MeasurementContext) Get_ifData() IIfDataContext { return s._ifData }

func (s *MeasurementContext) Get_layout() ILayoutContext { return s._layout }

func (s *MeasurementContext) GetVMatrixDim() IMatrixDimContext { return s.vMatrixDim }

func (s *MeasurementContext) Get_maxRefresh() IMaxRefreshContext { return s._maxRefresh }

func (s *MeasurementContext) Get_physUnit() IPhysUnitContext { return s._physUnit }

func (s *MeasurementContext) Get_readWrite() IReadWriteContext { return s._readWrite }

func (s *MeasurementContext) Get_refMemorySegment() IRefMemorySegmentContext {
	return s._refMemorySegment
}

func (s *MeasurementContext) Get_symbolLink() ISymbolLinkContext { return s._symbolLink }

func (s *MeasurementContext) Get_virtual() IVirtualContext { return s._virtual }

func (s *MeasurementContext) SetName(v IIdentifierValueContext) { s.name = v }

func (s *MeasurementContext) SetLongIdentifier(v IStringValueContext) { s.longIdentifier = v }

func (s *MeasurementContext) SetDatatype(v IDataTypeContext) { s.datatype = v }

func (s *MeasurementContext) SetConversion(v IIdentifierValueContext) { s.conversion = v }

func (s *MeasurementContext) SetResolution(v IIntegerValueContext) { s.resolution = v }

func (s *MeasurementContext) SetAccuracy(v INumericValueContext) { s.accuracy = v }

func (s *MeasurementContext) SetLowerLimit(v INumericValueContext) { s.lowerLimit = v }

func (s *MeasurementContext) SetUpperLimit(v INumericValueContext) { s.upperLimit = v }

func (s *MeasurementContext) Set_annotation(v IAnnotationContext) { s._annotation = v }

func (s *MeasurementContext) SetVArraySize(v IArraySizeContext) { s.vArraySize = v }

func (s *MeasurementContext) SetVBitMask(v IBitMaskContext) { s.vBitMask = v }

func (s *MeasurementContext) Set_bitOperation(v IBitOperationContext) { s._bitOperation = v }

func (s *MeasurementContext) Set_byteOrder(v IByteOrderContext) { s._byteOrder = v }

func (s *MeasurementContext) Set_discrete(v IDiscreteContext) { s._discrete = v }

func (s *MeasurementContext) Set_displayIdentifier(v IDisplayIdentifierContext) {
	s._displayIdentifier = v
}

func (s *MeasurementContext) SetVEcuAddress(v IEcuAddressContext) { s.vEcuAddress = v }

func (s *MeasurementContext) SetVEcuAddressExtension(v IEcuAddressExtensionContext) {
	s.vEcuAddressExtension = v
}

func (s *MeasurementContext) Set_errorMask(v IErrorMaskContext) { s._errorMask = v }

func (s *MeasurementContext) SetVFormat(v IFormatContext) { s.vFormat = v }

func (s *MeasurementContext) Set_functionList(v IFunctionListContext) { s._functionList = v }

func (s *MeasurementContext) Set_ifData(v IIfDataContext) { s._ifData = v }

func (s *MeasurementContext) Set_layout(v ILayoutContext) { s._layout = v }

func (s *MeasurementContext) SetVMatrixDim(v IMatrixDimContext) { s.vMatrixDim = v }

func (s *MeasurementContext) Set_maxRefresh(v IMaxRefreshContext) { s._maxRefresh = v }

func (s *MeasurementContext) Set_physUnit(v IPhysUnitContext) { s._physUnit = v }

func (s *MeasurementContext) Set_readWrite(v IReadWriteContext) { s._readWrite = v }

func (s *MeasurementContext) Set_refMemorySegment(v IRefMemorySegmentContext) {
	s._refMemorySegment = v
}

func (s *MeasurementContext) Set_symbolLink(v ISymbolLinkContext) { s._symbolLink = v }

func (s *MeasurementContext) Set_virtual(v IVirtualContext) { s._virtual = v }

func (s *MeasurementContext) GetV_annotation() []IAnnotationContext { return s.v_annotation }

func (s *MeasurementContext) GetV_bitOperation() []IBitOperationContext { return s.v_bitOperation }

func (s *MeasurementContext) GetV_byteOrder() []IByteOrderContext { return s.v_byteOrder }

func (s *MeasurementContext) GetV_discrete() []IDiscreteContext { return s.v_discrete }

func (s *MeasurementContext) GetV_displayIdentifier() []IDisplayIdentifierContext {
	return s.v_displayIdentifier
}

func (s *MeasurementContext) GetV_errorMask() []IErrorMaskContext { return s.v_errorMask }

func (s *MeasurementContext) GetV_functionList() []IFunctionListContext { return s.v_functionList }

func (s *MeasurementContext) GetV_ifData() []IIfDataContext { return s.v_ifData }

func (s *MeasurementContext) GetV_layout() []ILayoutContext { return s.v_layout }

func (s *MeasurementContext) GetV_maxRefresh() []IMaxRefreshContext { return s.v_maxRefresh }

func (s *MeasurementContext) GetV_physUnit() []IPhysUnitContext { return s.v_physUnit }

func (s *MeasurementContext) GetV_readWrite() []IReadWriteContext { return s.v_readWrite }

func (s *MeasurementContext) GetV_refMemorySegment() []IRefMemorySegmentContext {
	return s.v_refMemorySegment
}

func (s *MeasurementContext) GetV_symbolLink() []ISymbolLinkContext { return s.v_symbolLink }

func (s *MeasurementContext) GetV_virtual() []IVirtualContext { return s.v_virtual }

func (s *MeasurementContext) SetV_annotation(v []IAnnotationContext) { s.v_annotation = v }

func (s *MeasurementContext) SetV_bitOperation(v []IBitOperationContext) { s.v_bitOperation = v }

func (s *MeasurementContext) SetV_byteOrder(v []IByteOrderContext) { s.v_byteOrder = v }

func (s *MeasurementContext) SetV_discrete(v []IDiscreteContext) { s.v_discrete = v }

func (s *MeasurementContext) SetV_displayIdentifier(v []IDisplayIdentifierContext) {
	s.v_displayIdentifier = v
}

func (s *MeasurementContext) SetV_errorMask(v []IErrorMaskContext) { s.v_errorMask = v }

func (s *MeasurementContext) SetV_functionList(v []IFunctionListContext) { s.v_functionList = v }

func (s *MeasurementContext) SetV_ifData(v []IIfDataContext) { s.v_ifData = v }

func (s *MeasurementContext) SetV_layout(v []ILayoutContext) { s.v_layout = v }

func (s *MeasurementContext) SetV_maxRefresh(v []IMaxRefreshContext) { s.v_maxRefresh = v }

func (s *MeasurementContext) SetV_physUnit(v []IPhysUnitContext) { s.v_physUnit = v }

func (s *MeasurementContext) SetV_readWrite(v []IReadWriteContext) { s.v_readWrite = v }

func (s *MeasurementContext) SetV_refMemorySegment(v []IRefMemorySegmentContext) {
	s.v_refMemorySegment = v
}

func (s *MeasurementContext) SetV_symbolLink(v []ISymbolLinkContext) { s.v_symbolLink = v }

func (s *MeasurementContext) SetV_virtual(v []IVirtualContext) { s.v_virtual = v }

func (s *MeasurementContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(A2LParserBEGIN, 0)
}

func (s *MeasurementContext) END() antlr.TerminalNode {
	return s.GetToken(A2LParserEND, 0)
}

func (s *MeasurementContext) AllIdentifierValue() []IIdentifierValueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierValueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierValueContext); ok {
			tst[i] = t.(IIdentifierValueContext)
			i++
		}
	}

	return tst
}

func (s *MeasurementContext) IdentifierValue(i int) IIdentifierValueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierValueContext)
}

func (s *MeasurementContext) StringValue() IStringValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringValueContext)
}

func (s *MeasurementContext) DataType() IDataTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDataTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDataTypeContext)
}

func (s *MeasurementContext) IntegerValue() IIntegerValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *MeasurementContext) AllNumericValue() []INumericValueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INumericValueContext); ok {
			len++
		}
	}

	tst := make([]INumericValueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INumericValueContext); ok {
			tst[i] = t.(INumericValueContext)
			i++
		}
	}

	return tst
}

func (s *MeasurementContext) NumericValue(i int) INumericValueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumericValueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumericValueContext)
}

func (s *MeasurementContext) AllAnnotation() []IAnnotationContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAnnotationContext); ok {
			len++
		}
	}

	tst := make([]IAnnotationContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAnnotationContext); ok {
			tst[i] = t.(IAnnotationContext)
			i++
		}
	}

	return tst
}

func (s *MeasurementContext) Annotation(i int) IAnnotationContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAnnotationContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAnnotationContext)
}

func (s *MeasurementContext) AllArraySize() []IArraySizeContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IArraySizeContext); ok {
			len++
		}
	}

	tst := make([]IArraySizeContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IArraySizeContext); ok {
			tst[i] = t.(IArraySizeContext)
			i++
		}
	}

	return tst
}

func (s *MeasurementContext) ArraySize(i int) IArraySizeContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArraySizeContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArraySizeContext)
}

func (s *MeasurementContext) AllBitMask() []IBitMaskContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IBitMaskContext); ok {
			len++
		}
	}

	tst := make([]IBitMaskContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IBitMaskContext); ok {
			tst[i] = t.(IBitMaskContext)
			i++
		}
	}

	return tst
}

func (s *MeasurementContext) BitMask(i int) IBitMaskContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBitMaskContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBitMaskContext)
}

func (s *MeasurementContext) AllBitOperation() []IBitOperationContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IBitOperationContext); ok {
			len++
		}
	}

	tst := make([]IBitOperationContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IBitOperationContext); ok {
			tst[i] = t.(IBitOperationContext)
			i++
		}
	}

	return tst
}

func (s *MeasurementContext) BitOperation(i int) IBitOperationContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBitOperationContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBitOperationContext)
}

func (s *MeasurementContext) AllByteOrder() []IByteOrderContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IByteOrderContext); ok {
			len++
		}
	}

	tst := make([]IByteOrderContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IByteOrderContext); ok {
			tst[i] = t.(IByteOrderContext)
			i++
		}
	}

	return tst
}

func (s *MeasurementContext) ByteOrder(i int) IByteOrderContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IByteOrderContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IByteOrderContext)
}

func (s *MeasurementContext) AllDiscrete() []IDiscreteContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDiscreteContext); ok {
			len++
		}
	}

	tst := make([]IDiscreteContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDiscreteContext); ok {
			tst[i] = t.(IDiscreteContext)
			i++
		}
	}

	return tst
}

func (s *MeasurementContext) Discrete(i int) IDiscreteContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDiscreteContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDiscreteContext)
}

func (s *MeasurementContext) AllDisplayIdentifier() []IDisplayIdentifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDisplayIdentifierContext); ok {
			len++
		}
	}

	tst := make([]IDisplayIdentifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDisplayIdentifierContext); ok {
			tst[i] = t.(IDisplayIdentifierContext)
			i++
		}
	}

	return tst
}

func (s *MeasurementContext) DisplayIdentifier(i int) IDisplayIdentifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDisplayIdentifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDisplayIdentifierContext)
}

func (s *MeasurementContext) AllEcuAddress() []IEcuAddressContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IEcuAddressContext); ok {
			len++
		}
	}

	tst := make([]IEcuAddressContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IEcuAddressContext); ok {
			tst[i] = t.(IEcuAddressContext)
			i++
		}
	}

	return tst
}

func (s *MeasurementContext) EcuAddress(i int) IEcuAddressContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEcuAddressContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEcuAddressContext)
}

func (s *MeasurementContext) AllEcuAddressExtension() []IEcuAddressExtensionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IEcuAddressExtensionContext); ok {
			len++
		}
	}

	tst := make([]IEcuAddressExtensionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IEcuAddressExtensionContext); ok {
			tst[i] = t.(IEcuAddressExtensionContext)
			i++
		}
	}

	return tst
}

func (s *MeasurementContext) EcuAddressExtension(i int) IEcuAddressExtensionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEcuAddressExtensionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEcuAddressExtensionContext)
}

func (s *MeasurementContext) AllErrorMask() []IErrorMaskContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IErrorMaskContext); ok {
			len++
		}
	}

	tst := make([]IErrorMaskContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IErrorMaskContext); ok {
			tst[i] = t.(IErrorMaskContext)
			i++
		}
	}

	return tst
}

func (s *MeasurementContext) ErrorMask(i int) IErrorMaskContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IErrorMaskContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IErrorMaskContext)
}

func (s *MeasurementContext) AllFormat() []IFormatContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IFormatContext); ok {
			len++
		}
	}

	tst := make([]IFormatContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IFormatContext); ok {
			tst[i] = t.(IFormatContext)
			i++
		}
	}

	return tst
}

func (s *MeasurementContext) Format(i int) IFormatContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFormatContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFormatContext)
}

func (s *MeasurementContext) AllFunctionList() []IFunctionListContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IFunctionListContext); ok {
			len++
		}
	}

	tst := make([]IFunctionListContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IFunctionListContext); ok {
			tst[i] = t.(IFunctionListContext)
			i++
		}
	}

	return tst
}

func (s *MeasurementContext) FunctionList(i int) IFunctionListContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunctionListContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunctionListContext)
}

func (s *MeasurementContext) AllIfData() []IIfDataContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIfDataContext); ok {
			len++
		}
	}

	tst := make([]IIfDataContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIfDataContext); ok {
			tst[i] = t.(IIfDataContext)
			i++
		}
	}

	return tst
}

func (s *MeasurementContext) IfData(i int) IIfDataContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIfDataContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIfDataContext)
}

func (s *MeasurementContext) AllLayout() []ILayoutContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ILayoutContext); ok {
			len++
		}
	}

	tst := make([]ILayoutContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ILayoutContext); ok {
			tst[i] = t.(ILayoutContext)
			i++
		}
	}

	return tst
}

func (s *MeasurementContext) Layout(i int) ILayoutContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILayoutContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILayoutContext)
}

func (s *MeasurementContext) AllMatrixDim() []IMatrixDimContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IMatrixDimContext); ok {
			len++
		}
	}

	tst := make([]IMatrixDimContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IMatrixDimContext); ok {
			tst[i] = t.(IMatrixDimContext)
			i++
		}
	}

	return tst
}

func (s *MeasurementContext) MatrixDim(i int) IMatrixDimContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMatrixDimContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMatrixDimContext)
}

func (s *MeasurementContext) AllMaxRefresh() []IMaxRefreshContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IMaxRefreshContext); ok {
			len++
		}
	}

	tst := make([]IMaxRefreshContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IMaxRefreshContext); ok {
			tst[i] = t.(IMaxRefreshContext)
			i++
		}
	}

	return tst
}

func (s *MeasurementContext) MaxRefresh(i int) IMaxRefreshContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMaxRefreshContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMaxRefreshContext)
}

func (s *MeasurementContext) AllPhysUnit() []IPhysUnitContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IPhysUnitContext); ok {
			len++
		}
	}

	tst := make([]IPhysUnitContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IPhysUnitContext); ok {
			tst[i] = t.(IPhysUnitContext)
			i++
		}
	}

	return tst
}

func (s *MeasurementContext) PhysUnit(i int) IPhysUnitContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPhysUnitContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPhysUnitContext)
}

func (s *MeasurementContext) AllReadWrite() []IReadWriteContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IReadWriteContext); ok {
			len++
		}
	}

	tst := make([]IReadWriteContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IReadWriteContext); ok {
			tst[i] = t.(IReadWriteContext)
			i++
		}
	}

	return tst
}

func (s *MeasurementContext) ReadWrite(i int) IReadWriteContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IReadWriteContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IReadWriteContext)
}

func (s *MeasurementContext) AllRefMemorySegment() []IRefMemorySegmentContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IRefMemorySegmentContext); ok {
			len++
		}
	}

	tst := make([]IRefMemorySegmentContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IRefMemorySegmentContext); ok {
			tst[i] = t.(IRefMemorySegmentContext)
			i++
		}
	}

	return tst
}

func (s *MeasurementContext) RefMemorySegment(i int) IRefMemorySegmentContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRefMemorySegmentContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRefMemorySegmentContext)
}

func (s *MeasurementContext) AllSymbolLink() []ISymbolLinkContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISymbolLinkContext); ok {
			len++
		}
	}

	tst := make([]ISymbolLinkContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISymbolLinkContext); ok {
			tst[i] = t.(ISymbolLinkContext)
			i++
		}
	}

	return tst
}

func (s *MeasurementContext) SymbolLink(i int) ISymbolLinkContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISymbolLinkContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISymbolLinkContext)
}

func (s *MeasurementContext) AllVirtual() []IVirtualContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IVirtualContext); ok {
			len++
		}
	}

	tst := make([]IVirtualContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IVirtualContext); ok {
			tst[i] = t.(IVirtualContext)
			i++
		}
	}

	return tst
}

func (s *MeasurementContext) Virtual(i int) IVirtualContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVirtualContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVirtualContext)
}

func (s *MeasurementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MeasurementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MeasurementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterMeasurement(s)
	}
}

func (s *MeasurementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitMeasurement(s)
	}
}

func (s *MeasurementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitMeasurement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) Measurement() (localctx IMeasurementContext) {
	this := p
	_ = this

	localctx = NewMeasurementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 160, A2LParserRULE_measurement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1128)
		p.Match(A2LParserBEGIN)
	}
	{
		p.SetState(1129)
		p.Match(A2LParserT__112)
	}
	{
		p.SetState(1130)

		var _x = p.IdentifierValue()

		localctx.(*MeasurementContext).name = _x
	}
	{
		p.SetState(1131)

		var _x = p.StringValue()

		localctx.(*MeasurementContext).longIdentifier = _x
	}
	{
		p.SetState(1132)

		var _x = p.DataType()

		localctx.(*MeasurementContext).datatype = _x
	}
	{
		p.SetState(1133)

		var _x = p.IdentifierValue()

		localctx.(*MeasurementContext).conversion = _x
	}
	{
		p.SetState(1134)

		var _x = p.IntegerValue()

		localctx.(*MeasurementContext).resolution = _x
	}
	{
		p.SetState(1135)

		var _x = p.NumericValue()

		localctx.(*MeasurementContext).accuracy = _x
	}
	{
		p.SetState(1136)

		var _x = p.NumericValue()

		localctx.(*MeasurementContext).lowerLimit = _x
	}
	{
		p.SetState(1137)

		var _x = p.NumericValue()

		localctx.(*MeasurementContext).upperLimit = _x
	}
	p.SetState(1161)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&80267763003392) != 0) || ((int64((_la-114)) & ^0x3f) == 0 && ((int64(1)<<(_la-114))&1249) != 0) || _la == A2LParserBEGIN {
		p.SetState(1159)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 50, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(1138)

				var _x = p.Annotation()

				localctx.(*MeasurementContext)._annotation = _x
			}
			localctx.(*MeasurementContext).v_annotation = append(localctx.(*MeasurementContext).v_annotation, localctx.(*MeasurementContext)._annotation)

		case 2:
			{
				p.SetState(1139)

				var _x = p.ArraySize()

				localctx.(*MeasurementContext).vArraySize = _x
			}

		case 3:
			{
				p.SetState(1140)

				var _x = p.BitMask()

				localctx.(*MeasurementContext).vBitMask = _x
			}

		case 4:
			{
				p.SetState(1141)

				var _x = p.BitOperation()

				localctx.(*MeasurementContext)._bitOperation = _x
			}
			localctx.(*MeasurementContext).v_bitOperation = append(localctx.(*MeasurementContext).v_bitOperation, localctx.(*MeasurementContext)._bitOperation)

		case 5:
			{
				p.SetState(1142)

				var _x = p.ByteOrder()

				localctx.(*MeasurementContext)._byteOrder = _x
			}
			localctx.(*MeasurementContext).v_byteOrder = append(localctx.(*MeasurementContext).v_byteOrder, localctx.(*MeasurementContext)._byteOrder)

		case 6:
			{
				p.SetState(1143)

				var _x = p.Discrete()

				localctx.(*MeasurementContext)._discrete = _x
			}
			localctx.(*MeasurementContext).v_discrete = append(localctx.(*MeasurementContext).v_discrete, localctx.(*MeasurementContext)._discrete)

		case 7:
			{
				p.SetState(1144)

				var _x = p.DisplayIdentifier()

				localctx.(*MeasurementContext)._displayIdentifier = _x
			}
			localctx.(*MeasurementContext).v_displayIdentifier = append(localctx.(*MeasurementContext).v_displayIdentifier, localctx.(*MeasurementContext)._displayIdentifier)

		case 8:
			{
				p.SetState(1145)

				var _x = p.EcuAddress()

				localctx.(*MeasurementContext).vEcuAddress = _x
			}

		case 9:
			{
				p.SetState(1146)

				var _x = p.EcuAddressExtension()

				localctx.(*MeasurementContext).vEcuAddressExtension = _x
			}

		case 10:
			{
				p.SetState(1147)

				var _x = p.ErrorMask()

				localctx.(*MeasurementContext)._errorMask = _x
			}
			localctx.(*MeasurementContext).v_errorMask = append(localctx.(*MeasurementContext).v_errorMask, localctx.(*MeasurementContext)._errorMask)

		case 11:
			{
				p.SetState(1148)

				var _x = p.Format()

				localctx.(*MeasurementContext).vFormat = _x
			}

		case 12:
			{
				p.SetState(1149)

				var _x = p.FunctionList()

				localctx.(*MeasurementContext)._functionList = _x
			}
			localctx.(*MeasurementContext).v_functionList = append(localctx.(*MeasurementContext).v_functionList, localctx.(*MeasurementContext)._functionList)

		case 13:
			{
				p.SetState(1150)

				var _x = p.IfData()

				localctx.(*MeasurementContext)._ifData = _x
			}
			localctx.(*MeasurementContext).v_ifData = append(localctx.(*MeasurementContext).v_ifData, localctx.(*MeasurementContext)._ifData)

		case 14:
			{
				p.SetState(1151)

				var _x = p.Layout()

				localctx.(*MeasurementContext)._layout = _x
			}
			localctx.(*MeasurementContext).v_layout = append(localctx.(*MeasurementContext).v_layout, localctx.(*MeasurementContext)._layout)

		case 15:
			{
				p.SetState(1152)

				var _x = p.MatrixDim()

				localctx.(*MeasurementContext).vMatrixDim = _x
			}

		case 16:
			{
				p.SetState(1153)

				var _x = p.MaxRefresh()

				localctx.(*MeasurementContext)._maxRefresh = _x
			}
			localctx.(*MeasurementContext).v_maxRefresh = append(localctx.(*MeasurementContext).v_maxRefresh, localctx.(*MeasurementContext)._maxRefresh)

		case 17:
			{
				p.SetState(1154)

				var _x = p.PhysUnit()

				localctx.(*MeasurementContext)._physUnit = _x
			}
			localctx.(*MeasurementContext).v_physUnit = append(localctx.(*MeasurementContext).v_physUnit, localctx.(*MeasurementContext)._physUnit)

		case 18:
			{
				p.SetState(1155)

				var _x = p.ReadWrite()

				localctx.(*MeasurementContext)._readWrite = _x
			}
			localctx.(*MeasurementContext).v_readWrite = append(localctx.(*MeasurementContext).v_readWrite, localctx.(*MeasurementContext)._readWrite)

		case 19:
			{
				p.SetState(1156)

				var _x = p.RefMemorySegment()

				localctx.(*MeasurementContext)._refMemorySegment = _x
			}
			localctx.(*MeasurementContext).v_refMemorySegment = append(localctx.(*MeasurementContext).v_refMemorySegment, localctx.(*MeasurementContext)._refMemorySegment)

		case 20:
			{
				p.SetState(1157)

				var _x = p.SymbolLink()

				localctx.(*MeasurementContext)._symbolLink = _x
			}
			localctx.(*MeasurementContext).v_symbolLink = append(localctx.(*MeasurementContext).v_symbolLink, localctx.(*MeasurementContext)._symbolLink)

		case 21:
			{
				p.SetState(1158)

				var _x = p.Virtual()

				localctx.(*MeasurementContext)._virtual = _x
			}
			localctx.(*MeasurementContext).v_virtual = append(localctx.(*MeasurementContext).v_virtual, localctx.(*MeasurementContext)._virtual)

		}

		p.SetState(1163)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1164)
		p.Match(A2LParserEND)
	}
	{
		p.SetState(1165)
		p.Match(A2LParserT__112)
	}

	return localctx
}

// IArraySizeContext is an interface to support dynamic dispatch.
type IArraySizeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetNumber_ returns the number_ rule contexts.
	GetNumber_() IIntegerValueContext

	// SetNumber_ sets the number_ rule contexts.
	SetNumber_(IIntegerValueContext)

	// Getter signatures
	IntegerValue() IIntegerValueContext

	// IsArraySizeContext differentiates from other interfaces.
	IsArraySizeContext()
}

type ArraySizeContext struct {
	*antlr.BaseParserRuleContext
	parser  antlr.Parser
	number_ IIntegerValueContext
}

func NewEmptyArraySizeContext() *ArraySizeContext {
	var p = new(ArraySizeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_arraySize
	return p
}

func (*ArraySizeContext) IsArraySizeContext() {}

func NewArraySizeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArraySizeContext {
	var p = new(ArraySizeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_arraySize

	return p
}

func (s *ArraySizeContext) GetParser() antlr.Parser { return s.parser }

func (s *ArraySizeContext) GetNumber_() IIntegerValueContext { return s.number_ }

func (s *ArraySizeContext) SetNumber_(v IIntegerValueContext) { s.number_ = v }

func (s *ArraySizeContext) IntegerValue() IIntegerValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *ArraySizeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArraySizeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArraySizeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterArraySize(s)
	}
}

func (s *ArraySizeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitArraySize(s)
	}
}

func (s *ArraySizeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitArraySize(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) ArraySize() (localctx IArraySizeContext) {
	this := p
	_ = this

	localctx = NewArraySizeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 162, A2LParserRULE_arraySize)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1167)
		p.Match(A2LParserT__113)
	}
	{
		p.SetState(1168)

		var _x = p.IntegerValue()

		localctx.(*ArraySizeContext).number_ = _x
	}

	return localctx
}

// IBitOperationContext is an interface to support dynamic dispatch.
type IBitOperationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_leftShift returns the _leftShift rule contexts.
	Get_leftShift() ILeftShiftContext

	// Get_rightShift returns the _rightShift rule contexts.
	Get_rightShift() IRightShiftContext

	// Get_signExtend returns the _signExtend rule contexts.
	Get_signExtend() ISignExtendContext

	// Set_leftShift sets the _leftShift rule contexts.
	Set_leftShift(ILeftShiftContext)

	// Set_rightShift sets the _rightShift rule contexts.
	Set_rightShift(IRightShiftContext)

	// Set_signExtend sets the _signExtend rule contexts.
	Set_signExtend(ISignExtendContext)

	// GetV_leftShift returns the v_leftShift rule context list.
	GetV_leftShift() []ILeftShiftContext

	// GetV_rightShift returns the v_rightShift rule context list.
	GetV_rightShift() []IRightShiftContext

	// GetV_signExtend returns the v_signExtend rule context list.
	GetV_signExtend() []ISignExtendContext

	// SetV_leftShift sets the v_leftShift rule context list.
	SetV_leftShift([]ILeftShiftContext)

	// SetV_rightShift sets the v_rightShift rule context list.
	SetV_rightShift([]IRightShiftContext)

	// SetV_signExtend sets the v_signExtend rule context list.
	SetV_signExtend([]ISignExtendContext)

	// Getter signatures
	BEGIN() antlr.TerminalNode
	END() antlr.TerminalNode
	AllLeftShift() []ILeftShiftContext
	LeftShift(i int) ILeftShiftContext
	AllRightShift() []IRightShiftContext
	RightShift(i int) IRightShiftContext
	AllSignExtend() []ISignExtendContext
	SignExtend(i int) ISignExtendContext

	// IsBitOperationContext differentiates from other interfaces.
	IsBitOperationContext()
}

type BitOperationContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	_leftShift   ILeftShiftContext
	v_leftShift  []ILeftShiftContext
	_rightShift  IRightShiftContext
	v_rightShift []IRightShiftContext
	_signExtend  ISignExtendContext
	v_signExtend []ISignExtendContext
}

func NewEmptyBitOperationContext() *BitOperationContext {
	var p = new(BitOperationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_bitOperation
	return p
}

func (*BitOperationContext) IsBitOperationContext() {}

func NewBitOperationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BitOperationContext {
	var p = new(BitOperationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_bitOperation

	return p
}

func (s *BitOperationContext) GetParser() antlr.Parser { return s.parser }

func (s *BitOperationContext) Get_leftShift() ILeftShiftContext { return s._leftShift }

func (s *BitOperationContext) Get_rightShift() IRightShiftContext { return s._rightShift }

func (s *BitOperationContext) Get_signExtend() ISignExtendContext { return s._signExtend }

func (s *BitOperationContext) Set_leftShift(v ILeftShiftContext) { s._leftShift = v }

func (s *BitOperationContext) Set_rightShift(v IRightShiftContext) { s._rightShift = v }

func (s *BitOperationContext) Set_signExtend(v ISignExtendContext) { s._signExtend = v }

func (s *BitOperationContext) GetV_leftShift() []ILeftShiftContext { return s.v_leftShift }

func (s *BitOperationContext) GetV_rightShift() []IRightShiftContext { return s.v_rightShift }

func (s *BitOperationContext) GetV_signExtend() []ISignExtendContext { return s.v_signExtend }

func (s *BitOperationContext) SetV_leftShift(v []ILeftShiftContext) { s.v_leftShift = v }

func (s *BitOperationContext) SetV_rightShift(v []IRightShiftContext) { s.v_rightShift = v }

func (s *BitOperationContext) SetV_signExtend(v []ISignExtendContext) { s.v_signExtend = v }

func (s *BitOperationContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(A2LParserBEGIN, 0)
}

func (s *BitOperationContext) END() antlr.TerminalNode {
	return s.GetToken(A2LParserEND, 0)
}

func (s *BitOperationContext) AllLeftShift() []ILeftShiftContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ILeftShiftContext); ok {
			len++
		}
	}

	tst := make([]ILeftShiftContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ILeftShiftContext); ok {
			tst[i] = t.(ILeftShiftContext)
			i++
		}
	}

	return tst
}

func (s *BitOperationContext) LeftShift(i int) ILeftShiftContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILeftShiftContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILeftShiftContext)
}

func (s *BitOperationContext) AllRightShift() []IRightShiftContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IRightShiftContext); ok {
			len++
		}
	}

	tst := make([]IRightShiftContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IRightShiftContext); ok {
			tst[i] = t.(IRightShiftContext)
			i++
		}
	}

	return tst
}

func (s *BitOperationContext) RightShift(i int) IRightShiftContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRightShiftContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRightShiftContext)
}

func (s *BitOperationContext) AllSignExtend() []ISignExtendContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISignExtendContext); ok {
			len++
		}
	}

	tst := make([]ISignExtendContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISignExtendContext); ok {
			tst[i] = t.(ISignExtendContext)
			i++
		}
	}

	return tst
}

func (s *BitOperationContext) SignExtend(i int) ISignExtendContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISignExtendContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISignExtendContext)
}

func (s *BitOperationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BitOperationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BitOperationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterBitOperation(s)
	}
}

func (s *BitOperationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitBitOperation(s)
	}
}

func (s *BitOperationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitBitOperation(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) BitOperation() (localctx IBitOperationContext) {
	this := p
	_ = this

	localctx = NewBitOperationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 164, A2LParserRULE_bitOperation)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1170)
		p.Match(A2LParserBEGIN)
	}
	{
		p.SetState(1171)
		p.Match(A2LParserT__114)
	}
	p.SetState(1177)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (int64((_la-116)) & ^0x3f) == 0 && ((int64(1)<<(_la-116))&7) != 0 {
		p.SetState(1175)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case A2LParserT__115:
			{
				p.SetState(1172)

				var _x = p.LeftShift()

				localctx.(*BitOperationContext)._leftShift = _x
			}
			localctx.(*BitOperationContext).v_leftShift = append(localctx.(*BitOperationContext).v_leftShift, localctx.(*BitOperationContext)._leftShift)

		case A2LParserT__116:
			{
				p.SetState(1173)

				var _x = p.RightShift()

				localctx.(*BitOperationContext)._rightShift = _x
			}
			localctx.(*BitOperationContext).v_rightShift = append(localctx.(*BitOperationContext).v_rightShift, localctx.(*BitOperationContext)._rightShift)

		case A2LParserT__117:
			{
				p.SetState(1174)

				var _x = p.SignExtend()

				localctx.(*BitOperationContext)._signExtend = _x
			}
			localctx.(*BitOperationContext).v_signExtend = append(localctx.(*BitOperationContext).v_signExtend, localctx.(*BitOperationContext)._signExtend)

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(1179)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1180)
		p.Match(A2LParserEND)
	}
	{
		p.SetState(1181)
		p.Match(A2LParserT__114)
	}

	return localctx
}

// ILeftShiftContext is an interface to support dynamic dispatch.
type ILeftShiftContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetBitcount returns the bitcount rule contexts.
	GetBitcount() IIntegerValueContext

	// SetBitcount sets the bitcount rule contexts.
	SetBitcount(IIntegerValueContext)

	// Getter signatures
	IntegerValue() IIntegerValueContext

	// IsLeftShiftContext differentiates from other interfaces.
	IsLeftShiftContext()
}

type LeftShiftContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	bitcount IIntegerValueContext
}

func NewEmptyLeftShiftContext() *LeftShiftContext {
	var p = new(LeftShiftContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_leftShift
	return p
}

func (*LeftShiftContext) IsLeftShiftContext() {}

func NewLeftShiftContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LeftShiftContext {
	var p = new(LeftShiftContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_leftShift

	return p
}

func (s *LeftShiftContext) GetParser() antlr.Parser { return s.parser }

func (s *LeftShiftContext) GetBitcount() IIntegerValueContext { return s.bitcount }

func (s *LeftShiftContext) SetBitcount(v IIntegerValueContext) { s.bitcount = v }

func (s *LeftShiftContext) IntegerValue() IIntegerValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *LeftShiftContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LeftShiftContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LeftShiftContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterLeftShift(s)
	}
}

func (s *LeftShiftContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitLeftShift(s)
	}
}

func (s *LeftShiftContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitLeftShift(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) LeftShift() (localctx ILeftShiftContext) {
	this := p
	_ = this

	localctx = NewLeftShiftContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 166, A2LParserRULE_leftShift)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1183)
		p.Match(A2LParserT__115)
	}
	{
		p.SetState(1184)

		var _x = p.IntegerValue()

		localctx.(*LeftShiftContext).bitcount = _x
	}

	return localctx
}

// IRightShiftContext is an interface to support dynamic dispatch.
type IRightShiftContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetBitcount returns the bitcount rule contexts.
	GetBitcount() IIntegerValueContext

	// SetBitcount sets the bitcount rule contexts.
	SetBitcount(IIntegerValueContext)

	// Getter signatures
	IntegerValue() IIntegerValueContext

	// IsRightShiftContext differentiates from other interfaces.
	IsRightShiftContext()
}

type RightShiftContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	bitcount IIntegerValueContext
}

func NewEmptyRightShiftContext() *RightShiftContext {
	var p = new(RightShiftContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_rightShift
	return p
}

func (*RightShiftContext) IsRightShiftContext() {}

func NewRightShiftContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RightShiftContext {
	var p = new(RightShiftContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_rightShift

	return p
}

func (s *RightShiftContext) GetParser() antlr.Parser { return s.parser }

func (s *RightShiftContext) GetBitcount() IIntegerValueContext { return s.bitcount }

func (s *RightShiftContext) SetBitcount(v IIntegerValueContext) { s.bitcount = v }

func (s *RightShiftContext) IntegerValue() IIntegerValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *RightShiftContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RightShiftContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RightShiftContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterRightShift(s)
	}
}

func (s *RightShiftContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitRightShift(s)
	}
}

func (s *RightShiftContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitRightShift(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) RightShift() (localctx IRightShiftContext) {
	this := p
	_ = this

	localctx = NewRightShiftContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 168, A2LParserRULE_rightShift)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1186)
		p.Match(A2LParserT__116)
	}
	{
		p.SetState(1187)

		var _x = p.IntegerValue()

		localctx.(*RightShiftContext).bitcount = _x
	}

	return localctx
}

// ISignExtendContext is an interface to support dynamic dispatch.
type ISignExtendContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsSignExtendContext differentiates from other interfaces.
	IsSignExtendContext()
}

type SignExtendContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySignExtendContext() *SignExtendContext {
	var p = new(SignExtendContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_signExtend
	return p
}

func (*SignExtendContext) IsSignExtendContext() {}

func NewSignExtendContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SignExtendContext {
	var p = new(SignExtendContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_signExtend

	return p
}

func (s *SignExtendContext) GetParser() antlr.Parser { return s.parser }
func (s *SignExtendContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SignExtendContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SignExtendContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterSignExtend(s)
	}
}

func (s *SignExtendContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitSignExtend(s)
	}
}

func (s *SignExtendContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitSignExtend(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) SignExtend() (localctx ISignExtendContext) {
	this := p
	_ = this

	localctx = NewSignExtendContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 170, A2LParserRULE_signExtend)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1189)
		p.Match(A2LParserT__117)
	}

	return localctx
}

// IEcuAddressContext is an interface to support dynamic dispatch.
type IEcuAddressContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetAddress returns the address rule contexts.
	GetAddress() IIntegerValueContext

	// SetAddress sets the address rule contexts.
	SetAddress(IIntegerValueContext)

	// Getter signatures
	IntegerValue() IIntegerValueContext

	// IsEcuAddressContext differentiates from other interfaces.
	IsEcuAddressContext()
}

type EcuAddressContext struct {
	*antlr.BaseParserRuleContext
	parser  antlr.Parser
	address IIntegerValueContext
}

func NewEmptyEcuAddressContext() *EcuAddressContext {
	var p = new(EcuAddressContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_ecuAddress
	return p
}

func (*EcuAddressContext) IsEcuAddressContext() {}

func NewEcuAddressContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EcuAddressContext {
	var p = new(EcuAddressContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_ecuAddress

	return p
}

func (s *EcuAddressContext) GetParser() antlr.Parser { return s.parser }

func (s *EcuAddressContext) GetAddress() IIntegerValueContext { return s.address }

func (s *EcuAddressContext) SetAddress(v IIntegerValueContext) { s.address = v }

func (s *EcuAddressContext) IntegerValue() IIntegerValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *EcuAddressContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EcuAddressContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EcuAddressContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterEcuAddress(s)
	}
}

func (s *EcuAddressContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitEcuAddress(s)
	}
}

func (s *EcuAddressContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitEcuAddress(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) EcuAddress() (localctx IEcuAddressContext) {
	this := p
	_ = this

	localctx = NewEcuAddressContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 172, A2LParserRULE_ecuAddress)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1191)
		p.Match(A2LParserT__118)
	}
	{
		p.SetState(1192)

		var _x = p.IntegerValue()

		localctx.(*EcuAddressContext).address = _x
	}

	return localctx
}

// IErrorMaskContext is an interface to support dynamic dispatch.
type IErrorMaskContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetMask returns the mask rule contexts.
	GetMask() IIntegerValueContext

	// SetMask sets the mask rule contexts.
	SetMask(IIntegerValueContext)

	// Getter signatures
	IntegerValue() IIntegerValueContext

	// IsErrorMaskContext differentiates from other interfaces.
	IsErrorMaskContext()
}

type ErrorMaskContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	mask   IIntegerValueContext
}

func NewEmptyErrorMaskContext() *ErrorMaskContext {
	var p = new(ErrorMaskContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_errorMask
	return p
}

func (*ErrorMaskContext) IsErrorMaskContext() {}

func NewErrorMaskContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ErrorMaskContext {
	var p = new(ErrorMaskContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_errorMask

	return p
}

func (s *ErrorMaskContext) GetParser() antlr.Parser { return s.parser }

func (s *ErrorMaskContext) GetMask() IIntegerValueContext { return s.mask }

func (s *ErrorMaskContext) SetMask(v IIntegerValueContext) { s.mask = v }

func (s *ErrorMaskContext) IntegerValue() IIntegerValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *ErrorMaskContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ErrorMaskContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ErrorMaskContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterErrorMask(s)
	}
}

func (s *ErrorMaskContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitErrorMask(s)
	}
}

func (s *ErrorMaskContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitErrorMask(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) ErrorMask() (localctx IErrorMaskContext) {
	this := p
	_ = this

	localctx = NewErrorMaskContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 174, A2LParserRULE_errorMask)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1194)
		p.Match(A2LParserT__119)
	}
	{
		p.SetState(1195)

		var _x = p.IntegerValue()

		localctx.(*ErrorMaskContext).mask = _x
	}

	return localctx
}

// ILayoutContext is an interface to support dynamic dispatch.
type ILayoutContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetIndexMode returns the indexMode token.
	GetIndexMode() antlr.Token

	// SetIndexMode sets the indexMode token.
	SetIndexMode(antlr.Token)

	// IsLayoutContext differentiates from other interfaces.
	IsLayoutContext()
}

type LayoutContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	indexMode antlr.Token
}

func NewEmptyLayoutContext() *LayoutContext {
	var p = new(LayoutContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_layout
	return p
}

func (*LayoutContext) IsLayoutContext() {}

func NewLayoutContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LayoutContext {
	var p = new(LayoutContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_layout

	return p
}

func (s *LayoutContext) GetParser() antlr.Parser { return s.parser }

func (s *LayoutContext) GetIndexMode() antlr.Token { return s.indexMode }

func (s *LayoutContext) SetIndexMode(v antlr.Token) { s.indexMode = v }

func (s *LayoutContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LayoutContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LayoutContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterLayout(s)
	}
}

func (s *LayoutContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitLayout(s)
	}
}

func (s *LayoutContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitLayout(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) Layout() (localctx ILayoutContext) {
	this := p
	_ = this

	localctx = NewLayoutContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 176, A2LParserRULE_layout)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1197)
		p.Match(A2LParserT__120)
	}
	{
		p.SetState(1198)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*LayoutContext).indexMode = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == A2LParserT__121 || _la == A2LParserT__122) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*LayoutContext).indexMode = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IReadWriteContext is an interface to support dynamic dispatch.
type IReadWriteContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsReadWriteContext differentiates from other interfaces.
	IsReadWriteContext()
}

type ReadWriteContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReadWriteContext() *ReadWriteContext {
	var p = new(ReadWriteContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_readWrite
	return p
}

func (*ReadWriteContext) IsReadWriteContext() {}

func NewReadWriteContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReadWriteContext {
	var p = new(ReadWriteContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_readWrite

	return p
}

func (s *ReadWriteContext) GetParser() antlr.Parser { return s.parser }
func (s *ReadWriteContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReadWriteContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReadWriteContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterReadWrite(s)
	}
}

func (s *ReadWriteContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitReadWrite(s)
	}
}

func (s *ReadWriteContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitReadWrite(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) ReadWrite() (localctx IReadWriteContext) {
	this := p
	_ = this

	localctx = NewReadWriteContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 178, A2LParserRULE_readWrite)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1200)
		p.Match(A2LParserT__123)
	}

	return localctx
}

// IVirtualContext is an interface to support dynamic dispatch.
type IVirtualContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_identifierValue returns the _identifierValue rule contexts.
	Get_identifierValue() IIdentifierValueContext

	// Set_identifierValue sets the _identifierValue rule contexts.
	Set_identifierValue(IIdentifierValueContext)

	// GetMeasuringChannel returns the measuringChannel rule context list.
	GetMeasuringChannel() []IIdentifierValueContext

	// SetMeasuringChannel sets the measuringChannel rule context list.
	SetMeasuringChannel([]IIdentifierValueContext)

	// Getter signatures
	BEGIN() antlr.TerminalNode
	END() antlr.TerminalNode
	AllIdentifierValue() []IIdentifierValueContext
	IdentifierValue(i int) IIdentifierValueContext

	// IsVirtualContext differentiates from other interfaces.
	IsVirtualContext()
}

type VirtualContext struct {
	*antlr.BaseParserRuleContext
	parser           antlr.Parser
	_identifierValue IIdentifierValueContext
	measuringChannel []IIdentifierValueContext
}

func NewEmptyVirtualContext() *VirtualContext {
	var p = new(VirtualContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_virtual
	return p
}

func (*VirtualContext) IsVirtualContext() {}

func NewVirtualContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VirtualContext {
	var p = new(VirtualContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_virtual

	return p
}

func (s *VirtualContext) GetParser() antlr.Parser { return s.parser }

func (s *VirtualContext) Get_identifierValue() IIdentifierValueContext { return s._identifierValue }

func (s *VirtualContext) Set_identifierValue(v IIdentifierValueContext) { s._identifierValue = v }

func (s *VirtualContext) GetMeasuringChannel() []IIdentifierValueContext { return s.measuringChannel }

func (s *VirtualContext) SetMeasuringChannel(v []IIdentifierValueContext) { s.measuringChannel = v }

func (s *VirtualContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(A2LParserBEGIN, 0)
}

func (s *VirtualContext) END() antlr.TerminalNode {
	return s.GetToken(A2LParserEND, 0)
}

func (s *VirtualContext) AllIdentifierValue() []IIdentifierValueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierValueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierValueContext); ok {
			tst[i] = t.(IIdentifierValueContext)
			i++
		}
	}

	return tst
}

func (s *VirtualContext) IdentifierValue(i int) IIdentifierValueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierValueContext)
}

func (s *VirtualContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VirtualContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VirtualContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterVirtual(s)
	}
}

func (s *VirtualContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitVirtual(s)
	}
}

func (s *VirtualContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitVirtual(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) Virtual() (localctx IVirtualContext) {
	this := p
	_ = this

	localctx = NewVirtualContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 180, A2LParserRULE_virtual)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1202)
		p.Match(A2LParserBEGIN)
	}
	{
		p.SetState(1203)
		p.Match(A2LParserT__124)
	}
	p.SetState(1207)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == A2LParserIDENT {
		{
			p.SetState(1204)

			var _x = p.IdentifierValue()

			localctx.(*VirtualContext)._identifierValue = _x
		}
		localctx.(*VirtualContext).measuringChannel = append(localctx.(*VirtualContext).measuringChannel, localctx.(*VirtualContext)._identifierValue)

		p.SetState(1209)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1210)
		p.Match(A2LParserEND)
	}
	{
		p.SetState(1211)
		p.Match(A2LParserT__124)
	}

	return localctx
}

// IModCommonContext is an interface to support dynamic dispatch.
type IModCommonContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetComment returns the comment rule contexts.
	GetComment() IStringValueContext

	// Get_alignmentByte returns the _alignmentByte rule contexts.
	Get_alignmentByte() IAlignmentByteContext

	// Get_alignmentFloat16Ieee returns the _alignmentFloat16Ieee rule contexts.
	Get_alignmentFloat16Ieee() IAlignmentFloat16IeeeContext

	// Get_alignmentFloat32Ieee returns the _alignmentFloat32Ieee rule contexts.
	Get_alignmentFloat32Ieee() IAlignmentFloat32IeeeContext

	// Get_alignmentFloat64Ieee returns the _alignmentFloat64Ieee rule contexts.
	Get_alignmentFloat64Ieee() IAlignmentFloat64IeeeContext

	// Get_alignmentInt64 returns the _alignmentInt64 rule contexts.
	Get_alignmentInt64() IAlignmentInt64Context

	// Get_alignmentLong returns the _alignmentLong rule contexts.
	Get_alignmentLong() IAlignmentLongContext

	// Get_alignmentWord returns the _alignmentWord rule contexts.
	Get_alignmentWord() IAlignmentWordContext

	// Get_byteOrder returns the _byteOrder rule contexts.
	Get_byteOrder() IByteOrderContext

	// Get_dataSize returns the _dataSize rule contexts.
	Get_dataSize() IDataSizeContext

	// Get_deposit returns the _deposit rule contexts.
	Get_deposit() IDepositContext

	// Get_sRecLayout returns the _sRecLayout rule contexts.
	Get_sRecLayout() ISRecLayoutContext

	// SetComment sets the comment rule contexts.
	SetComment(IStringValueContext)

	// Set_alignmentByte sets the _alignmentByte rule contexts.
	Set_alignmentByte(IAlignmentByteContext)

	// Set_alignmentFloat16Ieee sets the _alignmentFloat16Ieee rule contexts.
	Set_alignmentFloat16Ieee(IAlignmentFloat16IeeeContext)

	// Set_alignmentFloat32Ieee sets the _alignmentFloat32Ieee rule contexts.
	Set_alignmentFloat32Ieee(IAlignmentFloat32IeeeContext)

	// Set_alignmentFloat64Ieee sets the _alignmentFloat64Ieee rule contexts.
	Set_alignmentFloat64Ieee(IAlignmentFloat64IeeeContext)

	// Set_alignmentInt64 sets the _alignmentInt64 rule contexts.
	Set_alignmentInt64(IAlignmentInt64Context)

	// Set_alignmentLong sets the _alignmentLong rule contexts.
	Set_alignmentLong(IAlignmentLongContext)

	// Set_alignmentWord sets the _alignmentWord rule contexts.
	Set_alignmentWord(IAlignmentWordContext)

	// Set_byteOrder sets the _byteOrder rule contexts.
	Set_byteOrder(IByteOrderContext)

	// Set_dataSize sets the _dataSize rule contexts.
	Set_dataSize(IDataSizeContext)

	// Set_deposit sets the _deposit rule contexts.
	Set_deposit(IDepositContext)

	// Set_sRecLayout sets the _sRecLayout rule contexts.
	Set_sRecLayout(ISRecLayoutContext)

	// GetV_alignmentByte returns the v_alignmentByte rule context list.
	GetV_alignmentByte() []IAlignmentByteContext

	// GetV_alignmentFloat16Ieee returns the v_alignmentFloat16Ieee rule context list.
	GetV_alignmentFloat16Ieee() []IAlignmentFloat16IeeeContext

	// GetV_alignmentFloat32Ieee returns the v_alignmentFloat32Ieee rule context list.
	GetV_alignmentFloat32Ieee() []IAlignmentFloat32IeeeContext

	// GetV_alignmentFloat64Ieee returns the v_alignmentFloat64Ieee rule context list.
	GetV_alignmentFloat64Ieee() []IAlignmentFloat64IeeeContext

	// GetV_alignmentInt64 returns the v_alignmentInt64 rule context list.
	GetV_alignmentInt64() []IAlignmentInt64Context

	// GetV_alignmentLong returns the v_alignmentLong rule context list.
	GetV_alignmentLong() []IAlignmentLongContext

	// GetV_alignmentWord returns the v_alignmentWord rule context list.
	GetV_alignmentWord() []IAlignmentWordContext

	// GetV_byteOrder returns the v_byteOrder rule context list.
	GetV_byteOrder() []IByteOrderContext

	// GetV_dataSize returns the v_dataSize rule context list.
	GetV_dataSize() []IDataSizeContext

	// GetV_deposit returns the v_deposit rule context list.
	GetV_deposit() []IDepositContext

	// GetV_sRecLayout returns the v_sRecLayout rule context list.
	GetV_sRecLayout() []ISRecLayoutContext

	// SetV_alignmentByte sets the v_alignmentByte rule context list.
	SetV_alignmentByte([]IAlignmentByteContext)

	// SetV_alignmentFloat16Ieee sets the v_alignmentFloat16Ieee rule context list.
	SetV_alignmentFloat16Ieee([]IAlignmentFloat16IeeeContext)

	// SetV_alignmentFloat32Ieee sets the v_alignmentFloat32Ieee rule context list.
	SetV_alignmentFloat32Ieee([]IAlignmentFloat32IeeeContext)

	// SetV_alignmentFloat64Ieee sets the v_alignmentFloat64Ieee rule context list.
	SetV_alignmentFloat64Ieee([]IAlignmentFloat64IeeeContext)

	// SetV_alignmentInt64 sets the v_alignmentInt64 rule context list.
	SetV_alignmentInt64([]IAlignmentInt64Context)

	// SetV_alignmentLong sets the v_alignmentLong rule context list.
	SetV_alignmentLong([]IAlignmentLongContext)

	// SetV_alignmentWord sets the v_alignmentWord rule context list.
	SetV_alignmentWord([]IAlignmentWordContext)

	// SetV_byteOrder sets the v_byteOrder rule context list.
	SetV_byteOrder([]IByteOrderContext)

	// SetV_dataSize sets the v_dataSize rule context list.
	SetV_dataSize([]IDataSizeContext)

	// SetV_deposit sets the v_deposit rule context list.
	SetV_deposit([]IDepositContext)

	// SetV_sRecLayout sets the v_sRecLayout rule context list.
	SetV_sRecLayout([]ISRecLayoutContext)

	// Getter signatures
	BEGIN() antlr.TerminalNode
	END() antlr.TerminalNode
	StringValue() IStringValueContext
	AllAlignmentByte() []IAlignmentByteContext
	AlignmentByte(i int) IAlignmentByteContext
	AllAlignmentFloat16Ieee() []IAlignmentFloat16IeeeContext
	AlignmentFloat16Ieee(i int) IAlignmentFloat16IeeeContext
	AllAlignmentFloat32Ieee() []IAlignmentFloat32IeeeContext
	AlignmentFloat32Ieee(i int) IAlignmentFloat32IeeeContext
	AllAlignmentFloat64Ieee() []IAlignmentFloat64IeeeContext
	AlignmentFloat64Ieee(i int) IAlignmentFloat64IeeeContext
	AllAlignmentInt64() []IAlignmentInt64Context
	AlignmentInt64(i int) IAlignmentInt64Context
	AllAlignmentLong() []IAlignmentLongContext
	AlignmentLong(i int) IAlignmentLongContext
	AllAlignmentWord() []IAlignmentWordContext
	AlignmentWord(i int) IAlignmentWordContext
	AllByteOrder() []IByteOrderContext
	ByteOrder(i int) IByteOrderContext
	AllDataSize() []IDataSizeContext
	DataSize(i int) IDataSizeContext
	AllDeposit() []IDepositContext
	Deposit(i int) IDepositContext
	AllSRecLayout() []ISRecLayoutContext
	SRecLayout(i int) ISRecLayoutContext

	// IsModCommonContext differentiates from other interfaces.
	IsModCommonContext()
}

type ModCommonContext struct {
	*antlr.BaseParserRuleContext
	parser                 antlr.Parser
	comment                IStringValueContext
	_alignmentByte         IAlignmentByteContext
	v_alignmentByte        []IAlignmentByteContext
	_alignmentFloat16Ieee  IAlignmentFloat16IeeeContext
	v_alignmentFloat16Ieee []IAlignmentFloat16IeeeContext
	_alignmentFloat32Ieee  IAlignmentFloat32IeeeContext
	v_alignmentFloat32Ieee []IAlignmentFloat32IeeeContext
	_alignmentFloat64Ieee  IAlignmentFloat64IeeeContext
	v_alignmentFloat64Ieee []IAlignmentFloat64IeeeContext
	_alignmentInt64        IAlignmentInt64Context
	v_alignmentInt64       []IAlignmentInt64Context
	_alignmentLong         IAlignmentLongContext
	v_alignmentLong        []IAlignmentLongContext
	_alignmentWord         IAlignmentWordContext
	v_alignmentWord        []IAlignmentWordContext
	_byteOrder             IByteOrderContext
	v_byteOrder            []IByteOrderContext
	_dataSize              IDataSizeContext
	v_dataSize             []IDataSizeContext
	_deposit               IDepositContext
	v_deposit              []IDepositContext
	_sRecLayout            ISRecLayoutContext
	v_sRecLayout           []ISRecLayoutContext
}

func NewEmptyModCommonContext() *ModCommonContext {
	var p = new(ModCommonContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_modCommon
	return p
}

func (*ModCommonContext) IsModCommonContext() {}

func NewModCommonContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ModCommonContext {
	var p = new(ModCommonContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_modCommon

	return p
}

func (s *ModCommonContext) GetParser() antlr.Parser { return s.parser }

func (s *ModCommonContext) GetComment() IStringValueContext { return s.comment }

func (s *ModCommonContext) Get_alignmentByte() IAlignmentByteContext { return s._alignmentByte }

func (s *ModCommonContext) Get_alignmentFloat16Ieee() IAlignmentFloat16IeeeContext {
	return s._alignmentFloat16Ieee
}

func (s *ModCommonContext) Get_alignmentFloat32Ieee() IAlignmentFloat32IeeeContext {
	return s._alignmentFloat32Ieee
}

func (s *ModCommonContext) Get_alignmentFloat64Ieee() IAlignmentFloat64IeeeContext {
	return s._alignmentFloat64Ieee
}

func (s *ModCommonContext) Get_alignmentInt64() IAlignmentInt64Context { return s._alignmentInt64 }

func (s *ModCommonContext) Get_alignmentLong() IAlignmentLongContext { return s._alignmentLong }

func (s *ModCommonContext) Get_alignmentWord() IAlignmentWordContext { return s._alignmentWord }

func (s *ModCommonContext) Get_byteOrder() IByteOrderContext { return s._byteOrder }

func (s *ModCommonContext) Get_dataSize() IDataSizeContext { return s._dataSize }

func (s *ModCommonContext) Get_deposit() IDepositContext { return s._deposit }

func (s *ModCommonContext) Get_sRecLayout() ISRecLayoutContext { return s._sRecLayout }

func (s *ModCommonContext) SetComment(v IStringValueContext) { s.comment = v }

func (s *ModCommonContext) Set_alignmentByte(v IAlignmentByteContext) { s._alignmentByte = v }

func (s *ModCommonContext) Set_alignmentFloat16Ieee(v IAlignmentFloat16IeeeContext) {
	s._alignmentFloat16Ieee = v
}

func (s *ModCommonContext) Set_alignmentFloat32Ieee(v IAlignmentFloat32IeeeContext) {
	s._alignmentFloat32Ieee = v
}

func (s *ModCommonContext) Set_alignmentFloat64Ieee(v IAlignmentFloat64IeeeContext) {
	s._alignmentFloat64Ieee = v
}

func (s *ModCommonContext) Set_alignmentInt64(v IAlignmentInt64Context) { s._alignmentInt64 = v }

func (s *ModCommonContext) Set_alignmentLong(v IAlignmentLongContext) { s._alignmentLong = v }

func (s *ModCommonContext) Set_alignmentWord(v IAlignmentWordContext) { s._alignmentWord = v }

func (s *ModCommonContext) Set_byteOrder(v IByteOrderContext) { s._byteOrder = v }

func (s *ModCommonContext) Set_dataSize(v IDataSizeContext) { s._dataSize = v }

func (s *ModCommonContext) Set_deposit(v IDepositContext) { s._deposit = v }

func (s *ModCommonContext) Set_sRecLayout(v ISRecLayoutContext) { s._sRecLayout = v }

func (s *ModCommonContext) GetV_alignmentByte() []IAlignmentByteContext { return s.v_alignmentByte }

func (s *ModCommonContext) GetV_alignmentFloat16Ieee() []IAlignmentFloat16IeeeContext {
	return s.v_alignmentFloat16Ieee
}

func (s *ModCommonContext) GetV_alignmentFloat32Ieee() []IAlignmentFloat32IeeeContext {
	return s.v_alignmentFloat32Ieee
}

func (s *ModCommonContext) GetV_alignmentFloat64Ieee() []IAlignmentFloat64IeeeContext {
	return s.v_alignmentFloat64Ieee
}

func (s *ModCommonContext) GetV_alignmentInt64() []IAlignmentInt64Context { return s.v_alignmentInt64 }

func (s *ModCommonContext) GetV_alignmentLong() []IAlignmentLongContext { return s.v_alignmentLong }

func (s *ModCommonContext) GetV_alignmentWord() []IAlignmentWordContext { return s.v_alignmentWord }

func (s *ModCommonContext) GetV_byteOrder() []IByteOrderContext { return s.v_byteOrder }

func (s *ModCommonContext) GetV_dataSize() []IDataSizeContext { return s.v_dataSize }

func (s *ModCommonContext) GetV_deposit() []IDepositContext { return s.v_deposit }

func (s *ModCommonContext) GetV_sRecLayout() []ISRecLayoutContext { return s.v_sRecLayout }

func (s *ModCommonContext) SetV_alignmentByte(v []IAlignmentByteContext) { s.v_alignmentByte = v }

func (s *ModCommonContext) SetV_alignmentFloat16Ieee(v []IAlignmentFloat16IeeeContext) {
	s.v_alignmentFloat16Ieee = v
}

func (s *ModCommonContext) SetV_alignmentFloat32Ieee(v []IAlignmentFloat32IeeeContext) {
	s.v_alignmentFloat32Ieee = v
}

func (s *ModCommonContext) SetV_alignmentFloat64Ieee(v []IAlignmentFloat64IeeeContext) {
	s.v_alignmentFloat64Ieee = v
}

func (s *ModCommonContext) SetV_alignmentInt64(v []IAlignmentInt64Context) { s.v_alignmentInt64 = v }

func (s *ModCommonContext) SetV_alignmentLong(v []IAlignmentLongContext) { s.v_alignmentLong = v }

func (s *ModCommonContext) SetV_alignmentWord(v []IAlignmentWordContext) { s.v_alignmentWord = v }

func (s *ModCommonContext) SetV_byteOrder(v []IByteOrderContext) { s.v_byteOrder = v }

func (s *ModCommonContext) SetV_dataSize(v []IDataSizeContext) { s.v_dataSize = v }

func (s *ModCommonContext) SetV_deposit(v []IDepositContext) { s.v_deposit = v }

func (s *ModCommonContext) SetV_sRecLayout(v []ISRecLayoutContext) { s.v_sRecLayout = v }

func (s *ModCommonContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(A2LParserBEGIN, 0)
}

func (s *ModCommonContext) END() antlr.TerminalNode {
	return s.GetToken(A2LParserEND, 0)
}

func (s *ModCommonContext) StringValue() IStringValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringValueContext)
}

func (s *ModCommonContext) AllAlignmentByte() []IAlignmentByteContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAlignmentByteContext); ok {
			len++
		}
	}

	tst := make([]IAlignmentByteContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAlignmentByteContext); ok {
			tst[i] = t.(IAlignmentByteContext)
			i++
		}
	}

	return tst
}

func (s *ModCommonContext) AlignmentByte(i int) IAlignmentByteContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlignmentByteContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlignmentByteContext)
}

func (s *ModCommonContext) AllAlignmentFloat16Ieee() []IAlignmentFloat16IeeeContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAlignmentFloat16IeeeContext); ok {
			len++
		}
	}

	tst := make([]IAlignmentFloat16IeeeContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAlignmentFloat16IeeeContext); ok {
			tst[i] = t.(IAlignmentFloat16IeeeContext)
			i++
		}
	}

	return tst
}

func (s *ModCommonContext) AlignmentFloat16Ieee(i int) IAlignmentFloat16IeeeContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlignmentFloat16IeeeContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlignmentFloat16IeeeContext)
}

func (s *ModCommonContext) AllAlignmentFloat32Ieee() []IAlignmentFloat32IeeeContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAlignmentFloat32IeeeContext); ok {
			len++
		}
	}

	tst := make([]IAlignmentFloat32IeeeContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAlignmentFloat32IeeeContext); ok {
			tst[i] = t.(IAlignmentFloat32IeeeContext)
			i++
		}
	}

	return tst
}

func (s *ModCommonContext) AlignmentFloat32Ieee(i int) IAlignmentFloat32IeeeContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlignmentFloat32IeeeContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlignmentFloat32IeeeContext)
}

func (s *ModCommonContext) AllAlignmentFloat64Ieee() []IAlignmentFloat64IeeeContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAlignmentFloat64IeeeContext); ok {
			len++
		}
	}

	tst := make([]IAlignmentFloat64IeeeContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAlignmentFloat64IeeeContext); ok {
			tst[i] = t.(IAlignmentFloat64IeeeContext)
			i++
		}
	}

	return tst
}

func (s *ModCommonContext) AlignmentFloat64Ieee(i int) IAlignmentFloat64IeeeContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlignmentFloat64IeeeContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlignmentFloat64IeeeContext)
}

func (s *ModCommonContext) AllAlignmentInt64() []IAlignmentInt64Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAlignmentInt64Context); ok {
			len++
		}
	}

	tst := make([]IAlignmentInt64Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAlignmentInt64Context); ok {
			tst[i] = t.(IAlignmentInt64Context)
			i++
		}
	}

	return tst
}

func (s *ModCommonContext) AlignmentInt64(i int) IAlignmentInt64Context {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlignmentInt64Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlignmentInt64Context)
}

func (s *ModCommonContext) AllAlignmentLong() []IAlignmentLongContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAlignmentLongContext); ok {
			len++
		}
	}

	tst := make([]IAlignmentLongContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAlignmentLongContext); ok {
			tst[i] = t.(IAlignmentLongContext)
			i++
		}
	}

	return tst
}

func (s *ModCommonContext) AlignmentLong(i int) IAlignmentLongContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlignmentLongContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlignmentLongContext)
}

func (s *ModCommonContext) AllAlignmentWord() []IAlignmentWordContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAlignmentWordContext); ok {
			len++
		}
	}

	tst := make([]IAlignmentWordContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAlignmentWordContext); ok {
			tst[i] = t.(IAlignmentWordContext)
			i++
		}
	}

	return tst
}

func (s *ModCommonContext) AlignmentWord(i int) IAlignmentWordContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlignmentWordContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlignmentWordContext)
}

func (s *ModCommonContext) AllByteOrder() []IByteOrderContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IByteOrderContext); ok {
			len++
		}
	}

	tst := make([]IByteOrderContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IByteOrderContext); ok {
			tst[i] = t.(IByteOrderContext)
			i++
		}
	}

	return tst
}

func (s *ModCommonContext) ByteOrder(i int) IByteOrderContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IByteOrderContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IByteOrderContext)
}

func (s *ModCommonContext) AllDataSize() []IDataSizeContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDataSizeContext); ok {
			len++
		}
	}

	tst := make([]IDataSizeContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDataSizeContext); ok {
			tst[i] = t.(IDataSizeContext)
			i++
		}
	}

	return tst
}

func (s *ModCommonContext) DataSize(i int) IDataSizeContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDataSizeContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDataSizeContext)
}

func (s *ModCommonContext) AllDeposit() []IDepositContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDepositContext); ok {
			len++
		}
	}

	tst := make([]IDepositContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDepositContext); ok {
			tst[i] = t.(IDepositContext)
			i++
		}
	}

	return tst
}

func (s *ModCommonContext) Deposit(i int) IDepositContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDepositContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDepositContext)
}

func (s *ModCommonContext) AllSRecLayout() []ISRecLayoutContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISRecLayoutContext); ok {
			len++
		}
	}

	tst := make([]ISRecLayoutContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISRecLayoutContext); ok {
			tst[i] = t.(ISRecLayoutContext)
			i++
		}
	}

	return tst
}

func (s *ModCommonContext) SRecLayout(i int) ISRecLayoutContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISRecLayoutContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISRecLayoutContext)
}

func (s *ModCommonContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ModCommonContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ModCommonContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterModCommon(s)
	}
}

func (s *ModCommonContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitModCommon(s)
	}
}

func (s *ModCommonContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitModCommon(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) ModCommon() (localctx IModCommonContext) {
	this := p
	_ = this

	localctx = NewModCommonContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 182, A2LParserRULE_modCommon)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1213)
		p.Match(A2LParserBEGIN)
	}
	{
		p.SetState(1214)
		p.Match(A2LParserT__125)
	}
	{
		p.SetState(1215)

		var _x = p.StringValue()

		localctx.(*ModCommonContext).comment = _x
	}
	p.SetState(1229)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&1057022) != 0) || _la == A2LParserT__126 || _la == A2LParserT__127 {
		p.SetState(1227)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case A2LParserT__0:
			{
				p.SetState(1216)

				var _x = p.AlignmentByte()

				localctx.(*ModCommonContext)._alignmentByte = _x
			}
			localctx.(*ModCommonContext).v_alignmentByte = append(localctx.(*ModCommonContext).v_alignmentByte, localctx.(*ModCommonContext)._alignmentByte)

		case A2LParserT__1:
			{
				p.SetState(1217)

				var _x = p.AlignmentFloat16Ieee()

				localctx.(*ModCommonContext)._alignmentFloat16Ieee = _x
			}
			localctx.(*ModCommonContext).v_alignmentFloat16Ieee = append(localctx.(*ModCommonContext).v_alignmentFloat16Ieee, localctx.(*ModCommonContext)._alignmentFloat16Ieee)

		case A2LParserT__2:
			{
				p.SetState(1218)

				var _x = p.AlignmentFloat32Ieee()

				localctx.(*ModCommonContext)._alignmentFloat32Ieee = _x
			}
			localctx.(*ModCommonContext).v_alignmentFloat32Ieee = append(localctx.(*ModCommonContext).v_alignmentFloat32Ieee, localctx.(*ModCommonContext)._alignmentFloat32Ieee)

		case A2LParserT__3:
			{
				p.SetState(1219)

				var _x = p.AlignmentFloat64Ieee()

				localctx.(*ModCommonContext)._alignmentFloat64Ieee = _x
			}
			localctx.(*ModCommonContext).v_alignmentFloat64Ieee = append(localctx.(*ModCommonContext).v_alignmentFloat64Ieee, localctx.(*ModCommonContext)._alignmentFloat64Ieee)

		case A2LParserT__4:
			{
				p.SetState(1220)

				var _x = p.AlignmentInt64()

				localctx.(*ModCommonContext)._alignmentInt64 = _x
			}
			localctx.(*ModCommonContext).v_alignmentInt64 = append(localctx.(*ModCommonContext).v_alignmentInt64, localctx.(*ModCommonContext)._alignmentInt64)

		case A2LParserT__5:
			{
				p.SetState(1221)

				var _x = p.AlignmentLong()

				localctx.(*ModCommonContext)._alignmentLong = _x
			}
			localctx.(*ModCommonContext).v_alignmentLong = append(localctx.(*ModCommonContext).v_alignmentLong, localctx.(*ModCommonContext)._alignmentLong)

		case A2LParserT__6:
			{
				p.SetState(1222)

				var _x = p.AlignmentWord()

				localctx.(*ModCommonContext)._alignmentWord = _x
			}
			localctx.(*ModCommonContext).v_alignmentWord = append(localctx.(*ModCommonContext).v_alignmentWord, localctx.(*ModCommonContext)._alignmentWord)

		case A2LParserT__12:
			{
				p.SetState(1223)

				var _x = p.ByteOrder()

				localctx.(*ModCommonContext)._byteOrder = _x
			}
			localctx.(*ModCommonContext).v_byteOrder = append(localctx.(*ModCommonContext).v_byteOrder, localctx.(*ModCommonContext)._byteOrder)

		case A2LParserT__126:
			{
				p.SetState(1224)

				var _x = p.DataSize()

				localctx.(*ModCommonContext)._dataSize = _x
			}
			localctx.(*ModCommonContext).v_dataSize = append(localctx.(*ModCommonContext).v_dataSize, localctx.(*ModCommonContext)._dataSize)

		case A2LParserT__19:
			{
				p.SetState(1225)

				var _x = p.Deposit()

				localctx.(*ModCommonContext)._deposit = _x
			}
			localctx.(*ModCommonContext).v_deposit = append(localctx.(*ModCommonContext).v_deposit, localctx.(*ModCommonContext)._deposit)

		case A2LParserT__127:
			{
				p.SetState(1226)

				var _x = p.SRecLayout()

				localctx.(*ModCommonContext)._sRecLayout = _x
			}
			localctx.(*ModCommonContext).v_sRecLayout = append(localctx.(*ModCommonContext).v_sRecLayout, localctx.(*ModCommonContext)._sRecLayout)

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(1231)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1232)
		p.Match(A2LParserEND)
	}
	{
		p.SetState(1233)
		p.Match(A2LParserT__125)
	}

	return localctx
}

// IDataSizeContext is an interface to support dynamic dispatch.
type IDataSizeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetSize returns the size rule contexts.
	GetSize() IIntegerValueContext

	// SetSize sets the size rule contexts.
	SetSize(IIntegerValueContext)

	// Getter signatures
	IntegerValue() IIntegerValueContext

	// IsDataSizeContext differentiates from other interfaces.
	IsDataSizeContext()
}

type DataSizeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	size   IIntegerValueContext
}

func NewEmptyDataSizeContext() *DataSizeContext {
	var p = new(DataSizeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_dataSize
	return p
}

func (*DataSizeContext) IsDataSizeContext() {}

func NewDataSizeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DataSizeContext {
	var p = new(DataSizeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_dataSize

	return p
}

func (s *DataSizeContext) GetParser() antlr.Parser { return s.parser }

func (s *DataSizeContext) GetSize() IIntegerValueContext { return s.size }

func (s *DataSizeContext) SetSize(v IIntegerValueContext) { s.size = v }

func (s *DataSizeContext) IntegerValue() IIntegerValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *DataSizeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DataSizeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DataSizeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterDataSize(s)
	}
}

func (s *DataSizeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitDataSize(s)
	}
}

func (s *DataSizeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitDataSize(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) DataSize() (localctx IDataSizeContext) {
	this := p
	_ = this

	localctx = NewDataSizeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 184, A2LParserRULE_dataSize)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1235)
		p.Match(A2LParserT__126)
	}
	{
		p.SetState(1236)

		var _x = p.IntegerValue()

		localctx.(*DataSizeContext).size = _x
	}

	return localctx
}

// ISRecLayoutContext is an interface to support dynamic dispatch.
type ISRecLayoutContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierValueContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierValueContext)

	// Getter signatures
	IdentifierValue() IIdentifierValueContext

	// IsSRecLayoutContext differentiates from other interfaces.
	IsSRecLayoutContext()
}

type SRecLayoutContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name   IIdentifierValueContext
}

func NewEmptySRecLayoutContext() *SRecLayoutContext {
	var p = new(SRecLayoutContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_sRecLayout
	return p
}

func (*SRecLayoutContext) IsSRecLayoutContext() {}

func NewSRecLayoutContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SRecLayoutContext {
	var p = new(SRecLayoutContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_sRecLayout

	return p
}

func (s *SRecLayoutContext) GetParser() antlr.Parser { return s.parser }

func (s *SRecLayoutContext) GetName() IIdentifierValueContext { return s.name }

func (s *SRecLayoutContext) SetName(v IIdentifierValueContext) { s.name = v }

func (s *SRecLayoutContext) IdentifierValue() IIdentifierValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierValueContext)
}

func (s *SRecLayoutContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SRecLayoutContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SRecLayoutContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterSRecLayout(s)
	}
}

func (s *SRecLayoutContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitSRecLayout(s)
	}
}

func (s *SRecLayoutContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitSRecLayout(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) SRecLayout() (localctx ISRecLayoutContext) {
	this := p
	_ = this

	localctx = NewSRecLayoutContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 186, A2LParserRULE_sRecLayout)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1238)
		p.Match(A2LParserT__127)
	}
	{
		p.SetState(1239)

		var _x = p.IdentifierValue()

		localctx.(*SRecLayoutContext).name = _x
	}

	return localctx
}

// IModParContext is an interface to support dynamic dispatch.
type IModParContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetComment returns the comment rule contexts.
	GetComment() IStringValueContext

	// Get_addrEpk returns the _addrEpk rule contexts.
	Get_addrEpk() IAddrEpkContext

	// Get_calibrationMethod returns the _calibrationMethod rule contexts.
	Get_calibrationMethod() ICalibrationMethodContext

	// Get_cpuType returns the _cpuType rule contexts.
	Get_cpuType() ICpuTypeContext

	// Get_customer returns the _customer rule contexts.
	Get_customer() ICustomerContext

	// Get_customerNo returns the _customerNo rule contexts.
	Get_customerNo() ICustomerNoContext

	// Get_ecu returns the _ecu rule contexts.
	Get_ecu() IEcuContext

	// Get_ecuCalibrationOffset returns the _ecuCalibrationOffset rule contexts.
	Get_ecuCalibrationOffset() IEcuCalibrationOffsetContext

	// GetVEpk returns the vEpk rule contexts.
	GetVEpk() IEpkContext

	// Get_memoryLayout returns the _memoryLayout rule contexts.
	Get_memoryLayout() IMemoryLayoutContext

	// Get_memorySegment returns the _memorySegment rule contexts.
	Get_memorySegment() IMemorySegmentContext

	// Get_noOfInterfaces returns the _noOfInterfaces rule contexts.
	Get_noOfInterfaces() INoOfInterfacesContext

	// Get_phoneNo returns the _phoneNo rule contexts.
	Get_phoneNo() IPhoneNoContext

	// Get_supplier returns the _supplier rule contexts.
	Get_supplier() ISupplierContext

	// Get_systemConstant returns the _systemConstant rule contexts.
	Get_systemConstant() ISystemConstantContext

	// Get_user returns the _user rule contexts.
	Get_user() IUserContext

	// Get_version returns the _version rule contexts.
	Get_version() IVersionContext

	// SetComment sets the comment rule contexts.
	SetComment(IStringValueContext)

	// Set_addrEpk sets the _addrEpk rule contexts.
	Set_addrEpk(IAddrEpkContext)

	// Set_calibrationMethod sets the _calibrationMethod rule contexts.
	Set_calibrationMethod(ICalibrationMethodContext)

	// Set_cpuType sets the _cpuType rule contexts.
	Set_cpuType(ICpuTypeContext)

	// Set_customer sets the _customer rule contexts.
	Set_customer(ICustomerContext)

	// Set_customerNo sets the _customerNo rule contexts.
	Set_customerNo(ICustomerNoContext)

	// Set_ecu sets the _ecu rule contexts.
	Set_ecu(IEcuContext)

	// Set_ecuCalibrationOffset sets the _ecuCalibrationOffset rule contexts.
	Set_ecuCalibrationOffset(IEcuCalibrationOffsetContext)

	// SetVEpk sets the vEpk rule contexts.
	SetVEpk(IEpkContext)

	// Set_memoryLayout sets the _memoryLayout rule contexts.
	Set_memoryLayout(IMemoryLayoutContext)

	// Set_memorySegment sets the _memorySegment rule contexts.
	Set_memorySegment(IMemorySegmentContext)

	// Set_noOfInterfaces sets the _noOfInterfaces rule contexts.
	Set_noOfInterfaces(INoOfInterfacesContext)

	// Set_phoneNo sets the _phoneNo rule contexts.
	Set_phoneNo(IPhoneNoContext)

	// Set_supplier sets the _supplier rule contexts.
	Set_supplier(ISupplierContext)

	// Set_systemConstant sets the _systemConstant rule contexts.
	Set_systemConstant(ISystemConstantContext)

	// Set_user sets the _user rule contexts.
	Set_user(IUserContext)

	// Set_version sets the _version rule contexts.
	Set_version(IVersionContext)

	// GetVAddrEpk returns the vAddrEpk rule context list.
	GetVAddrEpk() []IAddrEpkContext

	// GetV_calibrationMethod returns the v_calibrationMethod rule context list.
	GetV_calibrationMethod() []ICalibrationMethodContext

	// GetV_cpuType returns the v_cpuType rule context list.
	GetV_cpuType() []ICpuTypeContext

	// GetV_customer returns the v_customer rule context list.
	GetV_customer() []ICustomerContext

	// GetV_customerNo returns the v_customerNo rule context list.
	GetV_customerNo() []ICustomerNoContext

	// GetV_ecu returns the v_ecu rule context list.
	GetV_ecu() []IEcuContext

	// GetV_ecuCalibrationOffset returns the v_ecuCalibrationOffset rule context list.
	GetV_ecuCalibrationOffset() []IEcuCalibrationOffsetContext

	// GetV_memoryLayout returns the v_memoryLayout rule context list.
	GetV_memoryLayout() []IMemoryLayoutContext

	// GetV_memorySegment returns the v_memorySegment rule context list.
	GetV_memorySegment() []IMemorySegmentContext

	// GetV_noOfInterfaces returns the v_noOfInterfaces rule context list.
	GetV_noOfInterfaces() []INoOfInterfacesContext

	// GetV_phoneNo returns the v_phoneNo rule context list.
	GetV_phoneNo() []IPhoneNoContext

	// GetV_supplier returns the v_supplier rule context list.
	GetV_supplier() []ISupplierContext

	// GetV_systemConstant returns the v_systemConstant rule context list.
	GetV_systemConstant() []ISystemConstantContext

	// GetV_user returns the v_user rule context list.
	GetV_user() []IUserContext

	// GetV_version returns the v_version rule context list.
	GetV_version() []IVersionContext

	// SetVAddrEpk sets the vAddrEpk rule context list.
	SetVAddrEpk([]IAddrEpkContext)

	// SetV_calibrationMethod sets the v_calibrationMethod rule context list.
	SetV_calibrationMethod([]ICalibrationMethodContext)

	// SetV_cpuType sets the v_cpuType rule context list.
	SetV_cpuType([]ICpuTypeContext)

	// SetV_customer sets the v_customer rule context list.
	SetV_customer([]ICustomerContext)

	// SetV_customerNo sets the v_customerNo rule context list.
	SetV_customerNo([]ICustomerNoContext)

	// SetV_ecu sets the v_ecu rule context list.
	SetV_ecu([]IEcuContext)

	// SetV_ecuCalibrationOffset sets the v_ecuCalibrationOffset rule context list.
	SetV_ecuCalibrationOffset([]IEcuCalibrationOffsetContext)

	// SetV_memoryLayout sets the v_memoryLayout rule context list.
	SetV_memoryLayout([]IMemoryLayoutContext)

	// SetV_memorySegment sets the v_memorySegment rule context list.
	SetV_memorySegment([]IMemorySegmentContext)

	// SetV_noOfInterfaces sets the v_noOfInterfaces rule context list.
	SetV_noOfInterfaces([]INoOfInterfacesContext)

	// SetV_phoneNo sets the v_phoneNo rule context list.
	SetV_phoneNo([]IPhoneNoContext)

	// SetV_supplier sets the v_supplier rule context list.
	SetV_supplier([]ISupplierContext)

	// SetV_systemConstant sets the v_systemConstant rule context list.
	SetV_systemConstant([]ISystemConstantContext)

	// SetV_user sets the v_user rule context list.
	SetV_user([]IUserContext)

	// SetV_version sets the v_version rule context list.
	SetV_version([]IVersionContext)

	// Getter signatures
	BEGIN() antlr.TerminalNode
	END() antlr.TerminalNode
	StringValue() IStringValueContext
	AllAddrEpk() []IAddrEpkContext
	AddrEpk(i int) IAddrEpkContext
	AllCalibrationMethod() []ICalibrationMethodContext
	CalibrationMethod(i int) ICalibrationMethodContext
	AllCpuType() []ICpuTypeContext
	CpuType(i int) ICpuTypeContext
	AllCustomer() []ICustomerContext
	Customer(i int) ICustomerContext
	AllCustomerNo() []ICustomerNoContext
	CustomerNo(i int) ICustomerNoContext
	AllEcu() []IEcuContext
	Ecu(i int) IEcuContext
	AllEcuCalibrationOffset() []IEcuCalibrationOffsetContext
	EcuCalibrationOffset(i int) IEcuCalibrationOffsetContext
	AllEpk() []IEpkContext
	Epk(i int) IEpkContext
	AllMemoryLayout() []IMemoryLayoutContext
	MemoryLayout(i int) IMemoryLayoutContext
	AllMemorySegment() []IMemorySegmentContext
	MemorySegment(i int) IMemorySegmentContext
	AllNoOfInterfaces() []INoOfInterfacesContext
	NoOfInterfaces(i int) INoOfInterfacesContext
	AllPhoneNo() []IPhoneNoContext
	PhoneNo(i int) IPhoneNoContext
	AllSupplier() []ISupplierContext
	Supplier(i int) ISupplierContext
	AllSystemConstant() []ISystemConstantContext
	SystemConstant(i int) ISystemConstantContext
	AllUser() []IUserContext
	User(i int) IUserContext
	AllVersion() []IVersionContext
	Version(i int) IVersionContext

	// IsModParContext differentiates from other interfaces.
	IsModParContext()
}

type ModParContext struct {
	*antlr.BaseParserRuleContext
	parser                 antlr.Parser
	comment                IStringValueContext
	_addrEpk               IAddrEpkContext
	vAddrEpk               []IAddrEpkContext
	_calibrationMethod     ICalibrationMethodContext
	v_calibrationMethod    []ICalibrationMethodContext
	_cpuType               ICpuTypeContext
	v_cpuType              []ICpuTypeContext
	_customer              ICustomerContext
	v_customer             []ICustomerContext
	_customerNo            ICustomerNoContext
	v_customerNo           []ICustomerNoContext
	_ecu                   IEcuContext
	v_ecu                  []IEcuContext
	_ecuCalibrationOffset  IEcuCalibrationOffsetContext
	v_ecuCalibrationOffset []IEcuCalibrationOffsetContext
	vEpk                   IEpkContext
	_memoryLayout          IMemoryLayoutContext
	v_memoryLayout         []IMemoryLayoutContext
	_memorySegment         IMemorySegmentContext
	v_memorySegment        []IMemorySegmentContext
	_noOfInterfaces        INoOfInterfacesContext
	v_noOfInterfaces       []INoOfInterfacesContext
	_phoneNo               IPhoneNoContext
	v_phoneNo              []IPhoneNoContext
	_supplier              ISupplierContext
	v_supplier             []ISupplierContext
	_systemConstant        ISystemConstantContext
	v_systemConstant       []ISystemConstantContext
	_user                  IUserContext
	v_user                 []IUserContext
	_version               IVersionContext
	v_version              []IVersionContext
}

func NewEmptyModParContext() *ModParContext {
	var p = new(ModParContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_modPar
	return p
}

func (*ModParContext) IsModParContext() {}

func NewModParContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ModParContext {
	var p = new(ModParContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_modPar

	return p
}

func (s *ModParContext) GetParser() antlr.Parser { return s.parser }

func (s *ModParContext) GetComment() IStringValueContext { return s.comment }

func (s *ModParContext) Get_addrEpk() IAddrEpkContext { return s._addrEpk }

func (s *ModParContext) Get_calibrationMethod() ICalibrationMethodContext {
	return s._calibrationMethod
}

func (s *ModParContext) Get_cpuType() ICpuTypeContext { return s._cpuType }

func (s *ModParContext) Get_customer() ICustomerContext { return s._customer }

func (s *ModParContext) Get_customerNo() ICustomerNoContext { return s._customerNo }

func (s *ModParContext) Get_ecu() IEcuContext { return s._ecu }

func (s *ModParContext) Get_ecuCalibrationOffset() IEcuCalibrationOffsetContext {
	return s._ecuCalibrationOffset
}

func (s *ModParContext) GetVEpk() IEpkContext { return s.vEpk }

func (s *ModParContext) Get_memoryLayout() IMemoryLayoutContext { return s._memoryLayout }

func (s *ModParContext) Get_memorySegment() IMemorySegmentContext { return s._memorySegment }

func (s *ModParContext) Get_noOfInterfaces() INoOfInterfacesContext { return s._noOfInterfaces }

func (s *ModParContext) Get_phoneNo() IPhoneNoContext { return s._phoneNo }

func (s *ModParContext) Get_supplier() ISupplierContext { return s._supplier }

func (s *ModParContext) Get_systemConstant() ISystemConstantContext { return s._systemConstant }

func (s *ModParContext) Get_user() IUserContext { return s._user }

func (s *ModParContext) Get_version() IVersionContext { return s._version }

func (s *ModParContext) SetComment(v IStringValueContext) { s.comment = v }

func (s *ModParContext) Set_addrEpk(v IAddrEpkContext) { s._addrEpk = v }

func (s *ModParContext) Set_calibrationMethod(v ICalibrationMethodContext) { s._calibrationMethod = v }

func (s *ModParContext) Set_cpuType(v ICpuTypeContext) { s._cpuType = v }

func (s *ModParContext) Set_customer(v ICustomerContext) { s._customer = v }

func (s *ModParContext) Set_customerNo(v ICustomerNoContext) { s._customerNo = v }

func (s *ModParContext) Set_ecu(v IEcuContext) { s._ecu = v }

func (s *ModParContext) Set_ecuCalibrationOffset(v IEcuCalibrationOffsetContext) {
	s._ecuCalibrationOffset = v
}

func (s *ModParContext) SetVEpk(v IEpkContext) { s.vEpk = v }

func (s *ModParContext) Set_memoryLayout(v IMemoryLayoutContext) { s._memoryLayout = v }

func (s *ModParContext) Set_memorySegment(v IMemorySegmentContext) { s._memorySegment = v }

func (s *ModParContext) Set_noOfInterfaces(v INoOfInterfacesContext) { s._noOfInterfaces = v }

func (s *ModParContext) Set_phoneNo(v IPhoneNoContext) { s._phoneNo = v }

func (s *ModParContext) Set_supplier(v ISupplierContext) { s._supplier = v }

func (s *ModParContext) Set_systemConstant(v ISystemConstantContext) { s._systemConstant = v }

func (s *ModParContext) Set_user(v IUserContext) { s._user = v }

func (s *ModParContext) Set_version(v IVersionContext) { s._version = v }

func (s *ModParContext) GetVAddrEpk() []IAddrEpkContext { return s.vAddrEpk }

func (s *ModParContext) GetV_calibrationMethod() []ICalibrationMethodContext {
	return s.v_calibrationMethod
}

func (s *ModParContext) GetV_cpuType() []ICpuTypeContext { return s.v_cpuType }

func (s *ModParContext) GetV_customer() []ICustomerContext { return s.v_customer }

func (s *ModParContext) GetV_customerNo() []ICustomerNoContext { return s.v_customerNo }

func (s *ModParContext) GetV_ecu() []IEcuContext { return s.v_ecu }

func (s *ModParContext) GetV_ecuCalibrationOffset() []IEcuCalibrationOffsetContext {
	return s.v_ecuCalibrationOffset
}

func (s *ModParContext) GetV_memoryLayout() []IMemoryLayoutContext { return s.v_memoryLayout }

func (s *ModParContext) GetV_memorySegment() []IMemorySegmentContext { return s.v_memorySegment }

func (s *ModParContext) GetV_noOfInterfaces() []INoOfInterfacesContext { return s.v_noOfInterfaces }

func (s *ModParContext) GetV_phoneNo() []IPhoneNoContext { return s.v_phoneNo }

func (s *ModParContext) GetV_supplier() []ISupplierContext { return s.v_supplier }

func (s *ModParContext) GetV_systemConstant() []ISystemConstantContext { return s.v_systemConstant }

func (s *ModParContext) GetV_user() []IUserContext { return s.v_user }

func (s *ModParContext) GetV_version() []IVersionContext { return s.v_version }

func (s *ModParContext) SetVAddrEpk(v []IAddrEpkContext) { s.vAddrEpk = v }

func (s *ModParContext) SetV_calibrationMethod(v []ICalibrationMethodContext) {
	s.v_calibrationMethod = v
}

func (s *ModParContext) SetV_cpuType(v []ICpuTypeContext) { s.v_cpuType = v }

func (s *ModParContext) SetV_customer(v []ICustomerContext) { s.v_customer = v }

func (s *ModParContext) SetV_customerNo(v []ICustomerNoContext) { s.v_customerNo = v }

func (s *ModParContext) SetV_ecu(v []IEcuContext) { s.v_ecu = v }

func (s *ModParContext) SetV_ecuCalibrationOffset(v []IEcuCalibrationOffsetContext) {
	s.v_ecuCalibrationOffset = v
}

func (s *ModParContext) SetV_memoryLayout(v []IMemoryLayoutContext) { s.v_memoryLayout = v }

func (s *ModParContext) SetV_memorySegment(v []IMemorySegmentContext) { s.v_memorySegment = v }

func (s *ModParContext) SetV_noOfInterfaces(v []INoOfInterfacesContext) { s.v_noOfInterfaces = v }

func (s *ModParContext) SetV_phoneNo(v []IPhoneNoContext) { s.v_phoneNo = v }

func (s *ModParContext) SetV_supplier(v []ISupplierContext) { s.v_supplier = v }

func (s *ModParContext) SetV_systemConstant(v []ISystemConstantContext) { s.v_systemConstant = v }

func (s *ModParContext) SetV_user(v []IUserContext) { s.v_user = v }

func (s *ModParContext) SetV_version(v []IVersionContext) { s.v_version = v }

func (s *ModParContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(A2LParserBEGIN, 0)
}

func (s *ModParContext) END() antlr.TerminalNode {
	return s.GetToken(A2LParserEND, 0)
}

func (s *ModParContext) StringValue() IStringValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringValueContext)
}

func (s *ModParContext) AllAddrEpk() []IAddrEpkContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAddrEpkContext); ok {
			len++
		}
	}

	tst := make([]IAddrEpkContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAddrEpkContext); ok {
			tst[i] = t.(IAddrEpkContext)
			i++
		}
	}

	return tst
}

func (s *ModParContext) AddrEpk(i int) IAddrEpkContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAddrEpkContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAddrEpkContext)
}

func (s *ModParContext) AllCalibrationMethod() []ICalibrationMethodContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ICalibrationMethodContext); ok {
			len++
		}
	}

	tst := make([]ICalibrationMethodContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ICalibrationMethodContext); ok {
			tst[i] = t.(ICalibrationMethodContext)
			i++
		}
	}

	return tst
}

func (s *ModParContext) CalibrationMethod(i int) ICalibrationMethodContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICalibrationMethodContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICalibrationMethodContext)
}

func (s *ModParContext) AllCpuType() []ICpuTypeContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ICpuTypeContext); ok {
			len++
		}
	}

	tst := make([]ICpuTypeContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ICpuTypeContext); ok {
			tst[i] = t.(ICpuTypeContext)
			i++
		}
	}

	return tst
}

func (s *ModParContext) CpuType(i int) ICpuTypeContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICpuTypeContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICpuTypeContext)
}

func (s *ModParContext) AllCustomer() []ICustomerContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ICustomerContext); ok {
			len++
		}
	}

	tst := make([]ICustomerContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ICustomerContext); ok {
			tst[i] = t.(ICustomerContext)
			i++
		}
	}

	return tst
}

func (s *ModParContext) Customer(i int) ICustomerContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICustomerContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICustomerContext)
}

func (s *ModParContext) AllCustomerNo() []ICustomerNoContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ICustomerNoContext); ok {
			len++
		}
	}

	tst := make([]ICustomerNoContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ICustomerNoContext); ok {
			tst[i] = t.(ICustomerNoContext)
			i++
		}
	}

	return tst
}

func (s *ModParContext) CustomerNo(i int) ICustomerNoContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICustomerNoContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICustomerNoContext)
}

func (s *ModParContext) AllEcu() []IEcuContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IEcuContext); ok {
			len++
		}
	}

	tst := make([]IEcuContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IEcuContext); ok {
			tst[i] = t.(IEcuContext)
			i++
		}
	}

	return tst
}

func (s *ModParContext) Ecu(i int) IEcuContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEcuContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEcuContext)
}

func (s *ModParContext) AllEcuCalibrationOffset() []IEcuCalibrationOffsetContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IEcuCalibrationOffsetContext); ok {
			len++
		}
	}

	tst := make([]IEcuCalibrationOffsetContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IEcuCalibrationOffsetContext); ok {
			tst[i] = t.(IEcuCalibrationOffsetContext)
			i++
		}
	}

	return tst
}

func (s *ModParContext) EcuCalibrationOffset(i int) IEcuCalibrationOffsetContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEcuCalibrationOffsetContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEcuCalibrationOffsetContext)
}

func (s *ModParContext) AllEpk() []IEpkContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IEpkContext); ok {
			len++
		}
	}

	tst := make([]IEpkContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IEpkContext); ok {
			tst[i] = t.(IEpkContext)
			i++
		}
	}

	return tst
}

func (s *ModParContext) Epk(i int) IEpkContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEpkContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEpkContext)
}

func (s *ModParContext) AllMemoryLayout() []IMemoryLayoutContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IMemoryLayoutContext); ok {
			len++
		}
	}

	tst := make([]IMemoryLayoutContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IMemoryLayoutContext); ok {
			tst[i] = t.(IMemoryLayoutContext)
			i++
		}
	}

	return tst
}

func (s *ModParContext) MemoryLayout(i int) IMemoryLayoutContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMemoryLayoutContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMemoryLayoutContext)
}

func (s *ModParContext) AllMemorySegment() []IMemorySegmentContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IMemorySegmentContext); ok {
			len++
		}
	}

	tst := make([]IMemorySegmentContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IMemorySegmentContext); ok {
			tst[i] = t.(IMemorySegmentContext)
			i++
		}
	}

	return tst
}

func (s *ModParContext) MemorySegment(i int) IMemorySegmentContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMemorySegmentContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMemorySegmentContext)
}

func (s *ModParContext) AllNoOfInterfaces() []INoOfInterfacesContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INoOfInterfacesContext); ok {
			len++
		}
	}

	tst := make([]INoOfInterfacesContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INoOfInterfacesContext); ok {
			tst[i] = t.(INoOfInterfacesContext)
			i++
		}
	}

	return tst
}

func (s *ModParContext) NoOfInterfaces(i int) INoOfInterfacesContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INoOfInterfacesContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INoOfInterfacesContext)
}

func (s *ModParContext) AllPhoneNo() []IPhoneNoContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IPhoneNoContext); ok {
			len++
		}
	}

	tst := make([]IPhoneNoContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IPhoneNoContext); ok {
			tst[i] = t.(IPhoneNoContext)
			i++
		}
	}

	return tst
}

func (s *ModParContext) PhoneNo(i int) IPhoneNoContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPhoneNoContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPhoneNoContext)
}

func (s *ModParContext) AllSupplier() []ISupplierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISupplierContext); ok {
			len++
		}
	}

	tst := make([]ISupplierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISupplierContext); ok {
			tst[i] = t.(ISupplierContext)
			i++
		}
	}

	return tst
}

func (s *ModParContext) Supplier(i int) ISupplierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISupplierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISupplierContext)
}

func (s *ModParContext) AllSystemConstant() []ISystemConstantContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISystemConstantContext); ok {
			len++
		}
	}

	tst := make([]ISystemConstantContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISystemConstantContext); ok {
			tst[i] = t.(ISystemConstantContext)
			i++
		}
	}

	return tst
}

func (s *ModParContext) SystemConstant(i int) ISystemConstantContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISystemConstantContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISystemConstantContext)
}

func (s *ModParContext) AllUser() []IUserContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IUserContext); ok {
			len++
		}
	}

	tst := make([]IUserContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IUserContext); ok {
			tst[i] = t.(IUserContext)
			i++
		}
	}

	return tst
}

func (s *ModParContext) User(i int) IUserContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUserContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUserContext)
}

func (s *ModParContext) AllVersion() []IVersionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IVersionContext); ok {
			len++
		}
	}

	tst := make([]IVersionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IVersionContext); ok {
			tst[i] = t.(IVersionContext)
			i++
		}
	}

	return tst
}

func (s *ModParContext) Version(i int) IVersionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVersionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVersionContext)
}

func (s *ModParContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ModParContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ModParContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterModPar(s)
	}
}

func (s *ModParContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitModPar(s)
	}
}

func (s *ModParContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitModPar(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) ModPar() (localctx IModParContext) {
	this := p
	_ = this

	localctx = NewModParContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 188, A2LParserRULE_modPar)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1241)
		p.Match(A2LParserBEGIN)
	}
	{
		p.SetState(1242)
		p.Match(A2LParserT__128)
	}
	{
		p.SetState(1243)

		var _x = p.StringValue()

		localctx.(*ModParContext).comment = _x
	}
	p.SetState(1262)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == A2LParserT__46 || ((int64((_la-130)) & ^0x3f) == 0 && ((int64(1)<<(_la-130))&33285997049) != 0) || _la == A2LParserBEGIN {
		p.SetState(1260)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 57, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(1244)

				var _x = p.AddrEpk()

				localctx.(*ModParContext)._addrEpk = _x
			}
			localctx.(*ModParContext).vAddrEpk = append(localctx.(*ModParContext).vAddrEpk, localctx.(*ModParContext)._addrEpk)

		case 2:
			{
				p.SetState(1245)

				var _x = p.CalibrationMethod()

				localctx.(*ModParContext)._calibrationMethod = _x
			}
			localctx.(*ModParContext).v_calibrationMethod = append(localctx.(*ModParContext).v_calibrationMethod, localctx.(*ModParContext)._calibrationMethod)

		case 3:
			{
				p.SetState(1246)

				var _x = p.CpuType()

				localctx.(*ModParContext)._cpuType = _x
			}
			localctx.(*ModParContext).v_cpuType = append(localctx.(*ModParContext).v_cpuType, localctx.(*ModParContext)._cpuType)

		case 4:
			{
				p.SetState(1247)

				var _x = p.Customer()

				localctx.(*ModParContext)._customer = _x
			}
			localctx.(*ModParContext).v_customer = append(localctx.(*ModParContext).v_customer, localctx.(*ModParContext)._customer)

		case 5:
			{
				p.SetState(1248)

				var _x = p.CustomerNo()

				localctx.(*ModParContext)._customerNo = _x
			}
			localctx.(*ModParContext).v_customerNo = append(localctx.(*ModParContext).v_customerNo, localctx.(*ModParContext)._customerNo)

		case 6:
			{
				p.SetState(1249)

				var _x = p.Ecu()

				localctx.(*ModParContext)._ecu = _x
			}
			localctx.(*ModParContext).v_ecu = append(localctx.(*ModParContext).v_ecu, localctx.(*ModParContext)._ecu)

		case 7:
			{
				p.SetState(1250)

				var _x = p.EcuCalibrationOffset()

				localctx.(*ModParContext)._ecuCalibrationOffset = _x
			}
			localctx.(*ModParContext).v_ecuCalibrationOffset = append(localctx.(*ModParContext).v_ecuCalibrationOffset, localctx.(*ModParContext)._ecuCalibrationOffset)

		case 8:
			{
				p.SetState(1251)

				var _x = p.Epk()

				localctx.(*ModParContext).vEpk = _x
			}

		case 9:
			{
				p.SetState(1252)

				var _x = p.MemoryLayout()

				localctx.(*ModParContext)._memoryLayout = _x
			}
			localctx.(*ModParContext).v_memoryLayout = append(localctx.(*ModParContext).v_memoryLayout, localctx.(*ModParContext)._memoryLayout)

		case 10:
			{
				p.SetState(1253)

				var _x = p.MemorySegment()

				localctx.(*ModParContext)._memorySegment = _x
			}
			localctx.(*ModParContext).v_memorySegment = append(localctx.(*ModParContext).v_memorySegment, localctx.(*ModParContext)._memorySegment)

		case 11:
			{
				p.SetState(1254)

				var _x = p.NoOfInterfaces()

				localctx.(*ModParContext)._noOfInterfaces = _x
			}
			localctx.(*ModParContext).v_noOfInterfaces = append(localctx.(*ModParContext).v_noOfInterfaces, localctx.(*ModParContext)._noOfInterfaces)

		case 12:
			{
				p.SetState(1255)

				var _x = p.PhoneNo()

				localctx.(*ModParContext)._phoneNo = _x
			}
			localctx.(*ModParContext).v_phoneNo = append(localctx.(*ModParContext).v_phoneNo, localctx.(*ModParContext)._phoneNo)

		case 13:
			{
				p.SetState(1256)

				var _x = p.Supplier()

				localctx.(*ModParContext)._supplier = _x
			}
			localctx.(*ModParContext).v_supplier = append(localctx.(*ModParContext).v_supplier, localctx.(*ModParContext)._supplier)

		case 14:
			{
				p.SetState(1257)

				var _x = p.SystemConstant()

				localctx.(*ModParContext)._systemConstant = _x
			}
			localctx.(*ModParContext).v_systemConstant = append(localctx.(*ModParContext).v_systemConstant, localctx.(*ModParContext)._systemConstant)

		case 15:
			{
				p.SetState(1258)

				var _x = p.User()

				localctx.(*ModParContext)._user = _x
			}
			localctx.(*ModParContext).v_user = append(localctx.(*ModParContext).v_user, localctx.(*ModParContext)._user)

		case 16:
			{
				p.SetState(1259)

				var _x = p.Version()

				localctx.(*ModParContext)._version = _x
			}
			localctx.(*ModParContext).v_version = append(localctx.(*ModParContext).v_version, localctx.(*ModParContext)._version)

		}

		p.SetState(1264)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1265)
		p.Match(A2LParserEND)
	}
	{
		p.SetState(1266)
		p.Match(A2LParserT__128)
	}

	return localctx
}

// IAddrEpkContext is an interface to support dynamic dispatch.
type IAddrEpkContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetAddress returns the address rule contexts.
	GetAddress() IIntegerValueContext

	// SetAddress sets the address rule contexts.
	SetAddress(IIntegerValueContext)

	// Getter signatures
	IntegerValue() IIntegerValueContext

	// IsAddrEpkContext differentiates from other interfaces.
	IsAddrEpkContext()
}

type AddrEpkContext struct {
	*antlr.BaseParserRuleContext
	parser  antlr.Parser
	address IIntegerValueContext
}

func NewEmptyAddrEpkContext() *AddrEpkContext {
	var p = new(AddrEpkContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_addrEpk
	return p
}

func (*AddrEpkContext) IsAddrEpkContext() {}

func NewAddrEpkContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AddrEpkContext {
	var p = new(AddrEpkContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_addrEpk

	return p
}

func (s *AddrEpkContext) GetParser() antlr.Parser { return s.parser }

func (s *AddrEpkContext) GetAddress() IIntegerValueContext { return s.address }

func (s *AddrEpkContext) SetAddress(v IIntegerValueContext) { s.address = v }

func (s *AddrEpkContext) IntegerValue() IIntegerValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *AddrEpkContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AddrEpkContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AddrEpkContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterAddrEpk(s)
	}
}

func (s *AddrEpkContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitAddrEpk(s)
	}
}

func (s *AddrEpkContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitAddrEpk(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) AddrEpk() (localctx IAddrEpkContext) {
	this := p
	_ = this

	localctx = NewAddrEpkContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 190, A2LParserRULE_addrEpk)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1268)
		p.Match(A2LParserT__129)
	}
	{
		p.SetState(1269)

		var _x = p.IntegerValue()

		localctx.(*AddrEpkContext).address = _x
	}

	return localctx
}

// ICalibrationMethodContext is an interface to support dynamic dispatch.
type ICalibrationMethodContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetMethod returns the method rule contexts.
	GetMethod() IStringValueContext

	// GetVersion_ returns the version_ rule contexts.
	GetVersion_() IIntegerValueContext

	// Get_calibrationHandle returns the _calibrationHandle rule contexts.
	Get_calibrationHandle() ICalibrationHandleContext

	// SetMethod sets the method rule contexts.
	SetMethod(IStringValueContext)

	// SetVersion_ sets the version_ rule contexts.
	SetVersion_(IIntegerValueContext)

	// Set_calibrationHandle sets the _calibrationHandle rule contexts.
	Set_calibrationHandle(ICalibrationHandleContext)

	// GetV_calibrationHandle returns the v_calibrationHandle rule context list.
	GetV_calibrationHandle() []ICalibrationHandleContext

	// SetV_calibrationHandle sets the v_calibrationHandle rule context list.
	SetV_calibrationHandle([]ICalibrationHandleContext)

	// Getter signatures
	BEGIN() antlr.TerminalNode
	END() antlr.TerminalNode
	StringValue() IStringValueContext
	IntegerValue() IIntegerValueContext
	AllCalibrationHandle() []ICalibrationHandleContext
	CalibrationHandle(i int) ICalibrationHandleContext

	// IsCalibrationMethodContext differentiates from other interfaces.
	IsCalibrationMethodContext()
}

type CalibrationMethodContext struct {
	*antlr.BaseParserRuleContext
	parser              antlr.Parser
	method              IStringValueContext
	version_            IIntegerValueContext
	_calibrationHandle  ICalibrationHandleContext
	v_calibrationHandle []ICalibrationHandleContext
}

func NewEmptyCalibrationMethodContext() *CalibrationMethodContext {
	var p = new(CalibrationMethodContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_calibrationMethod
	return p
}

func (*CalibrationMethodContext) IsCalibrationMethodContext() {}

func NewCalibrationMethodContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CalibrationMethodContext {
	var p = new(CalibrationMethodContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_calibrationMethod

	return p
}

func (s *CalibrationMethodContext) GetParser() antlr.Parser { return s.parser }

func (s *CalibrationMethodContext) GetMethod() IStringValueContext { return s.method }

func (s *CalibrationMethodContext) GetVersion_() IIntegerValueContext { return s.version_ }

func (s *CalibrationMethodContext) Get_calibrationHandle() ICalibrationHandleContext {
	return s._calibrationHandle
}

func (s *CalibrationMethodContext) SetMethod(v IStringValueContext) { s.method = v }

func (s *CalibrationMethodContext) SetVersion_(v IIntegerValueContext) { s.version_ = v }

func (s *CalibrationMethodContext) Set_calibrationHandle(v ICalibrationHandleContext) {
	s._calibrationHandle = v
}

func (s *CalibrationMethodContext) GetV_calibrationHandle() []ICalibrationHandleContext {
	return s.v_calibrationHandle
}

func (s *CalibrationMethodContext) SetV_calibrationHandle(v []ICalibrationHandleContext) {
	s.v_calibrationHandle = v
}

func (s *CalibrationMethodContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(A2LParserBEGIN, 0)
}

func (s *CalibrationMethodContext) END() antlr.TerminalNode {
	return s.GetToken(A2LParserEND, 0)
}

func (s *CalibrationMethodContext) StringValue() IStringValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringValueContext)
}

func (s *CalibrationMethodContext) IntegerValue() IIntegerValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *CalibrationMethodContext) AllCalibrationHandle() []ICalibrationHandleContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ICalibrationHandleContext); ok {
			len++
		}
	}

	tst := make([]ICalibrationHandleContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ICalibrationHandleContext); ok {
			tst[i] = t.(ICalibrationHandleContext)
			i++
		}
	}

	return tst
}

func (s *CalibrationMethodContext) CalibrationHandle(i int) ICalibrationHandleContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICalibrationHandleContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICalibrationHandleContext)
}

func (s *CalibrationMethodContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CalibrationMethodContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CalibrationMethodContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterCalibrationMethod(s)
	}
}

func (s *CalibrationMethodContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitCalibrationMethod(s)
	}
}

func (s *CalibrationMethodContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitCalibrationMethod(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) CalibrationMethod() (localctx ICalibrationMethodContext) {
	this := p
	_ = this

	localctx = NewCalibrationMethodContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 192, A2LParserRULE_calibrationMethod)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1271)
		p.Match(A2LParserBEGIN)
	}
	{
		p.SetState(1272)
		p.Match(A2LParserT__130)
	}
	{
		p.SetState(1273)

		var _x = p.StringValue()

		localctx.(*CalibrationMethodContext).method = _x
	}
	{
		p.SetState(1274)

		var _x = p.IntegerValue()

		localctx.(*CalibrationMethodContext).version_ = _x
	}
	p.SetState(1278)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == A2LParserBEGIN {
		{
			p.SetState(1275)

			var _x = p.CalibrationHandle()

			localctx.(*CalibrationMethodContext)._calibrationHandle = _x
		}
		localctx.(*CalibrationMethodContext).v_calibrationHandle = append(localctx.(*CalibrationMethodContext).v_calibrationHandle, localctx.(*CalibrationMethodContext)._calibrationHandle)

		p.SetState(1280)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1281)
		p.Match(A2LParserEND)
	}
	{
		p.SetState(1282)
		p.Match(A2LParserT__130)
	}

	return localctx
}

// ICalibrationHandleContext is an interface to support dynamic dispatch.
type ICalibrationHandleContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_integerValue returns the _integerValue rule contexts.
	Get_integerValue() IIntegerValueContext

	// Set_integerValue sets the _integerValue rule contexts.
	Set_integerValue(IIntegerValueContext)

	// GetHandle returns the handle rule context list.
	GetHandle() []IIntegerValueContext

	// SetHandle sets the handle rule context list.
	SetHandle([]IIntegerValueContext)

	// Getter signatures
	BEGIN() antlr.TerminalNode
	END() antlr.TerminalNode
	AllIntegerValue() []IIntegerValueContext
	IntegerValue(i int) IIntegerValueContext

	// IsCalibrationHandleContext differentiates from other interfaces.
	IsCalibrationHandleContext()
}

type CalibrationHandleContext struct {
	*antlr.BaseParserRuleContext
	parser        antlr.Parser
	_integerValue IIntegerValueContext
	handle        []IIntegerValueContext
}

func NewEmptyCalibrationHandleContext() *CalibrationHandleContext {
	var p = new(CalibrationHandleContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_calibrationHandle
	return p
}

func (*CalibrationHandleContext) IsCalibrationHandleContext() {}

func NewCalibrationHandleContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CalibrationHandleContext {
	var p = new(CalibrationHandleContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_calibrationHandle

	return p
}

func (s *CalibrationHandleContext) GetParser() antlr.Parser { return s.parser }

func (s *CalibrationHandleContext) Get_integerValue() IIntegerValueContext { return s._integerValue }

func (s *CalibrationHandleContext) Set_integerValue(v IIntegerValueContext) { s._integerValue = v }

func (s *CalibrationHandleContext) GetHandle() []IIntegerValueContext { return s.handle }

func (s *CalibrationHandleContext) SetHandle(v []IIntegerValueContext) { s.handle = v }

func (s *CalibrationHandleContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(A2LParserBEGIN, 0)
}

func (s *CalibrationHandleContext) END() antlr.TerminalNode {
	return s.GetToken(A2LParserEND, 0)
}

func (s *CalibrationHandleContext) AllIntegerValue() []IIntegerValueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIntegerValueContext); ok {
			len++
		}
	}

	tst := make([]IIntegerValueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIntegerValueContext); ok {
			tst[i] = t.(IIntegerValueContext)
			i++
		}
	}

	return tst
}

func (s *CalibrationHandleContext) IntegerValue(i int) IIntegerValueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *CalibrationHandleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CalibrationHandleContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CalibrationHandleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterCalibrationHandle(s)
	}
}

func (s *CalibrationHandleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitCalibrationHandle(s)
	}
}

func (s *CalibrationHandleContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitCalibrationHandle(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) CalibrationHandle() (localctx ICalibrationHandleContext) {
	this := p
	_ = this

	localctx = NewCalibrationHandleContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 194, A2LParserRULE_calibrationHandle)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1284)
		p.Match(A2LParserBEGIN)
	}
	{
		p.SetState(1285)
		p.Match(A2LParserT__131)
	}
	p.SetState(1289)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == A2LParserINT || _la == A2LParserHEX {
		{
			p.SetState(1286)

			var _x = p.IntegerValue()

			localctx.(*CalibrationHandleContext)._integerValue = _x
		}
		localctx.(*CalibrationHandleContext).handle = append(localctx.(*CalibrationHandleContext).handle, localctx.(*CalibrationHandleContext)._integerValue)

		p.SetState(1291)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1292)
		p.Match(A2LParserEND)
	}
	{
		p.SetState(1293)
		p.Match(A2LParserT__131)
	}

	return localctx
}

// ICpuTypeContext is an interface to support dynamic dispatch.
type ICpuTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetCPU returns the cPU rule contexts.
	GetCPU() IStringValueContext

	// SetCPU sets the cPU rule contexts.
	SetCPU(IStringValueContext)

	// Getter signatures
	StringValue() IStringValueContext

	// IsCpuTypeContext differentiates from other interfaces.
	IsCpuTypeContext()
}

type CpuTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	cPU    IStringValueContext
}

func NewEmptyCpuTypeContext() *CpuTypeContext {
	var p = new(CpuTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_cpuType
	return p
}

func (*CpuTypeContext) IsCpuTypeContext() {}

func NewCpuTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CpuTypeContext {
	var p = new(CpuTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_cpuType

	return p
}

func (s *CpuTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *CpuTypeContext) GetCPU() IStringValueContext { return s.cPU }

func (s *CpuTypeContext) SetCPU(v IStringValueContext) { s.cPU = v }

func (s *CpuTypeContext) StringValue() IStringValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringValueContext)
}

func (s *CpuTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CpuTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CpuTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterCpuType(s)
	}
}

func (s *CpuTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitCpuType(s)
	}
}

func (s *CpuTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitCpuType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) CpuType() (localctx ICpuTypeContext) {
	this := p
	_ = this

	localctx = NewCpuTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 196, A2LParserRULE_cpuType)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1295)
		p.Match(A2LParserT__132)
	}
	{
		p.SetState(1296)

		var _x = p.StringValue()

		localctx.(*CpuTypeContext).cPU = _x
	}

	return localctx
}

// ICustomerContext is an interface to support dynamic dispatch.
type ICustomerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetCustomer_ returns the customer_ rule contexts.
	GetCustomer_() IStringValueContext

	// SetCustomer_ sets the customer_ rule contexts.
	SetCustomer_(IStringValueContext)

	// Getter signatures
	StringValue() IStringValueContext

	// IsCustomerContext differentiates from other interfaces.
	IsCustomerContext()
}

type CustomerContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	customer_ IStringValueContext
}

func NewEmptyCustomerContext() *CustomerContext {
	var p = new(CustomerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_customer
	return p
}

func (*CustomerContext) IsCustomerContext() {}

func NewCustomerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CustomerContext {
	var p = new(CustomerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_customer

	return p
}

func (s *CustomerContext) GetParser() antlr.Parser { return s.parser }

func (s *CustomerContext) GetCustomer_() IStringValueContext { return s.customer_ }

func (s *CustomerContext) SetCustomer_(v IStringValueContext) { s.customer_ = v }

func (s *CustomerContext) StringValue() IStringValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringValueContext)
}

func (s *CustomerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CustomerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CustomerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterCustomer(s)
	}
}

func (s *CustomerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitCustomer(s)
	}
}

func (s *CustomerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitCustomer(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) Customer() (localctx ICustomerContext) {
	this := p
	_ = this

	localctx = NewCustomerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 198, A2LParserRULE_customer)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1298)
		p.Match(A2LParserT__133)
	}
	{
		p.SetState(1299)

		var _x = p.StringValue()

		localctx.(*CustomerContext).customer_ = _x
	}

	return localctx
}

// ICustomerNoContext is an interface to support dynamic dispatch.
type ICustomerNoContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetNumber_ returns the number_ rule contexts.
	GetNumber_() IStringValueContext

	// SetNumber_ sets the number_ rule contexts.
	SetNumber_(IStringValueContext)

	// Getter signatures
	StringValue() IStringValueContext

	// IsCustomerNoContext differentiates from other interfaces.
	IsCustomerNoContext()
}

type CustomerNoContext struct {
	*antlr.BaseParserRuleContext
	parser  antlr.Parser
	number_ IStringValueContext
}

func NewEmptyCustomerNoContext() *CustomerNoContext {
	var p = new(CustomerNoContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_customerNo
	return p
}

func (*CustomerNoContext) IsCustomerNoContext() {}

func NewCustomerNoContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CustomerNoContext {
	var p = new(CustomerNoContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_customerNo

	return p
}

func (s *CustomerNoContext) GetParser() antlr.Parser { return s.parser }

func (s *CustomerNoContext) GetNumber_() IStringValueContext { return s.number_ }

func (s *CustomerNoContext) SetNumber_(v IStringValueContext) { s.number_ = v }

func (s *CustomerNoContext) StringValue() IStringValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringValueContext)
}

func (s *CustomerNoContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CustomerNoContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CustomerNoContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterCustomerNo(s)
	}
}

func (s *CustomerNoContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitCustomerNo(s)
	}
}

func (s *CustomerNoContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitCustomerNo(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) CustomerNo() (localctx ICustomerNoContext) {
	this := p
	_ = this

	localctx = NewCustomerNoContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 200, A2LParserRULE_customerNo)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1301)
		p.Match(A2LParserT__134)
	}
	{
		p.SetState(1302)

		var _x = p.StringValue()

		localctx.(*CustomerNoContext).number_ = _x
	}

	return localctx
}

// IEcuContext is an interface to support dynamic dispatch.
type IEcuContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetControlUnit returns the controlUnit rule contexts.
	GetControlUnit() IStringValueContext

	// SetControlUnit sets the controlUnit rule contexts.
	SetControlUnit(IStringValueContext)

	// Getter signatures
	StringValue() IStringValueContext

	// IsEcuContext differentiates from other interfaces.
	IsEcuContext()
}

type EcuContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	controlUnit IStringValueContext
}

func NewEmptyEcuContext() *EcuContext {
	var p = new(EcuContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_ecu
	return p
}

func (*EcuContext) IsEcuContext() {}

func NewEcuContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EcuContext {
	var p = new(EcuContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_ecu

	return p
}

func (s *EcuContext) GetParser() antlr.Parser { return s.parser }

func (s *EcuContext) GetControlUnit() IStringValueContext { return s.controlUnit }

func (s *EcuContext) SetControlUnit(v IStringValueContext) { s.controlUnit = v }

func (s *EcuContext) StringValue() IStringValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringValueContext)
}

func (s *EcuContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EcuContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EcuContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterEcu(s)
	}
}

func (s *EcuContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitEcu(s)
	}
}

func (s *EcuContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitEcu(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) Ecu() (localctx IEcuContext) {
	this := p
	_ = this

	localctx = NewEcuContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 202, A2LParserRULE_ecu)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1304)
		p.Match(A2LParserT__135)
	}
	{
		p.SetState(1305)

		var _x = p.StringValue()

		localctx.(*EcuContext).controlUnit = _x
	}

	return localctx
}

// IEcuCalibrationOffsetContext is an interface to support dynamic dispatch.
type IEcuCalibrationOffsetContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOffset returns the offset rule contexts.
	GetOffset() IIntegerValueContext

	// SetOffset sets the offset rule contexts.
	SetOffset(IIntegerValueContext)

	// Getter signatures
	IntegerValue() IIntegerValueContext

	// IsEcuCalibrationOffsetContext differentiates from other interfaces.
	IsEcuCalibrationOffsetContext()
}

type EcuCalibrationOffsetContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	offset IIntegerValueContext
}

func NewEmptyEcuCalibrationOffsetContext() *EcuCalibrationOffsetContext {
	var p = new(EcuCalibrationOffsetContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_ecuCalibrationOffset
	return p
}

func (*EcuCalibrationOffsetContext) IsEcuCalibrationOffsetContext() {}

func NewEcuCalibrationOffsetContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EcuCalibrationOffsetContext {
	var p = new(EcuCalibrationOffsetContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_ecuCalibrationOffset

	return p
}

func (s *EcuCalibrationOffsetContext) GetParser() antlr.Parser { return s.parser }

func (s *EcuCalibrationOffsetContext) GetOffset() IIntegerValueContext { return s.offset }

func (s *EcuCalibrationOffsetContext) SetOffset(v IIntegerValueContext) { s.offset = v }

func (s *EcuCalibrationOffsetContext) IntegerValue() IIntegerValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *EcuCalibrationOffsetContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EcuCalibrationOffsetContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EcuCalibrationOffsetContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterEcuCalibrationOffset(s)
	}
}

func (s *EcuCalibrationOffsetContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitEcuCalibrationOffset(s)
	}
}

func (s *EcuCalibrationOffsetContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitEcuCalibrationOffset(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) EcuCalibrationOffset() (localctx IEcuCalibrationOffsetContext) {
	this := p
	_ = this

	localctx = NewEcuCalibrationOffsetContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 204, A2LParserRULE_ecuCalibrationOffset)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1307)
		p.Match(A2LParserT__136)
	}
	{
		p.SetState(1308)

		var _x = p.IntegerValue()

		localctx.(*EcuCalibrationOffsetContext).offset = _x
	}

	return localctx
}

// IEpkContext is an interface to support dynamic dispatch.
type IEpkContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetIdentifier returns the identifier rule contexts.
	GetIdentifier() IStringValueContext

	// SetIdentifier sets the identifier rule contexts.
	SetIdentifier(IStringValueContext)

	// Getter signatures
	StringValue() IStringValueContext

	// IsEpkContext differentiates from other interfaces.
	IsEpkContext()
}

type EpkContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	identifier IStringValueContext
}

func NewEmptyEpkContext() *EpkContext {
	var p = new(EpkContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_epk
	return p
}

func (*EpkContext) IsEpkContext() {}

func NewEpkContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EpkContext {
	var p = new(EpkContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_epk

	return p
}

func (s *EpkContext) GetParser() antlr.Parser { return s.parser }

func (s *EpkContext) GetIdentifier() IStringValueContext { return s.identifier }

func (s *EpkContext) SetIdentifier(v IStringValueContext) { s.identifier = v }

func (s *EpkContext) StringValue() IStringValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringValueContext)
}

func (s *EpkContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EpkContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EpkContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterEpk(s)
	}
}

func (s *EpkContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitEpk(s)
	}
}

func (s *EpkContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitEpk(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) Epk() (localctx IEpkContext) {
	this := p
	_ = this

	localctx = NewEpkContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 206, A2LParserRULE_epk)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1310)
		p.Match(A2LParserT__137)
	}
	{
		p.SetState(1311)

		var _x = p.StringValue()

		localctx.(*EpkContext).identifier = _x
	}

	return localctx
}

// IMemoryLayoutContext is an interface to support dynamic dispatch.
type IMemoryLayoutContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPrgType returns the prgType token.
	GetPrgType() antlr.Token

	// SetPrgType sets the prgType token.
	SetPrgType(antlr.Token)

	// GetAddress returns the address rule contexts.
	GetAddress() IIntegerValueContext

	// GetSize returns the size rule contexts.
	GetSize() IIntegerValueContext

	// GetOffset_0 returns the offset_0 rule contexts.
	GetOffset_0() IIntegerValueContext

	// GetOffset_1 returns the offset_1 rule contexts.
	GetOffset_1() IIntegerValueContext

	// GetOffset_2 returns the offset_2 rule contexts.
	GetOffset_2() IIntegerValueContext

	// GetOffset_3 returns the offset_3 rule contexts.
	GetOffset_3() IIntegerValueContext

	// GetOffset_4 returns the offset_4 rule contexts.
	GetOffset_4() IIntegerValueContext

	// Get_ifData returns the _ifData rule contexts.
	Get_ifData() IIfDataContext

	// SetAddress sets the address rule contexts.
	SetAddress(IIntegerValueContext)

	// SetSize sets the size rule contexts.
	SetSize(IIntegerValueContext)

	// SetOffset_0 sets the offset_0 rule contexts.
	SetOffset_0(IIntegerValueContext)

	// SetOffset_1 sets the offset_1 rule contexts.
	SetOffset_1(IIntegerValueContext)

	// SetOffset_2 sets the offset_2 rule contexts.
	SetOffset_2(IIntegerValueContext)

	// SetOffset_3 sets the offset_3 rule contexts.
	SetOffset_3(IIntegerValueContext)

	// SetOffset_4 sets the offset_4 rule contexts.
	SetOffset_4(IIntegerValueContext)

	// Set_ifData sets the _ifData rule contexts.
	Set_ifData(IIfDataContext)

	// GetV_ifData returns the v_ifData rule context list.
	GetV_ifData() []IIfDataContext

	// SetV_ifData sets the v_ifData rule context list.
	SetV_ifData([]IIfDataContext)

	// Getter signatures
	BEGIN() antlr.TerminalNode
	END() antlr.TerminalNode
	AllIntegerValue() []IIntegerValueContext
	IntegerValue(i int) IIntegerValueContext
	AllIfData() []IIfDataContext
	IfData(i int) IIfDataContext

	// IsMemoryLayoutContext differentiates from other interfaces.
	IsMemoryLayoutContext()
}

type MemoryLayoutContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	prgType  antlr.Token
	address  IIntegerValueContext
	size     IIntegerValueContext
	offset_0 IIntegerValueContext
	offset_1 IIntegerValueContext
	offset_2 IIntegerValueContext
	offset_3 IIntegerValueContext
	offset_4 IIntegerValueContext
	_ifData  IIfDataContext
	v_ifData []IIfDataContext
}

func NewEmptyMemoryLayoutContext() *MemoryLayoutContext {
	var p = new(MemoryLayoutContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_memoryLayout
	return p
}

func (*MemoryLayoutContext) IsMemoryLayoutContext() {}

func NewMemoryLayoutContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MemoryLayoutContext {
	var p = new(MemoryLayoutContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_memoryLayout

	return p
}

func (s *MemoryLayoutContext) GetParser() antlr.Parser { return s.parser }

func (s *MemoryLayoutContext) GetPrgType() antlr.Token { return s.prgType }

func (s *MemoryLayoutContext) SetPrgType(v antlr.Token) { s.prgType = v }

func (s *MemoryLayoutContext) GetAddress() IIntegerValueContext { return s.address }

func (s *MemoryLayoutContext) GetSize() IIntegerValueContext { return s.size }

func (s *MemoryLayoutContext) GetOffset_0() IIntegerValueContext { return s.offset_0 }

func (s *MemoryLayoutContext) GetOffset_1() IIntegerValueContext { return s.offset_1 }

func (s *MemoryLayoutContext) GetOffset_2() IIntegerValueContext { return s.offset_2 }

func (s *MemoryLayoutContext) GetOffset_3() IIntegerValueContext { return s.offset_3 }

func (s *MemoryLayoutContext) GetOffset_4() IIntegerValueContext { return s.offset_4 }

func (s *MemoryLayoutContext) Get_ifData() IIfDataContext { return s._ifData }

func (s *MemoryLayoutContext) SetAddress(v IIntegerValueContext) { s.address = v }

func (s *MemoryLayoutContext) SetSize(v IIntegerValueContext) { s.size = v }

func (s *MemoryLayoutContext) SetOffset_0(v IIntegerValueContext) { s.offset_0 = v }

func (s *MemoryLayoutContext) SetOffset_1(v IIntegerValueContext) { s.offset_1 = v }

func (s *MemoryLayoutContext) SetOffset_2(v IIntegerValueContext) { s.offset_2 = v }

func (s *MemoryLayoutContext) SetOffset_3(v IIntegerValueContext) { s.offset_3 = v }

func (s *MemoryLayoutContext) SetOffset_4(v IIntegerValueContext) { s.offset_4 = v }

func (s *MemoryLayoutContext) Set_ifData(v IIfDataContext) { s._ifData = v }

func (s *MemoryLayoutContext) GetV_ifData() []IIfDataContext { return s.v_ifData }

func (s *MemoryLayoutContext) SetV_ifData(v []IIfDataContext) { s.v_ifData = v }

func (s *MemoryLayoutContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(A2LParserBEGIN, 0)
}

func (s *MemoryLayoutContext) END() antlr.TerminalNode {
	return s.GetToken(A2LParserEND, 0)
}

func (s *MemoryLayoutContext) AllIntegerValue() []IIntegerValueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIntegerValueContext); ok {
			len++
		}
	}

	tst := make([]IIntegerValueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIntegerValueContext); ok {
			tst[i] = t.(IIntegerValueContext)
			i++
		}
	}

	return tst
}

func (s *MemoryLayoutContext) IntegerValue(i int) IIntegerValueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *MemoryLayoutContext) AllIfData() []IIfDataContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIfDataContext); ok {
			len++
		}
	}

	tst := make([]IIfDataContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIfDataContext); ok {
			tst[i] = t.(IIfDataContext)
			i++
		}
	}

	return tst
}

func (s *MemoryLayoutContext) IfData(i int) IIfDataContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIfDataContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIfDataContext)
}

func (s *MemoryLayoutContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MemoryLayoutContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MemoryLayoutContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterMemoryLayout(s)
	}
}

func (s *MemoryLayoutContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitMemoryLayout(s)
	}
}

func (s *MemoryLayoutContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitMemoryLayout(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) MemoryLayout() (localctx IMemoryLayoutContext) {
	this := p
	_ = this

	localctx = NewMemoryLayoutContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 208, A2LParserRULE_memoryLayout)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1313)
		p.Match(A2LParserBEGIN)
	}
	{
		p.SetState(1314)
		p.Match(A2LParserT__138)
	}
	{
		p.SetState(1315)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*MemoryLayoutContext).prgType = _lt

		_la = p.GetTokenStream().LA(1)

		if !((int64((_la-140)) & ^0x3f) == 0 && ((int64(1)<<(_la-140))&7) != 0) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*MemoryLayoutContext).prgType = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(1316)

		var _x = p.IntegerValue()

		localctx.(*MemoryLayoutContext).address = _x
	}
	{
		p.SetState(1317)

		var _x = p.IntegerValue()

		localctx.(*MemoryLayoutContext).size = _x
	}
	{
		p.SetState(1318)

		var _x = p.IntegerValue()

		localctx.(*MemoryLayoutContext).offset_0 = _x
	}
	{
		p.SetState(1319)

		var _x = p.IntegerValue()

		localctx.(*MemoryLayoutContext).offset_1 = _x
	}
	{
		p.SetState(1320)

		var _x = p.IntegerValue()

		localctx.(*MemoryLayoutContext).offset_2 = _x
	}
	{
		p.SetState(1321)

		var _x = p.IntegerValue()

		localctx.(*MemoryLayoutContext).offset_3 = _x
	}
	{
		p.SetState(1322)

		var _x = p.IntegerValue()

		localctx.(*MemoryLayoutContext).offset_4 = _x
	}
	p.SetState(1326)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == A2LParserBEGIN {
		{
			p.SetState(1323)

			var _x = p.IfData()

			localctx.(*MemoryLayoutContext)._ifData = _x
		}
		localctx.(*MemoryLayoutContext).v_ifData = append(localctx.(*MemoryLayoutContext).v_ifData, localctx.(*MemoryLayoutContext)._ifData)

		p.SetState(1328)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1329)
		p.Match(A2LParserEND)
	}
	{
		p.SetState(1330)
		p.Match(A2LParserT__138)
	}

	return localctx
}

// IMemorySegmentContext is an interface to support dynamic dispatch.
type IMemorySegmentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPrgType returns the prgType token.
	GetPrgType() antlr.Token

	// GetMemoryType returns the memoryType token.
	GetMemoryType() antlr.Token

	// GetAttribute returns the attribute token.
	GetAttribute() antlr.Token

	// SetPrgType sets the prgType token.
	SetPrgType(antlr.Token)

	// SetMemoryType sets the memoryType token.
	SetMemoryType(antlr.Token)

	// SetAttribute sets the attribute token.
	SetAttribute(antlr.Token)

	// GetName returns the name rule contexts.
	GetName() IIdentifierValueContext

	// GetLongIdentifier returns the longIdentifier rule contexts.
	GetLongIdentifier() IStringValueContext

	// GetAddress returns the address rule contexts.
	GetAddress() IIntegerValueContext

	// GetSize returns the size rule contexts.
	GetSize() IIntegerValueContext

	// GetOffset_0 returns the offset_0 rule contexts.
	GetOffset_0() IIntegerValueContext

	// GetOffset_1 returns the offset_1 rule contexts.
	GetOffset_1() IIntegerValueContext

	// GetOffset_2 returns the offset_2 rule contexts.
	GetOffset_2() IIntegerValueContext

	// GetOffset_3 returns the offset_3 rule contexts.
	GetOffset_3() IIntegerValueContext

	// GetOffset_4 returns the offset_4 rule contexts.
	GetOffset_4() IIntegerValueContext

	// Get_ifData returns the _ifData rule contexts.
	Get_ifData() IIfDataContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierValueContext)

	// SetLongIdentifier sets the longIdentifier rule contexts.
	SetLongIdentifier(IStringValueContext)

	// SetAddress sets the address rule contexts.
	SetAddress(IIntegerValueContext)

	// SetSize sets the size rule contexts.
	SetSize(IIntegerValueContext)

	// SetOffset_0 sets the offset_0 rule contexts.
	SetOffset_0(IIntegerValueContext)

	// SetOffset_1 sets the offset_1 rule contexts.
	SetOffset_1(IIntegerValueContext)

	// SetOffset_2 sets the offset_2 rule contexts.
	SetOffset_2(IIntegerValueContext)

	// SetOffset_3 sets the offset_3 rule contexts.
	SetOffset_3(IIntegerValueContext)

	// SetOffset_4 sets the offset_4 rule contexts.
	SetOffset_4(IIntegerValueContext)

	// Set_ifData sets the _ifData rule contexts.
	Set_ifData(IIfDataContext)

	// GetV_ifData returns the v_ifData rule context list.
	GetV_ifData() []IIfDataContext

	// SetV_ifData sets the v_ifData rule context list.
	SetV_ifData([]IIfDataContext)

	// Getter signatures
	BEGIN() antlr.TerminalNode
	END() antlr.TerminalNode
	IdentifierValue() IIdentifierValueContext
	StringValue() IStringValueContext
	AllIntegerValue() []IIntegerValueContext
	IntegerValue(i int) IIntegerValueContext
	AllIfData() []IIfDataContext
	IfData(i int) IIfDataContext

	// IsMemorySegmentContext differentiates from other interfaces.
	IsMemorySegmentContext()
}

type MemorySegmentContext struct {
	*antlr.BaseParserRuleContext
	parser         antlr.Parser
	name           IIdentifierValueContext
	longIdentifier IStringValueContext
	prgType        antlr.Token
	memoryType     antlr.Token
	attribute      antlr.Token
	address        IIntegerValueContext
	size           IIntegerValueContext
	offset_0       IIntegerValueContext
	offset_1       IIntegerValueContext
	offset_2       IIntegerValueContext
	offset_3       IIntegerValueContext
	offset_4       IIntegerValueContext
	_ifData        IIfDataContext
	v_ifData       []IIfDataContext
}

func NewEmptyMemorySegmentContext() *MemorySegmentContext {
	var p = new(MemorySegmentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_memorySegment
	return p
}

func (*MemorySegmentContext) IsMemorySegmentContext() {}

func NewMemorySegmentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MemorySegmentContext {
	var p = new(MemorySegmentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_memorySegment

	return p
}

func (s *MemorySegmentContext) GetParser() antlr.Parser { return s.parser }

func (s *MemorySegmentContext) GetPrgType() antlr.Token { return s.prgType }

func (s *MemorySegmentContext) GetMemoryType() antlr.Token { return s.memoryType }

func (s *MemorySegmentContext) GetAttribute() antlr.Token { return s.attribute }

func (s *MemorySegmentContext) SetPrgType(v antlr.Token) { s.prgType = v }

func (s *MemorySegmentContext) SetMemoryType(v antlr.Token) { s.memoryType = v }

func (s *MemorySegmentContext) SetAttribute(v antlr.Token) { s.attribute = v }

func (s *MemorySegmentContext) GetName() IIdentifierValueContext { return s.name }

func (s *MemorySegmentContext) GetLongIdentifier() IStringValueContext { return s.longIdentifier }

func (s *MemorySegmentContext) GetAddress() IIntegerValueContext { return s.address }

func (s *MemorySegmentContext) GetSize() IIntegerValueContext { return s.size }

func (s *MemorySegmentContext) GetOffset_0() IIntegerValueContext { return s.offset_0 }

func (s *MemorySegmentContext) GetOffset_1() IIntegerValueContext { return s.offset_1 }

func (s *MemorySegmentContext) GetOffset_2() IIntegerValueContext { return s.offset_2 }

func (s *MemorySegmentContext) GetOffset_3() IIntegerValueContext { return s.offset_3 }

func (s *MemorySegmentContext) GetOffset_4() IIntegerValueContext { return s.offset_4 }

func (s *MemorySegmentContext) Get_ifData() IIfDataContext { return s._ifData }

func (s *MemorySegmentContext) SetName(v IIdentifierValueContext) { s.name = v }

func (s *MemorySegmentContext) SetLongIdentifier(v IStringValueContext) { s.longIdentifier = v }

func (s *MemorySegmentContext) SetAddress(v IIntegerValueContext) { s.address = v }

func (s *MemorySegmentContext) SetSize(v IIntegerValueContext) { s.size = v }

func (s *MemorySegmentContext) SetOffset_0(v IIntegerValueContext) { s.offset_0 = v }

func (s *MemorySegmentContext) SetOffset_1(v IIntegerValueContext) { s.offset_1 = v }

func (s *MemorySegmentContext) SetOffset_2(v IIntegerValueContext) { s.offset_2 = v }

func (s *MemorySegmentContext) SetOffset_3(v IIntegerValueContext) { s.offset_3 = v }

func (s *MemorySegmentContext) SetOffset_4(v IIntegerValueContext) { s.offset_4 = v }

func (s *MemorySegmentContext) Set_ifData(v IIfDataContext) { s._ifData = v }

func (s *MemorySegmentContext) GetV_ifData() []IIfDataContext { return s.v_ifData }

func (s *MemorySegmentContext) SetV_ifData(v []IIfDataContext) { s.v_ifData = v }

func (s *MemorySegmentContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(A2LParserBEGIN, 0)
}

func (s *MemorySegmentContext) END() antlr.TerminalNode {
	return s.GetToken(A2LParserEND, 0)
}

func (s *MemorySegmentContext) IdentifierValue() IIdentifierValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierValueContext)
}

func (s *MemorySegmentContext) StringValue() IStringValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringValueContext)
}

func (s *MemorySegmentContext) AllIntegerValue() []IIntegerValueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIntegerValueContext); ok {
			len++
		}
	}

	tst := make([]IIntegerValueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIntegerValueContext); ok {
			tst[i] = t.(IIntegerValueContext)
			i++
		}
	}

	return tst
}

func (s *MemorySegmentContext) IntegerValue(i int) IIntegerValueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *MemorySegmentContext) AllIfData() []IIfDataContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIfDataContext); ok {
			len++
		}
	}

	tst := make([]IIfDataContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIfDataContext); ok {
			tst[i] = t.(IIfDataContext)
			i++
		}
	}

	return tst
}

func (s *MemorySegmentContext) IfData(i int) IIfDataContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIfDataContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIfDataContext)
}

func (s *MemorySegmentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MemorySegmentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MemorySegmentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterMemorySegment(s)
	}
}

func (s *MemorySegmentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitMemorySegment(s)
	}
}

func (s *MemorySegmentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitMemorySegment(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) MemorySegment() (localctx IMemorySegmentContext) {
	this := p
	_ = this

	localctx = NewMemorySegmentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 210, A2LParserRULE_memorySegment)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1332)
		p.Match(A2LParserBEGIN)
	}
	{
		p.SetState(1333)
		p.Match(A2LParserT__142)
	}
	{
		p.SetState(1334)

		var _x = p.IdentifierValue()

		localctx.(*MemorySegmentContext).name = _x
	}
	{
		p.SetState(1335)

		var _x = p.StringValue()

		localctx.(*MemorySegmentContext).longIdentifier = _x
	}
	{
		p.SetState(1336)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*MemorySegmentContext).prgType = _lt

		_la = p.GetTokenStream().LA(1)

		if !((int64((_la-144)) & ^0x3f) == 0 && ((int64(1)<<(_la-144))&255) != 0) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*MemorySegmentContext).prgType = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(1337)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*MemorySegmentContext).memoryType = _lt

		_la = p.GetTokenStream().LA(1)

		if !((int64((_la-152)) & ^0x3f) == 0 && ((int64(1)<<(_la-152))&63) != 0) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*MemorySegmentContext).memoryType = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(1338)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*MemorySegmentContext).attribute = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == A2LParserT__157 || _la == A2LParserT__158) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*MemorySegmentContext).attribute = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(1339)

		var _x = p.IntegerValue()

		localctx.(*MemorySegmentContext).address = _x
	}
	{
		p.SetState(1340)

		var _x = p.IntegerValue()

		localctx.(*MemorySegmentContext).size = _x
	}
	{
		p.SetState(1341)

		var _x = p.IntegerValue()

		localctx.(*MemorySegmentContext).offset_0 = _x
	}
	{
		p.SetState(1342)

		var _x = p.IntegerValue()

		localctx.(*MemorySegmentContext).offset_1 = _x
	}
	{
		p.SetState(1343)

		var _x = p.IntegerValue()

		localctx.(*MemorySegmentContext).offset_2 = _x
	}
	{
		p.SetState(1344)

		var _x = p.IntegerValue()

		localctx.(*MemorySegmentContext).offset_3 = _x
	}
	{
		p.SetState(1345)

		var _x = p.IntegerValue()

		localctx.(*MemorySegmentContext).offset_4 = _x
	}
	p.SetState(1349)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == A2LParserBEGIN {
		{
			p.SetState(1346)

			var _x = p.IfData()

			localctx.(*MemorySegmentContext)._ifData = _x
		}
		localctx.(*MemorySegmentContext).v_ifData = append(localctx.(*MemorySegmentContext).v_ifData, localctx.(*MemorySegmentContext)._ifData)

		p.SetState(1351)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1352)
		p.Match(A2LParserEND)
	}
	{
		p.SetState(1353)
		p.Match(A2LParserT__142)
	}

	return localctx
}

// INoOfInterfacesContext is an interface to support dynamic dispatch.
type INoOfInterfacesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetNum returns the num rule contexts.
	GetNum() IIntegerValueContext

	// SetNum sets the num rule contexts.
	SetNum(IIntegerValueContext)

	// Getter signatures
	IntegerValue() IIntegerValueContext

	// IsNoOfInterfacesContext differentiates from other interfaces.
	IsNoOfInterfacesContext()
}

type NoOfInterfacesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	num    IIntegerValueContext
}

func NewEmptyNoOfInterfacesContext() *NoOfInterfacesContext {
	var p = new(NoOfInterfacesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_noOfInterfaces
	return p
}

func (*NoOfInterfacesContext) IsNoOfInterfacesContext() {}

func NewNoOfInterfacesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NoOfInterfacesContext {
	var p = new(NoOfInterfacesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_noOfInterfaces

	return p
}

func (s *NoOfInterfacesContext) GetParser() antlr.Parser { return s.parser }

func (s *NoOfInterfacesContext) GetNum() IIntegerValueContext { return s.num }

func (s *NoOfInterfacesContext) SetNum(v IIntegerValueContext) { s.num = v }

func (s *NoOfInterfacesContext) IntegerValue() IIntegerValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *NoOfInterfacesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NoOfInterfacesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NoOfInterfacesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterNoOfInterfaces(s)
	}
}

func (s *NoOfInterfacesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitNoOfInterfaces(s)
	}
}

func (s *NoOfInterfacesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitNoOfInterfaces(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) NoOfInterfaces() (localctx INoOfInterfacesContext) {
	this := p
	_ = this

	localctx = NewNoOfInterfacesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 212, A2LParserRULE_noOfInterfaces)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1355)
		p.Match(A2LParserT__159)
	}
	{
		p.SetState(1356)

		var _x = p.IntegerValue()

		localctx.(*NoOfInterfacesContext).num = _x
	}

	return localctx
}

// IPhoneNoContext is an interface to support dynamic dispatch.
type IPhoneNoContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetTelnum returns the telnum rule contexts.
	GetTelnum() IStringValueContext

	// SetTelnum sets the telnum rule contexts.
	SetTelnum(IStringValueContext)

	// Getter signatures
	StringValue() IStringValueContext

	// IsPhoneNoContext differentiates from other interfaces.
	IsPhoneNoContext()
}

type PhoneNoContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	telnum IStringValueContext
}

func NewEmptyPhoneNoContext() *PhoneNoContext {
	var p = new(PhoneNoContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_phoneNo
	return p
}

func (*PhoneNoContext) IsPhoneNoContext() {}

func NewPhoneNoContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PhoneNoContext {
	var p = new(PhoneNoContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_phoneNo

	return p
}

func (s *PhoneNoContext) GetParser() antlr.Parser { return s.parser }

func (s *PhoneNoContext) GetTelnum() IStringValueContext { return s.telnum }

func (s *PhoneNoContext) SetTelnum(v IStringValueContext) { s.telnum = v }

func (s *PhoneNoContext) StringValue() IStringValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringValueContext)
}

func (s *PhoneNoContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PhoneNoContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PhoneNoContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterPhoneNo(s)
	}
}

func (s *PhoneNoContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitPhoneNo(s)
	}
}

func (s *PhoneNoContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitPhoneNo(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) PhoneNo() (localctx IPhoneNoContext) {
	this := p
	_ = this

	localctx = NewPhoneNoContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 214, A2LParserRULE_phoneNo)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1358)
		p.Match(A2LParserT__160)
	}
	{
		p.SetState(1359)

		var _x = p.StringValue()

		localctx.(*PhoneNoContext).telnum = _x
	}

	return localctx
}

// ISupplierContext is an interface to support dynamic dispatch.
type ISupplierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetManufacturer returns the manufacturer rule contexts.
	GetManufacturer() IStringValueContext

	// SetManufacturer sets the manufacturer rule contexts.
	SetManufacturer(IStringValueContext)

	// Getter signatures
	StringValue() IStringValueContext

	// IsSupplierContext differentiates from other interfaces.
	IsSupplierContext()
}

type SupplierContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	manufacturer IStringValueContext
}

func NewEmptySupplierContext() *SupplierContext {
	var p = new(SupplierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_supplier
	return p
}

func (*SupplierContext) IsSupplierContext() {}

func NewSupplierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SupplierContext {
	var p = new(SupplierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_supplier

	return p
}

func (s *SupplierContext) GetParser() antlr.Parser { return s.parser }

func (s *SupplierContext) GetManufacturer() IStringValueContext { return s.manufacturer }

func (s *SupplierContext) SetManufacturer(v IStringValueContext) { s.manufacturer = v }

func (s *SupplierContext) StringValue() IStringValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringValueContext)
}

func (s *SupplierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SupplierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SupplierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterSupplier(s)
	}
}

func (s *SupplierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitSupplier(s)
	}
}

func (s *SupplierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitSupplier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) Supplier() (localctx ISupplierContext) {
	this := p
	_ = this

	localctx = NewSupplierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 216, A2LParserRULE_supplier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1361)
		p.Match(A2LParserT__161)
	}
	{
		p.SetState(1362)

		var _x = p.StringValue()

		localctx.(*SupplierContext).manufacturer = _x
	}

	return localctx
}

// ISystemConstantContext is an interface to support dynamic dispatch.
type ISystemConstantContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IStringValueContext

	// GetValue_ returns the value_ rule contexts.
	GetValue_() IStringValueContext

	// SetName sets the name rule contexts.
	SetName(IStringValueContext)

	// SetValue_ sets the value_ rule contexts.
	SetValue_(IStringValueContext)

	// Getter signatures
	AllStringValue() []IStringValueContext
	StringValue(i int) IStringValueContext

	// IsSystemConstantContext differentiates from other interfaces.
	IsSystemConstantContext()
}

type SystemConstantContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name   IStringValueContext
	value_ IStringValueContext
}

func NewEmptySystemConstantContext() *SystemConstantContext {
	var p = new(SystemConstantContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_systemConstant
	return p
}

func (*SystemConstantContext) IsSystemConstantContext() {}

func NewSystemConstantContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SystemConstantContext {
	var p = new(SystemConstantContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_systemConstant

	return p
}

func (s *SystemConstantContext) GetParser() antlr.Parser { return s.parser }

func (s *SystemConstantContext) GetName() IStringValueContext { return s.name }

func (s *SystemConstantContext) GetValue_() IStringValueContext { return s.value_ }

func (s *SystemConstantContext) SetName(v IStringValueContext) { s.name = v }

func (s *SystemConstantContext) SetValue_(v IStringValueContext) { s.value_ = v }

func (s *SystemConstantContext) AllStringValue() []IStringValueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStringValueContext); ok {
			len++
		}
	}

	tst := make([]IStringValueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStringValueContext); ok {
			tst[i] = t.(IStringValueContext)
			i++
		}
	}

	return tst
}

func (s *SystemConstantContext) StringValue(i int) IStringValueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringValueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringValueContext)
}

func (s *SystemConstantContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SystemConstantContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SystemConstantContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterSystemConstant(s)
	}
}

func (s *SystemConstantContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitSystemConstant(s)
	}
}

func (s *SystemConstantContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitSystemConstant(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) SystemConstant() (localctx ISystemConstantContext) {
	this := p
	_ = this

	localctx = NewSystemConstantContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 218, A2LParserRULE_systemConstant)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1364)
		p.Match(A2LParserT__162)
	}
	{
		p.SetState(1365)

		var _x = p.StringValue()

		localctx.(*SystemConstantContext).name = _x
	}
	{
		p.SetState(1366)

		var _x = p.StringValue()

		localctx.(*SystemConstantContext).value_ = _x
	}

	return localctx
}

// IUserContext is an interface to support dynamic dispatch.
type IUserContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetUserName returns the userName rule contexts.
	GetUserName() IStringValueContext

	// SetUserName sets the userName rule contexts.
	SetUserName(IStringValueContext)

	// Getter signatures
	StringValue() IStringValueContext

	// IsUserContext differentiates from other interfaces.
	IsUserContext()
}

type UserContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	userName IStringValueContext
}

func NewEmptyUserContext() *UserContext {
	var p = new(UserContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_user
	return p
}

func (*UserContext) IsUserContext() {}

func NewUserContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UserContext {
	var p = new(UserContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_user

	return p
}

func (s *UserContext) GetParser() antlr.Parser { return s.parser }

func (s *UserContext) GetUserName() IStringValueContext { return s.userName }

func (s *UserContext) SetUserName(v IStringValueContext) { s.userName = v }

func (s *UserContext) StringValue() IStringValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringValueContext)
}

func (s *UserContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UserContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UserContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterUser(s)
	}
}

func (s *UserContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitUser(s)
	}
}

func (s *UserContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitUser(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) User() (localctx IUserContext) {
	this := p
	_ = this

	localctx = NewUserContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 220, A2LParserRULE_user)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1368)
		p.Match(A2LParserT__163)
	}
	{
		p.SetState(1369)

		var _x = p.StringValue()

		localctx.(*UserContext).userName = _x
	}

	return localctx
}

// IRecordLayoutContext is an interface to support dynamic dispatch.
type IRecordLayoutContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierValueContext

	// Get_alignmentByte returns the _alignmentByte rule contexts.
	Get_alignmentByte() IAlignmentByteContext

	// Get_alignmentFloat16Ieee returns the _alignmentFloat16Ieee rule contexts.
	Get_alignmentFloat16Ieee() IAlignmentFloat16IeeeContext

	// Get_alignmentFloat32Ieee returns the _alignmentFloat32Ieee rule contexts.
	Get_alignmentFloat32Ieee() IAlignmentFloat32IeeeContext

	// Get_alignmentFloat64Ieee returns the _alignmentFloat64Ieee rule contexts.
	Get_alignmentFloat64Ieee() IAlignmentFloat64IeeeContext

	// Get_alignmentInt64 returns the _alignmentInt64 rule contexts.
	Get_alignmentInt64() IAlignmentInt64Context

	// Get_alignmentLong returns the _alignmentLong rule contexts.
	Get_alignmentLong() IAlignmentLongContext

	// Get_alignmentWord returns the _alignmentWord rule contexts.
	Get_alignmentWord() IAlignmentWordContext

	// Get_axisPtsX returns the _axisPtsX rule contexts.
	Get_axisPtsX() IAxisPtsXContext

	// Get_axisPtsY returns the _axisPtsY rule contexts.
	Get_axisPtsY() IAxisPtsYContext

	// Get_axisPtsZ returns the _axisPtsZ rule contexts.
	Get_axisPtsZ() IAxisPtsZContext

	// Get_axisPts4 returns the _axisPts4 rule contexts.
	Get_axisPts4() IAxisPts4Context

	// Get_axisPts5 returns the _axisPts5 rule contexts.
	Get_axisPts5() IAxisPts5Context

	// Get_axisRescaleX returns the _axisRescaleX rule contexts.
	Get_axisRescaleX() IAxisRescaleXContext

	// Get_axisRescaleY returns the _axisRescaleY rule contexts.
	Get_axisRescaleY() IAxisRescaleYContext

	// Get_axisRescaleZ returns the _axisRescaleZ rule contexts.
	Get_axisRescaleZ() IAxisRescaleZContext

	// Get_axisRescale4 returns the _axisRescale4 rule contexts.
	Get_axisRescale4() IAxisRescale4Context

	// Get_axisRescale5 returns the _axisRescale5 rule contexts.
	Get_axisRescale5() IAxisRescale5Context

	// Get_distOpX returns the _distOpX rule contexts.
	Get_distOpX() IDistOpXContext

	// Get_distOpY returns the _distOpY rule contexts.
	Get_distOpY() IDistOpYContext

	// Get_distOpZ returns the _distOpZ rule contexts.
	Get_distOpZ() IDistOpZContext

	// Get_distOp4 returns the _distOp4 rule contexts.
	Get_distOp4() IDistOp4Context

	// Get_distOp5 returns the _distOp5 rule contexts.
	Get_distOp5() IDistOp5Context

	// Get_fixNoAxisPtsX returns the _fixNoAxisPtsX rule contexts.
	Get_fixNoAxisPtsX() IFixNoAxisPtsXContext

	// Get_fixNoAxisPtsY returns the _fixNoAxisPtsY rule contexts.
	Get_fixNoAxisPtsY() IFixNoAxisPtsYContext

	// Get_fixNoAxisPtsZ returns the _fixNoAxisPtsZ rule contexts.
	Get_fixNoAxisPtsZ() IFixNoAxisPtsZContext

	// Get_fixNoAxisPts4 returns the _fixNoAxisPts4 rule contexts.
	Get_fixNoAxisPts4() IFixNoAxisPts4Context

	// Get_fixNoAxisPts5 returns the _fixNoAxisPts5 rule contexts.
	Get_fixNoAxisPts5() IFixNoAxisPts5Context

	// Get_fncValues returns the _fncValues rule contexts.
	Get_fncValues() IFncValuesContext

	// Get_identification returns the _identification rule contexts.
	Get_identification() IIdentificationContext

	// Get_noAxisPtsX returns the _noAxisPtsX rule contexts.
	Get_noAxisPtsX() INoAxisPtsXContext

	// Get_noAxisPtsY returns the _noAxisPtsY rule contexts.
	Get_noAxisPtsY() INoAxisPtsYContext

	// Get_noAxisPtsZ returns the _noAxisPtsZ rule contexts.
	Get_noAxisPtsZ() INoAxisPtsZContext

	// Get_noAxisPts4 returns the _noAxisPts4 rule contexts.
	Get_noAxisPts4() INoAxisPts4Context

	// Get_noAxisPts5 returns the _noAxisPts5 rule contexts.
	Get_noAxisPts5() INoAxisPts5Context

	// Get_staticRecordLayout returns the _staticRecordLayout rule contexts.
	Get_staticRecordLayout() IStaticRecordLayoutContext

	// Get_noRescaleX returns the _noRescaleX rule contexts.
	Get_noRescaleX() INoRescaleXContext

	// Get_noRescaleY returns the _noRescaleY rule contexts.
	Get_noRescaleY() INoRescaleYContext

	// Get_noRescaleZ returns the _noRescaleZ rule contexts.
	Get_noRescaleZ() INoRescaleZContext

	// Get_noRescale4 returns the _noRescale4 rule contexts.
	Get_noRescale4() INoRescale4Context

	// Get_noRescale5 returns the _noRescale5 rule contexts.
	Get_noRescale5() INoRescale5Context

	// Get_offsetX returns the _offsetX rule contexts.
	Get_offsetX() IOffsetXContext

	// Get_offsetY returns the _offsetY rule contexts.
	Get_offsetY() IOffsetYContext

	// Get_offsetZ returns the _offsetZ rule contexts.
	Get_offsetZ() IOffsetZContext

	// Get_offset4 returns the _offset4 rule contexts.
	Get_offset4() IOffset4Context

	// Get_offset5 returns the _offset5 rule contexts.
	Get_offset5() IOffset5Context

	// Get_reserved returns the _reserved rule contexts.
	Get_reserved() IReservedContext

	// Get_ripAddrW returns the _ripAddrW rule contexts.
	Get_ripAddrW() IRipAddrWContext

	// Get_ripAddrX returns the _ripAddrX rule contexts.
	Get_ripAddrX() IRipAddrXContext

	// Get_ripAddrY returns the _ripAddrY rule contexts.
	Get_ripAddrY() IRipAddrYContext

	// Get_ripAddrZ returns the _ripAddrZ rule contexts.
	Get_ripAddrZ() IRipAddrZContext

	// Get_ripAddr4 returns the _ripAddr4 rule contexts.
	Get_ripAddr4() IRipAddr4Context

	// Get_ripAddr5 returns the _ripAddr5 rule contexts.
	Get_ripAddr5() IRipAddr5Context

	// Get_shiftOpX returns the _shiftOpX rule contexts.
	Get_shiftOpX() IShiftOpXContext

	// Get_shiftOpY returns the _shiftOpY rule contexts.
	Get_shiftOpY() IShiftOpYContext

	// Get_shiftOpZ returns the _shiftOpZ rule contexts.
	Get_shiftOpZ() IShiftOpZContext

	// Get_shiftOp4 returns the _shiftOp4 rule contexts.
	Get_shiftOp4() IShiftOp4Context

	// Get_shiftOp5 returns the _shiftOp5 rule contexts.
	Get_shiftOp5() IShiftOp5Context

	// Get_srcAddrX returns the _srcAddrX rule contexts.
	Get_srcAddrX() ISrcAddrXContext

	// Get_srcAddrY returns the _srcAddrY rule contexts.
	Get_srcAddrY() ISrcAddrYContext

	// Get_srcAddrZ returns the _srcAddrZ rule contexts.
	Get_srcAddrZ() ISrcAddrZContext

	// Get_srcAddr4 returns the _srcAddr4 rule contexts.
	Get_srcAddr4() ISrcAddr4Context

	// Get_srcAddr5 returns the _srcAddr5 rule contexts.
	Get_srcAddr5() ISrcAddr5Context

	// SetName sets the name rule contexts.
	SetName(IIdentifierValueContext)

	// Set_alignmentByte sets the _alignmentByte rule contexts.
	Set_alignmentByte(IAlignmentByteContext)

	// Set_alignmentFloat16Ieee sets the _alignmentFloat16Ieee rule contexts.
	Set_alignmentFloat16Ieee(IAlignmentFloat16IeeeContext)

	// Set_alignmentFloat32Ieee sets the _alignmentFloat32Ieee rule contexts.
	Set_alignmentFloat32Ieee(IAlignmentFloat32IeeeContext)

	// Set_alignmentFloat64Ieee sets the _alignmentFloat64Ieee rule contexts.
	Set_alignmentFloat64Ieee(IAlignmentFloat64IeeeContext)

	// Set_alignmentInt64 sets the _alignmentInt64 rule contexts.
	Set_alignmentInt64(IAlignmentInt64Context)

	// Set_alignmentLong sets the _alignmentLong rule contexts.
	Set_alignmentLong(IAlignmentLongContext)

	// Set_alignmentWord sets the _alignmentWord rule contexts.
	Set_alignmentWord(IAlignmentWordContext)

	// Set_axisPtsX sets the _axisPtsX rule contexts.
	Set_axisPtsX(IAxisPtsXContext)

	// Set_axisPtsY sets the _axisPtsY rule contexts.
	Set_axisPtsY(IAxisPtsYContext)

	// Set_axisPtsZ sets the _axisPtsZ rule contexts.
	Set_axisPtsZ(IAxisPtsZContext)

	// Set_axisPts4 sets the _axisPts4 rule contexts.
	Set_axisPts4(IAxisPts4Context)

	// Set_axisPts5 sets the _axisPts5 rule contexts.
	Set_axisPts5(IAxisPts5Context)

	// Set_axisRescaleX sets the _axisRescaleX rule contexts.
	Set_axisRescaleX(IAxisRescaleXContext)

	// Set_axisRescaleY sets the _axisRescaleY rule contexts.
	Set_axisRescaleY(IAxisRescaleYContext)

	// Set_axisRescaleZ sets the _axisRescaleZ rule contexts.
	Set_axisRescaleZ(IAxisRescaleZContext)

	// Set_axisRescale4 sets the _axisRescale4 rule contexts.
	Set_axisRescale4(IAxisRescale4Context)

	// Set_axisRescale5 sets the _axisRescale5 rule contexts.
	Set_axisRescale5(IAxisRescale5Context)

	// Set_distOpX sets the _distOpX rule contexts.
	Set_distOpX(IDistOpXContext)

	// Set_distOpY sets the _distOpY rule contexts.
	Set_distOpY(IDistOpYContext)

	// Set_distOpZ sets the _distOpZ rule contexts.
	Set_distOpZ(IDistOpZContext)

	// Set_distOp4 sets the _distOp4 rule contexts.
	Set_distOp4(IDistOp4Context)

	// Set_distOp5 sets the _distOp5 rule contexts.
	Set_distOp5(IDistOp5Context)

	// Set_fixNoAxisPtsX sets the _fixNoAxisPtsX rule contexts.
	Set_fixNoAxisPtsX(IFixNoAxisPtsXContext)

	// Set_fixNoAxisPtsY sets the _fixNoAxisPtsY rule contexts.
	Set_fixNoAxisPtsY(IFixNoAxisPtsYContext)

	// Set_fixNoAxisPtsZ sets the _fixNoAxisPtsZ rule contexts.
	Set_fixNoAxisPtsZ(IFixNoAxisPtsZContext)

	// Set_fixNoAxisPts4 sets the _fixNoAxisPts4 rule contexts.
	Set_fixNoAxisPts4(IFixNoAxisPts4Context)

	// Set_fixNoAxisPts5 sets the _fixNoAxisPts5 rule contexts.
	Set_fixNoAxisPts5(IFixNoAxisPts5Context)

	// Set_fncValues sets the _fncValues rule contexts.
	Set_fncValues(IFncValuesContext)

	// Set_identification sets the _identification rule contexts.
	Set_identification(IIdentificationContext)

	// Set_noAxisPtsX sets the _noAxisPtsX rule contexts.
	Set_noAxisPtsX(INoAxisPtsXContext)

	// Set_noAxisPtsY sets the _noAxisPtsY rule contexts.
	Set_noAxisPtsY(INoAxisPtsYContext)

	// Set_noAxisPtsZ sets the _noAxisPtsZ rule contexts.
	Set_noAxisPtsZ(INoAxisPtsZContext)

	// Set_noAxisPts4 sets the _noAxisPts4 rule contexts.
	Set_noAxisPts4(INoAxisPts4Context)

	// Set_noAxisPts5 sets the _noAxisPts5 rule contexts.
	Set_noAxisPts5(INoAxisPts5Context)

	// Set_staticRecordLayout sets the _staticRecordLayout rule contexts.
	Set_staticRecordLayout(IStaticRecordLayoutContext)

	// Set_noRescaleX sets the _noRescaleX rule contexts.
	Set_noRescaleX(INoRescaleXContext)

	// Set_noRescaleY sets the _noRescaleY rule contexts.
	Set_noRescaleY(INoRescaleYContext)

	// Set_noRescaleZ sets the _noRescaleZ rule contexts.
	Set_noRescaleZ(INoRescaleZContext)

	// Set_noRescale4 sets the _noRescale4 rule contexts.
	Set_noRescale4(INoRescale4Context)

	// Set_noRescale5 sets the _noRescale5 rule contexts.
	Set_noRescale5(INoRescale5Context)

	// Set_offsetX sets the _offsetX rule contexts.
	Set_offsetX(IOffsetXContext)

	// Set_offsetY sets the _offsetY rule contexts.
	Set_offsetY(IOffsetYContext)

	// Set_offsetZ sets the _offsetZ rule contexts.
	Set_offsetZ(IOffsetZContext)

	// Set_offset4 sets the _offset4 rule contexts.
	Set_offset4(IOffset4Context)

	// Set_offset5 sets the _offset5 rule contexts.
	Set_offset5(IOffset5Context)

	// Set_reserved sets the _reserved rule contexts.
	Set_reserved(IReservedContext)

	// Set_ripAddrW sets the _ripAddrW rule contexts.
	Set_ripAddrW(IRipAddrWContext)

	// Set_ripAddrX sets the _ripAddrX rule contexts.
	Set_ripAddrX(IRipAddrXContext)

	// Set_ripAddrY sets the _ripAddrY rule contexts.
	Set_ripAddrY(IRipAddrYContext)

	// Set_ripAddrZ sets the _ripAddrZ rule contexts.
	Set_ripAddrZ(IRipAddrZContext)

	// Set_ripAddr4 sets the _ripAddr4 rule contexts.
	Set_ripAddr4(IRipAddr4Context)

	// Set_ripAddr5 sets the _ripAddr5 rule contexts.
	Set_ripAddr5(IRipAddr5Context)

	// Set_shiftOpX sets the _shiftOpX rule contexts.
	Set_shiftOpX(IShiftOpXContext)

	// Set_shiftOpY sets the _shiftOpY rule contexts.
	Set_shiftOpY(IShiftOpYContext)

	// Set_shiftOpZ sets the _shiftOpZ rule contexts.
	Set_shiftOpZ(IShiftOpZContext)

	// Set_shiftOp4 sets the _shiftOp4 rule contexts.
	Set_shiftOp4(IShiftOp4Context)

	// Set_shiftOp5 sets the _shiftOp5 rule contexts.
	Set_shiftOp5(IShiftOp5Context)

	// Set_srcAddrX sets the _srcAddrX rule contexts.
	Set_srcAddrX(ISrcAddrXContext)

	// Set_srcAddrY sets the _srcAddrY rule contexts.
	Set_srcAddrY(ISrcAddrYContext)

	// Set_srcAddrZ sets the _srcAddrZ rule contexts.
	Set_srcAddrZ(ISrcAddrZContext)

	// Set_srcAddr4 sets the _srcAddr4 rule contexts.
	Set_srcAddr4(ISrcAddr4Context)

	// Set_srcAddr5 sets the _srcAddr5 rule contexts.
	Set_srcAddr5(ISrcAddr5Context)

	// GetV_alignmentByte returns the v_alignmentByte rule context list.
	GetV_alignmentByte() []IAlignmentByteContext

	// GetV_alignmentFloat16Ieee returns the v_alignmentFloat16Ieee rule context list.
	GetV_alignmentFloat16Ieee() []IAlignmentFloat16IeeeContext

	// GetV_alignmentFloat32Ieee returns the v_alignmentFloat32Ieee rule context list.
	GetV_alignmentFloat32Ieee() []IAlignmentFloat32IeeeContext

	// GetV_alignmentFloat64Ieee returns the v_alignmentFloat64Ieee rule context list.
	GetV_alignmentFloat64Ieee() []IAlignmentFloat64IeeeContext

	// GetV_alignmentInt64 returns the v_alignmentInt64 rule context list.
	GetV_alignmentInt64() []IAlignmentInt64Context

	// GetV_alignmentLong returns the v_alignmentLong rule context list.
	GetV_alignmentLong() []IAlignmentLongContext

	// GetV_alignmentWord returns the v_alignmentWord rule context list.
	GetV_alignmentWord() []IAlignmentWordContext

	// GetV_axisPtsX returns the v_axisPtsX rule context list.
	GetV_axisPtsX() []IAxisPtsXContext

	// GetV_axisPtsY returns the v_axisPtsY rule context list.
	GetV_axisPtsY() []IAxisPtsYContext

	// GetV_axisPtsZ returns the v_axisPtsZ rule context list.
	GetV_axisPtsZ() []IAxisPtsZContext

	// GetV_axisPts4 returns the v_axisPts4 rule context list.
	GetV_axisPts4() []IAxisPts4Context

	// GetV_axisPts5 returns the v_axisPts5 rule context list.
	GetV_axisPts5() []IAxisPts5Context

	// GetV_axisRescaleX returns the v_axisRescaleX rule context list.
	GetV_axisRescaleX() []IAxisRescaleXContext

	// GetV_axisRescaleY returns the v_axisRescaleY rule context list.
	GetV_axisRescaleY() []IAxisRescaleYContext

	// GetV_axisRescaleZ returns the v_axisRescaleZ rule context list.
	GetV_axisRescaleZ() []IAxisRescaleZContext

	// GetV_axisRescale4 returns the v_axisRescale4 rule context list.
	GetV_axisRescale4() []IAxisRescale4Context

	// GetV_axisRescale5 returns the v_axisRescale5 rule context list.
	GetV_axisRescale5() []IAxisRescale5Context

	// GetV_distOpX returns the v_distOpX rule context list.
	GetV_distOpX() []IDistOpXContext

	// GetV_distOpY returns the v_distOpY rule context list.
	GetV_distOpY() []IDistOpYContext

	// GetV_distOpZ returns the v_distOpZ rule context list.
	GetV_distOpZ() []IDistOpZContext

	// GetV_distOp4 returns the v_distOp4 rule context list.
	GetV_distOp4() []IDistOp4Context

	// GetV_distOp5 returns the v_distOp5 rule context list.
	GetV_distOp5() []IDistOp5Context

	// GetV_fixNoAxisPtsX returns the v_fixNoAxisPtsX rule context list.
	GetV_fixNoAxisPtsX() []IFixNoAxisPtsXContext

	// GetV_fixNoAxisPtsY returns the v_fixNoAxisPtsY rule context list.
	GetV_fixNoAxisPtsY() []IFixNoAxisPtsYContext

	// GetV_fixNoAxisPtsZ returns the v_fixNoAxisPtsZ rule context list.
	GetV_fixNoAxisPtsZ() []IFixNoAxisPtsZContext

	// GetV_fixNoAxisPts4 returns the v_fixNoAxisPts4 rule context list.
	GetV_fixNoAxisPts4() []IFixNoAxisPts4Context

	// GetV_fixNoAxisPts5 returns the v_fixNoAxisPts5 rule context list.
	GetV_fixNoAxisPts5() []IFixNoAxisPts5Context

	// GetV_fncValues returns the v_fncValues rule context list.
	GetV_fncValues() []IFncValuesContext

	// GetV_identification returns the v_identification rule context list.
	GetV_identification() []IIdentificationContext

	// GetV_noAxisPtsX returns the v_noAxisPtsX rule context list.
	GetV_noAxisPtsX() []INoAxisPtsXContext

	// GetV_noAxisPtsY returns the v_noAxisPtsY rule context list.
	GetV_noAxisPtsY() []INoAxisPtsYContext

	// GetV_noAxisPtsZ returns the v_noAxisPtsZ rule context list.
	GetV_noAxisPtsZ() []INoAxisPtsZContext

	// GetV_noAxisPts4 returns the v_noAxisPts4 rule context list.
	GetV_noAxisPts4() []INoAxisPts4Context

	// GetV_noAxisPts5 returns the v_noAxisPts5 rule context list.
	GetV_noAxisPts5() []INoAxisPts5Context

	// GetV_staticRecordLayout returns the v_staticRecordLayout rule context list.
	GetV_staticRecordLayout() []IStaticRecordLayoutContext

	// GetV_noRescaleX returns the v_noRescaleX rule context list.
	GetV_noRescaleX() []INoRescaleXContext

	// GetV_noRescaleY returns the v_noRescaleY rule context list.
	GetV_noRescaleY() []INoRescaleYContext

	// GetV_noRescaleZ returns the v_noRescaleZ rule context list.
	GetV_noRescaleZ() []INoRescaleZContext

	// GetV_noRescale4 returns the v_noRescale4 rule context list.
	GetV_noRescale4() []INoRescale4Context

	// GetV_noRescale5 returns the v_noRescale5 rule context list.
	GetV_noRescale5() []INoRescale5Context

	// GetV_offsetX returns the v_offsetX rule context list.
	GetV_offsetX() []IOffsetXContext

	// GetV_offsetY returns the v_offsetY rule context list.
	GetV_offsetY() []IOffsetYContext

	// GetV_offsetZ returns the v_offsetZ rule context list.
	GetV_offsetZ() []IOffsetZContext

	// GetV_offset4 returns the v_offset4 rule context list.
	GetV_offset4() []IOffset4Context

	// GetV_offset5 returns the v_offset5 rule context list.
	GetV_offset5() []IOffset5Context

	// GetV_reserved returns the v_reserved rule context list.
	GetV_reserved() []IReservedContext

	// GetV_ripAddrW returns the v_ripAddrW rule context list.
	GetV_ripAddrW() []IRipAddrWContext

	// GetV_ripAddrX returns the v_ripAddrX rule context list.
	GetV_ripAddrX() []IRipAddrXContext

	// GetV_ripAddrY returns the v_ripAddrY rule context list.
	GetV_ripAddrY() []IRipAddrYContext

	// GetV_ripAddrZ returns the v_ripAddrZ rule context list.
	GetV_ripAddrZ() []IRipAddrZContext

	// GetV_ripAddr4 returns the v_ripAddr4 rule context list.
	GetV_ripAddr4() []IRipAddr4Context

	// GetV_ripAddr5 returns the v_ripAddr5 rule context list.
	GetV_ripAddr5() []IRipAddr5Context

	// GetV_shiftOpX returns the v_shiftOpX rule context list.
	GetV_shiftOpX() []IShiftOpXContext

	// GetV_shiftOpY returns the v_shiftOpY rule context list.
	GetV_shiftOpY() []IShiftOpYContext

	// GetV_shiftOpZ returns the v_shiftOpZ rule context list.
	GetV_shiftOpZ() []IShiftOpZContext

	// GetV_shiftOp4 returns the v_shiftOp4 rule context list.
	GetV_shiftOp4() []IShiftOp4Context

	// GetV_shiftOp5 returns the v_shiftOp5 rule context list.
	GetV_shiftOp5() []IShiftOp5Context

	// GetV_srcAddrX returns the v_srcAddrX rule context list.
	GetV_srcAddrX() []ISrcAddrXContext

	// GetV_srcAddrY returns the v_srcAddrY rule context list.
	GetV_srcAddrY() []ISrcAddrYContext

	// GetV_srcAddrZ returns the v_srcAddrZ rule context list.
	GetV_srcAddrZ() []ISrcAddrZContext

	// GetV_srcAddr4 returns the v_srcAddr4 rule context list.
	GetV_srcAddr4() []ISrcAddr4Context

	// GetV_srcAddr5 returns the v_srcAddr5 rule context list.
	GetV_srcAddr5() []ISrcAddr5Context

	// SetV_alignmentByte sets the v_alignmentByte rule context list.
	SetV_alignmentByte([]IAlignmentByteContext)

	// SetV_alignmentFloat16Ieee sets the v_alignmentFloat16Ieee rule context list.
	SetV_alignmentFloat16Ieee([]IAlignmentFloat16IeeeContext)

	// SetV_alignmentFloat32Ieee sets the v_alignmentFloat32Ieee rule context list.
	SetV_alignmentFloat32Ieee([]IAlignmentFloat32IeeeContext)

	// SetV_alignmentFloat64Ieee sets the v_alignmentFloat64Ieee rule context list.
	SetV_alignmentFloat64Ieee([]IAlignmentFloat64IeeeContext)

	// SetV_alignmentInt64 sets the v_alignmentInt64 rule context list.
	SetV_alignmentInt64([]IAlignmentInt64Context)

	// SetV_alignmentLong sets the v_alignmentLong rule context list.
	SetV_alignmentLong([]IAlignmentLongContext)

	// SetV_alignmentWord sets the v_alignmentWord rule context list.
	SetV_alignmentWord([]IAlignmentWordContext)

	// SetV_axisPtsX sets the v_axisPtsX rule context list.
	SetV_axisPtsX([]IAxisPtsXContext)

	// SetV_axisPtsY sets the v_axisPtsY rule context list.
	SetV_axisPtsY([]IAxisPtsYContext)

	// SetV_axisPtsZ sets the v_axisPtsZ rule context list.
	SetV_axisPtsZ([]IAxisPtsZContext)

	// SetV_axisPts4 sets the v_axisPts4 rule context list.
	SetV_axisPts4([]IAxisPts4Context)

	// SetV_axisPts5 sets the v_axisPts5 rule context list.
	SetV_axisPts5([]IAxisPts5Context)

	// SetV_axisRescaleX sets the v_axisRescaleX rule context list.
	SetV_axisRescaleX([]IAxisRescaleXContext)

	// SetV_axisRescaleY sets the v_axisRescaleY rule context list.
	SetV_axisRescaleY([]IAxisRescaleYContext)

	// SetV_axisRescaleZ sets the v_axisRescaleZ rule context list.
	SetV_axisRescaleZ([]IAxisRescaleZContext)

	// SetV_axisRescale4 sets the v_axisRescale4 rule context list.
	SetV_axisRescale4([]IAxisRescale4Context)

	// SetV_axisRescale5 sets the v_axisRescale5 rule context list.
	SetV_axisRescale5([]IAxisRescale5Context)

	// SetV_distOpX sets the v_distOpX rule context list.
	SetV_distOpX([]IDistOpXContext)

	// SetV_distOpY sets the v_distOpY rule context list.
	SetV_distOpY([]IDistOpYContext)

	// SetV_distOpZ sets the v_distOpZ rule context list.
	SetV_distOpZ([]IDistOpZContext)

	// SetV_distOp4 sets the v_distOp4 rule context list.
	SetV_distOp4([]IDistOp4Context)

	// SetV_distOp5 sets the v_distOp5 rule context list.
	SetV_distOp5([]IDistOp5Context)

	// SetV_fixNoAxisPtsX sets the v_fixNoAxisPtsX rule context list.
	SetV_fixNoAxisPtsX([]IFixNoAxisPtsXContext)

	// SetV_fixNoAxisPtsY sets the v_fixNoAxisPtsY rule context list.
	SetV_fixNoAxisPtsY([]IFixNoAxisPtsYContext)

	// SetV_fixNoAxisPtsZ sets the v_fixNoAxisPtsZ rule context list.
	SetV_fixNoAxisPtsZ([]IFixNoAxisPtsZContext)

	// SetV_fixNoAxisPts4 sets the v_fixNoAxisPts4 rule context list.
	SetV_fixNoAxisPts4([]IFixNoAxisPts4Context)

	// SetV_fixNoAxisPts5 sets the v_fixNoAxisPts5 rule context list.
	SetV_fixNoAxisPts5([]IFixNoAxisPts5Context)

	// SetV_fncValues sets the v_fncValues rule context list.
	SetV_fncValues([]IFncValuesContext)

	// SetV_identification sets the v_identification rule context list.
	SetV_identification([]IIdentificationContext)

	// SetV_noAxisPtsX sets the v_noAxisPtsX rule context list.
	SetV_noAxisPtsX([]INoAxisPtsXContext)

	// SetV_noAxisPtsY sets the v_noAxisPtsY rule context list.
	SetV_noAxisPtsY([]INoAxisPtsYContext)

	// SetV_noAxisPtsZ sets the v_noAxisPtsZ rule context list.
	SetV_noAxisPtsZ([]INoAxisPtsZContext)

	// SetV_noAxisPts4 sets the v_noAxisPts4 rule context list.
	SetV_noAxisPts4([]INoAxisPts4Context)

	// SetV_noAxisPts5 sets the v_noAxisPts5 rule context list.
	SetV_noAxisPts5([]INoAxisPts5Context)

	// SetV_staticRecordLayout sets the v_staticRecordLayout rule context list.
	SetV_staticRecordLayout([]IStaticRecordLayoutContext)

	// SetV_noRescaleX sets the v_noRescaleX rule context list.
	SetV_noRescaleX([]INoRescaleXContext)

	// SetV_noRescaleY sets the v_noRescaleY rule context list.
	SetV_noRescaleY([]INoRescaleYContext)

	// SetV_noRescaleZ sets the v_noRescaleZ rule context list.
	SetV_noRescaleZ([]INoRescaleZContext)

	// SetV_noRescale4 sets the v_noRescale4 rule context list.
	SetV_noRescale4([]INoRescale4Context)

	// SetV_noRescale5 sets the v_noRescale5 rule context list.
	SetV_noRescale5([]INoRescale5Context)

	// SetV_offsetX sets the v_offsetX rule context list.
	SetV_offsetX([]IOffsetXContext)

	// SetV_offsetY sets the v_offsetY rule context list.
	SetV_offsetY([]IOffsetYContext)

	// SetV_offsetZ sets the v_offsetZ rule context list.
	SetV_offsetZ([]IOffsetZContext)

	// SetV_offset4 sets the v_offset4 rule context list.
	SetV_offset4([]IOffset4Context)

	// SetV_offset5 sets the v_offset5 rule context list.
	SetV_offset5([]IOffset5Context)

	// SetV_reserved sets the v_reserved rule context list.
	SetV_reserved([]IReservedContext)

	// SetV_ripAddrW sets the v_ripAddrW rule context list.
	SetV_ripAddrW([]IRipAddrWContext)

	// SetV_ripAddrX sets the v_ripAddrX rule context list.
	SetV_ripAddrX([]IRipAddrXContext)

	// SetV_ripAddrY sets the v_ripAddrY rule context list.
	SetV_ripAddrY([]IRipAddrYContext)

	// SetV_ripAddrZ sets the v_ripAddrZ rule context list.
	SetV_ripAddrZ([]IRipAddrZContext)

	// SetV_ripAddr4 sets the v_ripAddr4 rule context list.
	SetV_ripAddr4([]IRipAddr4Context)

	// SetV_ripAddr5 sets the v_ripAddr5 rule context list.
	SetV_ripAddr5([]IRipAddr5Context)

	// SetV_shiftOpX sets the v_shiftOpX rule context list.
	SetV_shiftOpX([]IShiftOpXContext)

	// SetV_shiftOpY sets the v_shiftOpY rule context list.
	SetV_shiftOpY([]IShiftOpYContext)

	// SetV_shiftOpZ sets the v_shiftOpZ rule context list.
	SetV_shiftOpZ([]IShiftOpZContext)

	// SetV_shiftOp4 sets the v_shiftOp4 rule context list.
	SetV_shiftOp4([]IShiftOp4Context)

	// SetV_shiftOp5 sets the v_shiftOp5 rule context list.
	SetV_shiftOp5([]IShiftOp5Context)

	// SetV_srcAddrX sets the v_srcAddrX rule context list.
	SetV_srcAddrX([]ISrcAddrXContext)

	// SetV_srcAddrY sets the v_srcAddrY rule context list.
	SetV_srcAddrY([]ISrcAddrYContext)

	// SetV_srcAddrZ sets the v_srcAddrZ rule context list.
	SetV_srcAddrZ([]ISrcAddrZContext)

	// SetV_srcAddr4 sets the v_srcAddr4 rule context list.
	SetV_srcAddr4([]ISrcAddr4Context)

	// SetV_srcAddr5 sets the v_srcAddr5 rule context list.
	SetV_srcAddr5([]ISrcAddr5Context)

	// Getter signatures
	BEGIN() antlr.TerminalNode
	END() antlr.TerminalNode
	IdentifierValue() IIdentifierValueContext
	AllAlignmentByte() []IAlignmentByteContext
	AlignmentByte(i int) IAlignmentByteContext
	AllAlignmentFloat16Ieee() []IAlignmentFloat16IeeeContext
	AlignmentFloat16Ieee(i int) IAlignmentFloat16IeeeContext
	AllAlignmentFloat32Ieee() []IAlignmentFloat32IeeeContext
	AlignmentFloat32Ieee(i int) IAlignmentFloat32IeeeContext
	AllAlignmentFloat64Ieee() []IAlignmentFloat64IeeeContext
	AlignmentFloat64Ieee(i int) IAlignmentFloat64IeeeContext
	AllAlignmentInt64() []IAlignmentInt64Context
	AlignmentInt64(i int) IAlignmentInt64Context
	AllAlignmentLong() []IAlignmentLongContext
	AlignmentLong(i int) IAlignmentLongContext
	AllAlignmentWord() []IAlignmentWordContext
	AlignmentWord(i int) IAlignmentWordContext
	AllAxisPtsX() []IAxisPtsXContext
	AxisPtsX(i int) IAxisPtsXContext
	AllAxisPtsY() []IAxisPtsYContext
	AxisPtsY(i int) IAxisPtsYContext
	AllAxisPtsZ() []IAxisPtsZContext
	AxisPtsZ(i int) IAxisPtsZContext
	AllAxisPts4() []IAxisPts4Context
	AxisPts4(i int) IAxisPts4Context
	AllAxisPts5() []IAxisPts5Context
	AxisPts5(i int) IAxisPts5Context
	AllAxisRescaleX() []IAxisRescaleXContext
	AxisRescaleX(i int) IAxisRescaleXContext
	AllAxisRescaleY() []IAxisRescaleYContext
	AxisRescaleY(i int) IAxisRescaleYContext
	AllAxisRescaleZ() []IAxisRescaleZContext
	AxisRescaleZ(i int) IAxisRescaleZContext
	AllAxisRescale4() []IAxisRescale4Context
	AxisRescale4(i int) IAxisRescale4Context
	AllAxisRescale5() []IAxisRescale5Context
	AxisRescale5(i int) IAxisRescale5Context
	AllDistOpX() []IDistOpXContext
	DistOpX(i int) IDistOpXContext
	AllDistOpY() []IDistOpYContext
	DistOpY(i int) IDistOpYContext
	AllDistOpZ() []IDistOpZContext
	DistOpZ(i int) IDistOpZContext
	AllDistOp4() []IDistOp4Context
	DistOp4(i int) IDistOp4Context
	AllDistOp5() []IDistOp5Context
	DistOp5(i int) IDistOp5Context
	AllFixNoAxisPtsX() []IFixNoAxisPtsXContext
	FixNoAxisPtsX(i int) IFixNoAxisPtsXContext
	AllFixNoAxisPtsY() []IFixNoAxisPtsYContext
	FixNoAxisPtsY(i int) IFixNoAxisPtsYContext
	AllFixNoAxisPtsZ() []IFixNoAxisPtsZContext
	FixNoAxisPtsZ(i int) IFixNoAxisPtsZContext
	AllFixNoAxisPts4() []IFixNoAxisPts4Context
	FixNoAxisPts4(i int) IFixNoAxisPts4Context
	AllFixNoAxisPts5() []IFixNoAxisPts5Context
	FixNoAxisPts5(i int) IFixNoAxisPts5Context
	AllFncValues() []IFncValuesContext
	FncValues(i int) IFncValuesContext
	AllIdentification() []IIdentificationContext
	Identification(i int) IIdentificationContext
	AllNoAxisPtsX() []INoAxisPtsXContext
	NoAxisPtsX(i int) INoAxisPtsXContext
	AllNoAxisPtsY() []INoAxisPtsYContext
	NoAxisPtsY(i int) INoAxisPtsYContext
	AllNoAxisPtsZ() []INoAxisPtsZContext
	NoAxisPtsZ(i int) INoAxisPtsZContext
	AllNoAxisPts4() []INoAxisPts4Context
	NoAxisPts4(i int) INoAxisPts4Context
	AllNoAxisPts5() []INoAxisPts5Context
	NoAxisPts5(i int) INoAxisPts5Context
	AllStaticRecordLayout() []IStaticRecordLayoutContext
	StaticRecordLayout(i int) IStaticRecordLayoutContext
	AllNoRescaleX() []INoRescaleXContext
	NoRescaleX(i int) INoRescaleXContext
	AllNoRescaleY() []INoRescaleYContext
	NoRescaleY(i int) INoRescaleYContext
	AllNoRescaleZ() []INoRescaleZContext
	NoRescaleZ(i int) INoRescaleZContext
	AllNoRescale4() []INoRescale4Context
	NoRescale4(i int) INoRescale4Context
	AllNoRescale5() []INoRescale5Context
	NoRescale5(i int) INoRescale5Context
	AllOffsetX() []IOffsetXContext
	OffsetX(i int) IOffsetXContext
	AllOffsetY() []IOffsetYContext
	OffsetY(i int) IOffsetYContext
	AllOffsetZ() []IOffsetZContext
	OffsetZ(i int) IOffsetZContext
	AllOffset4() []IOffset4Context
	Offset4(i int) IOffset4Context
	AllOffset5() []IOffset5Context
	Offset5(i int) IOffset5Context
	AllReserved() []IReservedContext
	Reserved(i int) IReservedContext
	AllRipAddrW() []IRipAddrWContext
	RipAddrW(i int) IRipAddrWContext
	AllRipAddrX() []IRipAddrXContext
	RipAddrX(i int) IRipAddrXContext
	AllRipAddrY() []IRipAddrYContext
	RipAddrY(i int) IRipAddrYContext
	AllRipAddrZ() []IRipAddrZContext
	RipAddrZ(i int) IRipAddrZContext
	AllRipAddr4() []IRipAddr4Context
	RipAddr4(i int) IRipAddr4Context
	AllRipAddr5() []IRipAddr5Context
	RipAddr5(i int) IRipAddr5Context
	AllShiftOpX() []IShiftOpXContext
	ShiftOpX(i int) IShiftOpXContext
	AllShiftOpY() []IShiftOpYContext
	ShiftOpY(i int) IShiftOpYContext
	AllShiftOpZ() []IShiftOpZContext
	ShiftOpZ(i int) IShiftOpZContext
	AllShiftOp4() []IShiftOp4Context
	ShiftOp4(i int) IShiftOp4Context
	AllShiftOp5() []IShiftOp5Context
	ShiftOp5(i int) IShiftOp5Context
	AllSrcAddrX() []ISrcAddrXContext
	SrcAddrX(i int) ISrcAddrXContext
	AllSrcAddrY() []ISrcAddrYContext
	SrcAddrY(i int) ISrcAddrYContext
	AllSrcAddrZ() []ISrcAddrZContext
	SrcAddrZ(i int) ISrcAddrZContext
	AllSrcAddr4() []ISrcAddr4Context
	SrcAddr4(i int) ISrcAddr4Context
	AllSrcAddr5() []ISrcAddr5Context
	SrcAddr5(i int) ISrcAddr5Context

	// IsRecordLayoutContext differentiates from other interfaces.
	IsRecordLayoutContext()
}

type RecordLayoutContext struct {
	*antlr.BaseParserRuleContext
	parser                 antlr.Parser
	name                   IIdentifierValueContext
	_alignmentByte         IAlignmentByteContext
	v_alignmentByte        []IAlignmentByteContext
	_alignmentFloat16Ieee  IAlignmentFloat16IeeeContext
	v_alignmentFloat16Ieee []IAlignmentFloat16IeeeContext
	_alignmentFloat32Ieee  IAlignmentFloat32IeeeContext
	v_alignmentFloat32Ieee []IAlignmentFloat32IeeeContext
	_alignmentFloat64Ieee  IAlignmentFloat64IeeeContext
	v_alignmentFloat64Ieee []IAlignmentFloat64IeeeContext
	_alignmentInt64        IAlignmentInt64Context
	v_alignmentInt64       []IAlignmentInt64Context
	_alignmentLong         IAlignmentLongContext
	v_alignmentLong        []IAlignmentLongContext
	_alignmentWord         IAlignmentWordContext
	v_alignmentWord        []IAlignmentWordContext
	_axisPtsX              IAxisPtsXContext
	v_axisPtsX             []IAxisPtsXContext
	_axisPtsY              IAxisPtsYContext
	v_axisPtsY             []IAxisPtsYContext
	_axisPtsZ              IAxisPtsZContext
	v_axisPtsZ             []IAxisPtsZContext
	_axisPts4              IAxisPts4Context
	v_axisPts4             []IAxisPts4Context
	_axisPts5              IAxisPts5Context
	v_axisPts5             []IAxisPts5Context
	_axisRescaleX          IAxisRescaleXContext
	v_axisRescaleX         []IAxisRescaleXContext
	_axisRescaleY          IAxisRescaleYContext
	v_axisRescaleY         []IAxisRescaleYContext
	_axisRescaleZ          IAxisRescaleZContext
	v_axisRescaleZ         []IAxisRescaleZContext
	_axisRescale4          IAxisRescale4Context
	v_axisRescale4         []IAxisRescale4Context
	_axisRescale5          IAxisRescale5Context
	v_axisRescale5         []IAxisRescale5Context
	_distOpX               IDistOpXContext
	v_distOpX              []IDistOpXContext
	_distOpY               IDistOpYContext
	v_distOpY              []IDistOpYContext
	_distOpZ               IDistOpZContext
	v_distOpZ              []IDistOpZContext
	_distOp4               IDistOp4Context
	v_distOp4              []IDistOp4Context
	_distOp5               IDistOp5Context
	v_distOp5              []IDistOp5Context
	_fixNoAxisPtsX         IFixNoAxisPtsXContext
	v_fixNoAxisPtsX        []IFixNoAxisPtsXContext
	_fixNoAxisPtsY         IFixNoAxisPtsYContext
	v_fixNoAxisPtsY        []IFixNoAxisPtsYContext
	_fixNoAxisPtsZ         IFixNoAxisPtsZContext
	v_fixNoAxisPtsZ        []IFixNoAxisPtsZContext
	_fixNoAxisPts4         IFixNoAxisPts4Context
	v_fixNoAxisPts4        []IFixNoAxisPts4Context
	_fixNoAxisPts5         IFixNoAxisPts5Context
	v_fixNoAxisPts5        []IFixNoAxisPts5Context
	_fncValues             IFncValuesContext
	v_fncValues            []IFncValuesContext
	_identification        IIdentificationContext
	v_identification       []IIdentificationContext
	_noAxisPtsX            INoAxisPtsXContext
	v_noAxisPtsX           []INoAxisPtsXContext
	_noAxisPtsY            INoAxisPtsYContext
	v_noAxisPtsY           []INoAxisPtsYContext
	_noAxisPtsZ            INoAxisPtsZContext
	v_noAxisPtsZ           []INoAxisPtsZContext
	_noAxisPts4            INoAxisPts4Context
	v_noAxisPts4           []INoAxisPts4Context
	_noAxisPts5            INoAxisPts5Context
	v_noAxisPts5           []INoAxisPts5Context
	_staticRecordLayout    IStaticRecordLayoutContext
	v_staticRecordLayout   []IStaticRecordLayoutContext
	_noRescaleX            INoRescaleXContext
	v_noRescaleX           []INoRescaleXContext
	_noRescaleY            INoRescaleYContext
	v_noRescaleY           []INoRescaleYContext
	_noRescaleZ            INoRescaleZContext
	v_noRescaleZ           []INoRescaleZContext
	_noRescale4            INoRescale4Context
	v_noRescale4           []INoRescale4Context
	_noRescale5            INoRescale5Context
	v_noRescale5           []INoRescale5Context
	_offsetX               IOffsetXContext
	v_offsetX              []IOffsetXContext
	_offsetY               IOffsetYContext
	v_offsetY              []IOffsetYContext
	_offsetZ               IOffsetZContext
	v_offsetZ              []IOffsetZContext
	_offset4               IOffset4Context
	v_offset4              []IOffset4Context
	_offset5               IOffset5Context
	v_offset5              []IOffset5Context
	_reserved              IReservedContext
	v_reserved             []IReservedContext
	_ripAddrW              IRipAddrWContext
	v_ripAddrW             []IRipAddrWContext
	_ripAddrX              IRipAddrXContext
	v_ripAddrX             []IRipAddrXContext
	_ripAddrY              IRipAddrYContext
	v_ripAddrY             []IRipAddrYContext
	_ripAddrZ              IRipAddrZContext
	v_ripAddrZ             []IRipAddrZContext
	_ripAddr4              IRipAddr4Context
	v_ripAddr4             []IRipAddr4Context
	_ripAddr5              IRipAddr5Context
	v_ripAddr5             []IRipAddr5Context
	_shiftOpX              IShiftOpXContext
	v_shiftOpX             []IShiftOpXContext
	_shiftOpY              IShiftOpYContext
	v_shiftOpY             []IShiftOpYContext
	_shiftOpZ              IShiftOpZContext
	v_shiftOpZ             []IShiftOpZContext
	_shiftOp4              IShiftOp4Context
	v_shiftOp4             []IShiftOp4Context
	_shiftOp5              IShiftOp5Context
	v_shiftOp5             []IShiftOp5Context
	_srcAddrX              ISrcAddrXContext
	v_srcAddrX             []ISrcAddrXContext
	_srcAddrY              ISrcAddrYContext
	v_srcAddrY             []ISrcAddrYContext
	_srcAddrZ              ISrcAddrZContext
	v_srcAddrZ             []ISrcAddrZContext
	_srcAddr4              ISrcAddr4Context
	v_srcAddr4             []ISrcAddr4Context
	_srcAddr5              ISrcAddr5Context
	v_srcAddr5             []ISrcAddr5Context
}

func NewEmptyRecordLayoutContext() *RecordLayoutContext {
	var p = new(RecordLayoutContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_recordLayout
	return p
}

func (*RecordLayoutContext) IsRecordLayoutContext() {}

func NewRecordLayoutContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RecordLayoutContext {
	var p = new(RecordLayoutContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_recordLayout

	return p
}

func (s *RecordLayoutContext) GetParser() antlr.Parser { return s.parser }

func (s *RecordLayoutContext) GetName() IIdentifierValueContext { return s.name }

func (s *RecordLayoutContext) Get_alignmentByte() IAlignmentByteContext { return s._alignmentByte }

func (s *RecordLayoutContext) Get_alignmentFloat16Ieee() IAlignmentFloat16IeeeContext {
	return s._alignmentFloat16Ieee
}

func (s *RecordLayoutContext) Get_alignmentFloat32Ieee() IAlignmentFloat32IeeeContext {
	return s._alignmentFloat32Ieee
}

func (s *RecordLayoutContext) Get_alignmentFloat64Ieee() IAlignmentFloat64IeeeContext {
	return s._alignmentFloat64Ieee
}

func (s *RecordLayoutContext) Get_alignmentInt64() IAlignmentInt64Context { return s._alignmentInt64 }

func (s *RecordLayoutContext) Get_alignmentLong() IAlignmentLongContext { return s._alignmentLong }

func (s *RecordLayoutContext) Get_alignmentWord() IAlignmentWordContext { return s._alignmentWord }

func (s *RecordLayoutContext) Get_axisPtsX() IAxisPtsXContext { return s._axisPtsX }

func (s *RecordLayoutContext) Get_axisPtsY() IAxisPtsYContext { return s._axisPtsY }

func (s *RecordLayoutContext) Get_axisPtsZ() IAxisPtsZContext { return s._axisPtsZ }

func (s *RecordLayoutContext) Get_axisPts4() IAxisPts4Context { return s._axisPts4 }

func (s *RecordLayoutContext) Get_axisPts5() IAxisPts5Context { return s._axisPts5 }

func (s *RecordLayoutContext) Get_axisRescaleX() IAxisRescaleXContext { return s._axisRescaleX }

func (s *RecordLayoutContext) Get_axisRescaleY() IAxisRescaleYContext { return s._axisRescaleY }

func (s *RecordLayoutContext) Get_axisRescaleZ() IAxisRescaleZContext { return s._axisRescaleZ }

func (s *RecordLayoutContext) Get_axisRescale4() IAxisRescale4Context { return s._axisRescale4 }

func (s *RecordLayoutContext) Get_axisRescale5() IAxisRescale5Context { return s._axisRescale5 }

func (s *RecordLayoutContext) Get_distOpX() IDistOpXContext { return s._distOpX }

func (s *RecordLayoutContext) Get_distOpY() IDistOpYContext { return s._distOpY }

func (s *RecordLayoutContext) Get_distOpZ() IDistOpZContext { return s._distOpZ }

func (s *RecordLayoutContext) Get_distOp4() IDistOp4Context { return s._distOp4 }

func (s *RecordLayoutContext) Get_distOp5() IDistOp5Context { return s._distOp5 }

func (s *RecordLayoutContext) Get_fixNoAxisPtsX() IFixNoAxisPtsXContext { return s._fixNoAxisPtsX }

func (s *RecordLayoutContext) Get_fixNoAxisPtsY() IFixNoAxisPtsYContext { return s._fixNoAxisPtsY }

func (s *RecordLayoutContext) Get_fixNoAxisPtsZ() IFixNoAxisPtsZContext { return s._fixNoAxisPtsZ }

func (s *RecordLayoutContext) Get_fixNoAxisPts4() IFixNoAxisPts4Context { return s._fixNoAxisPts4 }

func (s *RecordLayoutContext) Get_fixNoAxisPts5() IFixNoAxisPts5Context { return s._fixNoAxisPts5 }

func (s *RecordLayoutContext) Get_fncValues() IFncValuesContext { return s._fncValues }

func (s *RecordLayoutContext) Get_identification() IIdentificationContext { return s._identification }

func (s *RecordLayoutContext) Get_noAxisPtsX() INoAxisPtsXContext { return s._noAxisPtsX }

func (s *RecordLayoutContext) Get_noAxisPtsY() INoAxisPtsYContext { return s._noAxisPtsY }

func (s *RecordLayoutContext) Get_noAxisPtsZ() INoAxisPtsZContext { return s._noAxisPtsZ }

func (s *RecordLayoutContext) Get_noAxisPts4() INoAxisPts4Context { return s._noAxisPts4 }

func (s *RecordLayoutContext) Get_noAxisPts5() INoAxisPts5Context { return s._noAxisPts5 }

func (s *RecordLayoutContext) Get_staticRecordLayout() IStaticRecordLayoutContext {
	return s._staticRecordLayout
}

func (s *RecordLayoutContext) Get_noRescaleX() INoRescaleXContext { return s._noRescaleX }

func (s *RecordLayoutContext) Get_noRescaleY() INoRescaleYContext { return s._noRescaleY }

func (s *RecordLayoutContext) Get_noRescaleZ() INoRescaleZContext { return s._noRescaleZ }

func (s *RecordLayoutContext) Get_noRescale4() INoRescale4Context { return s._noRescale4 }

func (s *RecordLayoutContext) Get_noRescale5() INoRescale5Context { return s._noRescale5 }

func (s *RecordLayoutContext) Get_offsetX() IOffsetXContext { return s._offsetX }

func (s *RecordLayoutContext) Get_offsetY() IOffsetYContext { return s._offsetY }

func (s *RecordLayoutContext) Get_offsetZ() IOffsetZContext { return s._offsetZ }

func (s *RecordLayoutContext) Get_offset4() IOffset4Context { return s._offset4 }

func (s *RecordLayoutContext) Get_offset5() IOffset5Context { return s._offset5 }

func (s *RecordLayoutContext) Get_reserved() IReservedContext { return s._reserved }

func (s *RecordLayoutContext) Get_ripAddrW() IRipAddrWContext { return s._ripAddrW }

func (s *RecordLayoutContext) Get_ripAddrX() IRipAddrXContext { return s._ripAddrX }

func (s *RecordLayoutContext) Get_ripAddrY() IRipAddrYContext { return s._ripAddrY }

func (s *RecordLayoutContext) Get_ripAddrZ() IRipAddrZContext { return s._ripAddrZ }

func (s *RecordLayoutContext) Get_ripAddr4() IRipAddr4Context { return s._ripAddr4 }

func (s *RecordLayoutContext) Get_ripAddr5() IRipAddr5Context { return s._ripAddr5 }

func (s *RecordLayoutContext) Get_shiftOpX() IShiftOpXContext { return s._shiftOpX }

func (s *RecordLayoutContext) Get_shiftOpY() IShiftOpYContext { return s._shiftOpY }

func (s *RecordLayoutContext) Get_shiftOpZ() IShiftOpZContext { return s._shiftOpZ }

func (s *RecordLayoutContext) Get_shiftOp4() IShiftOp4Context { return s._shiftOp4 }

func (s *RecordLayoutContext) Get_shiftOp5() IShiftOp5Context { return s._shiftOp5 }

func (s *RecordLayoutContext) Get_srcAddrX() ISrcAddrXContext { return s._srcAddrX }

func (s *RecordLayoutContext) Get_srcAddrY() ISrcAddrYContext { return s._srcAddrY }

func (s *RecordLayoutContext) Get_srcAddrZ() ISrcAddrZContext { return s._srcAddrZ }

func (s *RecordLayoutContext) Get_srcAddr4() ISrcAddr4Context { return s._srcAddr4 }

func (s *RecordLayoutContext) Get_srcAddr5() ISrcAddr5Context { return s._srcAddr5 }

func (s *RecordLayoutContext) SetName(v IIdentifierValueContext) { s.name = v }

func (s *RecordLayoutContext) Set_alignmentByte(v IAlignmentByteContext) { s._alignmentByte = v }

func (s *RecordLayoutContext) Set_alignmentFloat16Ieee(v IAlignmentFloat16IeeeContext) {
	s._alignmentFloat16Ieee = v
}

func (s *RecordLayoutContext) Set_alignmentFloat32Ieee(v IAlignmentFloat32IeeeContext) {
	s._alignmentFloat32Ieee = v
}

func (s *RecordLayoutContext) Set_alignmentFloat64Ieee(v IAlignmentFloat64IeeeContext) {
	s._alignmentFloat64Ieee = v
}

func (s *RecordLayoutContext) Set_alignmentInt64(v IAlignmentInt64Context) { s._alignmentInt64 = v }

func (s *RecordLayoutContext) Set_alignmentLong(v IAlignmentLongContext) { s._alignmentLong = v }

func (s *RecordLayoutContext) Set_alignmentWord(v IAlignmentWordContext) { s._alignmentWord = v }

func (s *RecordLayoutContext) Set_axisPtsX(v IAxisPtsXContext) { s._axisPtsX = v }

func (s *RecordLayoutContext) Set_axisPtsY(v IAxisPtsYContext) { s._axisPtsY = v }

func (s *RecordLayoutContext) Set_axisPtsZ(v IAxisPtsZContext) { s._axisPtsZ = v }

func (s *RecordLayoutContext) Set_axisPts4(v IAxisPts4Context) { s._axisPts4 = v }

func (s *RecordLayoutContext) Set_axisPts5(v IAxisPts5Context) { s._axisPts5 = v }

func (s *RecordLayoutContext) Set_axisRescaleX(v IAxisRescaleXContext) { s._axisRescaleX = v }

func (s *RecordLayoutContext) Set_axisRescaleY(v IAxisRescaleYContext) { s._axisRescaleY = v }

func (s *RecordLayoutContext) Set_axisRescaleZ(v IAxisRescaleZContext) { s._axisRescaleZ = v }

func (s *RecordLayoutContext) Set_axisRescale4(v IAxisRescale4Context) { s._axisRescale4 = v }

func (s *RecordLayoutContext) Set_axisRescale5(v IAxisRescale5Context) { s._axisRescale5 = v }

func (s *RecordLayoutContext) Set_distOpX(v IDistOpXContext) { s._distOpX = v }

func (s *RecordLayoutContext) Set_distOpY(v IDistOpYContext) { s._distOpY = v }

func (s *RecordLayoutContext) Set_distOpZ(v IDistOpZContext) { s._distOpZ = v }

func (s *RecordLayoutContext) Set_distOp4(v IDistOp4Context) { s._distOp4 = v }

func (s *RecordLayoutContext) Set_distOp5(v IDistOp5Context) { s._distOp5 = v }

func (s *RecordLayoutContext) Set_fixNoAxisPtsX(v IFixNoAxisPtsXContext) { s._fixNoAxisPtsX = v }

func (s *RecordLayoutContext) Set_fixNoAxisPtsY(v IFixNoAxisPtsYContext) { s._fixNoAxisPtsY = v }

func (s *RecordLayoutContext) Set_fixNoAxisPtsZ(v IFixNoAxisPtsZContext) { s._fixNoAxisPtsZ = v }

func (s *RecordLayoutContext) Set_fixNoAxisPts4(v IFixNoAxisPts4Context) { s._fixNoAxisPts4 = v }

func (s *RecordLayoutContext) Set_fixNoAxisPts5(v IFixNoAxisPts5Context) { s._fixNoAxisPts5 = v }

func (s *RecordLayoutContext) Set_fncValues(v IFncValuesContext) { s._fncValues = v }

func (s *RecordLayoutContext) Set_identification(v IIdentificationContext) { s._identification = v }

func (s *RecordLayoutContext) Set_noAxisPtsX(v INoAxisPtsXContext) { s._noAxisPtsX = v }

func (s *RecordLayoutContext) Set_noAxisPtsY(v INoAxisPtsYContext) { s._noAxisPtsY = v }

func (s *RecordLayoutContext) Set_noAxisPtsZ(v INoAxisPtsZContext) { s._noAxisPtsZ = v }

func (s *RecordLayoutContext) Set_noAxisPts4(v INoAxisPts4Context) { s._noAxisPts4 = v }

func (s *RecordLayoutContext) Set_noAxisPts5(v INoAxisPts5Context) { s._noAxisPts5 = v }

func (s *RecordLayoutContext) Set_staticRecordLayout(v IStaticRecordLayoutContext) {
	s._staticRecordLayout = v
}

func (s *RecordLayoutContext) Set_noRescaleX(v INoRescaleXContext) { s._noRescaleX = v }

func (s *RecordLayoutContext) Set_noRescaleY(v INoRescaleYContext) { s._noRescaleY = v }

func (s *RecordLayoutContext) Set_noRescaleZ(v INoRescaleZContext) { s._noRescaleZ = v }

func (s *RecordLayoutContext) Set_noRescale4(v INoRescale4Context) { s._noRescale4 = v }

func (s *RecordLayoutContext) Set_noRescale5(v INoRescale5Context) { s._noRescale5 = v }

func (s *RecordLayoutContext) Set_offsetX(v IOffsetXContext) { s._offsetX = v }

func (s *RecordLayoutContext) Set_offsetY(v IOffsetYContext) { s._offsetY = v }

func (s *RecordLayoutContext) Set_offsetZ(v IOffsetZContext) { s._offsetZ = v }

func (s *RecordLayoutContext) Set_offset4(v IOffset4Context) { s._offset4 = v }

func (s *RecordLayoutContext) Set_offset5(v IOffset5Context) { s._offset5 = v }

func (s *RecordLayoutContext) Set_reserved(v IReservedContext) { s._reserved = v }

func (s *RecordLayoutContext) Set_ripAddrW(v IRipAddrWContext) { s._ripAddrW = v }

func (s *RecordLayoutContext) Set_ripAddrX(v IRipAddrXContext) { s._ripAddrX = v }

func (s *RecordLayoutContext) Set_ripAddrY(v IRipAddrYContext) { s._ripAddrY = v }

func (s *RecordLayoutContext) Set_ripAddrZ(v IRipAddrZContext) { s._ripAddrZ = v }

func (s *RecordLayoutContext) Set_ripAddr4(v IRipAddr4Context) { s._ripAddr4 = v }

func (s *RecordLayoutContext) Set_ripAddr5(v IRipAddr5Context) { s._ripAddr5 = v }

func (s *RecordLayoutContext) Set_shiftOpX(v IShiftOpXContext) { s._shiftOpX = v }

func (s *RecordLayoutContext) Set_shiftOpY(v IShiftOpYContext) { s._shiftOpY = v }

func (s *RecordLayoutContext) Set_shiftOpZ(v IShiftOpZContext) { s._shiftOpZ = v }

func (s *RecordLayoutContext) Set_shiftOp4(v IShiftOp4Context) { s._shiftOp4 = v }

func (s *RecordLayoutContext) Set_shiftOp5(v IShiftOp5Context) { s._shiftOp5 = v }

func (s *RecordLayoutContext) Set_srcAddrX(v ISrcAddrXContext) { s._srcAddrX = v }

func (s *RecordLayoutContext) Set_srcAddrY(v ISrcAddrYContext) { s._srcAddrY = v }

func (s *RecordLayoutContext) Set_srcAddrZ(v ISrcAddrZContext) { s._srcAddrZ = v }

func (s *RecordLayoutContext) Set_srcAddr4(v ISrcAddr4Context) { s._srcAddr4 = v }

func (s *RecordLayoutContext) Set_srcAddr5(v ISrcAddr5Context) { s._srcAddr5 = v }

func (s *RecordLayoutContext) GetV_alignmentByte() []IAlignmentByteContext { return s.v_alignmentByte }

func (s *RecordLayoutContext) GetV_alignmentFloat16Ieee() []IAlignmentFloat16IeeeContext {
	return s.v_alignmentFloat16Ieee
}

func (s *RecordLayoutContext) GetV_alignmentFloat32Ieee() []IAlignmentFloat32IeeeContext {
	return s.v_alignmentFloat32Ieee
}

func (s *RecordLayoutContext) GetV_alignmentFloat64Ieee() []IAlignmentFloat64IeeeContext {
	return s.v_alignmentFloat64Ieee
}

func (s *RecordLayoutContext) GetV_alignmentInt64() []IAlignmentInt64Context {
	return s.v_alignmentInt64
}

func (s *RecordLayoutContext) GetV_alignmentLong() []IAlignmentLongContext { return s.v_alignmentLong }

func (s *RecordLayoutContext) GetV_alignmentWord() []IAlignmentWordContext { return s.v_alignmentWord }

func (s *RecordLayoutContext) GetV_axisPtsX() []IAxisPtsXContext { return s.v_axisPtsX }

func (s *RecordLayoutContext) GetV_axisPtsY() []IAxisPtsYContext { return s.v_axisPtsY }

func (s *RecordLayoutContext) GetV_axisPtsZ() []IAxisPtsZContext { return s.v_axisPtsZ }

func (s *RecordLayoutContext) GetV_axisPts4() []IAxisPts4Context { return s.v_axisPts4 }

func (s *RecordLayoutContext) GetV_axisPts5() []IAxisPts5Context { return s.v_axisPts5 }

func (s *RecordLayoutContext) GetV_axisRescaleX() []IAxisRescaleXContext { return s.v_axisRescaleX }

func (s *RecordLayoutContext) GetV_axisRescaleY() []IAxisRescaleYContext { return s.v_axisRescaleY }

func (s *RecordLayoutContext) GetV_axisRescaleZ() []IAxisRescaleZContext { return s.v_axisRescaleZ }

func (s *RecordLayoutContext) GetV_axisRescale4() []IAxisRescale4Context { return s.v_axisRescale4 }

func (s *RecordLayoutContext) GetV_axisRescale5() []IAxisRescale5Context { return s.v_axisRescale5 }

func (s *RecordLayoutContext) GetV_distOpX() []IDistOpXContext { return s.v_distOpX }

func (s *RecordLayoutContext) GetV_distOpY() []IDistOpYContext { return s.v_distOpY }

func (s *RecordLayoutContext) GetV_distOpZ() []IDistOpZContext { return s.v_distOpZ }

func (s *RecordLayoutContext) GetV_distOp4() []IDistOp4Context { return s.v_distOp4 }

func (s *RecordLayoutContext) GetV_distOp5() []IDistOp5Context { return s.v_distOp5 }

func (s *RecordLayoutContext) GetV_fixNoAxisPtsX() []IFixNoAxisPtsXContext { return s.v_fixNoAxisPtsX }

func (s *RecordLayoutContext) GetV_fixNoAxisPtsY() []IFixNoAxisPtsYContext { return s.v_fixNoAxisPtsY }

func (s *RecordLayoutContext) GetV_fixNoAxisPtsZ() []IFixNoAxisPtsZContext { return s.v_fixNoAxisPtsZ }

func (s *RecordLayoutContext) GetV_fixNoAxisPts4() []IFixNoAxisPts4Context { return s.v_fixNoAxisPts4 }

func (s *RecordLayoutContext) GetV_fixNoAxisPts5() []IFixNoAxisPts5Context { return s.v_fixNoAxisPts5 }

func (s *RecordLayoutContext) GetV_fncValues() []IFncValuesContext { return s.v_fncValues }

func (s *RecordLayoutContext) GetV_identification() []IIdentificationContext {
	return s.v_identification
}

func (s *RecordLayoutContext) GetV_noAxisPtsX() []INoAxisPtsXContext { return s.v_noAxisPtsX }

func (s *RecordLayoutContext) GetV_noAxisPtsY() []INoAxisPtsYContext { return s.v_noAxisPtsY }

func (s *RecordLayoutContext) GetV_noAxisPtsZ() []INoAxisPtsZContext { return s.v_noAxisPtsZ }

func (s *RecordLayoutContext) GetV_noAxisPts4() []INoAxisPts4Context { return s.v_noAxisPts4 }

func (s *RecordLayoutContext) GetV_noAxisPts5() []INoAxisPts5Context { return s.v_noAxisPts5 }

func (s *RecordLayoutContext) GetV_staticRecordLayout() []IStaticRecordLayoutContext {
	return s.v_staticRecordLayout
}

func (s *RecordLayoutContext) GetV_noRescaleX() []INoRescaleXContext { return s.v_noRescaleX }

func (s *RecordLayoutContext) GetV_noRescaleY() []INoRescaleYContext { return s.v_noRescaleY }

func (s *RecordLayoutContext) GetV_noRescaleZ() []INoRescaleZContext { return s.v_noRescaleZ }

func (s *RecordLayoutContext) GetV_noRescale4() []INoRescale4Context { return s.v_noRescale4 }

func (s *RecordLayoutContext) GetV_noRescale5() []INoRescale5Context { return s.v_noRescale5 }

func (s *RecordLayoutContext) GetV_offsetX() []IOffsetXContext { return s.v_offsetX }

func (s *RecordLayoutContext) GetV_offsetY() []IOffsetYContext { return s.v_offsetY }

func (s *RecordLayoutContext) GetV_offsetZ() []IOffsetZContext { return s.v_offsetZ }

func (s *RecordLayoutContext) GetV_offset4() []IOffset4Context { return s.v_offset4 }

func (s *RecordLayoutContext) GetV_offset5() []IOffset5Context { return s.v_offset5 }

func (s *RecordLayoutContext) GetV_reserved() []IReservedContext { return s.v_reserved }

func (s *RecordLayoutContext) GetV_ripAddrW() []IRipAddrWContext { return s.v_ripAddrW }

func (s *RecordLayoutContext) GetV_ripAddrX() []IRipAddrXContext { return s.v_ripAddrX }

func (s *RecordLayoutContext) GetV_ripAddrY() []IRipAddrYContext { return s.v_ripAddrY }

func (s *RecordLayoutContext) GetV_ripAddrZ() []IRipAddrZContext { return s.v_ripAddrZ }

func (s *RecordLayoutContext) GetV_ripAddr4() []IRipAddr4Context { return s.v_ripAddr4 }

func (s *RecordLayoutContext) GetV_ripAddr5() []IRipAddr5Context { return s.v_ripAddr5 }

func (s *RecordLayoutContext) GetV_shiftOpX() []IShiftOpXContext { return s.v_shiftOpX }

func (s *RecordLayoutContext) GetV_shiftOpY() []IShiftOpYContext { return s.v_shiftOpY }

func (s *RecordLayoutContext) GetV_shiftOpZ() []IShiftOpZContext { return s.v_shiftOpZ }

func (s *RecordLayoutContext) GetV_shiftOp4() []IShiftOp4Context { return s.v_shiftOp4 }

func (s *RecordLayoutContext) GetV_shiftOp5() []IShiftOp5Context { return s.v_shiftOp5 }

func (s *RecordLayoutContext) GetV_srcAddrX() []ISrcAddrXContext { return s.v_srcAddrX }

func (s *RecordLayoutContext) GetV_srcAddrY() []ISrcAddrYContext { return s.v_srcAddrY }

func (s *RecordLayoutContext) GetV_srcAddrZ() []ISrcAddrZContext { return s.v_srcAddrZ }

func (s *RecordLayoutContext) GetV_srcAddr4() []ISrcAddr4Context { return s.v_srcAddr4 }

func (s *RecordLayoutContext) GetV_srcAddr5() []ISrcAddr5Context { return s.v_srcAddr5 }

func (s *RecordLayoutContext) SetV_alignmentByte(v []IAlignmentByteContext) { s.v_alignmentByte = v }

func (s *RecordLayoutContext) SetV_alignmentFloat16Ieee(v []IAlignmentFloat16IeeeContext) {
	s.v_alignmentFloat16Ieee = v
}

func (s *RecordLayoutContext) SetV_alignmentFloat32Ieee(v []IAlignmentFloat32IeeeContext) {
	s.v_alignmentFloat32Ieee = v
}

func (s *RecordLayoutContext) SetV_alignmentFloat64Ieee(v []IAlignmentFloat64IeeeContext) {
	s.v_alignmentFloat64Ieee = v
}

func (s *RecordLayoutContext) SetV_alignmentInt64(v []IAlignmentInt64Context) { s.v_alignmentInt64 = v }

func (s *RecordLayoutContext) SetV_alignmentLong(v []IAlignmentLongContext) { s.v_alignmentLong = v }

func (s *RecordLayoutContext) SetV_alignmentWord(v []IAlignmentWordContext) { s.v_alignmentWord = v }

func (s *RecordLayoutContext) SetV_axisPtsX(v []IAxisPtsXContext) { s.v_axisPtsX = v }

func (s *RecordLayoutContext) SetV_axisPtsY(v []IAxisPtsYContext) { s.v_axisPtsY = v }

func (s *RecordLayoutContext) SetV_axisPtsZ(v []IAxisPtsZContext) { s.v_axisPtsZ = v }

func (s *RecordLayoutContext) SetV_axisPts4(v []IAxisPts4Context) { s.v_axisPts4 = v }

func (s *RecordLayoutContext) SetV_axisPts5(v []IAxisPts5Context) { s.v_axisPts5 = v }

func (s *RecordLayoutContext) SetV_axisRescaleX(v []IAxisRescaleXContext) { s.v_axisRescaleX = v }

func (s *RecordLayoutContext) SetV_axisRescaleY(v []IAxisRescaleYContext) { s.v_axisRescaleY = v }

func (s *RecordLayoutContext) SetV_axisRescaleZ(v []IAxisRescaleZContext) { s.v_axisRescaleZ = v }

func (s *RecordLayoutContext) SetV_axisRescale4(v []IAxisRescale4Context) { s.v_axisRescale4 = v }

func (s *RecordLayoutContext) SetV_axisRescale5(v []IAxisRescale5Context) { s.v_axisRescale5 = v }

func (s *RecordLayoutContext) SetV_distOpX(v []IDistOpXContext) { s.v_distOpX = v }

func (s *RecordLayoutContext) SetV_distOpY(v []IDistOpYContext) { s.v_distOpY = v }

func (s *RecordLayoutContext) SetV_distOpZ(v []IDistOpZContext) { s.v_distOpZ = v }

func (s *RecordLayoutContext) SetV_distOp4(v []IDistOp4Context) { s.v_distOp4 = v }

func (s *RecordLayoutContext) SetV_distOp5(v []IDistOp5Context) { s.v_distOp5 = v }

func (s *RecordLayoutContext) SetV_fixNoAxisPtsX(v []IFixNoAxisPtsXContext) { s.v_fixNoAxisPtsX = v }

func (s *RecordLayoutContext) SetV_fixNoAxisPtsY(v []IFixNoAxisPtsYContext) { s.v_fixNoAxisPtsY = v }

func (s *RecordLayoutContext) SetV_fixNoAxisPtsZ(v []IFixNoAxisPtsZContext) { s.v_fixNoAxisPtsZ = v }

func (s *RecordLayoutContext) SetV_fixNoAxisPts4(v []IFixNoAxisPts4Context) { s.v_fixNoAxisPts4 = v }

func (s *RecordLayoutContext) SetV_fixNoAxisPts5(v []IFixNoAxisPts5Context) { s.v_fixNoAxisPts5 = v }

func (s *RecordLayoutContext) SetV_fncValues(v []IFncValuesContext) { s.v_fncValues = v }

func (s *RecordLayoutContext) SetV_identification(v []IIdentificationContext) { s.v_identification = v }

func (s *RecordLayoutContext) SetV_noAxisPtsX(v []INoAxisPtsXContext) { s.v_noAxisPtsX = v }

func (s *RecordLayoutContext) SetV_noAxisPtsY(v []INoAxisPtsYContext) { s.v_noAxisPtsY = v }

func (s *RecordLayoutContext) SetV_noAxisPtsZ(v []INoAxisPtsZContext) { s.v_noAxisPtsZ = v }

func (s *RecordLayoutContext) SetV_noAxisPts4(v []INoAxisPts4Context) { s.v_noAxisPts4 = v }

func (s *RecordLayoutContext) SetV_noAxisPts5(v []INoAxisPts5Context) { s.v_noAxisPts5 = v }

func (s *RecordLayoutContext) SetV_staticRecordLayout(v []IStaticRecordLayoutContext) {
	s.v_staticRecordLayout = v
}

func (s *RecordLayoutContext) SetV_noRescaleX(v []INoRescaleXContext) { s.v_noRescaleX = v }

func (s *RecordLayoutContext) SetV_noRescaleY(v []INoRescaleYContext) { s.v_noRescaleY = v }

func (s *RecordLayoutContext) SetV_noRescaleZ(v []INoRescaleZContext) { s.v_noRescaleZ = v }

func (s *RecordLayoutContext) SetV_noRescale4(v []INoRescale4Context) { s.v_noRescale4 = v }

func (s *RecordLayoutContext) SetV_noRescale5(v []INoRescale5Context) { s.v_noRescale5 = v }

func (s *RecordLayoutContext) SetV_offsetX(v []IOffsetXContext) { s.v_offsetX = v }

func (s *RecordLayoutContext) SetV_offsetY(v []IOffsetYContext) { s.v_offsetY = v }

func (s *RecordLayoutContext) SetV_offsetZ(v []IOffsetZContext) { s.v_offsetZ = v }

func (s *RecordLayoutContext) SetV_offset4(v []IOffset4Context) { s.v_offset4 = v }

func (s *RecordLayoutContext) SetV_offset5(v []IOffset5Context) { s.v_offset5 = v }

func (s *RecordLayoutContext) SetV_reserved(v []IReservedContext) { s.v_reserved = v }

func (s *RecordLayoutContext) SetV_ripAddrW(v []IRipAddrWContext) { s.v_ripAddrW = v }

func (s *RecordLayoutContext) SetV_ripAddrX(v []IRipAddrXContext) { s.v_ripAddrX = v }

func (s *RecordLayoutContext) SetV_ripAddrY(v []IRipAddrYContext) { s.v_ripAddrY = v }

func (s *RecordLayoutContext) SetV_ripAddrZ(v []IRipAddrZContext) { s.v_ripAddrZ = v }

func (s *RecordLayoutContext) SetV_ripAddr4(v []IRipAddr4Context) { s.v_ripAddr4 = v }

func (s *RecordLayoutContext) SetV_ripAddr5(v []IRipAddr5Context) { s.v_ripAddr5 = v }

func (s *RecordLayoutContext) SetV_shiftOpX(v []IShiftOpXContext) { s.v_shiftOpX = v }

func (s *RecordLayoutContext) SetV_shiftOpY(v []IShiftOpYContext) { s.v_shiftOpY = v }

func (s *RecordLayoutContext) SetV_shiftOpZ(v []IShiftOpZContext) { s.v_shiftOpZ = v }

func (s *RecordLayoutContext) SetV_shiftOp4(v []IShiftOp4Context) { s.v_shiftOp4 = v }

func (s *RecordLayoutContext) SetV_shiftOp5(v []IShiftOp5Context) { s.v_shiftOp5 = v }

func (s *RecordLayoutContext) SetV_srcAddrX(v []ISrcAddrXContext) { s.v_srcAddrX = v }

func (s *RecordLayoutContext) SetV_srcAddrY(v []ISrcAddrYContext) { s.v_srcAddrY = v }

func (s *RecordLayoutContext) SetV_srcAddrZ(v []ISrcAddrZContext) { s.v_srcAddrZ = v }

func (s *RecordLayoutContext) SetV_srcAddr4(v []ISrcAddr4Context) { s.v_srcAddr4 = v }

func (s *RecordLayoutContext) SetV_srcAddr5(v []ISrcAddr5Context) { s.v_srcAddr5 = v }

func (s *RecordLayoutContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(A2LParserBEGIN, 0)
}

func (s *RecordLayoutContext) END() antlr.TerminalNode {
	return s.GetToken(A2LParserEND, 0)
}

func (s *RecordLayoutContext) IdentifierValue() IIdentifierValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierValueContext)
}

func (s *RecordLayoutContext) AllAlignmentByte() []IAlignmentByteContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAlignmentByteContext); ok {
			len++
		}
	}

	tst := make([]IAlignmentByteContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAlignmentByteContext); ok {
			tst[i] = t.(IAlignmentByteContext)
			i++
		}
	}

	return tst
}

func (s *RecordLayoutContext) AlignmentByte(i int) IAlignmentByteContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlignmentByteContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlignmentByteContext)
}

func (s *RecordLayoutContext) AllAlignmentFloat16Ieee() []IAlignmentFloat16IeeeContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAlignmentFloat16IeeeContext); ok {
			len++
		}
	}

	tst := make([]IAlignmentFloat16IeeeContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAlignmentFloat16IeeeContext); ok {
			tst[i] = t.(IAlignmentFloat16IeeeContext)
			i++
		}
	}

	return tst
}

func (s *RecordLayoutContext) AlignmentFloat16Ieee(i int) IAlignmentFloat16IeeeContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlignmentFloat16IeeeContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlignmentFloat16IeeeContext)
}

func (s *RecordLayoutContext) AllAlignmentFloat32Ieee() []IAlignmentFloat32IeeeContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAlignmentFloat32IeeeContext); ok {
			len++
		}
	}

	tst := make([]IAlignmentFloat32IeeeContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAlignmentFloat32IeeeContext); ok {
			tst[i] = t.(IAlignmentFloat32IeeeContext)
			i++
		}
	}

	return tst
}

func (s *RecordLayoutContext) AlignmentFloat32Ieee(i int) IAlignmentFloat32IeeeContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlignmentFloat32IeeeContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlignmentFloat32IeeeContext)
}

func (s *RecordLayoutContext) AllAlignmentFloat64Ieee() []IAlignmentFloat64IeeeContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAlignmentFloat64IeeeContext); ok {
			len++
		}
	}

	tst := make([]IAlignmentFloat64IeeeContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAlignmentFloat64IeeeContext); ok {
			tst[i] = t.(IAlignmentFloat64IeeeContext)
			i++
		}
	}

	return tst
}

func (s *RecordLayoutContext) AlignmentFloat64Ieee(i int) IAlignmentFloat64IeeeContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlignmentFloat64IeeeContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlignmentFloat64IeeeContext)
}

func (s *RecordLayoutContext) AllAlignmentInt64() []IAlignmentInt64Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAlignmentInt64Context); ok {
			len++
		}
	}

	tst := make([]IAlignmentInt64Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAlignmentInt64Context); ok {
			tst[i] = t.(IAlignmentInt64Context)
			i++
		}
	}

	return tst
}

func (s *RecordLayoutContext) AlignmentInt64(i int) IAlignmentInt64Context {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlignmentInt64Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlignmentInt64Context)
}

func (s *RecordLayoutContext) AllAlignmentLong() []IAlignmentLongContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAlignmentLongContext); ok {
			len++
		}
	}

	tst := make([]IAlignmentLongContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAlignmentLongContext); ok {
			tst[i] = t.(IAlignmentLongContext)
			i++
		}
	}

	return tst
}

func (s *RecordLayoutContext) AlignmentLong(i int) IAlignmentLongContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlignmentLongContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlignmentLongContext)
}

func (s *RecordLayoutContext) AllAlignmentWord() []IAlignmentWordContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAlignmentWordContext); ok {
			len++
		}
	}

	tst := make([]IAlignmentWordContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAlignmentWordContext); ok {
			tst[i] = t.(IAlignmentWordContext)
			i++
		}
	}

	return tst
}

func (s *RecordLayoutContext) AlignmentWord(i int) IAlignmentWordContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlignmentWordContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlignmentWordContext)
}

func (s *RecordLayoutContext) AllAxisPtsX() []IAxisPtsXContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAxisPtsXContext); ok {
			len++
		}
	}

	tst := make([]IAxisPtsXContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAxisPtsXContext); ok {
			tst[i] = t.(IAxisPtsXContext)
			i++
		}
	}

	return tst
}

func (s *RecordLayoutContext) AxisPtsX(i int) IAxisPtsXContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAxisPtsXContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAxisPtsXContext)
}

func (s *RecordLayoutContext) AllAxisPtsY() []IAxisPtsYContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAxisPtsYContext); ok {
			len++
		}
	}

	tst := make([]IAxisPtsYContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAxisPtsYContext); ok {
			tst[i] = t.(IAxisPtsYContext)
			i++
		}
	}

	return tst
}

func (s *RecordLayoutContext) AxisPtsY(i int) IAxisPtsYContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAxisPtsYContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAxisPtsYContext)
}

func (s *RecordLayoutContext) AllAxisPtsZ() []IAxisPtsZContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAxisPtsZContext); ok {
			len++
		}
	}

	tst := make([]IAxisPtsZContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAxisPtsZContext); ok {
			tst[i] = t.(IAxisPtsZContext)
			i++
		}
	}

	return tst
}

func (s *RecordLayoutContext) AxisPtsZ(i int) IAxisPtsZContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAxisPtsZContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAxisPtsZContext)
}

func (s *RecordLayoutContext) AllAxisPts4() []IAxisPts4Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAxisPts4Context); ok {
			len++
		}
	}

	tst := make([]IAxisPts4Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAxisPts4Context); ok {
			tst[i] = t.(IAxisPts4Context)
			i++
		}
	}

	return tst
}

func (s *RecordLayoutContext) AxisPts4(i int) IAxisPts4Context {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAxisPts4Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAxisPts4Context)
}

func (s *RecordLayoutContext) AllAxisPts5() []IAxisPts5Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAxisPts5Context); ok {
			len++
		}
	}

	tst := make([]IAxisPts5Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAxisPts5Context); ok {
			tst[i] = t.(IAxisPts5Context)
			i++
		}
	}

	return tst
}

func (s *RecordLayoutContext) AxisPts5(i int) IAxisPts5Context {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAxisPts5Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAxisPts5Context)
}

func (s *RecordLayoutContext) AllAxisRescaleX() []IAxisRescaleXContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAxisRescaleXContext); ok {
			len++
		}
	}

	tst := make([]IAxisRescaleXContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAxisRescaleXContext); ok {
			tst[i] = t.(IAxisRescaleXContext)
			i++
		}
	}

	return tst
}

func (s *RecordLayoutContext) AxisRescaleX(i int) IAxisRescaleXContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAxisRescaleXContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAxisRescaleXContext)
}

func (s *RecordLayoutContext) AllAxisRescaleY() []IAxisRescaleYContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAxisRescaleYContext); ok {
			len++
		}
	}

	tst := make([]IAxisRescaleYContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAxisRescaleYContext); ok {
			tst[i] = t.(IAxisRescaleYContext)
			i++
		}
	}

	return tst
}

func (s *RecordLayoutContext) AxisRescaleY(i int) IAxisRescaleYContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAxisRescaleYContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAxisRescaleYContext)
}

func (s *RecordLayoutContext) AllAxisRescaleZ() []IAxisRescaleZContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAxisRescaleZContext); ok {
			len++
		}
	}

	tst := make([]IAxisRescaleZContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAxisRescaleZContext); ok {
			tst[i] = t.(IAxisRescaleZContext)
			i++
		}
	}

	return tst
}

func (s *RecordLayoutContext) AxisRescaleZ(i int) IAxisRescaleZContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAxisRescaleZContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAxisRescaleZContext)
}

func (s *RecordLayoutContext) AllAxisRescale4() []IAxisRescale4Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAxisRescale4Context); ok {
			len++
		}
	}

	tst := make([]IAxisRescale4Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAxisRescale4Context); ok {
			tst[i] = t.(IAxisRescale4Context)
			i++
		}
	}

	return tst
}

func (s *RecordLayoutContext) AxisRescale4(i int) IAxisRescale4Context {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAxisRescale4Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAxisRescale4Context)
}

func (s *RecordLayoutContext) AllAxisRescale5() []IAxisRescale5Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAxisRescale5Context); ok {
			len++
		}
	}

	tst := make([]IAxisRescale5Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAxisRescale5Context); ok {
			tst[i] = t.(IAxisRescale5Context)
			i++
		}
	}

	return tst
}

func (s *RecordLayoutContext) AxisRescale5(i int) IAxisRescale5Context {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAxisRescale5Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAxisRescale5Context)
}

func (s *RecordLayoutContext) AllDistOpX() []IDistOpXContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDistOpXContext); ok {
			len++
		}
	}

	tst := make([]IDistOpXContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDistOpXContext); ok {
			tst[i] = t.(IDistOpXContext)
			i++
		}
	}

	return tst
}

func (s *RecordLayoutContext) DistOpX(i int) IDistOpXContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDistOpXContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDistOpXContext)
}

func (s *RecordLayoutContext) AllDistOpY() []IDistOpYContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDistOpYContext); ok {
			len++
		}
	}

	tst := make([]IDistOpYContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDistOpYContext); ok {
			tst[i] = t.(IDistOpYContext)
			i++
		}
	}

	return tst
}

func (s *RecordLayoutContext) DistOpY(i int) IDistOpYContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDistOpYContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDistOpYContext)
}

func (s *RecordLayoutContext) AllDistOpZ() []IDistOpZContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDistOpZContext); ok {
			len++
		}
	}

	tst := make([]IDistOpZContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDistOpZContext); ok {
			tst[i] = t.(IDistOpZContext)
			i++
		}
	}

	return tst
}

func (s *RecordLayoutContext) DistOpZ(i int) IDistOpZContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDistOpZContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDistOpZContext)
}

func (s *RecordLayoutContext) AllDistOp4() []IDistOp4Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDistOp4Context); ok {
			len++
		}
	}

	tst := make([]IDistOp4Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDistOp4Context); ok {
			tst[i] = t.(IDistOp4Context)
			i++
		}
	}

	return tst
}

func (s *RecordLayoutContext) DistOp4(i int) IDistOp4Context {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDistOp4Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDistOp4Context)
}

func (s *RecordLayoutContext) AllDistOp5() []IDistOp5Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDistOp5Context); ok {
			len++
		}
	}

	tst := make([]IDistOp5Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDistOp5Context); ok {
			tst[i] = t.(IDistOp5Context)
			i++
		}
	}

	return tst
}

func (s *RecordLayoutContext) DistOp5(i int) IDistOp5Context {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDistOp5Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDistOp5Context)
}

func (s *RecordLayoutContext) AllFixNoAxisPtsX() []IFixNoAxisPtsXContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IFixNoAxisPtsXContext); ok {
			len++
		}
	}

	tst := make([]IFixNoAxisPtsXContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IFixNoAxisPtsXContext); ok {
			tst[i] = t.(IFixNoAxisPtsXContext)
			i++
		}
	}

	return tst
}

func (s *RecordLayoutContext) FixNoAxisPtsX(i int) IFixNoAxisPtsXContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFixNoAxisPtsXContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFixNoAxisPtsXContext)
}

func (s *RecordLayoutContext) AllFixNoAxisPtsY() []IFixNoAxisPtsYContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IFixNoAxisPtsYContext); ok {
			len++
		}
	}

	tst := make([]IFixNoAxisPtsYContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IFixNoAxisPtsYContext); ok {
			tst[i] = t.(IFixNoAxisPtsYContext)
			i++
		}
	}

	return tst
}

func (s *RecordLayoutContext) FixNoAxisPtsY(i int) IFixNoAxisPtsYContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFixNoAxisPtsYContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFixNoAxisPtsYContext)
}

func (s *RecordLayoutContext) AllFixNoAxisPtsZ() []IFixNoAxisPtsZContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IFixNoAxisPtsZContext); ok {
			len++
		}
	}

	tst := make([]IFixNoAxisPtsZContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IFixNoAxisPtsZContext); ok {
			tst[i] = t.(IFixNoAxisPtsZContext)
			i++
		}
	}

	return tst
}

func (s *RecordLayoutContext) FixNoAxisPtsZ(i int) IFixNoAxisPtsZContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFixNoAxisPtsZContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFixNoAxisPtsZContext)
}

func (s *RecordLayoutContext) AllFixNoAxisPts4() []IFixNoAxisPts4Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IFixNoAxisPts4Context); ok {
			len++
		}
	}

	tst := make([]IFixNoAxisPts4Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IFixNoAxisPts4Context); ok {
			tst[i] = t.(IFixNoAxisPts4Context)
			i++
		}
	}

	return tst
}

func (s *RecordLayoutContext) FixNoAxisPts4(i int) IFixNoAxisPts4Context {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFixNoAxisPts4Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFixNoAxisPts4Context)
}

func (s *RecordLayoutContext) AllFixNoAxisPts5() []IFixNoAxisPts5Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IFixNoAxisPts5Context); ok {
			len++
		}
	}

	tst := make([]IFixNoAxisPts5Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IFixNoAxisPts5Context); ok {
			tst[i] = t.(IFixNoAxisPts5Context)
			i++
		}
	}

	return tst
}

func (s *RecordLayoutContext) FixNoAxisPts5(i int) IFixNoAxisPts5Context {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFixNoAxisPts5Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFixNoAxisPts5Context)
}

func (s *RecordLayoutContext) AllFncValues() []IFncValuesContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IFncValuesContext); ok {
			len++
		}
	}

	tst := make([]IFncValuesContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IFncValuesContext); ok {
			tst[i] = t.(IFncValuesContext)
			i++
		}
	}

	return tst
}

func (s *RecordLayoutContext) FncValues(i int) IFncValuesContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFncValuesContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFncValuesContext)
}

func (s *RecordLayoutContext) AllIdentification() []IIdentificationContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentificationContext); ok {
			len++
		}
	}

	tst := make([]IIdentificationContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentificationContext); ok {
			tst[i] = t.(IIdentificationContext)
			i++
		}
	}

	return tst
}

func (s *RecordLayoutContext) Identification(i int) IIdentificationContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentificationContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentificationContext)
}

func (s *RecordLayoutContext) AllNoAxisPtsX() []INoAxisPtsXContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INoAxisPtsXContext); ok {
			len++
		}
	}

	tst := make([]INoAxisPtsXContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INoAxisPtsXContext); ok {
			tst[i] = t.(INoAxisPtsXContext)
			i++
		}
	}

	return tst
}

func (s *RecordLayoutContext) NoAxisPtsX(i int) INoAxisPtsXContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INoAxisPtsXContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INoAxisPtsXContext)
}

func (s *RecordLayoutContext) AllNoAxisPtsY() []INoAxisPtsYContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INoAxisPtsYContext); ok {
			len++
		}
	}

	tst := make([]INoAxisPtsYContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INoAxisPtsYContext); ok {
			tst[i] = t.(INoAxisPtsYContext)
			i++
		}
	}

	return tst
}

func (s *RecordLayoutContext) NoAxisPtsY(i int) INoAxisPtsYContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INoAxisPtsYContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INoAxisPtsYContext)
}

func (s *RecordLayoutContext) AllNoAxisPtsZ() []INoAxisPtsZContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INoAxisPtsZContext); ok {
			len++
		}
	}

	tst := make([]INoAxisPtsZContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INoAxisPtsZContext); ok {
			tst[i] = t.(INoAxisPtsZContext)
			i++
		}
	}

	return tst
}

func (s *RecordLayoutContext) NoAxisPtsZ(i int) INoAxisPtsZContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INoAxisPtsZContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INoAxisPtsZContext)
}

func (s *RecordLayoutContext) AllNoAxisPts4() []INoAxisPts4Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INoAxisPts4Context); ok {
			len++
		}
	}

	tst := make([]INoAxisPts4Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INoAxisPts4Context); ok {
			tst[i] = t.(INoAxisPts4Context)
			i++
		}
	}

	return tst
}

func (s *RecordLayoutContext) NoAxisPts4(i int) INoAxisPts4Context {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INoAxisPts4Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INoAxisPts4Context)
}

func (s *RecordLayoutContext) AllNoAxisPts5() []INoAxisPts5Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INoAxisPts5Context); ok {
			len++
		}
	}

	tst := make([]INoAxisPts5Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INoAxisPts5Context); ok {
			tst[i] = t.(INoAxisPts5Context)
			i++
		}
	}

	return tst
}

func (s *RecordLayoutContext) NoAxisPts5(i int) INoAxisPts5Context {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INoAxisPts5Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INoAxisPts5Context)
}

func (s *RecordLayoutContext) AllStaticRecordLayout() []IStaticRecordLayoutContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStaticRecordLayoutContext); ok {
			len++
		}
	}

	tst := make([]IStaticRecordLayoutContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStaticRecordLayoutContext); ok {
			tst[i] = t.(IStaticRecordLayoutContext)
			i++
		}
	}

	return tst
}

func (s *RecordLayoutContext) StaticRecordLayout(i int) IStaticRecordLayoutContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStaticRecordLayoutContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStaticRecordLayoutContext)
}

func (s *RecordLayoutContext) AllNoRescaleX() []INoRescaleXContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INoRescaleXContext); ok {
			len++
		}
	}

	tst := make([]INoRescaleXContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INoRescaleXContext); ok {
			tst[i] = t.(INoRescaleXContext)
			i++
		}
	}

	return tst
}

func (s *RecordLayoutContext) NoRescaleX(i int) INoRescaleXContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INoRescaleXContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INoRescaleXContext)
}

func (s *RecordLayoutContext) AllNoRescaleY() []INoRescaleYContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INoRescaleYContext); ok {
			len++
		}
	}

	tst := make([]INoRescaleYContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INoRescaleYContext); ok {
			tst[i] = t.(INoRescaleYContext)
			i++
		}
	}

	return tst
}

func (s *RecordLayoutContext) NoRescaleY(i int) INoRescaleYContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INoRescaleYContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INoRescaleYContext)
}

func (s *RecordLayoutContext) AllNoRescaleZ() []INoRescaleZContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INoRescaleZContext); ok {
			len++
		}
	}

	tst := make([]INoRescaleZContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INoRescaleZContext); ok {
			tst[i] = t.(INoRescaleZContext)
			i++
		}
	}

	return tst
}

func (s *RecordLayoutContext) NoRescaleZ(i int) INoRescaleZContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INoRescaleZContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INoRescaleZContext)
}

func (s *RecordLayoutContext) AllNoRescale4() []INoRescale4Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INoRescale4Context); ok {
			len++
		}
	}

	tst := make([]INoRescale4Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INoRescale4Context); ok {
			tst[i] = t.(INoRescale4Context)
			i++
		}
	}

	return tst
}

func (s *RecordLayoutContext) NoRescale4(i int) INoRescale4Context {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INoRescale4Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INoRescale4Context)
}

func (s *RecordLayoutContext) AllNoRescale5() []INoRescale5Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INoRescale5Context); ok {
			len++
		}
	}

	tst := make([]INoRescale5Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INoRescale5Context); ok {
			tst[i] = t.(INoRescale5Context)
			i++
		}
	}

	return tst
}

func (s *RecordLayoutContext) NoRescale5(i int) INoRescale5Context {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INoRescale5Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INoRescale5Context)
}

func (s *RecordLayoutContext) AllOffsetX() []IOffsetXContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IOffsetXContext); ok {
			len++
		}
	}

	tst := make([]IOffsetXContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IOffsetXContext); ok {
			tst[i] = t.(IOffsetXContext)
			i++
		}
	}

	return tst
}

func (s *RecordLayoutContext) OffsetX(i int) IOffsetXContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOffsetXContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOffsetXContext)
}

func (s *RecordLayoutContext) AllOffsetY() []IOffsetYContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IOffsetYContext); ok {
			len++
		}
	}

	tst := make([]IOffsetYContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IOffsetYContext); ok {
			tst[i] = t.(IOffsetYContext)
			i++
		}
	}

	return tst
}

func (s *RecordLayoutContext) OffsetY(i int) IOffsetYContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOffsetYContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOffsetYContext)
}

func (s *RecordLayoutContext) AllOffsetZ() []IOffsetZContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IOffsetZContext); ok {
			len++
		}
	}

	tst := make([]IOffsetZContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IOffsetZContext); ok {
			tst[i] = t.(IOffsetZContext)
			i++
		}
	}

	return tst
}

func (s *RecordLayoutContext) OffsetZ(i int) IOffsetZContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOffsetZContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOffsetZContext)
}

func (s *RecordLayoutContext) AllOffset4() []IOffset4Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IOffset4Context); ok {
			len++
		}
	}

	tst := make([]IOffset4Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IOffset4Context); ok {
			tst[i] = t.(IOffset4Context)
			i++
		}
	}

	return tst
}

func (s *RecordLayoutContext) Offset4(i int) IOffset4Context {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOffset4Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOffset4Context)
}

func (s *RecordLayoutContext) AllOffset5() []IOffset5Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IOffset5Context); ok {
			len++
		}
	}

	tst := make([]IOffset5Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IOffset5Context); ok {
			tst[i] = t.(IOffset5Context)
			i++
		}
	}

	return tst
}

func (s *RecordLayoutContext) Offset5(i int) IOffset5Context {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOffset5Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOffset5Context)
}

func (s *RecordLayoutContext) AllReserved() []IReservedContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IReservedContext); ok {
			len++
		}
	}

	tst := make([]IReservedContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IReservedContext); ok {
			tst[i] = t.(IReservedContext)
			i++
		}
	}

	return tst
}

func (s *RecordLayoutContext) Reserved(i int) IReservedContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IReservedContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IReservedContext)
}

func (s *RecordLayoutContext) AllRipAddrW() []IRipAddrWContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IRipAddrWContext); ok {
			len++
		}
	}

	tst := make([]IRipAddrWContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IRipAddrWContext); ok {
			tst[i] = t.(IRipAddrWContext)
			i++
		}
	}

	return tst
}

func (s *RecordLayoutContext) RipAddrW(i int) IRipAddrWContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRipAddrWContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRipAddrWContext)
}

func (s *RecordLayoutContext) AllRipAddrX() []IRipAddrXContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IRipAddrXContext); ok {
			len++
		}
	}

	tst := make([]IRipAddrXContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IRipAddrXContext); ok {
			tst[i] = t.(IRipAddrXContext)
			i++
		}
	}

	return tst
}

func (s *RecordLayoutContext) RipAddrX(i int) IRipAddrXContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRipAddrXContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRipAddrXContext)
}

func (s *RecordLayoutContext) AllRipAddrY() []IRipAddrYContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IRipAddrYContext); ok {
			len++
		}
	}

	tst := make([]IRipAddrYContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IRipAddrYContext); ok {
			tst[i] = t.(IRipAddrYContext)
			i++
		}
	}

	return tst
}

func (s *RecordLayoutContext) RipAddrY(i int) IRipAddrYContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRipAddrYContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRipAddrYContext)
}

func (s *RecordLayoutContext) AllRipAddrZ() []IRipAddrZContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IRipAddrZContext); ok {
			len++
		}
	}

	tst := make([]IRipAddrZContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IRipAddrZContext); ok {
			tst[i] = t.(IRipAddrZContext)
			i++
		}
	}

	return tst
}

func (s *RecordLayoutContext) RipAddrZ(i int) IRipAddrZContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRipAddrZContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRipAddrZContext)
}

func (s *RecordLayoutContext) AllRipAddr4() []IRipAddr4Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IRipAddr4Context); ok {
			len++
		}
	}

	tst := make([]IRipAddr4Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IRipAddr4Context); ok {
			tst[i] = t.(IRipAddr4Context)
			i++
		}
	}

	return tst
}

func (s *RecordLayoutContext) RipAddr4(i int) IRipAddr4Context {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRipAddr4Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRipAddr4Context)
}

func (s *RecordLayoutContext) AllRipAddr5() []IRipAddr5Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IRipAddr5Context); ok {
			len++
		}
	}

	tst := make([]IRipAddr5Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IRipAddr5Context); ok {
			tst[i] = t.(IRipAddr5Context)
			i++
		}
	}

	return tst
}

func (s *RecordLayoutContext) RipAddr5(i int) IRipAddr5Context {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRipAddr5Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRipAddr5Context)
}

func (s *RecordLayoutContext) AllShiftOpX() []IShiftOpXContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IShiftOpXContext); ok {
			len++
		}
	}

	tst := make([]IShiftOpXContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IShiftOpXContext); ok {
			tst[i] = t.(IShiftOpXContext)
			i++
		}
	}

	return tst
}

func (s *RecordLayoutContext) ShiftOpX(i int) IShiftOpXContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IShiftOpXContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IShiftOpXContext)
}

func (s *RecordLayoutContext) AllShiftOpY() []IShiftOpYContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IShiftOpYContext); ok {
			len++
		}
	}

	tst := make([]IShiftOpYContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IShiftOpYContext); ok {
			tst[i] = t.(IShiftOpYContext)
			i++
		}
	}

	return tst
}

func (s *RecordLayoutContext) ShiftOpY(i int) IShiftOpYContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IShiftOpYContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IShiftOpYContext)
}

func (s *RecordLayoutContext) AllShiftOpZ() []IShiftOpZContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IShiftOpZContext); ok {
			len++
		}
	}

	tst := make([]IShiftOpZContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IShiftOpZContext); ok {
			tst[i] = t.(IShiftOpZContext)
			i++
		}
	}

	return tst
}

func (s *RecordLayoutContext) ShiftOpZ(i int) IShiftOpZContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IShiftOpZContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IShiftOpZContext)
}

func (s *RecordLayoutContext) AllShiftOp4() []IShiftOp4Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IShiftOp4Context); ok {
			len++
		}
	}

	tst := make([]IShiftOp4Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IShiftOp4Context); ok {
			tst[i] = t.(IShiftOp4Context)
			i++
		}
	}

	return tst
}

func (s *RecordLayoutContext) ShiftOp4(i int) IShiftOp4Context {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IShiftOp4Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IShiftOp4Context)
}

func (s *RecordLayoutContext) AllShiftOp5() []IShiftOp5Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IShiftOp5Context); ok {
			len++
		}
	}

	tst := make([]IShiftOp5Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IShiftOp5Context); ok {
			tst[i] = t.(IShiftOp5Context)
			i++
		}
	}

	return tst
}

func (s *RecordLayoutContext) ShiftOp5(i int) IShiftOp5Context {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IShiftOp5Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IShiftOp5Context)
}

func (s *RecordLayoutContext) AllSrcAddrX() []ISrcAddrXContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISrcAddrXContext); ok {
			len++
		}
	}

	tst := make([]ISrcAddrXContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISrcAddrXContext); ok {
			tst[i] = t.(ISrcAddrXContext)
			i++
		}
	}

	return tst
}

func (s *RecordLayoutContext) SrcAddrX(i int) ISrcAddrXContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISrcAddrXContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISrcAddrXContext)
}

func (s *RecordLayoutContext) AllSrcAddrY() []ISrcAddrYContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISrcAddrYContext); ok {
			len++
		}
	}

	tst := make([]ISrcAddrYContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISrcAddrYContext); ok {
			tst[i] = t.(ISrcAddrYContext)
			i++
		}
	}

	return tst
}

func (s *RecordLayoutContext) SrcAddrY(i int) ISrcAddrYContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISrcAddrYContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISrcAddrYContext)
}

func (s *RecordLayoutContext) AllSrcAddrZ() []ISrcAddrZContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISrcAddrZContext); ok {
			len++
		}
	}

	tst := make([]ISrcAddrZContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISrcAddrZContext); ok {
			tst[i] = t.(ISrcAddrZContext)
			i++
		}
	}

	return tst
}

func (s *RecordLayoutContext) SrcAddrZ(i int) ISrcAddrZContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISrcAddrZContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISrcAddrZContext)
}

func (s *RecordLayoutContext) AllSrcAddr4() []ISrcAddr4Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISrcAddr4Context); ok {
			len++
		}
	}

	tst := make([]ISrcAddr4Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISrcAddr4Context); ok {
			tst[i] = t.(ISrcAddr4Context)
			i++
		}
	}

	return tst
}

func (s *RecordLayoutContext) SrcAddr4(i int) ISrcAddr4Context {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISrcAddr4Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISrcAddr4Context)
}

func (s *RecordLayoutContext) AllSrcAddr5() []ISrcAddr5Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISrcAddr5Context); ok {
			len++
		}
	}

	tst := make([]ISrcAddr5Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISrcAddr5Context); ok {
			tst[i] = t.(ISrcAddr5Context)
			i++
		}
	}

	return tst
}

func (s *RecordLayoutContext) SrcAddr5(i int) ISrcAddr5Context {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISrcAddr5Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISrcAddr5Context)
}

func (s *RecordLayoutContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RecordLayoutContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RecordLayoutContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterRecordLayout(s)
	}
}

func (s *RecordLayoutContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitRecordLayout(s)
	}
}

func (s *RecordLayoutContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitRecordLayout(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) RecordLayout() (localctx IRecordLayoutContext) {
	this := p
	_ = this

	localctx = NewRecordLayoutContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 222, A2LParserRULE_recordLayout)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1371)
		p.Match(A2LParserBEGIN)
	}
	{
		p.SetState(1372)
		p.Match(A2LParserT__164)
	}
	{
		p.SetState(1373)

		var _x = p.IdentifierValue()

		localctx.(*RecordLayoutContext).name = _x
	}
	p.SetState(1438)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&254) != 0) || ((int64((_la-149)) & ^0x3f) == 0 && ((int64(1)<<(_la-149))&-1924145479679) != 0) || ((int64((_la-213)) & ^0x3f) == 0 && ((int64(1)<<(_la-213))&1023) != 0) {
		p.SetState(1436)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case A2LParserT__0:
			{
				p.SetState(1374)

				var _x = p.AlignmentByte()

				localctx.(*RecordLayoutContext)._alignmentByte = _x
			}
			localctx.(*RecordLayoutContext).v_alignmentByte = append(localctx.(*RecordLayoutContext).v_alignmentByte, localctx.(*RecordLayoutContext)._alignmentByte)

		case A2LParserT__1:
			{
				p.SetState(1375)

				var _x = p.AlignmentFloat16Ieee()

				localctx.(*RecordLayoutContext)._alignmentFloat16Ieee = _x
			}
			localctx.(*RecordLayoutContext).v_alignmentFloat16Ieee = append(localctx.(*RecordLayoutContext).v_alignmentFloat16Ieee, localctx.(*RecordLayoutContext)._alignmentFloat16Ieee)

		case A2LParserT__2:
			{
				p.SetState(1376)

				var _x = p.AlignmentFloat32Ieee()

				localctx.(*RecordLayoutContext)._alignmentFloat32Ieee = _x
			}
			localctx.(*RecordLayoutContext).v_alignmentFloat32Ieee = append(localctx.(*RecordLayoutContext).v_alignmentFloat32Ieee, localctx.(*RecordLayoutContext)._alignmentFloat32Ieee)

		case A2LParserT__3:
			{
				p.SetState(1377)

				var _x = p.AlignmentFloat64Ieee()

				localctx.(*RecordLayoutContext)._alignmentFloat64Ieee = _x
			}
			localctx.(*RecordLayoutContext).v_alignmentFloat64Ieee = append(localctx.(*RecordLayoutContext).v_alignmentFloat64Ieee, localctx.(*RecordLayoutContext)._alignmentFloat64Ieee)

		case A2LParserT__4:
			{
				p.SetState(1378)

				var _x = p.AlignmentInt64()

				localctx.(*RecordLayoutContext)._alignmentInt64 = _x
			}
			localctx.(*RecordLayoutContext).v_alignmentInt64 = append(localctx.(*RecordLayoutContext).v_alignmentInt64, localctx.(*RecordLayoutContext)._alignmentInt64)

		case A2LParserT__5:
			{
				p.SetState(1379)

				var _x = p.AlignmentLong()

				localctx.(*RecordLayoutContext)._alignmentLong = _x
			}
			localctx.(*RecordLayoutContext).v_alignmentLong = append(localctx.(*RecordLayoutContext).v_alignmentLong, localctx.(*RecordLayoutContext)._alignmentLong)

		case A2LParserT__6:
			{
				p.SetState(1380)

				var _x = p.AlignmentWord()

				localctx.(*RecordLayoutContext)._alignmentWord = _x
			}
			localctx.(*RecordLayoutContext).v_alignmentWord = append(localctx.(*RecordLayoutContext).v_alignmentWord, localctx.(*RecordLayoutContext)._alignmentWord)

		case A2LParserT__165:
			{
				p.SetState(1381)

				var _x = p.AxisPtsX()

				localctx.(*RecordLayoutContext)._axisPtsX = _x
			}
			localctx.(*RecordLayoutContext).v_axisPtsX = append(localctx.(*RecordLayoutContext).v_axisPtsX, localctx.(*RecordLayoutContext)._axisPtsX)

		case A2LParserT__166:
			{
				p.SetState(1382)

				var _x = p.AxisPtsY()

				localctx.(*RecordLayoutContext)._axisPtsY = _x
			}
			localctx.(*RecordLayoutContext).v_axisPtsY = append(localctx.(*RecordLayoutContext).v_axisPtsY, localctx.(*RecordLayoutContext)._axisPtsY)

		case A2LParserT__167:
			{
				p.SetState(1383)

				var _x = p.AxisPtsZ()

				localctx.(*RecordLayoutContext)._axisPtsZ = _x
			}
			localctx.(*RecordLayoutContext).v_axisPtsZ = append(localctx.(*RecordLayoutContext).v_axisPtsZ, localctx.(*RecordLayoutContext)._axisPtsZ)

		case A2LParserT__168:
			{
				p.SetState(1384)

				var _x = p.AxisPts4()

				localctx.(*RecordLayoutContext)._axisPts4 = _x
			}
			localctx.(*RecordLayoutContext).v_axisPts4 = append(localctx.(*RecordLayoutContext).v_axisPts4, localctx.(*RecordLayoutContext)._axisPts4)

		case A2LParserT__169:
			{
				p.SetState(1385)

				var _x = p.AxisPts5()

				localctx.(*RecordLayoutContext)._axisPts5 = _x
			}
			localctx.(*RecordLayoutContext).v_axisPts5 = append(localctx.(*RecordLayoutContext).v_axisPts5, localctx.(*RecordLayoutContext)._axisPts5)

		case A2LParserT__170:
			{
				p.SetState(1386)

				var _x = p.AxisRescaleX()

				localctx.(*RecordLayoutContext)._axisRescaleX = _x
			}
			localctx.(*RecordLayoutContext).v_axisRescaleX = append(localctx.(*RecordLayoutContext).v_axisRescaleX, localctx.(*RecordLayoutContext)._axisRescaleX)

		case A2LParserT__171:
			{
				p.SetState(1387)

				var _x = p.AxisRescaleY()

				localctx.(*RecordLayoutContext)._axisRescaleY = _x
			}
			localctx.(*RecordLayoutContext).v_axisRescaleY = append(localctx.(*RecordLayoutContext).v_axisRescaleY, localctx.(*RecordLayoutContext)._axisRescaleY)

		case A2LParserT__172:
			{
				p.SetState(1388)

				var _x = p.AxisRescaleZ()

				localctx.(*RecordLayoutContext)._axisRescaleZ = _x
			}
			localctx.(*RecordLayoutContext).v_axisRescaleZ = append(localctx.(*RecordLayoutContext).v_axisRescaleZ, localctx.(*RecordLayoutContext)._axisRescaleZ)

		case A2LParserT__173:
			{
				p.SetState(1389)

				var _x = p.AxisRescale4()

				localctx.(*RecordLayoutContext)._axisRescale4 = _x
			}
			localctx.(*RecordLayoutContext).v_axisRescale4 = append(localctx.(*RecordLayoutContext).v_axisRescale4, localctx.(*RecordLayoutContext)._axisRescale4)

		case A2LParserT__174:
			{
				p.SetState(1390)

				var _x = p.AxisRescale5()

				localctx.(*RecordLayoutContext)._axisRescale5 = _x
			}
			localctx.(*RecordLayoutContext).v_axisRescale5 = append(localctx.(*RecordLayoutContext).v_axisRescale5, localctx.(*RecordLayoutContext)._axisRescale5)

		case A2LParserT__175:
			{
				p.SetState(1391)

				var _x = p.DistOpX()

				localctx.(*RecordLayoutContext)._distOpX = _x
			}
			localctx.(*RecordLayoutContext).v_distOpX = append(localctx.(*RecordLayoutContext).v_distOpX, localctx.(*RecordLayoutContext)._distOpX)

		case A2LParserT__176:
			{
				p.SetState(1392)

				var _x = p.DistOpY()

				localctx.(*RecordLayoutContext)._distOpY = _x
			}
			localctx.(*RecordLayoutContext).v_distOpY = append(localctx.(*RecordLayoutContext).v_distOpY, localctx.(*RecordLayoutContext)._distOpY)

		case A2LParserT__177:
			{
				p.SetState(1393)

				var _x = p.DistOpZ()

				localctx.(*RecordLayoutContext)._distOpZ = _x
			}
			localctx.(*RecordLayoutContext).v_distOpZ = append(localctx.(*RecordLayoutContext).v_distOpZ, localctx.(*RecordLayoutContext)._distOpZ)

		case A2LParserT__178:
			{
				p.SetState(1394)

				var _x = p.DistOp4()

				localctx.(*RecordLayoutContext)._distOp4 = _x
			}
			localctx.(*RecordLayoutContext).v_distOp4 = append(localctx.(*RecordLayoutContext).v_distOp4, localctx.(*RecordLayoutContext)._distOp4)

		case A2LParserT__179:
			{
				p.SetState(1395)

				var _x = p.DistOp5()

				localctx.(*RecordLayoutContext)._distOp5 = _x
			}
			localctx.(*RecordLayoutContext).v_distOp5 = append(localctx.(*RecordLayoutContext).v_distOp5, localctx.(*RecordLayoutContext)._distOp5)

		case A2LParserT__180:
			{
				p.SetState(1396)

				var _x = p.FixNoAxisPtsX()

				localctx.(*RecordLayoutContext)._fixNoAxisPtsX = _x
			}
			localctx.(*RecordLayoutContext).v_fixNoAxisPtsX = append(localctx.(*RecordLayoutContext).v_fixNoAxisPtsX, localctx.(*RecordLayoutContext)._fixNoAxisPtsX)

		case A2LParserT__181:
			{
				p.SetState(1397)

				var _x = p.FixNoAxisPtsY()

				localctx.(*RecordLayoutContext)._fixNoAxisPtsY = _x
			}
			localctx.(*RecordLayoutContext).v_fixNoAxisPtsY = append(localctx.(*RecordLayoutContext).v_fixNoAxisPtsY, localctx.(*RecordLayoutContext)._fixNoAxisPtsY)

		case A2LParserT__182:
			{
				p.SetState(1398)

				var _x = p.FixNoAxisPtsZ()

				localctx.(*RecordLayoutContext)._fixNoAxisPtsZ = _x
			}
			localctx.(*RecordLayoutContext).v_fixNoAxisPtsZ = append(localctx.(*RecordLayoutContext).v_fixNoAxisPtsZ, localctx.(*RecordLayoutContext)._fixNoAxisPtsZ)

		case A2LParserT__183:
			{
				p.SetState(1399)

				var _x = p.FixNoAxisPts4()

				localctx.(*RecordLayoutContext)._fixNoAxisPts4 = _x
			}
			localctx.(*RecordLayoutContext).v_fixNoAxisPts4 = append(localctx.(*RecordLayoutContext).v_fixNoAxisPts4, localctx.(*RecordLayoutContext)._fixNoAxisPts4)

		case A2LParserT__184:
			{
				p.SetState(1400)

				var _x = p.FixNoAxisPts5()

				localctx.(*RecordLayoutContext)._fixNoAxisPts5 = _x
			}
			localctx.(*RecordLayoutContext).v_fixNoAxisPts5 = append(localctx.(*RecordLayoutContext).v_fixNoAxisPts5, localctx.(*RecordLayoutContext)._fixNoAxisPts5)

		case A2LParserT__185:
			{
				p.SetState(1401)

				var _x = p.FncValues()

				localctx.(*RecordLayoutContext)._fncValues = _x
			}
			localctx.(*RecordLayoutContext).v_fncValues = append(localctx.(*RecordLayoutContext).v_fncValues, localctx.(*RecordLayoutContext)._fncValues)

		case A2LParserT__189:
			{
				p.SetState(1402)

				var _x = p.Identification()

				localctx.(*RecordLayoutContext)._identification = _x
			}
			localctx.(*RecordLayoutContext).v_identification = append(localctx.(*RecordLayoutContext).v_identification, localctx.(*RecordLayoutContext)._identification)

		case A2LParserT__190:
			{
				p.SetState(1403)

				var _x = p.NoAxisPtsX()

				localctx.(*RecordLayoutContext)._noAxisPtsX = _x
			}
			localctx.(*RecordLayoutContext).v_noAxisPtsX = append(localctx.(*RecordLayoutContext).v_noAxisPtsX, localctx.(*RecordLayoutContext)._noAxisPtsX)

		case A2LParserT__191:
			{
				p.SetState(1404)

				var _x = p.NoAxisPtsY()

				localctx.(*RecordLayoutContext)._noAxisPtsY = _x
			}
			localctx.(*RecordLayoutContext).v_noAxisPtsY = append(localctx.(*RecordLayoutContext).v_noAxisPtsY, localctx.(*RecordLayoutContext)._noAxisPtsY)

		case A2LParserT__192:
			{
				p.SetState(1405)

				var _x = p.NoAxisPtsZ()

				localctx.(*RecordLayoutContext)._noAxisPtsZ = _x
			}
			localctx.(*RecordLayoutContext).v_noAxisPtsZ = append(localctx.(*RecordLayoutContext).v_noAxisPtsZ, localctx.(*RecordLayoutContext)._noAxisPtsZ)

		case A2LParserT__193:
			{
				p.SetState(1406)

				var _x = p.NoAxisPts4()

				localctx.(*RecordLayoutContext)._noAxisPts4 = _x
			}
			localctx.(*RecordLayoutContext).v_noAxisPts4 = append(localctx.(*RecordLayoutContext).v_noAxisPts4, localctx.(*RecordLayoutContext)._noAxisPts4)

		case A2LParserT__194:
			{
				p.SetState(1407)

				var _x = p.NoAxisPts5()

				localctx.(*RecordLayoutContext)._noAxisPts5 = _x
			}
			localctx.(*RecordLayoutContext).v_noAxisPts5 = append(localctx.(*RecordLayoutContext).v_noAxisPts5, localctx.(*RecordLayoutContext)._noAxisPts5)

		case A2LParserT__195:
			{
				p.SetState(1408)

				var _x = p.StaticRecordLayout()

				localctx.(*RecordLayoutContext)._staticRecordLayout = _x
			}
			localctx.(*RecordLayoutContext).v_staticRecordLayout = append(localctx.(*RecordLayoutContext).v_staticRecordLayout, localctx.(*RecordLayoutContext)._staticRecordLayout)

		case A2LParserT__196:
			{
				p.SetState(1409)

				var _x = p.NoRescaleX()

				localctx.(*RecordLayoutContext)._noRescaleX = _x
			}
			localctx.(*RecordLayoutContext).v_noRescaleX = append(localctx.(*RecordLayoutContext).v_noRescaleX, localctx.(*RecordLayoutContext)._noRescaleX)

		case A2LParserT__197:
			{
				p.SetState(1410)

				var _x = p.NoRescaleY()

				localctx.(*RecordLayoutContext)._noRescaleY = _x
			}
			localctx.(*RecordLayoutContext).v_noRescaleY = append(localctx.(*RecordLayoutContext).v_noRescaleY, localctx.(*RecordLayoutContext)._noRescaleY)

		case A2LParserT__198:
			{
				p.SetState(1411)

				var _x = p.NoRescaleZ()

				localctx.(*RecordLayoutContext)._noRescaleZ = _x
			}
			localctx.(*RecordLayoutContext).v_noRescaleZ = append(localctx.(*RecordLayoutContext).v_noRescaleZ, localctx.(*RecordLayoutContext)._noRescaleZ)

		case A2LParserT__199:
			{
				p.SetState(1412)

				var _x = p.NoRescale4()

				localctx.(*RecordLayoutContext)._noRescale4 = _x
			}
			localctx.(*RecordLayoutContext).v_noRescale4 = append(localctx.(*RecordLayoutContext).v_noRescale4, localctx.(*RecordLayoutContext)._noRescale4)

		case A2LParserT__200:
			{
				p.SetState(1413)

				var _x = p.NoRescale5()

				localctx.(*RecordLayoutContext)._noRescale5 = _x
			}
			localctx.(*RecordLayoutContext).v_noRescale5 = append(localctx.(*RecordLayoutContext).v_noRescale5, localctx.(*RecordLayoutContext)._noRescale5)

		case A2LParserT__201:
			{
				p.SetState(1414)

				var _x = p.OffsetX()

				localctx.(*RecordLayoutContext)._offsetX = _x
			}
			localctx.(*RecordLayoutContext).v_offsetX = append(localctx.(*RecordLayoutContext).v_offsetX, localctx.(*RecordLayoutContext)._offsetX)

		case A2LParserT__202:
			{
				p.SetState(1415)

				var _x = p.OffsetY()

				localctx.(*RecordLayoutContext)._offsetY = _x
			}
			localctx.(*RecordLayoutContext).v_offsetY = append(localctx.(*RecordLayoutContext).v_offsetY, localctx.(*RecordLayoutContext)._offsetY)

		case A2LParserT__203:
			{
				p.SetState(1416)

				var _x = p.OffsetZ()

				localctx.(*RecordLayoutContext)._offsetZ = _x
			}
			localctx.(*RecordLayoutContext).v_offsetZ = append(localctx.(*RecordLayoutContext).v_offsetZ, localctx.(*RecordLayoutContext)._offsetZ)

		case A2LParserT__204:
			{
				p.SetState(1417)

				var _x = p.Offset4()

				localctx.(*RecordLayoutContext)._offset4 = _x
			}
			localctx.(*RecordLayoutContext).v_offset4 = append(localctx.(*RecordLayoutContext).v_offset4, localctx.(*RecordLayoutContext)._offset4)

		case A2LParserT__205:
			{
				p.SetState(1418)

				var _x = p.Offset5()

				localctx.(*RecordLayoutContext)._offset5 = _x
			}
			localctx.(*RecordLayoutContext).v_offset5 = append(localctx.(*RecordLayoutContext).v_offset5, localctx.(*RecordLayoutContext)._offset5)

		case A2LParserT__148:
			{
				p.SetState(1419)

				var _x = p.Reserved()

				localctx.(*RecordLayoutContext)._reserved = _x
			}
			localctx.(*RecordLayoutContext).v_reserved = append(localctx.(*RecordLayoutContext).v_reserved, localctx.(*RecordLayoutContext)._reserved)

		case A2LParserT__206:
			{
				p.SetState(1420)

				var _x = p.RipAddrW()

				localctx.(*RecordLayoutContext)._ripAddrW = _x
			}
			localctx.(*RecordLayoutContext).v_ripAddrW = append(localctx.(*RecordLayoutContext).v_ripAddrW, localctx.(*RecordLayoutContext)._ripAddrW)

		case A2LParserT__207:
			{
				p.SetState(1421)

				var _x = p.RipAddrX()

				localctx.(*RecordLayoutContext)._ripAddrX = _x
			}
			localctx.(*RecordLayoutContext).v_ripAddrX = append(localctx.(*RecordLayoutContext).v_ripAddrX, localctx.(*RecordLayoutContext)._ripAddrX)

		case A2LParserT__208:
			{
				p.SetState(1422)

				var _x = p.RipAddrY()

				localctx.(*RecordLayoutContext)._ripAddrY = _x
			}
			localctx.(*RecordLayoutContext).v_ripAddrY = append(localctx.(*RecordLayoutContext).v_ripAddrY, localctx.(*RecordLayoutContext)._ripAddrY)

		case A2LParserT__209:
			{
				p.SetState(1423)

				var _x = p.RipAddrZ()

				localctx.(*RecordLayoutContext)._ripAddrZ = _x
			}
			localctx.(*RecordLayoutContext).v_ripAddrZ = append(localctx.(*RecordLayoutContext).v_ripAddrZ, localctx.(*RecordLayoutContext)._ripAddrZ)

		case A2LParserT__210:
			{
				p.SetState(1424)

				var _x = p.RipAddr4()

				localctx.(*RecordLayoutContext)._ripAddr4 = _x
			}
			localctx.(*RecordLayoutContext).v_ripAddr4 = append(localctx.(*RecordLayoutContext).v_ripAddr4, localctx.(*RecordLayoutContext)._ripAddr4)

		case A2LParserT__211:
			{
				p.SetState(1425)

				var _x = p.RipAddr5()

				localctx.(*RecordLayoutContext)._ripAddr5 = _x
			}
			localctx.(*RecordLayoutContext).v_ripAddr5 = append(localctx.(*RecordLayoutContext).v_ripAddr5, localctx.(*RecordLayoutContext)._ripAddr5)

		case A2LParserT__212:
			{
				p.SetState(1426)

				var _x = p.ShiftOpX()

				localctx.(*RecordLayoutContext)._shiftOpX = _x
			}
			localctx.(*RecordLayoutContext).v_shiftOpX = append(localctx.(*RecordLayoutContext).v_shiftOpX, localctx.(*RecordLayoutContext)._shiftOpX)

		case A2LParserT__213:
			{
				p.SetState(1427)

				var _x = p.ShiftOpY()

				localctx.(*RecordLayoutContext)._shiftOpY = _x
			}
			localctx.(*RecordLayoutContext).v_shiftOpY = append(localctx.(*RecordLayoutContext).v_shiftOpY, localctx.(*RecordLayoutContext)._shiftOpY)

		case A2LParserT__214:
			{
				p.SetState(1428)

				var _x = p.ShiftOpZ()

				localctx.(*RecordLayoutContext)._shiftOpZ = _x
			}
			localctx.(*RecordLayoutContext).v_shiftOpZ = append(localctx.(*RecordLayoutContext).v_shiftOpZ, localctx.(*RecordLayoutContext)._shiftOpZ)

		case A2LParserT__215:
			{
				p.SetState(1429)

				var _x = p.ShiftOp4()

				localctx.(*RecordLayoutContext)._shiftOp4 = _x
			}
			localctx.(*RecordLayoutContext).v_shiftOp4 = append(localctx.(*RecordLayoutContext).v_shiftOp4, localctx.(*RecordLayoutContext)._shiftOp4)

		case A2LParserT__216:
			{
				p.SetState(1430)

				var _x = p.ShiftOp5()

				localctx.(*RecordLayoutContext)._shiftOp5 = _x
			}
			localctx.(*RecordLayoutContext).v_shiftOp5 = append(localctx.(*RecordLayoutContext).v_shiftOp5, localctx.(*RecordLayoutContext)._shiftOp5)

		case A2LParserT__217:
			{
				p.SetState(1431)

				var _x = p.SrcAddrX()

				localctx.(*RecordLayoutContext)._srcAddrX = _x
			}
			localctx.(*RecordLayoutContext).v_srcAddrX = append(localctx.(*RecordLayoutContext).v_srcAddrX, localctx.(*RecordLayoutContext)._srcAddrX)

		case A2LParserT__218:
			{
				p.SetState(1432)

				var _x = p.SrcAddrY()

				localctx.(*RecordLayoutContext)._srcAddrY = _x
			}
			localctx.(*RecordLayoutContext).v_srcAddrY = append(localctx.(*RecordLayoutContext).v_srcAddrY, localctx.(*RecordLayoutContext)._srcAddrY)

		case A2LParserT__219:
			{
				p.SetState(1433)

				var _x = p.SrcAddrZ()

				localctx.(*RecordLayoutContext)._srcAddrZ = _x
			}
			localctx.(*RecordLayoutContext).v_srcAddrZ = append(localctx.(*RecordLayoutContext).v_srcAddrZ, localctx.(*RecordLayoutContext)._srcAddrZ)

		case A2LParserT__220:
			{
				p.SetState(1434)

				var _x = p.SrcAddr4()

				localctx.(*RecordLayoutContext)._srcAddr4 = _x
			}
			localctx.(*RecordLayoutContext).v_srcAddr4 = append(localctx.(*RecordLayoutContext).v_srcAddr4, localctx.(*RecordLayoutContext)._srcAddr4)

		case A2LParserT__221:
			{
				p.SetState(1435)

				var _x = p.SrcAddr5()

				localctx.(*RecordLayoutContext)._srcAddr5 = _x
			}
			localctx.(*RecordLayoutContext).v_srcAddr5 = append(localctx.(*RecordLayoutContext).v_srcAddr5, localctx.(*RecordLayoutContext)._srcAddr5)

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(1440)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1441)
		p.Match(A2LParserEND)
	}
	{
		p.SetState(1442)
		p.Match(A2LParserT__164)
	}

	return localctx
}

// IAxisPtsXContext is an interface to support dynamic dispatch.
type IAxisPtsXContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPosition returns the position rule contexts.
	GetPosition() IIntegerValueContext

	// GetDatatype returns the datatype rule contexts.
	GetDatatype() IDataTypeContext

	// GetIndexIncr returns the indexIncr rule contexts.
	GetIndexIncr() IIndexorderContext

	// GetAddressing returns the addressing rule contexts.
	GetAddressing() IAddrtypeContext

	// SetPosition sets the position rule contexts.
	SetPosition(IIntegerValueContext)

	// SetDatatype sets the datatype rule contexts.
	SetDatatype(IDataTypeContext)

	// SetIndexIncr sets the indexIncr rule contexts.
	SetIndexIncr(IIndexorderContext)

	// SetAddressing sets the addressing rule contexts.
	SetAddressing(IAddrtypeContext)

	// Getter signatures
	IntegerValue() IIntegerValueContext
	DataType() IDataTypeContext
	Indexorder() IIndexorderContext
	Addrtype() IAddrtypeContext

	// IsAxisPtsXContext differentiates from other interfaces.
	IsAxisPtsXContext()
}

type AxisPtsXContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	position   IIntegerValueContext
	datatype   IDataTypeContext
	indexIncr  IIndexorderContext
	addressing IAddrtypeContext
}

func NewEmptyAxisPtsXContext() *AxisPtsXContext {
	var p = new(AxisPtsXContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_axisPtsX
	return p
}

func (*AxisPtsXContext) IsAxisPtsXContext() {}

func NewAxisPtsXContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AxisPtsXContext {
	var p = new(AxisPtsXContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_axisPtsX

	return p
}

func (s *AxisPtsXContext) GetParser() antlr.Parser { return s.parser }

func (s *AxisPtsXContext) GetPosition() IIntegerValueContext { return s.position }

func (s *AxisPtsXContext) GetDatatype() IDataTypeContext { return s.datatype }

func (s *AxisPtsXContext) GetIndexIncr() IIndexorderContext { return s.indexIncr }

func (s *AxisPtsXContext) GetAddressing() IAddrtypeContext { return s.addressing }

func (s *AxisPtsXContext) SetPosition(v IIntegerValueContext) { s.position = v }

func (s *AxisPtsXContext) SetDatatype(v IDataTypeContext) { s.datatype = v }

func (s *AxisPtsXContext) SetIndexIncr(v IIndexorderContext) { s.indexIncr = v }

func (s *AxisPtsXContext) SetAddressing(v IAddrtypeContext) { s.addressing = v }

func (s *AxisPtsXContext) IntegerValue() IIntegerValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *AxisPtsXContext) DataType() IDataTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDataTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDataTypeContext)
}

func (s *AxisPtsXContext) Indexorder() IIndexorderContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIndexorderContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIndexorderContext)
}

func (s *AxisPtsXContext) Addrtype() IAddrtypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAddrtypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAddrtypeContext)
}

func (s *AxisPtsXContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AxisPtsXContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AxisPtsXContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterAxisPtsX(s)
	}
}

func (s *AxisPtsXContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitAxisPtsX(s)
	}
}

func (s *AxisPtsXContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitAxisPtsX(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) AxisPtsX() (localctx IAxisPtsXContext) {
	this := p
	_ = this

	localctx = NewAxisPtsXContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 224, A2LParserRULE_axisPtsX)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1444)
		p.Match(A2LParserT__165)
	}
	{
		p.SetState(1445)

		var _x = p.IntegerValue()

		localctx.(*AxisPtsXContext).position = _x
	}
	{
		p.SetState(1446)

		var _x = p.DataType()

		localctx.(*AxisPtsXContext).datatype = _x
	}
	{
		p.SetState(1447)

		var _x = p.Indexorder()

		localctx.(*AxisPtsXContext).indexIncr = _x
	}
	{
		p.SetState(1448)

		var _x = p.Addrtype()

		localctx.(*AxisPtsXContext).addressing = _x
	}

	return localctx
}

// IAxisPtsYContext is an interface to support dynamic dispatch.
type IAxisPtsYContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPosition returns the position rule contexts.
	GetPosition() IIntegerValueContext

	// GetDatatype returns the datatype rule contexts.
	GetDatatype() IDataTypeContext

	// GetIndexIncr returns the indexIncr rule contexts.
	GetIndexIncr() IIndexorderContext

	// GetAddressing returns the addressing rule contexts.
	GetAddressing() IAddrtypeContext

	// SetPosition sets the position rule contexts.
	SetPosition(IIntegerValueContext)

	// SetDatatype sets the datatype rule contexts.
	SetDatatype(IDataTypeContext)

	// SetIndexIncr sets the indexIncr rule contexts.
	SetIndexIncr(IIndexorderContext)

	// SetAddressing sets the addressing rule contexts.
	SetAddressing(IAddrtypeContext)

	// Getter signatures
	IntegerValue() IIntegerValueContext
	DataType() IDataTypeContext
	Indexorder() IIndexorderContext
	Addrtype() IAddrtypeContext

	// IsAxisPtsYContext differentiates from other interfaces.
	IsAxisPtsYContext()
}

type AxisPtsYContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	position   IIntegerValueContext
	datatype   IDataTypeContext
	indexIncr  IIndexorderContext
	addressing IAddrtypeContext
}

func NewEmptyAxisPtsYContext() *AxisPtsYContext {
	var p = new(AxisPtsYContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_axisPtsY
	return p
}

func (*AxisPtsYContext) IsAxisPtsYContext() {}

func NewAxisPtsYContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AxisPtsYContext {
	var p = new(AxisPtsYContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_axisPtsY

	return p
}

func (s *AxisPtsYContext) GetParser() antlr.Parser { return s.parser }

func (s *AxisPtsYContext) GetPosition() IIntegerValueContext { return s.position }

func (s *AxisPtsYContext) GetDatatype() IDataTypeContext { return s.datatype }

func (s *AxisPtsYContext) GetIndexIncr() IIndexorderContext { return s.indexIncr }

func (s *AxisPtsYContext) GetAddressing() IAddrtypeContext { return s.addressing }

func (s *AxisPtsYContext) SetPosition(v IIntegerValueContext) { s.position = v }

func (s *AxisPtsYContext) SetDatatype(v IDataTypeContext) { s.datatype = v }

func (s *AxisPtsYContext) SetIndexIncr(v IIndexorderContext) { s.indexIncr = v }

func (s *AxisPtsYContext) SetAddressing(v IAddrtypeContext) { s.addressing = v }

func (s *AxisPtsYContext) IntegerValue() IIntegerValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *AxisPtsYContext) DataType() IDataTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDataTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDataTypeContext)
}

func (s *AxisPtsYContext) Indexorder() IIndexorderContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIndexorderContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIndexorderContext)
}

func (s *AxisPtsYContext) Addrtype() IAddrtypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAddrtypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAddrtypeContext)
}

func (s *AxisPtsYContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AxisPtsYContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AxisPtsYContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterAxisPtsY(s)
	}
}

func (s *AxisPtsYContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitAxisPtsY(s)
	}
}

func (s *AxisPtsYContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitAxisPtsY(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) AxisPtsY() (localctx IAxisPtsYContext) {
	this := p
	_ = this

	localctx = NewAxisPtsYContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 226, A2LParserRULE_axisPtsY)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1450)
		p.Match(A2LParserT__166)
	}
	{
		p.SetState(1451)

		var _x = p.IntegerValue()

		localctx.(*AxisPtsYContext).position = _x
	}
	{
		p.SetState(1452)

		var _x = p.DataType()

		localctx.(*AxisPtsYContext).datatype = _x
	}
	{
		p.SetState(1453)

		var _x = p.Indexorder()

		localctx.(*AxisPtsYContext).indexIncr = _x
	}
	{
		p.SetState(1454)

		var _x = p.Addrtype()

		localctx.(*AxisPtsYContext).addressing = _x
	}

	return localctx
}

// IAxisPtsZContext is an interface to support dynamic dispatch.
type IAxisPtsZContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPosition returns the position rule contexts.
	GetPosition() IIntegerValueContext

	// GetDatatype returns the datatype rule contexts.
	GetDatatype() IDataTypeContext

	// GetIndexIncr returns the indexIncr rule contexts.
	GetIndexIncr() IIndexorderContext

	// GetAddressing returns the addressing rule contexts.
	GetAddressing() IAddrtypeContext

	// SetPosition sets the position rule contexts.
	SetPosition(IIntegerValueContext)

	// SetDatatype sets the datatype rule contexts.
	SetDatatype(IDataTypeContext)

	// SetIndexIncr sets the indexIncr rule contexts.
	SetIndexIncr(IIndexorderContext)

	// SetAddressing sets the addressing rule contexts.
	SetAddressing(IAddrtypeContext)

	// Getter signatures
	IntegerValue() IIntegerValueContext
	DataType() IDataTypeContext
	Indexorder() IIndexorderContext
	Addrtype() IAddrtypeContext

	// IsAxisPtsZContext differentiates from other interfaces.
	IsAxisPtsZContext()
}

type AxisPtsZContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	position   IIntegerValueContext
	datatype   IDataTypeContext
	indexIncr  IIndexorderContext
	addressing IAddrtypeContext
}

func NewEmptyAxisPtsZContext() *AxisPtsZContext {
	var p = new(AxisPtsZContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_axisPtsZ
	return p
}

func (*AxisPtsZContext) IsAxisPtsZContext() {}

func NewAxisPtsZContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AxisPtsZContext {
	var p = new(AxisPtsZContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_axisPtsZ

	return p
}

func (s *AxisPtsZContext) GetParser() antlr.Parser { return s.parser }

func (s *AxisPtsZContext) GetPosition() IIntegerValueContext { return s.position }

func (s *AxisPtsZContext) GetDatatype() IDataTypeContext { return s.datatype }

func (s *AxisPtsZContext) GetIndexIncr() IIndexorderContext { return s.indexIncr }

func (s *AxisPtsZContext) GetAddressing() IAddrtypeContext { return s.addressing }

func (s *AxisPtsZContext) SetPosition(v IIntegerValueContext) { s.position = v }

func (s *AxisPtsZContext) SetDatatype(v IDataTypeContext) { s.datatype = v }

func (s *AxisPtsZContext) SetIndexIncr(v IIndexorderContext) { s.indexIncr = v }

func (s *AxisPtsZContext) SetAddressing(v IAddrtypeContext) { s.addressing = v }

func (s *AxisPtsZContext) IntegerValue() IIntegerValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *AxisPtsZContext) DataType() IDataTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDataTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDataTypeContext)
}

func (s *AxisPtsZContext) Indexorder() IIndexorderContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIndexorderContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIndexorderContext)
}

func (s *AxisPtsZContext) Addrtype() IAddrtypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAddrtypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAddrtypeContext)
}

func (s *AxisPtsZContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AxisPtsZContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AxisPtsZContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterAxisPtsZ(s)
	}
}

func (s *AxisPtsZContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitAxisPtsZ(s)
	}
}

func (s *AxisPtsZContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitAxisPtsZ(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) AxisPtsZ() (localctx IAxisPtsZContext) {
	this := p
	_ = this

	localctx = NewAxisPtsZContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 228, A2LParserRULE_axisPtsZ)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1456)
		p.Match(A2LParserT__167)
	}
	{
		p.SetState(1457)

		var _x = p.IntegerValue()

		localctx.(*AxisPtsZContext).position = _x
	}
	{
		p.SetState(1458)

		var _x = p.DataType()

		localctx.(*AxisPtsZContext).datatype = _x
	}
	{
		p.SetState(1459)

		var _x = p.Indexorder()

		localctx.(*AxisPtsZContext).indexIncr = _x
	}
	{
		p.SetState(1460)

		var _x = p.Addrtype()

		localctx.(*AxisPtsZContext).addressing = _x
	}

	return localctx
}

// IAxisPts4Context is an interface to support dynamic dispatch.
type IAxisPts4Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPosition returns the position rule contexts.
	GetPosition() IIntegerValueContext

	// GetDatatype returns the datatype rule contexts.
	GetDatatype() IDataTypeContext

	// GetIndexIncr returns the indexIncr rule contexts.
	GetIndexIncr() IIndexorderContext

	// GetAddressing returns the addressing rule contexts.
	GetAddressing() IAddrtypeContext

	// SetPosition sets the position rule contexts.
	SetPosition(IIntegerValueContext)

	// SetDatatype sets the datatype rule contexts.
	SetDatatype(IDataTypeContext)

	// SetIndexIncr sets the indexIncr rule contexts.
	SetIndexIncr(IIndexorderContext)

	// SetAddressing sets the addressing rule contexts.
	SetAddressing(IAddrtypeContext)

	// Getter signatures
	IntegerValue() IIntegerValueContext
	DataType() IDataTypeContext
	Indexorder() IIndexorderContext
	Addrtype() IAddrtypeContext

	// IsAxisPts4Context differentiates from other interfaces.
	IsAxisPts4Context()
}

type AxisPts4Context struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	position   IIntegerValueContext
	datatype   IDataTypeContext
	indexIncr  IIndexorderContext
	addressing IAddrtypeContext
}

func NewEmptyAxisPts4Context() *AxisPts4Context {
	var p = new(AxisPts4Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_axisPts4
	return p
}

func (*AxisPts4Context) IsAxisPts4Context() {}

func NewAxisPts4Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AxisPts4Context {
	var p = new(AxisPts4Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_axisPts4

	return p
}

func (s *AxisPts4Context) GetParser() antlr.Parser { return s.parser }

func (s *AxisPts4Context) GetPosition() IIntegerValueContext { return s.position }

func (s *AxisPts4Context) GetDatatype() IDataTypeContext { return s.datatype }

func (s *AxisPts4Context) GetIndexIncr() IIndexorderContext { return s.indexIncr }

func (s *AxisPts4Context) GetAddressing() IAddrtypeContext { return s.addressing }

func (s *AxisPts4Context) SetPosition(v IIntegerValueContext) { s.position = v }

func (s *AxisPts4Context) SetDatatype(v IDataTypeContext) { s.datatype = v }

func (s *AxisPts4Context) SetIndexIncr(v IIndexorderContext) { s.indexIncr = v }

func (s *AxisPts4Context) SetAddressing(v IAddrtypeContext) { s.addressing = v }

func (s *AxisPts4Context) IntegerValue() IIntegerValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *AxisPts4Context) DataType() IDataTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDataTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDataTypeContext)
}

func (s *AxisPts4Context) Indexorder() IIndexorderContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIndexorderContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIndexorderContext)
}

func (s *AxisPts4Context) Addrtype() IAddrtypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAddrtypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAddrtypeContext)
}

func (s *AxisPts4Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AxisPts4Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AxisPts4Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterAxisPts4(s)
	}
}

func (s *AxisPts4Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitAxisPts4(s)
	}
}

func (s *AxisPts4Context) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitAxisPts4(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) AxisPts4() (localctx IAxisPts4Context) {
	this := p
	_ = this

	localctx = NewAxisPts4Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 230, A2LParserRULE_axisPts4)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1462)
		p.Match(A2LParserT__168)
	}
	{
		p.SetState(1463)

		var _x = p.IntegerValue()

		localctx.(*AxisPts4Context).position = _x
	}
	{
		p.SetState(1464)

		var _x = p.DataType()

		localctx.(*AxisPts4Context).datatype = _x
	}
	{
		p.SetState(1465)

		var _x = p.Indexorder()

		localctx.(*AxisPts4Context).indexIncr = _x
	}
	{
		p.SetState(1466)

		var _x = p.Addrtype()

		localctx.(*AxisPts4Context).addressing = _x
	}

	return localctx
}

// IAxisPts5Context is an interface to support dynamic dispatch.
type IAxisPts5Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPosition returns the position rule contexts.
	GetPosition() IIntegerValueContext

	// GetDatatype returns the datatype rule contexts.
	GetDatatype() IDataTypeContext

	// GetIndexIncr returns the indexIncr rule contexts.
	GetIndexIncr() IIndexorderContext

	// GetAddressing returns the addressing rule contexts.
	GetAddressing() IAddrtypeContext

	// SetPosition sets the position rule contexts.
	SetPosition(IIntegerValueContext)

	// SetDatatype sets the datatype rule contexts.
	SetDatatype(IDataTypeContext)

	// SetIndexIncr sets the indexIncr rule contexts.
	SetIndexIncr(IIndexorderContext)

	// SetAddressing sets the addressing rule contexts.
	SetAddressing(IAddrtypeContext)

	// Getter signatures
	IntegerValue() IIntegerValueContext
	DataType() IDataTypeContext
	Indexorder() IIndexorderContext
	Addrtype() IAddrtypeContext

	// IsAxisPts5Context differentiates from other interfaces.
	IsAxisPts5Context()
}

type AxisPts5Context struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	position   IIntegerValueContext
	datatype   IDataTypeContext
	indexIncr  IIndexorderContext
	addressing IAddrtypeContext
}

func NewEmptyAxisPts5Context() *AxisPts5Context {
	var p = new(AxisPts5Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_axisPts5
	return p
}

func (*AxisPts5Context) IsAxisPts5Context() {}

func NewAxisPts5Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AxisPts5Context {
	var p = new(AxisPts5Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_axisPts5

	return p
}

func (s *AxisPts5Context) GetParser() antlr.Parser { return s.parser }

func (s *AxisPts5Context) GetPosition() IIntegerValueContext { return s.position }

func (s *AxisPts5Context) GetDatatype() IDataTypeContext { return s.datatype }

func (s *AxisPts5Context) GetIndexIncr() IIndexorderContext { return s.indexIncr }

func (s *AxisPts5Context) GetAddressing() IAddrtypeContext { return s.addressing }

func (s *AxisPts5Context) SetPosition(v IIntegerValueContext) { s.position = v }

func (s *AxisPts5Context) SetDatatype(v IDataTypeContext) { s.datatype = v }

func (s *AxisPts5Context) SetIndexIncr(v IIndexorderContext) { s.indexIncr = v }

func (s *AxisPts5Context) SetAddressing(v IAddrtypeContext) { s.addressing = v }

func (s *AxisPts5Context) IntegerValue() IIntegerValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *AxisPts5Context) DataType() IDataTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDataTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDataTypeContext)
}

func (s *AxisPts5Context) Indexorder() IIndexorderContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIndexorderContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIndexorderContext)
}

func (s *AxisPts5Context) Addrtype() IAddrtypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAddrtypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAddrtypeContext)
}

func (s *AxisPts5Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AxisPts5Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AxisPts5Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterAxisPts5(s)
	}
}

func (s *AxisPts5Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitAxisPts5(s)
	}
}

func (s *AxisPts5Context) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitAxisPts5(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) AxisPts5() (localctx IAxisPts5Context) {
	this := p
	_ = this

	localctx = NewAxisPts5Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 232, A2LParserRULE_axisPts5)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1468)
		p.Match(A2LParserT__169)
	}
	{
		p.SetState(1469)

		var _x = p.IntegerValue()

		localctx.(*AxisPts5Context).position = _x
	}
	{
		p.SetState(1470)

		var _x = p.DataType()

		localctx.(*AxisPts5Context).datatype = _x
	}
	{
		p.SetState(1471)

		var _x = p.Indexorder()

		localctx.(*AxisPts5Context).indexIncr = _x
	}
	{
		p.SetState(1472)

		var _x = p.Addrtype()

		localctx.(*AxisPts5Context).addressing = _x
	}

	return localctx
}

// IAxisRescaleXContext is an interface to support dynamic dispatch.
type IAxisRescaleXContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPosition returns the position rule contexts.
	GetPosition() IIntegerValueContext

	// GetDatatype returns the datatype rule contexts.
	GetDatatype() IDataTypeContext

	// GetMaxNumberOfRescalePairs returns the maxNumberOfRescalePairs rule contexts.
	GetMaxNumberOfRescalePairs() IIntegerValueContext

	// GetIndexIncr returns the indexIncr rule contexts.
	GetIndexIncr() IIndexorderContext

	// GetAddressing returns the addressing rule contexts.
	GetAddressing() IAddrtypeContext

	// SetPosition sets the position rule contexts.
	SetPosition(IIntegerValueContext)

	// SetDatatype sets the datatype rule contexts.
	SetDatatype(IDataTypeContext)

	// SetMaxNumberOfRescalePairs sets the maxNumberOfRescalePairs rule contexts.
	SetMaxNumberOfRescalePairs(IIntegerValueContext)

	// SetIndexIncr sets the indexIncr rule contexts.
	SetIndexIncr(IIndexorderContext)

	// SetAddressing sets the addressing rule contexts.
	SetAddressing(IAddrtypeContext)

	// Getter signatures
	AllIntegerValue() []IIntegerValueContext
	IntegerValue(i int) IIntegerValueContext
	DataType() IDataTypeContext
	Indexorder() IIndexorderContext
	Addrtype() IAddrtypeContext

	// IsAxisRescaleXContext differentiates from other interfaces.
	IsAxisRescaleXContext()
}

type AxisRescaleXContext struct {
	*antlr.BaseParserRuleContext
	parser                  antlr.Parser
	position                IIntegerValueContext
	datatype                IDataTypeContext
	maxNumberOfRescalePairs IIntegerValueContext
	indexIncr               IIndexorderContext
	addressing              IAddrtypeContext
}

func NewEmptyAxisRescaleXContext() *AxisRescaleXContext {
	var p = new(AxisRescaleXContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_axisRescaleX
	return p
}

func (*AxisRescaleXContext) IsAxisRescaleXContext() {}

func NewAxisRescaleXContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AxisRescaleXContext {
	var p = new(AxisRescaleXContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_axisRescaleX

	return p
}

func (s *AxisRescaleXContext) GetParser() antlr.Parser { return s.parser }

func (s *AxisRescaleXContext) GetPosition() IIntegerValueContext { return s.position }

func (s *AxisRescaleXContext) GetDatatype() IDataTypeContext { return s.datatype }

func (s *AxisRescaleXContext) GetMaxNumberOfRescalePairs() IIntegerValueContext {
	return s.maxNumberOfRescalePairs
}

func (s *AxisRescaleXContext) GetIndexIncr() IIndexorderContext { return s.indexIncr }

func (s *AxisRescaleXContext) GetAddressing() IAddrtypeContext { return s.addressing }

func (s *AxisRescaleXContext) SetPosition(v IIntegerValueContext) { s.position = v }

func (s *AxisRescaleXContext) SetDatatype(v IDataTypeContext) { s.datatype = v }

func (s *AxisRescaleXContext) SetMaxNumberOfRescalePairs(v IIntegerValueContext) {
	s.maxNumberOfRescalePairs = v
}

func (s *AxisRescaleXContext) SetIndexIncr(v IIndexorderContext) { s.indexIncr = v }

func (s *AxisRescaleXContext) SetAddressing(v IAddrtypeContext) { s.addressing = v }

func (s *AxisRescaleXContext) AllIntegerValue() []IIntegerValueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIntegerValueContext); ok {
			len++
		}
	}

	tst := make([]IIntegerValueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIntegerValueContext); ok {
			tst[i] = t.(IIntegerValueContext)
			i++
		}
	}

	return tst
}

func (s *AxisRescaleXContext) IntegerValue(i int) IIntegerValueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *AxisRescaleXContext) DataType() IDataTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDataTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDataTypeContext)
}

func (s *AxisRescaleXContext) Indexorder() IIndexorderContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIndexorderContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIndexorderContext)
}

func (s *AxisRescaleXContext) Addrtype() IAddrtypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAddrtypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAddrtypeContext)
}

func (s *AxisRescaleXContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AxisRescaleXContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AxisRescaleXContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterAxisRescaleX(s)
	}
}

func (s *AxisRescaleXContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitAxisRescaleX(s)
	}
}

func (s *AxisRescaleXContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitAxisRescaleX(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) AxisRescaleX() (localctx IAxisRescaleXContext) {
	this := p
	_ = this

	localctx = NewAxisRescaleXContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 234, A2LParserRULE_axisRescaleX)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1474)
		p.Match(A2LParserT__170)
	}
	{
		p.SetState(1475)

		var _x = p.IntegerValue()

		localctx.(*AxisRescaleXContext).position = _x
	}
	{
		p.SetState(1476)

		var _x = p.DataType()

		localctx.(*AxisRescaleXContext).datatype = _x
	}
	{
		p.SetState(1477)

		var _x = p.IntegerValue()

		localctx.(*AxisRescaleXContext).maxNumberOfRescalePairs = _x
	}
	{
		p.SetState(1478)

		var _x = p.Indexorder()

		localctx.(*AxisRescaleXContext).indexIncr = _x
	}
	{
		p.SetState(1479)

		var _x = p.Addrtype()

		localctx.(*AxisRescaleXContext).addressing = _x
	}

	return localctx
}

// IAxisRescaleYContext is an interface to support dynamic dispatch.
type IAxisRescaleYContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPosition returns the position rule contexts.
	GetPosition() IIntegerValueContext

	// GetDatatype returns the datatype rule contexts.
	GetDatatype() IDataTypeContext

	// GetMaxNumberOfRescalePairs returns the maxNumberOfRescalePairs rule contexts.
	GetMaxNumberOfRescalePairs() IIntegerValueContext

	// GetIndexIncr returns the indexIncr rule contexts.
	GetIndexIncr() IIndexorderContext

	// GetAddressing returns the addressing rule contexts.
	GetAddressing() IAddrtypeContext

	// SetPosition sets the position rule contexts.
	SetPosition(IIntegerValueContext)

	// SetDatatype sets the datatype rule contexts.
	SetDatatype(IDataTypeContext)

	// SetMaxNumberOfRescalePairs sets the maxNumberOfRescalePairs rule contexts.
	SetMaxNumberOfRescalePairs(IIntegerValueContext)

	// SetIndexIncr sets the indexIncr rule contexts.
	SetIndexIncr(IIndexorderContext)

	// SetAddressing sets the addressing rule contexts.
	SetAddressing(IAddrtypeContext)

	// Getter signatures
	AllIntegerValue() []IIntegerValueContext
	IntegerValue(i int) IIntegerValueContext
	DataType() IDataTypeContext
	Indexorder() IIndexorderContext
	Addrtype() IAddrtypeContext

	// IsAxisRescaleYContext differentiates from other interfaces.
	IsAxisRescaleYContext()
}

type AxisRescaleYContext struct {
	*antlr.BaseParserRuleContext
	parser                  antlr.Parser
	position                IIntegerValueContext
	datatype                IDataTypeContext
	maxNumberOfRescalePairs IIntegerValueContext
	indexIncr               IIndexorderContext
	addressing              IAddrtypeContext
}

func NewEmptyAxisRescaleYContext() *AxisRescaleYContext {
	var p = new(AxisRescaleYContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_axisRescaleY
	return p
}

func (*AxisRescaleYContext) IsAxisRescaleYContext() {}

func NewAxisRescaleYContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AxisRescaleYContext {
	var p = new(AxisRescaleYContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_axisRescaleY

	return p
}

func (s *AxisRescaleYContext) GetParser() antlr.Parser { return s.parser }

func (s *AxisRescaleYContext) GetPosition() IIntegerValueContext { return s.position }

func (s *AxisRescaleYContext) GetDatatype() IDataTypeContext { return s.datatype }

func (s *AxisRescaleYContext) GetMaxNumberOfRescalePairs() IIntegerValueContext {
	return s.maxNumberOfRescalePairs
}

func (s *AxisRescaleYContext) GetIndexIncr() IIndexorderContext { return s.indexIncr }

func (s *AxisRescaleYContext) GetAddressing() IAddrtypeContext { return s.addressing }

func (s *AxisRescaleYContext) SetPosition(v IIntegerValueContext) { s.position = v }

func (s *AxisRescaleYContext) SetDatatype(v IDataTypeContext) { s.datatype = v }

func (s *AxisRescaleYContext) SetMaxNumberOfRescalePairs(v IIntegerValueContext) {
	s.maxNumberOfRescalePairs = v
}

func (s *AxisRescaleYContext) SetIndexIncr(v IIndexorderContext) { s.indexIncr = v }

func (s *AxisRescaleYContext) SetAddressing(v IAddrtypeContext) { s.addressing = v }

func (s *AxisRescaleYContext) AllIntegerValue() []IIntegerValueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIntegerValueContext); ok {
			len++
		}
	}

	tst := make([]IIntegerValueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIntegerValueContext); ok {
			tst[i] = t.(IIntegerValueContext)
			i++
		}
	}

	return tst
}

func (s *AxisRescaleYContext) IntegerValue(i int) IIntegerValueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *AxisRescaleYContext) DataType() IDataTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDataTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDataTypeContext)
}

func (s *AxisRescaleYContext) Indexorder() IIndexorderContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIndexorderContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIndexorderContext)
}

func (s *AxisRescaleYContext) Addrtype() IAddrtypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAddrtypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAddrtypeContext)
}

func (s *AxisRescaleYContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AxisRescaleYContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AxisRescaleYContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterAxisRescaleY(s)
	}
}

func (s *AxisRescaleYContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitAxisRescaleY(s)
	}
}

func (s *AxisRescaleYContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitAxisRescaleY(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) AxisRescaleY() (localctx IAxisRescaleYContext) {
	this := p
	_ = this

	localctx = NewAxisRescaleYContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 236, A2LParserRULE_axisRescaleY)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1481)
		p.Match(A2LParserT__171)
	}
	{
		p.SetState(1482)

		var _x = p.IntegerValue()

		localctx.(*AxisRescaleYContext).position = _x
	}
	{
		p.SetState(1483)

		var _x = p.DataType()

		localctx.(*AxisRescaleYContext).datatype = _x
	}
	{
		p.SetState(1484)

		var _x = p.IntegerValue()

		localctx.(*AxisRescaleYContext).maxNumberOfRescalePairs = _x
	}
	{
		p.SetState(1485)

		var _x = p.Indexorder()

		localctx.(*AxisRescaleYContext).indexIncr = _x
	}
	{
		p.SetState(1486)

		var _x = p.Addrtype()

		localctx.(*AxisRescaleYContext).addressing = _x
	}

	return localctx
}

// IAxisRescaleZContext is an interface to support dynamic dispatch.
type IAxisRescaleZContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPosition returns the position rule contexts.
	GetPosition() IIntegerValueContext

	// GetDatatype returns the datatype rule contexts.
	GetDatatype() IDataTypeContext

	// GetMaxNumberOfRescalePairs returns the maxNumberOfRescalePairs rule contexts.
	GetMaxNumberOfRescalePairs() IIntegerValueContext

	// GetIndexIncr returns the indexIncr rule contexts.
	GetIndexIncr() IIndexorderContext

	// GetAddressing returns the addressing rule contexts.
	GetAddressing() IAddrtypeContext

	// SetPosition sets the position rule contexts.
	SetPosition(IIntegerValueContext)

	// SetDatatype sets the datatype rule contexts.
	SetDatatype(IDataTypeContext)

	// SetMaxNumberOfRescalePairs sets the maxNumberOfRescalePairs rule contexts.
	SetMaxNumberOfRescalePairs(IIntegerValueContext)

	// SetIndexIncr sets the indexIncr rule contexts.
	SetIndexIncr(IIndexorderContext)

	// SetAddressing sets the addressing rule contexts.
	SetAddressing(IAddrtypeContext)

	// Getter signatures
	AllIntegerValue() []IIntegerValueContext
	IntegerValue(i int) IIntegerValueContext
	DataType() IDataTypeContext
	Indexorder() IIndexorderContext
	Addrtype() IAddrtypeContext

	// IsAxisRescaleZContext differentiates from other interfaces.
	IsAxisRescaleZContext()
}

type AxisRescaleZContext struct {
	*antlr.BaseParserRuleContext
	parser                  antlr.Parser
	position                IIntegerValueContext
	datatype                IDataTypeContext
	maxNumberOfRescalePairs IIntegerValueContext
	indexIncr               IIndexorderContext
	addressing              IAddrtypeContext
}

func NewEmptyAxisRescaleZContext() *AxisRescaleZContext {
	var p = new(AxisRescaleZContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_axisRescaleZ
	return p
}

func (*AxisRescaleZContext) IsAxisRescaleZContext() {}

func NewAxisRescaleZContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AxisRescaleZContext {
	var p = new(AxisRescaleZContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_axisRescaleZ

	return p
}

func (s *AxisRescaleZContext) GetParser() antlr.Parser { return s.parser }

func (s *AxisRescaleZContext) GetPosition() IIntegerValueContext { return s.position }

func (s *AxisRescaleZContext) GetDatatype() IDataTypeContext { return s.datatype }

func (s *AxisRescaleZContext) GetMaxNumberOfRescalePairs() IIntegerValueContext {
	return s.maxNumberOfRescalePairs
}

func (s *AxisRescaleZContext) GetIndexIncr() IIndexorderContext { return s.indexIncr }

func (s *AxisRescaleZContext) GetAddressing() IAddrtypeContext { return s.addressing }

func (s *AxisRescaleZContext) SetPosition(v IIntegerValueContext) { s.position = v }

func (s *AxisRescaleZContext) SetDatatype(v IDataTypeContext) { s.datatype = v }

func (s *AxisRescaleZContext) SetMaxNumberOfRescalePairs(v IIntegerValueContext) {
	s.maxNumberOfRescalePairs = v
}

func (s *AxisRescaleZContext) SetIndexIncr(v IIndexorderContext) { s.indexIncr = v }

func (s *AxisRescaleZContext) SetAddressing(v IAddrtypeContext) { s.addressing = v }

func (s *AxisRescaleZContext) AllIntegerValue() []IIntegerValueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIntegerValueContext); ok {
			len++
		}
	}

	tst := make([]IIntegerValueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIntegerValueContext); ok {
			tst[i] = t.(IIntegerValueContext)
			i++
		}
	}

	return tst
}

func (s *AxisRescaleZContext) IntegerValue(i int) IIntegerValueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *AxisRescaleZContext) DataType() IDataTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDataTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDataTypeContext)
}

func (s *AxisRescaleZContext) Indexorder() IIndexorderContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIndexorderContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIndexorderContext)
}

func (s *AxisRescaleZContext) Addrtype() IAddrtypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAddrtypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAddrtypeContext)
}

func (s *AxisRescaleZContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AxisRescaleZContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AxisRescaleZContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterAxisRescaleZ(s)
	}
}

func (s *AxisRescaleZContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitAxisRescaleZ(s)
	}
}

func (s *AxisRescaleZContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitAxisRescaleZ(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) AxisRescaleZ() (localctx IAxisRescaleZContext) {
	this := p
	_ = this

	localctx = NewAxisRescaleZContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 238, A2LParserRULE_axisRescaleZ)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1488)
		p.Match(A2LParserT__172)
	}
	{
		p.SetState(1489)

		var _x = p.IntegerValue()

		localctx.(*AxisRescaleZContext).position = _x
	}
	{
		p.SetState(1490)

		var _x = p.DataType()

		localctx.(*AxisRescaleZContext).datatype = _x
	}
	{
		p.SetState(1491)

		var _x = p.IntegerValue()

		localctx.(*AxisRescaleZContext).maxNumberOfRescalePairs = _x
	}
	{
		p.SetState(1492)

		var _x = p.Indexorder()

		localctx.(*AxisRescaleZContext).indexIncr = _x
	}
	{
		p.SetState(1493)

		var _x = p.Addrtype()

		localctx.(*AxisRescaleZContext).addressing = _x
	}

	return localctx
}

// IAxisRescale4Context is an interface to support dynamic dispatch.
type IAxisRescale4Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPosition returns the position rule contexts.
	GetPosition() IIntegerValueContext

	// GetDatatype returns the datatype rule contexts.
	GetDatatype() IDataTypeContext

	// GetMaxNumberOfRescalePairs returns the maxNumberOfRescalePairs rule contexts.
	GetMaxNumberOfRescalePairs() IIntegerValueContext

	// GetIndexIncr returns the indexIncr rule contexts.
	GetIndexIncr() IIndexorderContext

	// GetAddressing returns the addressing rule contexts.
	GetAddressing() IAddrtypeContext

	// SetPosition sets the position rule contexts.
	SetPosition(IIntegerValueContext)

	// SetDatatype sets the datatype rule contexts.
	SetDatatype(IDataTypeContext)

	// SetMaxNumberOfRescalePairs sets the maxNumberOfRescalePairs rule contexts.
	SetMaxNumberOfRescalePairs(IIntegerValueContext)

	// SetIndexIncr sets the indexIncr rule contexts.
	SetIndexIncr(IIndexorderContext)

	// SetAddressing sets the addressing rule contexts.
	SetAddressing(IAddrtypeContext)

	// Getter signatures
	AllIntegerValue() []IIntegerValueContext
	IntegerValue(i int) IIntegerValueContext
	DataType() IDataTypeContext
	Indexorder() IIndexorderContext
	Addrtype() IAddrtypeContext

	// IsAxisRescale4Context differentiates from other interfaces.
	IsAxisRescale4Context()
}

type AxisRescale4Context struct {
	*antlr.BaseParserRuleContext
	parser                  antlr.Parser
	position                IIntegerValueContext
	datatype                IDataTypeContext
	maxNumberOfRescalePairs IIntegerValueContext
	indexIncr               IIndexorderContext
	addressing              IAddrtypeContext
}

func NewEmptyAxisRescale4Context() *AxisRescale4Context {
	var p = new(AxisRescale4Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_axisRescale4
	return p
}

func (*AxisRescale4Context) IsAxisRescale4Context() {}

func NewAxisRescale4Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AxisRescale4Context {
	var p = new(AxisRescale4Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_axisRescale4

	return p
}

func (s *AxisRescale4Context) GetParser() antlr.Parser { return s.parser }

func (s *AxisRescale4Context) GetPosition() IIntegerValueContext { return s.position }

func (s *AxisRescale4Context) GetDatatype() IDataTypeContext { return s.datatype }

func (s *AxisRescale4Context) GetMaxNumberOfRescalePairs() IIntegerValueContext {
	return s.maxNumberOfRescalePairs
}

func (s *AxisRescale4Context) GetIndexIncr() IIndexorderContext { return s.indexIncr }

func (s *AxisRescale4Context) GetAddressing() IAddrtypeContext { return s.addressing }

func (s *AxisRescale4Context) SetPosition(v IIntegerValueContext) { s.position = v }

func (s *AxisRescale4Context) SetDatatype(v IDataTypeContext) { s.datatype = v }

func (s *AxisRescale4Context) SetMaxNumberOfRescalePairs(v IIntegerValueContext) {
	s.maxNumberOfRescalePairs = v
}

func (s *AxisRescale4Context) SetIndexIncr(v IIndexorderContext) { s.indexIncr = v }

func (s *AxisRescale4Context) SetAddressing(v IAddrtypeContext) { s.addressing = v }

func (s *AxisRescale4Context) AllIntegerValue() []IIntegerValueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIntegerValueContext); ok {
			len++
		}
	}

	tst := make([]IIntegerValueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIntegerValueContext); ok {
			tst[i] = t.(IIntegerValueContext)
			i++
		}
	}

	return tst
}

func (s *AxisRescale4Context) IntegerValue(i int) IIntegerValueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *AxisRescale4Context) DataType() IDataTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDataTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDataTypeContext)
}

func (s *AxisRescale4Context) Indexorder() IIndexorderContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIndexorderContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIndexorderContext)
}

func (s *AxisRescale4Context) Addrtype() IAddrtypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAddrtypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAddrtypeContext)
}

func (s *AxisRescale4Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AxisRescale4Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AxisRescale4Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterAxisRescale4(s)
	}
}

func (s *AxisRescale4Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitAxisRescale4(s)
	}
}

func (s *AxisRescale4Context) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitAxisRescale4(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) AxisRescale4() (localctx IAxisRescale4Context) {
	this := p
	_ = this

	localctx = NewAxisRescale4Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 240, A2LParserRULE_axisRescale4)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1495)
		p.Match(A2LParserT__173)
	}
	{
		p.SetState(1496)

		var _x = p.IntegerValue()

		localctx.(*AxisRescale4Context).position = _x
	}
	{
		p.SetState(1497)

		var _x = p.DataType()

		localctx.(*AxisRescale4Context).datatype = _x
	}
	{
		p.SetState(1498)

		var _x = p.IntegerValue()

		localctx.(*AxisRescale4Context).maxNumberOfRescalePairs = _x
	}
	{
		p.SetState(1499)

		var _x = p.Indexorder()

		localctx.(*AxisRescale4Context).indexIncr = _x
	}
	{
		p.SetState(1500)

		var _x = p.Addrtype()

		localctx.(*AxisRescale4Context).addressing = _x
	}

	return localctx
}

// IAxisRescale5Context is an interface to support dynamic dispatch.
type IAxisRescale5Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPosition returns the position rule contexts.
	GetPosition() IIntegerValueContext

	// GetDatatype returns the datatype rule contexts.
	GetDatatype() IDataTypeContext

	// GetMaxNumberOfRescalePairs returns the maxNumberOfRescalePairs rule contexts.
	GetMaxNumberOfRescalePairs() IIntegerValueContext

	// GetIndexIncr returns the indexIncr rule contexts.
	GetIndexIncr() IIndexorderContext

	// GetAddressing returns the addressing rule contexts.
	GetAddressing() IAddrtypeContext

	// SetPosition sets the position rule contexts.
	SetPosition(IIntegerValueContext)

	// SetDatatype sets the datatype rule contexts.
	SetDatatype(IDataTypeContext)

	// SetMaxNumberOfRescalePairs sets the maxNumberOfRescalePairs rule contexts.
	SetMaxNumberOfRescalePairs(IIntegerValueContext)

	// SetIndexIncr sets the indexIncr rule contexts.
	SetIndexIncr(IIndexorderContext)

	// SetAddressing sets the addressing rule contexts.
	SetAddressing(IAddrtypeContext)

	// Getter signatures
	AllIntegerValue() []IIntegerValueContext
	IntegerValue(i int) IIntegerValueContext
	DataType() IDataTypeContext
	Indexorder() IIndexorderContext
	Addrtype() IAddrtypeContext

	// IsAxisRescale5Context differentiates from other interfaces.
	IsAxisRescale5Context()
}

type AxisRescale5Context struct {
	*antlr.BaseParserRuleContext
	parser                  antlr.Parser
	position                IIntegerValueContext
	datatype                IDataTypeContext
	maxNumberOfRescalePairs IIntegerValueContext
	indexIncr               IIndexorderContext
	addressing              IAddrtypeContext
}

func NewEmptyAxisRescale5Context() *AxisRescale5Context {
	var p = new(AxisRescale5Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_axisRescale5
	return p
}

func (*AxisRescale5Context) IsAxisRescale5Context() {}

func NewAxisRescale5Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AxisRescale5Context {
	var p = new(AxisRescale5Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_axisRescale5

	return p
}

func (s *AxisRescale5Context) GetParser() antlr.Parser { return s.parser }

func (s *AxisRescale5Context) GetPosition() IIntegerValueContext { return s.position }

func (s *AxisRescale5Context) GetDatatype() IDataTypeContext { return s.datatype }

func (s *AxisRescale5Context) GetMaxNumberOfRescalePairs() IIntegerValueContext {
	return s.maxNumberOfRescalePairs
}

func (s *AxisRescale5Context) GetIndexIncr() IIndexorderContext { return s.indexIncr }

func (s *AxisRescale5Context) GetAddressing() IAddrtypeContext { return s.addressing }

func (s *AxisRescale5Context) SetPosition(v IIntegerValueContext) { s.position = v }

func (s *AxisRescale5Context) SetDatatype(v IDataTypeContext) { s.datatype = v }

func (s *AxisRescale5Context) SetMaxNumberOfRescalePairs(v IIntegerValueContext) {
	s.maxNumberOfRescalePairs = v
}

func (s *AxisRescale5Context) SetIndexIncr(v IIndexorderContext) { s.indexIncr = v }

func (s *AxisRescale5Context) SetAddressing(v IAddrtypeContext) { s.addressing = v }

func (s *AxisRescale5Context) AllIntegerValue() []IIntegerValueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIntegerValueContext); ok {
			len++
		}
	}

	tst := make([]IIntegerValueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIntegerValueContext); ok {
			tst[i] = t.(IIntegerValueContext)
			i++
		}
	}

	return tst
}

func (s *AxisRescale5Context) IntegerValue(i int) IIntegerValueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *AxisRescale5Context) DataType() IDataTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDataTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDataTypeContext)
}

func (s *AxisRescale5Context) Indexorder() IIndexorderContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIndexorderContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIndexorderContext)
}

func (s *AxisRescale5Context) Addrtype() IAddrtypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAddrtypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAddrtypeContext)
}

func (s *AxisRescale5Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AxisRescale5Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AxisRescale5Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterAxisRescale5(s)
	}
}

func (s *AxisRescale5Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitAxisRescale5(s)
	}
}

func (s *AxisRescale5Context) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitAxisRescale5(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) AxisRescale5() (localctx IAxisRescale5Context) {
	this := p
	_ = this

	localctx = NewAxisRescale5Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 242, A2LParserRULE_axisRescale5)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1502)
		p.Match(A2LParserT__174)
	}
	{
		p.SetState(1503)

		var _x = p.IntegerValue()

		localctx.(*AxisRescale5Context).position = _x
	}
	{
		p.SetState(1504)

		var _x = p.DataType()

		localctx.(*AxisRescale5Context).datatype = _x
	}
	{
		p.SetState(1505)

		var _x = p.IntegerValue()

		localctx.(*AxisRescale5Context).maxNumberOfRescalePairs = _x
	}
	{
		p.SetState(1506)

		var _x = p.Indexorder()

		localctx.(*AxisRescale5Context).indexIncr = _x
	}
	{
		p.SetState(1507)

		var _x = p.Addrtype()

		localctx.(*AxisRescale5Context).addressing = _x
	}

	return localctx
}

// IDistOpXContext is an interface to support dynamic dispatch.
type IDistOpXContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPosition returns the position rule contexts.
	GetPosition() IIntegerValueContext

	// GetDatatype returns the datatype rule contexts.
	GetDatatype() IDataTypeContext

	// SetPosition sets the position rule contexts.
	SetPosition(IIntegerValueContext)

	// SetDatatype sets the datatype rule contexts.
	SetDatatype(IDataTypeContext)

	// Getter signatures
	IntegerValue() IIntegerValueContext
	DataType() IDataTypeContext

	// IsDistOpXContext differentiates from other interfaces.
	IsDistOpXContext()
}

type DistOpXContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	position IIntegerValueContext
	datatype IDataTypeContext
}

func NewEmptyDistOpXContext() *DistOpXContext {
	var p = new(DistOpXContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_distOpX
	return p
}

func (*DistOpXContext) IsDistOpXContext() {}

func NewDistOpXContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DistOpXContext {
	var p = new(DistOpXContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_distOpX

	return p
}

func (s *DistOpXContext) GetParser() antlr.Parser { return s.parser }

func (s *DistOpXContext) GetPosition() IIntegerValueContext { return s.position }

func (s *DistOpXContext) GetDatatype() IDataTypeContext { return s.datatype }

func (s *DistOpXContext) SetPosition(v IIntegerValueContext) { s.position = v }

func (s *DistOpXContext) SetDatatype(v IDataTypeContext) { s.datatype = v }

func (s *DistOpXContext) IntegerValue() IIntegerValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *DistOpXContext) DataType() IDataTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDataTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDataTypeContext)
}

func (s *DistOpXContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DistOpXContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DistOpXContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterDistOpX(s)
	}
}

func (s *DistOpXContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitDistOpX(s)
	}
}

func (s *DistOpXContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitDistOpX(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) DistOpX() (localctx IDistOpXContext) {
	this := p
	_ = this

	localctx = NewDistOpXContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 244, A2LParserRULE_distOpX)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1509)
		p.Match(A2LParserT__175)
	}
	{
		p.SetState(1510)

		var _x = p.IntegerValue()

		localctx.(*DistOpXContext).position = _x
	}
	{
		p.SetState(1511)

		var _x = p.DataType()

		localctx.(*DistOpXContext).datatype = _x
	}

	return localctx
}

// IDistOpYContext is an interface to support dynamic dispatch.
type IDistOpYContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPosition returns the position rule contexts.
	GetPosition() IIntegerValueContext

	// GetDatatype returns the datatype rule contexts.
	GetDatatype() IDataTypeContext

	// SetPosition sets the position rule contexts.
	SetPosition(IIntegerValueContext)

	// SetDatatype sets the datatype rule contexts.
	SetDatatype(IDataTypeContext)

	// Getter signatures
	IntegerValue() IIntegerValueContext
	DataType() IDataTypeContext

	// IsDistOpYContext differentiates from other interfaces.
	IsDistOpYContext()
}

type DistOpYContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	position IIntegerValueContext
	datatype IDataTypeContext
}

func NewEmptyDistOpYContext() *DistOpYContext {
	var p = new(DistOpYContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_distOpY
	return p
}

func (*DistOpYContext) IsDistOpYContext() {}

func NewDistOpYContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DistOpYContext {
	var p = new(DistOpYContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_distOpY

	return p
}

func (s *DistOpYContext) GetParser() antlr.Parser { return s.parser }

func (s *DistOpYContext) GetPosition() IIntegerValueContext { return s.position }

func (s *DistOpYContext) GetDatatype() IDataTypeContext { return s.datatype }

func (s *DistOpYContext) SetPosition(v IIntegerValueContext) { s.position = v }

func (s *DistOpYContext) SetDatatype(v IDataTypeContext) { s.datatype = v }

func (s *DistOpYContext) IntegerValue() IIntegerValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *DistOpYContext) DataType() IDataTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDataTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDataTypeContext)
}

func (s *DistOpYContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DistOpYContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DistOpYContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterDistOpY(s)
	}
}

func (s *DistOpYContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitDistOpY(s)
	}
}

func (s *DistOpYContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitDistOpY(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) DistOpY() (localctx IDistOpYContext) {
	this := p
	_ = this

	localctx = NewDistOpYContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 246, A2LParserRULE_distOpY)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1513)
		p.Match(A2LParserT__176)
	}
	{
		p.SetState(1514)

		var _x = p.IntegerValue()

		localctx.(*DistOpYContext).position = _x
	}
	{
		p.SetState(1515)

		var _x = p.DataType()

		localctx.(*DistOpYContext).datatype = _x
	}

	return localctx
}

// IDistOpZContext is an interface to support dynamic dispatch.
type IDistOpZContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPosition returns the position rule contexts.
	GetPosition() IIntegerValueContext

	// GetDatatype returns the datatype rule contexts.
	GetDatatype() IDataTypeContext

	// SetPosition sets the position rule contexts.
	SetPosition(IIntegerValueContext)

	// SetDatatype sets the datatype rule contexts.
	SetDatatype(IDataTypeContext)

	// Getter signatures
	IntegerValue() IIntegerValueContext
	DataType() IDataTypeContext

	// IsDistOpZContext differentiates from other interfaces.
	IsDistOpZContext()
}

type DistOpZContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	position IIntegerValueContext
	datatype IDataTypeContext
}

func NewEmptyDistOpZContext() *DistOpZContext {
	var p = new(DistOpZContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_distOpZ
	return p
}

func (*DistOpZContext) IsDistOpZContext() {}

func NewDistOpZContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DistOpZContext {
	var p = new(DistOpZContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_distOpZ

	return p
}

func (s *DistOpZContext) GetParser() antlr.Parser { return s.parser }

func (s *DistOpZContext) GetPosition() IIntegerValueContext { return s.position }

func (s *DistOpZContext) GetDatatype() IDataTypeContext { return s.datatype }

func (s *DistOpZContext) SetPosition(v IIntegerValueContext) { s.position = v }

func (s *DistOpZContext) SetDatatype(v IDataTypeContext) { s.datatype = v }

func (s *DistOpZContext) IntegerValue() IIntegerValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *DistOpZContext) DataType() IDataTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDataTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDataTypeContext)
}

func (s *DistOpZContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DistOpZContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DistOpZContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterDistOpZ(s)
	}
}

func (s *DistOpZContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitDistOpZ(s)
	}
}

func (s *DistOpZContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitDistOpZ(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) DistOpZ() (localctx IDistOpZContext) {
	this := p
	_ = this

	localctx = NewDistOpZContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 248, A2LParserRULE_distOpZ)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1517)
		p.Match(A2LParserT__177)
	}
	{
		p.SetState(1518)

		var _x = p.IntegerValue()

		localctx.(*DistOpZContext).position = _x
	}
	{
		p.SetState(1519)

		var _x = p.DataType()

		localctx.(*DistOpZContext).datatype = _x
	}

	return localctx
}

// IDistOp4Context is an interface to support dynamic dispatch.
type IDistOp4Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPosition returns the position rule contexts.
	GetPosition() IIntegerValueContext

	// GetDatatype returns the datatype rule contexts.
	GetDatatype() IDataTypeContext

	// SetPosition sets the position rule contexts.
	SetPosition(IIntegerValueContext)

	// SetDatatype sets the datatype rule contexts.
	SetDatatype(IDataTypeContext)

	// Getter signatures
	IntegerValue() IIntegerValueContext
	DataType() IDataTypeContext

	// IsDistOp4Context differentiates from other interfaces.
	IsDistOp4Context()
}

type DistOp4Context struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	position IIntegerValueContext
	datatype IDataTypeContext
}

func NewEmptyDistOp4Context() *DistOp4Context {
	var p = new(DistOp4Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_distOp4
	return p
}

func (*DistOp4Context) IsDistOp4Context() {}

func NewDistOp4Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DistOp4Context {
	var p = new(DistOp4Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_distOp4

	return p
}

func (s *DistOp4Context) GetParser() antlr.Parser { return s.parser }

func (s *DistOp4Context) GetPosition() IIntegerValueContext { return s.position }

func (s *DistOp4Context) GetDatatype() IDataTypeContext { return s.datatype }

func (s *DistOp4Context) SetPosition(v IIntegerValueContext) { s.position = v }

func (s *DistOp4Context) SetDatatype(v IDataTypeContext) { s.datatype = v }

func (s *DistOp4Context) IntegerValue() IIntegerValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *DistOp4Context) DataType() IDataTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDataTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDataTypeContext)
}

func (s *DistOp4Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DistOp4Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DistOp4Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterDistOp4(s)
	}
}

func (s *DistOp4Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitDistOp4(s)
	}
}

func (s *DistOp4Context) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitDistOp4(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) DistOp4() (localctx IDistOp4Context) {
	this := p
	_ = this

	localctx = NewDistOp4Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 250, A2LParserRULE_distOp4)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1521)
		p.Match(A2LParserT__178)
	}
	{
		p.SetState(1522)

		var _x = p.IntegerValue()

		localctx.(*DistOp4Context).position = _x
	}
	{
		p.SetState(1523)

		var _x = p.DataType()

		localctx.(*DistOp4Context).datatype = _x
	}

	return localctx
}

// IDistOp5Context is an interface to support dynamic dispatch.
type IDistOp5Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPosition returns the position rule contexts.
	GetPosition() IIntegerValueContext

	// GetDatatype returns the datatype rule contexts.
	GetDatatype() IDataTypeContext

	// SetPosition sets the position rule contexts.
	SetPosition(IIntegerValueContext)

	// SetDatatype sets the datatype rule contexts.
	SetDatatype(IDataTypeContext)

	// Getter signatures
	IntegerValue() IIntegerValueContext
	DataType() IDataTypeContext

	// IsDistOp5Context differentiates from other interfaces.
	IsDistOp5Context()
}

type DistOp5Context struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	position IIntegerValueContext
	datatype IDataTypeContext
}

func NewEmptyDistOp5Context() *DistOp5Context {
	var p = new(DistOp5Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_distOp5
	return p
}

func (*DistOp5Context) IsDistOp5Context() {}

func NewDistOp5Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DistOp5Context {
	var p = new(DistOp5Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_distOp5

	return p
}

func (s *DistOp5Context) GetParser() antlr.Parser { return s.parser }

func (s *DistOp5Context) GetPosition() IIntegerValueContext { return s.position }

func (s *DistOp5Context) GetDatatype() IDataTypeContext { return s.datatype }

func (s *DistOp5Context) SetPosition(v IIntegerValueContext) { s.position = v }

func (s *DistOp5Context) SetDatatype(v IDataTypeContext) { s.datatype = v }

func (s *DistOp5Context) IntegerValue() IIntegerValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *DistOp5Context) DataType() IDataTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDataTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDataTypeContext)
}

func (s *DistOp5Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DistOp5Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DistOp5Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterDistOp5(s)
	}
}

func (s *DistOp5Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitDistOp5(s)
	}
}

func (s *DistOp5Context) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitDistOp5(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) DistOp5() (localctx IDistOp5Context) {
	this := p
	_ = this

	localctx = NewDistOp5Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 252, A2LParserRULE_distOp5)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1525)
		p.Match(A2LParserT__179)
	}
	{
		p.SetState(1526)

		var _x = p.IntegerValue()

		localctx.(*DistOp5Context).position = _x
	}
	{
		p.SetState(1527)

		var _x = p.DataType()

		localctx.(*DistOp5Context).datatype = _x
	}

	return localctx
}

// IFixNoAxisPtsXContext is an interface to support dynamic dispatch.
type IFixNoAxisPtsXContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetNumberOfAxisPoints returns the numberOfAxisPoints rule contexts.
	GetNumberOfAxisPoints() IIntegerValueContext

	// SetNumberOfAxisPoints sets the numberOfAxisPoints rule contexts.
	SetNumberOfAxisPoints(IIntegerValueContext)

	// Getter signatures
	IntegerValue() IIntegerValueContext

	// IsFixNoAxisPtsXContext differentiates from other interfaces.
	IsFixNoAxisPtsXContext()
}

type FixNoAxisPtsXContext struct {
	*antlr.BaseParserRuleContext
	parser             antlr.Parser
	numberOfAxisPoints IIntegerValueContext
}

func NewEmptyFixNoAxisPtsXContext() *FixNoAxisPtsXContext {
	var p = new(FixNoAxisPtsXContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_fixNoAxisPtsX
	return p
}

func (*FixNoAxisPtsXContext) IsFixNoAxisPtsXContext() {}

func NewFixNoAxisPtsXContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FixNoAxisPtsXContext {
	var p = new(FixNoAxisPtsXContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_fixNoAxisPtsX

	return p
}

func (s *FixNoAxisPtsXContext) GetParser() antlr.Parser { return s.parser }

func (s *FixNoAxisPtsXContext) GetNumberOfAxisPoints() IIntegerValueContext {
	return s.numberOfAxisPoints
}

func (s *FixNoAxisPtsXContext) SetNumberOfAxisPoints(v IIntegerValueContext) {
	s.numberOfAxisPoints = v
}

func (s *FixNoAxisPtsXContext) IntegerValue() IIntegerValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *FixNoAxisPtsXContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FixNoAxisPtsXContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FixNoAxisPtsXContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterFixNoAxisPtsX(s)
	}
}

func (s *FixNoAxisPtsXContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitFixNoAxisPtsX(s)
	}
}

func (s *FixNoAxisPtsXContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitFixNoAxisPtsX(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) FixNoAxisPtsX() (localctx IFixNoAxisPtsXContext) {
	this := p
	_ = this

	localctx = NewFixNoAxisPtsXContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 254, A2LParserRULE_fixNoAxisPtsX)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1529)
		p.Match(A2LParserT__180)
	}
	{
		p.SetState(1530)

		var _x = p.IntegerValue()

		localctx.(*FixNoAxisPtsXContext).numberOfAxisPoints = _x
	}

	return localctx
}

// IFixNoAxisPtsYContext is an interface to support dynamic dispatch.
type IFixNoAxisPtsYContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetNumberOfAxisPoints returns the numberOfAxisPoints rule contexts.
	GetNumberOfAxisPoints() IIntegerValueContext

	// SetNumberOfAxisPoints sets the numberOfAxisPoints rule contexts.
	SetNumberOfAxisPoints(IIntegerValueContext)

	// Getter signatures
	IntegerValue() IIntegerValueContext

	// IsFixNoAxisPtsYContext differentiates from other interfaces.
	IsFixNoAxisPtsYContext()
}

type FixNoAxisPtsYContext struct {
	*antlr.BaseParserRuleContext
	parser             antlr.Parser
	numberOfAxisPoints IIntegerValueContext
}

func NewEmptyFixNoAxisPtsYContext() *FixNoAxisPtsYContext {
	var p = new(FixNoAxisPtsYContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_fixNoAxisPtsY
	return p
}

func (*FixNoAxisPtsYContext) IsFixNoAxisPtsYContext() {}

func NewFixNoAxisPtsYContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FixNoAxisPtsYContext {
	var p = new(FixNoAxisPtsYContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_fixNoAxisPtsY

	return p
}

func (s *FixNoAxisPtsYContext) GetParser() antlr.Parser { return s.parser }

func (s *FixNoAxisPtsYContext) GetNumberOfAxisPoints() IIntegerValueContext {
	return s.numberOfAxisPoints
}

func (s *FixNoAxisPtsYContext) SetNumberOfAxisPoints(v IIntegerValueContext) {
	s.numberOfAxisPoints = v
}

func (s *FixNoAxisPtsYContext) IntegerValue() IIntegerValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *FixNoAxisPtsYContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FixNoAxisPtsYContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FixNoAxisPtsYContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterFixNoAxisPtsY(s)
	}
}

func (s *FixNoAxisPtsYContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitFixNoAxisPtsY(s)
	}
}

func (s *FixNoAxisPtsYContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitFixNoAxisPtsY(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) FixNoAxisPtsY() (localctx IFixNoAxisPtsYContext) {
	this := p
	_ = this

	localctx = NewFixNoAxisPtsYContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 256, A2LParserRULE_fixNoAxisPtsY)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1532)
		p.Match(A2LParserT__181)
	}
	{
		p.SetState(1533)

		var _x = p.IntegerValue()

		localctx.(*FixNoAxisPtsYContext).numberOfAxisPoints = _x
	}

	return localctx
}

// IFixNoAxisPtsZContext is an interface to support dynamic dispatch.
type IFixNoAxisPtsZContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetNumberOfAxisPoints returns the numberOfAxisPoints rule contexts.
	GetNumberOfAxisPoints() IIntegerValueContext

	// SetNumberOfAxisPoints sets the numberOfAxisPoints rule contexts.
	SetNumberOfAxisPoints(IIntegerValueContext)

	// Getter signatures
	IntegerValue() IIntegerValueContext

	// IsFixNoAxisPtsZContext differentiates from other interfaces.
	IsFixNoAxisPtsZContext()
}

type FixNoAxisPtsZContext struct {
	*antlr.BaseParserRuleContext
	parser             antlr.Parser
	numberOfAxisPoints IIntegerValueContext
}

func NewEmptyFixNoAxisPtsZContext() *FixNoAxisPtsZContext {
	var p = new(FixNoAxisPtsZContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_fixNoAxisPtsZ
	return p
}

func (*FixNoAxisPtsZContext) IsFixNoAxisPtsZContext() {}

func NewFixNoAxisPtsZContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FixNoAxisPtsZContext {
	var p = new(FixNoAxisPtsZContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_fixNoAxisPtsZ

	return p
}

func (s *FixNoAxisPtsZContext) GetParser() antlr.Parser { return s.parser }

func (s *FixNoAxisPtsZContext) GetNumberOfAxisPoints() IIntegerValueContext {
	return s.numberOfAxisPoints
}

func (s *FixNoAxisPtsZContext) SetNumberOfAxisPoints(v IIntegerValueContext) {
	s.numberOfAxisPoints = v
}

func (s *FixNoAxisPtsZContext) IntegerValue() IIntegerValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *FixNoAxisPtsZContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FixNoAxisPtsZContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FixNoAxisPtsZContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterFixNoAxisPtsZ(s)
	}
}

func (s *FixNoAxisPtsZContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitFixNoAxisPtsZ(s)
	}
}

func (s *FixNoAxisPtsZContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitFixNoAxisPtsZ(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) FixNoAxisPtsZ() (localctx IFixNoAxisPtsZContext) {
	this := p
	_ = this

	localctx = NewFixNoAxisPtsZContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 258, A2LParserRULE_fixNoAxisPtsZ)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1535)
		p.Match(A2LParserT__182)
	}
	{
		p.SetState(1536)

		var _x = p.IntegerValue()

		localctx.(*FixNoAxisPtsZContext).numberOfAxisPoints = _x
	}

	return localctx
}

// IFixNoAxisPts4Context is an interface to support dynamic dispatch.
type IFixNoAxisPts4Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetNumberOfAxisPoints returns the numberOfAxisPoints rule contexts.
	GetNumberOfAxisPoints() IIntegerValueContext

	// SetNumberOfAxisPoints sets the numberOfAxisPoints rule contexts.
	SetNumberOfAxisPoints(IIntegerValueContext)

	// Getter signatures
	IntegerValue() IIntegerValueContext

	// IsFixNoAxisPts4Context differentiates from other interfaces.
	IsFixNoAxisPts4Context()
}

type FixNoAxisPts4Context struct {
	*antlr.BaseParserRuleContext
	parser             antlr.Parser
	numberOfAxisPoints IIntegerValueContext
}

func NewEmptyFixNoAxisPts4Context() *FixNoAxisPts4Context {
	var p = new(FixNoAxisPts4Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_fixNoAxisPts4
	return p
}

func (*FixNoAxisPts4Context) IsFixNoAxisPts4Context() {}

func NewFixNoAxisPts4Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FixNoAxisPts4Context {
	var p = new(FixNoAxisPts4Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_fixNoAxisPts4

	return p
}

func (s *FixNoAxisPts4Context) GetParser() antlr.Parser { return s.parser }

func (s *FixNoAxisPts4Context) GetNumberOfAxisPoints() IIntegerValueContext {
	return s.numberOfAxisPoints
}

func (s *FixNoAxisPts4Context) SetNumberOfAxisPoints(v IIntegerValueContext) {
	s.numberOfAxisPoints = v
}

func (s *FixNoAxisPts4Context) IntegerValue() IIntegerValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *FixNoAxisPts4Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FixNoAxisPts4Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FixNoAxisPts4Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterFixNoAxisPts4(s)
	}
}

func (s *FixNoAxisPts4Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitFixNoAxisPts4(s)
	}
}

func (s *FixNoAxisPts4Context) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitFixNoAxisPts4(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) FixNoAxisPts4() (localctx IFixNoAxisPts4Context) {
	this := p
	_ = this

	localctx = NewFixNoAxisPts4Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 260, A2LParserRULE_fixNoAxisPts4)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1538)
		p.Match(A2LParserT__183)
	}
	{
		p.SetState(1539)

		var _x = p.IntegerValue()

		localctx.(*FixNoAxisPts4Context).numberOfAxisPoints = _x
	}

	return localctx
}

// IFixNoAxisPts5Context is an interface to support dynamic dispatch.
type IFixNoAxisPts5Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetNumberOfAxisPoints returns the numberOfAxisPoints rule contexts.
	GetNumberOfAxisPoints() IIntegerValueContext

	// SetNumberOfAxisPoints sets the numberOfAxisPoints rule contexts.
	SetNumberOfAxisPoints(IIntegerValueContext)

	// Getter signatures
	IntegerValue() IIntegerValueContext

	// IsFixNoAxisPts5Context differentiates from other interfaces.
	IsFixNoAxisPts5Context()
}

type FixNoAxisPts5Context struct {
	*antlr.BaseParserRuleContext
	parser             antlr.Parser
	numberOfAxisPoints IIntegerValueContext
}

func NewEmptyFixNoAxisPts5Context() *FixNoAxisPts5Context {
	var p = new(FixNoAxisPts5Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_fixNoAxisPts5
	return p
}

func (*FixNoAxisPts5Context) IsFixNoAxisPts5Context() {}

func NewFixNoAxisPts5Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FixNoAxisPts5Context {
	var p = new(FixNoAxisPts5Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_fixNoAxisPts5

	return p
}

func (s *FixNoAxisPts5Context) GetParser() antlr.Parser { return s.parser }

func (s *FixNoAxisPts5Context) GetNumberOfAxisPoints() IIntegerValueContext {
	return s.numberOfAxisPoints
}

func (s *FixNoAxisPts5Context) SetNumberOfAxisPoints(v IIntegerValueContext) {
	s.numberOfAxisPoints = v
}

func (s *FixNoAxisPts5Context) IntegerValue() IIntegerValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *FixNoAxisPts5Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FixNoAxisPts5Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FixNoAxisPts5Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterFixNoAxisPts5(s)
	}
}

func (s *FixNoAxisPts5Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitFixNoAxisPts5(s)
	}
}

func (s *FixNoAxisPts5Context) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitFixNoAxisPts5(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) FixNoAxisPts5() (localctx IFixNoAxisPts5Context) {
	this := p
	_ = this

	localctx = NewFixNoAxisPts5Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 262, A2LParserRULE_fixNoAxisPts5)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1541)
		p.Match(A2LParserT__184)
	}
	{
		p.SetState(1542)

		var _x = p.IntegerValue()

		localctx.(*FixNoAxisPts5Context).numberOfAxisPoints = _x
	}

	return localctx
}

// IFncValuesContext is an interface to support dynamic dispatch.
type IFncValuesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetIndexMode returns the indexMode token.
	GetIndexMode() antlr.Token

	// SetIndexMode sets the indexMode token.
	SetIndexMode(antlr.Token)

	// GetPosition returns the position rule contexts.
	GetPosition() IIntegerValueContext

	// GetDatatype returns the datatype rule contexts.
	GetDatatype() IDataTypeContext

	// GetAddresstype returns the addresstype rule contexts.
	GetAddresstype() IAddrtypeContext

	// SetPosition sets the position rule contexts.
	SetPosition(IIntegerValueContext)

	// SetDatatype sets the datatype rule contexts.
	SetDatatype(IDataTypeContext)

	// SetAddresstype sets the addresstype rule contexts.
	SetAddresstype(IAddrtypeContext)

	// Getter signatures
	IntegerValue() IIntegerValueContext
	DataType() IDataTypeContext
	Addrtype() IAddrtypeContext

	// IsFncValuesContext differentiates from other interfaces.
	IsFncValuesContext()
}

type FncValuesContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	position    IIntegerValueContext
	datatype    IDataTypeContext
	indexMode   antlr.Token
	addresstype IAddrtypeContext
}

func NewEmptyFncValuesContext() *FncValuesContext {
	var p = new(FncValuesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_fncValues
	return p
}

func (*FncValuesContext) IsFncValuesContext() {}

func NewFncValuesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FncValuesContext {
	var p = new(FncValuesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_fncValues

	return p
}

func (s *FncValuesContext) GetParser() antlr.Parser { return s.parser }

func (s *FncValuesContext) GetIndexMode() antlr.Token { return s.indexMode }

func (s *FncValuesContext) SetIndexMode(v antlr.Token) { s.indexMode = v }

func (s *FncValuesContext) GetPosition() IIntegerValueContext { return s.position }

func (s *FncValuesContext) GetDatatype() IDataTypeContext { return s.datatype }

func (s *FncValuesContext) GetAddresstype() IAddrtypeContext { return s.addresstype }

func (s *FncValuesContext) SetPosition(v IIntegerValueContext) { s.position = v }

func (s *FncValuesContext) SetDatatype(v IDataTypeContext) { s.datatype = v }

func (s *FncValuesContext) SetAddresstype(v IAddrtypeContext) { s.addresstype = v }

func (s *FncValuesContext) IntegerValue() IIntegerValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *FncValuesContext) DataType() IDataTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDataTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDataTypeContext)
}

func (s *FncValuesContext) Addrtype() IAddrtypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAddrtypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAddrtypeContext)
}

func (s *FncValuesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FncValuesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FncValuesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterFncValues(s)
	}
}

func (s *FncValuesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitFncValues(s)
	}
}

func (s *FncValuesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitFncValues(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) FncValues() (localctx IFncValuesContext) {
	this := p
	_ = this

	localctx = NewFncValuesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 264, A2LParserRULE_fncValues)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1544)
		p.Match(A2LParserT__185)
	}
	{
		p.SetState(1545)

		var _x = p.IntegerValue()

		localctx.(*FncValuesContext).position = _x
	}
	{
		p.SetState(1546)

		var _x = p.DataType()

		localctx.(*FncValuesContext).datatype = _x
	}
	{
		p.SetState(1547)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*FncValuesContext).indexMode = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == A2LParserT__121 || _la == A2LParserT__122 || ((int64((_la-187)) & ^0x3f) == 0 && ((int64(1)<<(_la-187))&7) != 0)) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*FncValuesContext).indexMode = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(1548)

		var _x = p.Addrtype()

		localctx.(*FncValuesContext).addresstype = _x
	}

	return localctx
}

// IIdentificationContext is an interface to support dynamic dispatch.
type IIdentificationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPosition returns the position rule contexts.
	GetPosition() IIntegerValueContext

	// GetDatatype returns the datatype rule contexts.
	GetDatatype() IDataTypeContext

	// SetPosition sets the position rule contexts.
	SetPosition(IIntegerValueContext)

	// SetDatatype sets the datatype rule contexts.
	SetDatatype(IDataTypeContext)

	// Getter signatures
	IntegerValue() IIntegerValueContext
	DataType() IDataTypeContext

	// IsIdentificationContext differentiates from other interfaces.
	IsIdentificationContext()
}

type IdentificationContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	position IIntegerValueContext
	datatype IDataTypeContext
}

func NewEmptyIdentificationContext() *IdentificationContext {
	var p = new(IdentificationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_identification
	return p
}

func (*IdentificationContext) IsIdentificationContext() {}

func NewIdentificationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdentificationContext {
	var p = new(IdentificationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_identification

	return p
}

func (s *IdentificationContext) GetParser() antlr.Parser { return s.parser }

func (s *IdentificationContext) GetPosition() IIntegerValueContext { return s.position }

func (s *IdentificationContext) GetDatatype() IDataTypeContext { return s.datatype }

func (s *IdentificationContext) SetPosition(v IIntegerValueContext) { s.position = v }

func (s *IdentificationContext) SetDatatype(v IDataTypeContext) { s.datatype = v }

func (s *IdentificationContext) IntegerValue() IIntegerValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *IdentificationContext) DataType() IDataTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDataTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDataTypeContext)
}

func (s *IdentificationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdentificationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IdentificationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterIdentification(s)
	}
}

func (s *IdentificationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitIdentification(s)
	}
}

func (s *IdentificationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitIdentification(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) Identification() (localctx IIdentificationContext) {
	this := p
	_ = this

	localctx = NewIdentificationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 266, A2LParserRULE_identification)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1550)
		p.Match(A2LParserT__189)
	}
	{
		p.SetState(1551)

		var _x = p.IntegerValue()

		localctx.(*IdentificationContext).position = _x
	}
	{
		p.SetState(1552)

		var _x = p.DataType()

		localctx.(*IdentificationContext).datatype = _x
	}

	return localctx
}

// INoAxisPtsXContext is an interface to support dynamic dispatch.
type INoAxisPtsXContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPosition returns the position rule contexts.
	GetPosition() IIntegerValueContext

	// GetDatatype returns the datatype rule contexts.
	GetDatatype() IDataTypeContext

	// SetPosition sets the position rule contexts.
	SetPosition(IIntegerValueContext)

	// SetDatatype sets the datatype rule contexts.
	SetDatatype(IDataTypeContext)

	// Getter signatures
	IntegerValue() IIntegerValueContext
	DataType() IDataTypeContext

	// IsNoAxisPtsXContext differentiates from other interfaces.
	IsNoAxisPtsXContext()
}

type NoAxisPtsXContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	position IIntegerValueContext
	datatype IDataTypeContext
}

func NewEmptyNoAxisPtsXContext() *NoAxisPtsXContext {
	var p = new(NoAxisPtsXContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_noAxisPtsX
	return p
}

func (*NoAxisPtsXContext) IsNoAxisPtsXContext() {}

func NewNoAxisPtsXContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NoAxisPtsXContext {
	var p = new(NoAxisPtsXContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_noAxisPtsX

	return p
}

func (s *NoAxisPtsXContext) GetParser() antlr.Parser { return s.parser }

func (s *NoAxisPtsXContext) GetPosition() IIntegerValueContext { return s.position }

func (s *NoAxisPtsXContext) GetDatatype() IDataTypeContext { return s.datatype }

func (s *NoAxisPtsXContext) SetPosition(v IIntegerValueContext) { s.position = v }

func (s *NoAxisPtsXContext) SetDatatype(v IDataTypeContext) { s.datatype = v }

func (s *NoAxisPtsXContext) IntegerValue() IIntegerValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *NoAxisPtsXContext) DataType() IDataTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDataTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDataTypeContext)
}

func (s *NoAxisPtsXContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NoAxisPtsXContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NoAxisPtsXContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterNoAxisPtsX(s)
	}
}

func (s *NoAxisPtsXContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitNoAxisPtsX(s)
	}
}

func (s *NoAxisPtsXContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitNoAxisPtsX(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) NoAxisPtsX() (localctx INoAxisPtsXContext) {
	this := p
	_ = this

	localctx = NewNoAxisPtsXContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 268, A2LParserRULE_noAxisPtsX)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1554)
		p.Match(A2LParserT__190)
	}
	{
		p.SetState(1555)

		var _x = p.IntegerValue()

		localctx.(*NoAxisPtsXContext).position = _x
	}
	{
		p.SetState(1556)

		var _x = p.DataType()

		localctx.(*NoAxisPtsXContext).datatype = _x
	}

	return localctx
}

// INoAxisPtsYContext is an interface to support dynamic dispatch.
type INoAxisPtsYContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPosition returns the position rule contexts.
	GetPosition() IIntegerValueContext

	// GetDatatype returns the datatype rule contexts.
	GetDatatype() IDataTypeContext

	// SetPosition sets the position rule contexts.
	SetPosition(IIntegerValueContext)

	// SetDatatype sets the datatype rule contexts.
	SetDatatype(IDataTypeContext)

	// Getter signatures
	IntegerValue() IIntegerValueContext
	DataType() IDataTypeContext

	// IsNoAxisPtsYContext differentiates from other interfaces.
	IsNoAxisPtsYContext()
}

type NoAxisPtsYContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	position IIntegerValueContext
	datatype IDataTypeContext
}

func NewEmptyNoAxisPtsYContext() *NoAxisPtsYContext {
	var p = new(NoAxisPtsYContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_noAxisPtsY
	return p
}

func (*NoAxisPtsYContext) IsNoAxisPtsYContext() {}

func NewNoAxisPtsYContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NoAxisPtsYContext {
	var p = new(NoAxisPtsYContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_noAxisPtsY

	return p
}

func (s *NoAxisPtsYContext) GetParser() antlr.Parser { return s.parser }

func (s *NoAxisPtsYContext) GetPosition() IIntegerValueContext { return s.position }

func (s *NoAxisPtsYContext) GetDatatype() IDataTypeContext { return s.datatype }

func (s *NoAxisPtsYContext) SetPosition(v IIntegerValueContext) { s.position = v }

func (s *NoAxisPtsYContext) SetDatatype(v IDataTypeContext) { s.datatype = v }

func (s *NoAxisPtsYContext) IntegerValue() IIntegerValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *NoAxisPtsYContext) DataType() IDataTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDataTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDataTypeContext)
}

func (s *NoAxisPtsYContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NoAxisPtsYContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NoAxisPtsYContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterNoAxisPtsY(s)
	}
}

func (s *NoAxisPtsYContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitNoAxisPtsY(s)
	}
}

func (s *NoAxisPtsYContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitNoAxisPtsY(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) NoAxisPtsY() (localctx INoAxisPtsYContext) {
	this := p
	_ = this

	localctx = NewNoAxisPtsYContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 270, A2LParserRULE_noAxisPtsY)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1558)
		p.Match(A2LParserT__191)
	}
	{
		p.SetState(1559)

		var _x = p.IntegerValue()

		localctx.(*NoAxisPtsYContext).position = _x
	}
	{
		p.SetState(1560)

		var _x = p.DataType()

		localctx.(*NoAxisPtsYContext).datatype = _x
	}

	return localctx
}

// INoAxisPtsZContext is an interface to support dynamic dispatch.
type INoAxisPtsZContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPosition returns the position rule contexts.
	GetPosition() IIntegerValueContext

	// GetDatatype returns the datatype rule contexts.
	GetDatatype() IDataTypeContext

	// SetPosition sets the position rule contexts.
	SetPosition(IIntegerValueContext)

	// SetDatatype sets the datatype rule contexts.
	SetDatatype(IDataTypeContext)

	// Getter signatures
	IntegerValue() IIntegerValueContext
	DataType() IDataTypeContext

	// IsNoAxisPtsZContext differentiates from other interfaces.
	IsNoAxisPtsZContext()
}

type NoAxisPtsZContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	position IIntegerValueContext
	datatype IDataTypeContext
}

func NewEmptyNoAxisPtsZContext() *NoAxisPtsZContext {
	var p = new(NoAxisPtsZContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_noAxisPtsZ
	return p
}

func (*NoAxisPtsZContext) IsNoAxisPtsZContext() {}

func NewNoAxisPtsZContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NoAxisPtsZContext {
	var p = new(NoAxisPtsZContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_noAxisPtsZ

	return p
}

func (s *NoAxisPtsZContext) GetParser() antlr.Parser { return s.parser }

func (s *NoAxisPtsZContext) GetPosition() IIntegerValueContext { return s.position }

func (s *NoAxisPtsZContext) GetDatatype() IDataTypeContext { return s.datatype }

func (s *NoAxisPtsZContext) SetPosition(v IIntegerValueContext) { s.position = v }

func (s *NoAxisPtsZContext) SetDatatype(v IDataTypeContext) { s.datatype = v }

func (s *NoAxisPtsZContext) IntegerValue() IIntegerValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *NoAxisPtsZContext) DataType() IDataTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDataTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDataTypeContext)
}

func (s *NoAxisPtsZContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NoAxisPtsZContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NoAxisPtsZContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterNoAxisPtsZ(s)
	}
}

func (s *NoAxisPtsZContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitNoAxisPtsZ(s)
	}
}

func (s *NoAxisPtsZContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitNoAxisPtsZ(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) NoAxisPtsZ() (localctx INoAxisPtsZContext) {
	this := p
	_ = this

	localctx = NewNoAxisPtsZContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 272, A2LParserRULE_noAxisPtsZ)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1562)
		p.Match(A2LParserT__192)
	}
	{
		p.SetState(1563)

		var _x = p.IntegerValue()

		localctx.(*NoAxisPtsZContext).position = _x
	}
	{
		p.SetState(1564)

		var _x = p.DataType()

		localctx.(*NoAxisPtsZContext).datatype = _x
	}

	return localctx
}

// INoAxisPts4Context is an interface to support dynamic dispatch.
type INoAxisPts4Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPosition returns the position rule contexts.
	GetPosition() IIntegerValueContext

	// GetDatatype returns the datatype rule contexts.
	GetDatatype() IDataTypeContext

	// SetPosition sets the position rule contexts.
	SetPosition(IIntegerValueContext)

	// SetDatatype sets the datatype rule contexts.
	SetDatatype(IDataTypeContext)

	// Getter signatures
	IntegerValue() IIntegerValueContext
	DataType() IDataTypeContext

	// IsNoAxisPts4Context differentiates from other interfaces.
	IsNoAxisPts4Context()
}

type NoAxisPts4Context struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	position IIntegerValueContext
	datatype IDataTypeContext
}

func NewEmptyNoAxisPts4Context() *NoAxisPts4Context {
	var p = new(NoAxisPts4Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_noAxisPts4
	return p
}

func (*NoAxisPts4Context) IsNoAxisPts4Context() {}

func NewNoAxisPts4Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NoAxisPts4Context {
	var p = new(NoAxisPts4Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_noAxisPts4

	return p
}

func (s *NoAxisPts4Context) GetParser() antlr.Parser { return s.parser }

func (s *NoAxisPts4Context) GetPosition() IIntegerValueContext { return s.position }

func (s *NoAxisPts4Context) GetDatatype() IDataTypeContext { return s.datatype }

func (s *NoAxisPts4Context) SetPosition(v IIntegerValueContext) { s.position = v }

func (s *NoAxisPts4Context) SetDatatype(v IDataTypeContext) { s.datatype = v }

func (s *NoAxisPts4Context) IntegerValue() IIntegerValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *NoAxisPts4Context) DataType() IDataTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDataTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDataTypeContext)
}

func (s *NoAxisPts4Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NoAxisPts4Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NoAxisPts4Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterNoAxisPts4(s)
	}
}

func (s *NoAxisPts4Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitNoAxisPts4(s)
	}
}

func (s *NoAxisPts4Context) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitNoAxisPts4(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) NoAxisPts4() (localctx INoAxisPts4Context) {
	this := p
	_ = this

	localctx = NewNoAxisPts4Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 274, A2LParserRULE_noAxisPts4)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1566)
		p.Match(A2LParserT__193)
	}
	{
		p.SetState(1567)

		var _x = p.IntegerValue()

		localctx.(*NoAxisPts4Context).position = _x
	}
	{
		p.SetState(1568)

		var _x = p.DataType()

		localctx.(*NoAxisPts4Context).datatype = _x
	}

	return localctx
}

// INoAxisPts5Context is an interface to support dynamic dispatch.
type INoAxisPts5Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPosition returns the position rule contexts.
	GetPosition() IIntegerValueContext

	// GetDatatype returns the datatype rule contexts.
	GetDatatype() IDataTypeContext

	// SetPosition sets the position rule contexts.
	SetPosition(IIntegerValueContext)

	// SetDatatype sets the datatype rule contexts.
	SetDatatype(IDataTypeContext)

	// Getter signatures
	IntegerValue() IIntegerValueContext
	DataType() IDataTypeContext

	// IsNoAxisPts5Context differentiates from other interfaces.
	IsNoAxisPts5Context()
}

type NoAxisPts5Context struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	position IIntegerValueContext
	datatype IDataTypeContext
}

func NewEmptyNoAxisPts5Context() *NoAxisPts5Context {
	var p = new(NoAxisPts5Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_noAxisPts5
	return p
}

func (*NoAxisPts5Context) IsNoAxisPts5Context() {}

func NewNoAxisPts5Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NoAxisPts5Context {
	var p = new(NoAxisPts5Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_noAxisPts5

	return p
}

func (s *NoAxisPts5Context) GetParser() antlr.Parser { return s.parser }

func (s *NoAxisPts5Context) GetPosition() IIntegerValueContext { return s.position }

func (s *NoAxisPts5Context) GetDatatype() IDataTypeContext { return s.datatype }

func (s *NoAxisPts5Context) SetPosition(v IIntegerValueContext) { s.position = v }

func (s *NoAxisPts5Context) SetDatatype(v IDataTypeContext) { s.datatype = v }

func (s *NoAxisPts5Context) IntegerValue() IIntegerValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *NoAxisPts5Context) DataType() IDataTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDataTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDataTypeContext)
}

func (s *NoAxisPts5Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NoAxisPts5Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NoAxisPts5Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterNoAxisPts5(s)
	}
}

func (s *NoAxisPts5Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitNoAxisPts5(s)
	}
}

func (s *NoAxisPts5Context) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitNoAxisPts5(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) NoAxisPts5() (localctx INoAxisPts5Context) {
	this := p
	_ = this

	localctx = NewNoAxisPts5Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 276, A2LParserRULE_noAxisPts5)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1570)
		p.Match(A2LParserT__194)
	}
	{
		p.SetState(1571)

		var _x = p.IntegerValue()

		localctx.(*NoAxisPts5Context).position = _x
	}
	{
		p.SetState(1572)

		var _x = p.DataType()

		localctx.(*NoAxisPts5Context).datatype = _x
	}

	return localctx
}

// IStaticRecordLayoutContext is an interface to support dynamic dispatch.
type IStaticRecordLayoutContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsStaticRecordLayoutContext differentiates from other interfaces.
	IsStaticRecordLayoutContext()
}

type StaticRecordLayoutContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStaticRecordLayoutContext() *StaticRecordLayoutContext {
	var p = new(StaticRecordLayoutContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_staticRecordLayout
	return p
}

func (*StaticRecordLayoutContext) IsStaticRecordLayoutContext() {}

func NewStaticRecordLayoutContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StaticRecordLayoutContext {
	var p = new(StaticRecordLayoutContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_staticRecordLayout

	return p
}

func (s *StaticRecordLayoutContext) GetParser() antlr.Parser { return s.parser }
func (s *StaticRecordLayoutContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StaticRecordLayoutContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StaticRecordLayoutContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterStaticRecordLayout(s)
	}
}

func (s *StaticRecordLayoutContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitStaticRecordLayout(s)
	}
}

func (s *StaticRecordLayoutContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitStaticRecordLayout(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) StaticRecordLayout() (localctx IStaticRecordLayoutContext) {
	this := p
	_ = this

	localctx = NewStaticRecordLayoutContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 278, A2LParserRULE_staticRecordLayout)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1574)
		p.Match(A2LParserT__195)
	}

	return localctx
}

// INoRescaleXContext is an interface to support dynamic dispatch.
type INoRescaleXContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPosition returns the position rule contexts.
	GetPosition() IIntegerValueContext

	// GetDatatype returns the datatype rule contexts.
	GetDatatype() IDataTypeContext

	// SetPosition sets the position rule contexts.
	SetPosition(IIntegerValueContext)

	// SetDatatype sets the datatype rule contexts.
	SetDatatype(IDataTypeContext)

	// Getter signatures
	IntegerValue() IIntegerValueContext
	DataType() IDataTypeContext

	// IsNoRescaleXContext differentiates from other interfaces.
	IsNoRescaleXContext()
}

type NoRescaleXContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	position IIntegerValueContext
	datatype IDataTypeContext
}

func NewEmptyNoRescaleXContext() *NoRescaleXContext {
	var p = new(NoRescaleXContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_noRescaleX
	return p
}

func (*NoRescaleXContext) IsNoRescaleXContext() {}

func NewNoRescaleXContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NoRescaleXContext {
	var p = new(NoRescaleXContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_noRescaleX

	return p
}

func (s *NoRescaleXContext) GetParser() antlr.Parser { return s.parser }

func (s *NoRescaleXContext) GetPosition() IIntegerValueContext { return s.position }

func (s *NoRescaleXContext) GetDatatype() IDataTypeContext { return s.datatype }

func (s *NoRescaleXContext) SetPosition(v IIntegerValueContext) { s.position = v }

func (s *NoRescaleXContext) SetDatatype(v IDataTypeContext) { s.datatype = v }

func (s *NoRescaleXContext) IntegerValue() IIntegerValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *NoRescaleXContext) DataType() IDataTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDataTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDataTypeContext)
}

func (s *NoRescaleXContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NoRescaleXContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NoRescaleXContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterNoRescaleX(s)
	}
}

func (s *NoRescaleXContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitNoRescaleX(s)
	}
}

func (s *NoRescaleXContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitNoRescaleX(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) NoRescaleX() (localctx INoRescaleXContext) {
	this := p
	_ = this

	localctx = NewNoRescaleXContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 280, A2LParserRULE_noRescaleX)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1576)
		p.Match(A2LParserT__196)
	}
	{
		p.SetState(1577)

		var _x = p.IntegerValue()

		localctx.(*NoRescaleXContext).position = _x
	}
	{
		p.SetState(1578)

		var _x = p.DataType()

		localctx.(*NoRescaleXContext).datatype = _x
	}

	return localctx
}

// INoRescaleYContext is an interface to support dynamic dispatch.
type INoRescaleYContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPosition returns the position rule contexts.
	GetPosition() IIntegerValueContext

	// GetDatatype returns the datatype rule contexts.
	GetDatatype() IDataTypeContext

	// SetPosition sets the position rule contexts.
	SetPosition(IIntegerValueContext)

	// SetDatatype sets the datatype rule contexts.
	SetDatatype(IDataTypeContext)

	// Getter signatures
	IntegerValue() IIntegerValueContext
	DataType() IDataTypeContext

	// IsNoRescaleYContext differentiates from other interfaces.
	IsNoRescaleYContext()
}

type NoRescaleYContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	position IIntegerValueContext
	datatype IDataTypeContext
}

func NewEmptyNoRescaleYContext() *NoRescaleYContext {
	var p = new(NoRescaleYContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_noRescaleY
	return p
}

func (*NoRescaleYContext) IsNoRescaleYContext() {}

func NewNoRescaleYContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NoRescaleYContext {
	var p = new(NoRescaleYContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_noRescaleY

	return p
}

func (s *NoRescaleYContext) GetParser() antlr.Parser { return s.parser }

func (s *NoRescaleYContext) GetPosition() IIntegerValueContext { return s.position }

func (s *NoRescaleYContext) GetDatatype() IDataTypeContext { return s.datatype }

func (s *NoRescaleYContext) SetPosition(v IIntegerValueContext) { s.position = v }

func (s *NoRescaleYContext) SetDatatype(v IDataTypeContext) { s.datatype = v }

func (s *NoRescaleYContext) IntegerValue() IIntegerValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *NoRescaleYContext) DataType() IDataTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDataTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDataTypeContext)
}

func (s *NoRescaleYContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NoRescaleYContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NoRescaleYContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterNoRescaleY(s)
	}
}

func (s *NoRescaleYContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitNoRescaleY(s)
	}
}

func (s *NoRescaleYContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitNoRescaleY(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) NoRescaleY() (localctx INoRescaleYContext) {
	this := p
	_ = this

	localctx = NewNoRescaleYContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 282, A2LParserRULE_noRescaleY)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1580)
		p.Match(A2LParserT__197)
	}
	{
		p.SetState(1581)

		var _x = p.IntegerValue()

		localctx.(*NoRescaleYContext).position = _x
	}
	{
		p.SetState(1582)

		var _x = p.DataType()

		localctx.(*NoRescaleYContext).datatype = _x
	}

	return localctx
}

// INoRescaleZContext is an interface to support dynamic dispatch.
type INoRescaleZContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPosition returns the position rule contexts.
	GetPosition() IIntegerValueContext

	// GetDatatype returns the datatype rule contexts.
	GetDatatype() IDataTypeContext

	// SetPosition sets the position rule contexts.
	SetPosition(IIntegerValueContext)

	// SetDatatype sets the datatype rule contexts.
	SetDatatype(IDataTypeContext)

	// Getter signatures
	IntegerValue() IIntegerValueContext
	DataType() IDataTypeContext

	// IsNoRescaleZContext differentiates from other interfaces.
	IsNoRescaleZContext()
}

type NoRescaleZContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	position IIntegerValueContext
	datatype IDataTypeContext
}

func NewEmptyNoRescaleZContext() *NoRescaleZContext {
	var p = new(NoRescaleZContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_noRescaleZ
	return p
}

func (*NoRescaleZContext) IsNoRescaleZContext() {}

func NewNoRescaleZContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NoRescaleZContext {
	var p = new(NoRescaleZContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_noRescaleZ

	return p
}

func (s *NoRescaleZContext) GetParser() antlr.Parser { return s.parser }

func (s *NoRescaleZContext) GetPosition() IIntegerValueContext { return s.position }

func (s *NoRescaleZContext) GetDatatype() IDataTypeContext { return s.datatype }

func (s *NoRescaleZContext) SetPosition(v IIntegerValueContext) { s.position = v }

func (s *NoRescaleZContext) SetDatatype(v IDataTypeContext) { s.datatype = v }

func (s *NoRescaleZContext) IntegerValue() IIntegerValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *NoRescaleZContext) DataType() IDataTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDataTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDataTypeContext)
}

func (s *NoRescaleZContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NoRescaleZContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NoRescaleZContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterNoRescaleZ(s)
	}
}

func (s *NoRescaleZContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitNoRescaleZ(s)
	}
}

func (s *NoRescaleZContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitNoRescaleZ(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) NoRescaleZ() (localctx INoRescaleZContext) {
	this := p
	_ = this

	localctx = NewNoRescaleZContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 284, A2LParserRULE_noRescaleZ)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1584)
		p.Match(A2LParserT__198)
	}
	{
		p.SetState(1585)

		var _x = p.IntegerValue()

		localctx.(*NoRescaleZContext).position = _x
	}
	{
		p.SetState(1586)

		var _x = p.DataType()

		localctx.(*NoRescaleZContext).datatype = _x
	}

	return localctx
}

// INoRescale4Context is an interface to support dynamic dispatch.
type INoRescale4Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPosition returns the position rule contexts.
	GetPosition() IIntegerValueContext

	// GetDatatype returns the datatype rule contexts.
	GetDatatype() IDataTypeContext

	// SetPosition sets the position rule contexts.
	SetPosition(IIntegerValueContext)

	// SetDatatype sets the datatype rule contexts.
	SetDatatype(IDataTypeContext)

	// Getter signatures
	IntegerValue() IIntegerValueContext
	DataType() IDataTypeContext

	// IsNoRescale4Context differentiates from other interfaces.
	IsNoRescale4Context()
}

type NoRescale4Context struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	position IIntegerValueContext
	datatype IDataTypeContext
}

func NewEmptyNoRescale4Context() *NoRescale4Context {
	var p = new(NoRescale4Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_noRescale4
	return p
}

func (*NoRescale4Context) IsNoRescale4Context() {}

func NewNoRescale4Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NoRescale4Context {
	var p = new(NoRescale4Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_noRescale4

	return p
}

func (s *NoRescale4Context) GetParser() antlr.Parser { return s.parser }

func (s *NoRescale4Context) GetPosition() IIntegerValueContext { return s.position }

func (s *NoRescale4Context) GetDatatype() IDataTypeContext { return s.datatype }

func (s *NoRescale4Context) SetPosition(v IIntegerValueContext) { s.position = v }

func (s *NoRescale4Context) SetDatatype(v IDataTypeContext) { s.datatype = v }

func (s *NoRescale4Context) IntegerValue() IIntegerValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *NoRescale4Context) DataType() IDataTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDataTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDataTypeContext)
}

func (s *NoRescale4Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NoRescale4Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NoRescale4Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterNoRescale4(s)
	}
}

func (s *NoRescale4Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitNoRescale4(s)
	}
}

func (s *NoRescale4Context) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitNoRescale4(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) NoRescale4() (localctx INoRescale4Context) {
	this := p
	_ = this

	localctx = NewNoRescale4Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 286, A2LParserRULE_noRescale4)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1588)
		p.Match(A2LParserT__199)
	}
	{
		p.SetState(1589)

		var _x = p.IntegerValue()

		localctx.(*NoRescale4Context).position = _x
	}
	{
		p.SetState(1590)

		var _x = p.DataType()

		localctx.(*NoRescale4Context).datatype = _x
	}

	return localctx
}

// INoRescale5Context is an interface to support dynamic dispatch.
type INoRescale5Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPosition returns the position rule contexts.
	GetPosition() IIntegerValueContext

	// GetDatatype returns the datatype rule contexts.
	GetDatatype() IDataTypeContext

	// SetPosition sets the position rule contexts.
	SetPosition(IIntegerValueContext)

	// SetDatatype sets the datatype rule contexts.
	SetDatatype(IDataTypeContext)

	// Getter signatures
	IntegerValue() IIntegerValueContext
	DataType() IDataTypeContext

	// IsNoRescale5Context differentiates from other interfaces.
	IsNoRescale5Context()
}

type NoRescale5Context struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	position IIntegerValueContext
	datatype IDataTypeContext
}

func NewEmptyNoRescale5Context() *NoRescale5Context {
	var p = new(NoRescale5Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_noRescale5
	return p
}

func (*NoRescale5Context) IsNoRescale5Context() {}

func NewNoRescale5Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NoRescale5Context {
	var p = new(NoRescale5Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_noRescale5

	return p
}

func (s *NoRescale5Context) GetParser() antlr.Parser { return s.parser }

func (s *NoRescale5Context) GetPosition() IIntegerValueContext { return s.position }

func (s *NoRescale5Context) GetDatatype() IDataTypeContext { return s.datatype }

func (s *NoRescale5Context) SetPosition(v IIntegerValueContext) { s.position = v }

func (s *NoRescale5Context) SetDatatype(v IDataTypeContext) { s.datatype = v }

func (s *NoRescale5Context) IntegerValue() IIntegerValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *NoRescale5Context) DataType() IDataTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDataTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDataTypeContext)
}

func (s *NoRescale5Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NoRescale5Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NoRescale5Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterNoRescale5(s)
	}
}

func (s *NoRescale5Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitNoRescale5(s)
	}
}

func (s *NoRescale5Context) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitNoRescale5(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) NoRescale5() (localctx INoRescale5Context) {
	this := p
	_ = this

	localctx = NewNoRescale5Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 288, A2LParserRULE_noRescale5)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1592)
		p.Match(A2LParserT__200)
	}
	{
		p.SetState(1593)

		var _x = p.IntegerValue()

		localctx.(*NoRescale5Context).position = _x
	}
	{
		p.SetState(1594)

		var _x = p.DataType()

		localctx.(*NoRescale5Context).datatype = _x
	}

	return localctx
}

// IOffsetXContext is an interface to support dynamic dispatch.
type IOffsetXContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPosition returns the position rule contexts.
	GetPosition() IIntegerValueContext

	// GetDatatype returns the datatype rule contexts.
	GetDatatype() IDataTypeContext

	// SetPosition sets the position rule contexts.
	SetPosition(IIntegerValueContext)

	// SetDatatype sets the datatype rule contexts.
	SetDatatype(IDataTypeContext)

	// Getter signatures
	IntegerValue() IIntegerValueContext
	DataType() IDataTypeContext

	// IsOffsetXContext differentiates from other interfaces.
	IsOffsetXContext()
}

type OffsetXContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	position IIntegerValueContext
	datatype IDataTypeContext
}

func NewEmptyOffsetXContext() *OffsetXContext {
	var p = new(OffsetXContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_offsetX
	return p
}

func (*OffsetXContext) IsOffsetXContext() {}

func NewOffsetXContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OffsetXContext {
	var p = new(OffsetXContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_offsetX

	return p
}

func (s *OffsetXContext) GetParser() antlr.Parser { return s.parser }

func (s *OffsetXContext) GetPosition() IIntegerValueContext { return s.position }

func (s *OffsetXContext) GetDatatype() IDataTypeContext { return s.datatype }

func (s *OffsetXContext) SetPosition(v IIntegerValueContext) { s.position = v }

func (s *OffsetXContext) SetDatatype(v IDataTypeContext) { s.datatype = v }

func (s *OffsetXContext) IntegerValue() IIntegerValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *OffsetXContext) DataType() IDataTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDataTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDataTypeContext)
}

func (s *OffsetXContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OffsetXContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OffsetXContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterOffsetX(s)
	}
}

func (s *OffsetXContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitOffsetX(s)
	}
}

func (s *OffsetXContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitOffsetX(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) OffsetX() (localctx IOffsetXContext) {
	this := p
	_ = this

	localctx = NewOffsetXContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 290, A2LParserRULE_offsetX)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1596)
		p.Match(A2LParserT__201)
	}
	{
		p.SetState(1597)

		var _x = p.IntegerValue()

		localctx.(*OffsetXContext).position = _x
	}
	{
		p.SetState(1598)

		var _x = p.DataType()

		localctx.(*OffsetXContext).datatype = _x
	}

	return localctx
}

// IOffsetYContext is an interface to support dynamic dispatch.
type IOffsetYContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPosition returns the position rule contexts.
	GetPosition() IIntegerValueContext

	// GetDatatype returns the datatype rule contexts.
	GetDatatype() IDataTypeContext

	// SetPosition sets the position rule contexts.
	SetPosition(IIntegerValueContext)

	// SetDatatype sets the datatype rule contexts.
	SetDatatype(IDataTypeContext)

	// Getter signatures
	IntegerValue() IIntegerValueContext
	DataType() IDataTypeContext

	// IsOffsetYContext differentiates from other interfaces.
	IsOffsetYContext()
}

type OffsetYContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	position IIntegerValueContext
	datatype IDataTypeContext
}

func NewEmptyOffsetYContext() *OffsetYContext {
	var p = new(OffsetYContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_offsetY
	return p
}

func (*OffsetYContext) IsOffsetYContext() {}

func NewOffsetYContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OffsetYContext {
	var p = new(OffsetYContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_offsetY

	return p
}

func (s *OffsetYContext) GetParser() antlr.Parser { return s.parser }

func (s *OffsetYContext) GetPosition() IIntegerValueContext { return s.position }

func (s *OffsetYContext) GetDatatype() IDataTypeContext { return s.datatype }

func (s *OffsetYContext) SetPosition(v IIntegerValueContext) { s.position = v }

func (s *OffsetYContext) SetDatatype(v IDataTypeContext) { s.datatype = v }

func (s *OffsetYContext) IntegerValue() IIntegerValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *OffsetYContext) DataType() IDataTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDataTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDataTypeContext)
}

func (s *OffsetYContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OffsetYContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OffsetYContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterOffsetY(s)
	}
}

func (s *OffsetYContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitOffsetY(s)
	}
}

func (s *OffsetYContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitOffsetY(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) OffsetY() (localctx IOffsetYContext) {
	this := p
	_ = this

	localctx = NewOffsetYContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 292, A2LParserRULE_offsetY)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1600)
		p.Match(A2LParserT__202)
	}
	{
		p.SetState(1601)

		var _x = p.IntegerValue()

		localctx.(*OffsetYContext).position = _x
	}
	{
		p.SetState(1602)

		var _x = p.DataType()

		localctx.(*OffsetYContext).datatype = _x
	}

	return localctx
}

// IOffsetZContext is an interface to support dynamic dispatch.
type IOffsetZContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPosition returns the position rule contexts.
	GetPosition() IIntegerValueContext

	// GetDatatype returns the datatype rule contexts.
	GetDatatype() IDataTypeContext

	// SetPosition sets the position rule contexts.
	SetPosition(IIntegerValueContext)

	// SetDatatype sets the datatype rule contexts.
	SetDatatype(IDataTypeContext)

	// Getter signatures
	IntegerValue() IIntegerValueContext
	DataType() IDataTypeContext

	// IsOffsetZContext differentiates from other interfaces.
	IsOffsetZContext()
}

type OffsetZContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	position IIntegerValueContext
	datatype IDataTypeContext
}

func NewEmptyOffsetZContext() *OffsetZContext {
	var p = new(OffsetZContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_offsetZ
	return p
}

func (*OffsetZContext) IsOffsetZContext() {}

func NewOffsetZContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OffsetZContext {
	var p = new(OffsetZContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_offsetZ

	return p
}

func (s *OffsetZContext) GetParser() antlr.Parser { return s.parser }

func (s *OffsetZContext) GetPosition() IIntegerValueContext { return s.position }

func (s *OffsetZContext) GetDatatype() IDataTypeContext { return s.datatype }

func (s *OffsetZContext) SetPosition(v IIntegerValueContext) { s.position = v }

func (s *OffsetZContext) SetDatatype(v IDataTypeContext) { s.datatype = v }

func (s *OffsetZContext) IntegerValue() IIntegerValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *OffsetZContext) DataType() IDataTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDataTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDataTypeContext)
}

func (s *OffsetZContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OffsetZContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OffsetZContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterOffsetZ(s)
	}
}

func (s *OffsetZContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitOffsetZ(s)
	}
}

func (s *OffsetZContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitOffsetZ(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) OffsetZ() (localctx IOffsetZContext) {
	this := p
	_ = this

	localctx = NewOffsetZContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 294, A2LParserRULE_offsetZ)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1604)
		p.Match(A2LParserT__203)
	}
	{
		p.SetState(1605)

		var _x = p.IntegerValue()

		localctx.(*OffsetZContext).position = _x
	}
	{
		p.SetState(1606)

		var _x = p.DataType()

		localctx.(*OffsetZContext).datatype = _x
	}

	return localctx
}

// IOffset4Context is an interface to support dynamic dispatch.
type IOffset4Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPosition returns the position rule contexts.
	GetPosition() IIntegerValueContext

	// GetDatatype returns the datatype rule contexts.
	GetDatatype() IDataTypeContext

	// SetPosition sets the position rule contexts.
	SetPosition(IIntegerValueContext)

	// SetDatatype sets the datatype rule contexts.
	SetDatatype(IDataTypeContext)

	// Getter signatures
	IntegerValue() IIntegerValueContext
	DataType() IDataTypeContext

	// IsOffset4Context differentiates from other interfaces.
	IsOffset4Context()
}

type Offset4Context struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	position IIntegerValueContext
	datatype IDataTypeContext
}

func NewEmptyOffset4Context() *Offset4Context {
	var p = new(Offset4Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_offset4
	return p
}

func (*Offset4Context) IsOffset4Context() {}

func NewOffset4Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Offset4Context {
	var p = new(Offset4Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_offset4

	return p
}

func (s *Offset4Context) GetParser() antlr.Parser { return s.parser }

func (s *Offset4Context) GetPosition() IIntegerValueContext { return s.position }

func (s *Offset4Context) GetDatatype() IDataTypeContext { return s.datatype }

func (s *Offset4Context) SetPosition(v IIntegerValueContext) { s.position = v }

func (s *Offset4Context) SetDatatype(v IDataTypeContext) { s.datatype = v }

func (s *Offset4Context) IntegerValue() IIntegerValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *Offset4Context) DataType() IDataTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDataTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDataTypeContext)
}

func (s *Offset4Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Offset4Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Offset4Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterOffset4(s)
	}
}

func (s *Offset4Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitOffset4(s)
	}
}

func (s *Offset4Context) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitOffset4(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) Offset4() (localctx IOffset4Context) {
	this := p
	_ = this

	localctx = NewOffset4Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 296, A2LParserRULE_offset4)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1608)
		p.Match(A2LParserT__204)
	}
	{
		p.SetState(1609)

		var _x = p.IntegerValue()

		localctx.(*Offset4Context).position = _x
	}
	{
		p.SetState(1610)

		var _x = p.DataType()

		localctx.(*Offset4Context).datatype = _x
	}

	return localctx
}

// IOffset5Context is an interface to support dynamic dispatch.
type IOffset5Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPosition returns the position rule contexts.
	GetPosition() IIntegerValueContext

	// GetDatatype returns the datatype rule contexts.
	GetDatatype() IDataTypeContext

	// SetPosition sets the position rule contexts.
	SetPosition(IIntegerValueContext)

	// SetDatatype sets the datatype rule contexts.
	SetDatatype(IDataTypeContext)

	// Getter signatures
	IntegerValue() IIntegerValueContext
	DataType() IDataTypeContext

	// IsOffset5Context differentiates from other interfaces.
	IsOffset5Context()
}

type Offset5Context struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	position IIntegerValueContext
	datatype IDataTypeContext
}

func NewEmptyOffset5Context() *Offset5Context {
	var p = new(Offset5Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_offset5
	return p
}

func (*Offset5Context) IsOffset5Context() {}

func NewOffset5Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Offset5Context {
	var p = new(Offset5Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_offset5

	return p
}

func (s *Offset5Context) GetParser() antlr.Parser { return s.parser }

func (s *Offset5Context) GetPosition() IIntegerValueContext { return s.position }

func (s *Offset5Context) GetDatatype() IDataTypeContext { return s.datatype }

func (s *Offset5Context) SetPosition(v IIntegerValueContext) { s.position = v }

func (s *Offset5Context) SetDatatype(v IDataTypeContext) { s.datatype = v }

func (s *Offset5Context) IntegerValue() IIntegerValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *Offset5Context) DataType() IDataTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDataTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDataTypeContext)
}

func (s *Offset5Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Offset5Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Offset5Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterOffset5(s)
	}
}

func (s *Offset5Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitOffset5(s)
	}
}

func (s *Offset5Context) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitOffset5(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) Offset5() (localctx IOffset5Context) {
	this := p
	_ = this

	localctx = NewOffset5Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 298, A2LParserRULE_offset5)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1612)
		p.Match(A2LParserT__205)
	}
	{
		p.SetState(1613)

		var _x = p.IntegerValue()

		localctx.(*Offset5Context).position = _x
	}
	{
		p.SetState(1614)

		var _x = p.DataType()

		localctx.(*Offset5Context).datatype = _x
	}

	return localctx
}

// IReservedContext is an interface to support dynamic dispatch.
type IReservedContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPosition returns the position rule contexts.
	GetPosition() IIntegerValueContext

	// GetDataSize_ returns the dataSize_ rule contexts.
	GetDataSize_() IDatasizeContext

	// SetPosition sets the position rule contexts.
	SetPosition(IIntegerValueContext)

	// SetDataSize_ sets the dataSize_ rule contexts.
	SetDataSize_(IDatasizeContext)

	// Getter signatures
	IntegerValue() IIntegerValueContext
	Datasize() IDatasizeContext

	// IsReservedContext differentiates from other interfaces.
	IsReservedContext()
}

type ReservedContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	position  IIntegerValueContext
	dataSize_ IDatasizeContext
}

func NewEmptyReservedContext() *ReservedContext {
	var p = new(ReservedContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_reserved
	return p
}

func (*ReservedContext) IsReservedContext() {}

func NewReservedContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReservedContext {
	var p = new(ReservedContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_reserved

	return p
}

func (s *ReservedContext) GetParser() antlr.Parser { return s.parser }

func (s *ReservedContext) GetPosition() IIntegerValueContext { return s.position }

func (s *ReservedContext) GetDataSize_() IDatasizeContext { return s.dataSize_ }

func (s *ReservedContext) SetPosition(v IIntegerValueContext) { s.position = v }

func (s *ReservedContext) SetDataSize_(v IDatasizeContext) { s.dataSize_ = v }

func (s *ReservedContext) IntegerValue() IIntegerValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *ReservedContext) Datasize() IDatasizeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDatasizeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDatasizeContext)
}

func (s *ReservedContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReservedContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReservedContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterReserved(s)
	}
}

func (s *ReservedContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitReserved(s)
	}
}

func (s *ReservedContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitReserved(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) Reserved() (localctx IReservedContext) {
	this := p
	_ = this

	localctx = NewReservedContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 300, A2LParserRULE_reserved)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1616)
		p.Match(A2LParserT__148)
	}
	{
		p.SetState(1617)

		var _x = p.IntegerValue()

		localctx.(*ReservedContext).position = _x
	}
	{
		p.SetState(1618)

		var _x = p.Datasize()

		localctx.(*ReservedContext).dataSize_ = _x
	}

	return localctx
}

// IRipAddrWContext is an interface to support dynamic dispatch.
type IRipAddrWContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPosition returns the position rule contexts.
	GetPosition() IIntegerValueContext

	// GetDatatype returns the datatype rule contexts.
	GetDatatype() IDataTypeContext

	// SetPosition sets the position rule contexts.
	SetPosition(IIntegerValueContext)

	// SetDatatype sets the datatype rule contexts.
	SetDatatype(IDataTypeContext)

	// Getter signatures
	IntegerValue() IIntegerValueContext
	DataType() IDataTypeContext

	// IsRipAddrWContext differentiates from other interfaces.
	IsRipAddrWContext()
}

type RipAddrWContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	position IIntegerValueContext
	datatype IDataTypeContext
}

func NewEmptyRipAddrWContext() *RipAddrWContext {
	var p = new(RipAddrWContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_ripAddrW
	return p
}

func (*RipAddrWContext) IsRipAddrWContext() {}

func NewRipAddrWContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RipAddrWContext {
	var p = new(RipAddrWContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_ripAddrW

	return p
}

func (s *RipAddrWContext) GetParser() antlr.Parser { return s.parser }

func (s *RipAddrWContext) GetPosition() IIntegerValueContext { return s.position }

func (s *RipAddrWContext) GetDatatype() IDataTypeContext { return s.datatype }

func (s *RipAddrWContext) SetPosition(v IIntegerValueContext) { s.position = v }

func (s *RipAddrWContext) SetDatatype(v IDataTypeContext) { s.datatype = v }

func (s *RipAddrWContext) IntegerValue() IIntegerValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *RipAddrWContext) DataType() IDataTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDataTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDataTypeContext)
}

func (s *RipAddrWContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RipAddrWContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RipAddrWContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterRipAddrW(s)
	}
}

func (s *RipAddrWContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitRipAddrW(s)
	}
}

func (s *RipAddrWContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitRipAddrW(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) RipAddrW() (localctx IRipAddrWContext) {
	this := p
	_ = this

	localctx = NewRipAddrWContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 302, A2LParserRULE_ripAddrW)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1620)
		p.Match(A2LParserT__206)
	}
	{
		p.SetState(1621)

		var _x = p.IntegerValue()

		localctx.(*RipAddrWContext).position = _x
	}
	{
		p.SetState(1622)

		var _x = p.DataType()

		localctx.(*RipAddrWContext).datatype = _x
	}

	return localctx
}

// IRipAddrXContext is an interface to support dynamic dispatch.
type IRipAddrXContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPosition returns the position rule contexts.
	GetPosition() IIntegerValueContext

	// GetDatatype returns the datatype rule contexts.
	GetDatatype() IDataTypeContext

	// SetPosition sets the position rule contexts.
	SetPosition(IIntegerValueContext)

	// SetDatatype sets the datatype rule contexts.
	SetDatatype(IDataTypeContext)

	// Getter signatures
	IntegerValue() IIntegerValueContext
	DataType() IDataTypeContext

	// IsRipAddrXContext differentiates from other interfaces.
	IsRipAddrXContext()
}

type RipAddrXContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	position IIntegerValueContext
	datatype IDataTypeContext
}

func NewEmptyRipAddrXContext() *RipAddrXContext {
	var p = new(RipAddrXContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_ripAddrX
	return p
}

func (*RipAddrXContext) IsRipAddrXContext() {}

func NewRipAddrXContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RipAddrXContext {
	var p = new(RipAddrXContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_ripAddrX

	return p
}

func (s *RipAddrXContext) GetParser() antlr.Parser { return s.parser }

func (s *RipAddrXContext) GetPosition() IIntegerValueContext { return s.position }

func (s *RipAddrXContext) GetDatatype() IDataTypeContext { return s.datatype }

func (s *RipAddrXContext) SetPosition(v IIntegerValueContext) { s.position = v }

func (s *RipAddrXContext) SetDatatype(v IDataTypeContext) { s.datatype = v }

func (s *RipAddrXContext) IntegerValue() IIntegerValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *RipAddrXContext) DataType() IDataTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDataTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDataTypeContext)
}

func (s *RipAddrXContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RipAddrXContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RipAddrXContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterRipAddrX(s)
	}
}

func (s *RipAddrXContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitRipAddrX(s)
	}
}

func (s *RipAddrXContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitRipAddrX(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) RipAddrX() (localctx IRipAddrXContext) {
	this := p
	_ = this

	localctx = NewRipAddrXContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 304, A2LParserRULE_ripAddrX)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1624)
		p.Match(A2LParserT__207)
	}
	{
		p.SetState(1625)

		var _x = p.IntegerValue()

		localctx.(*RipAddrXContext).position = _x
	}
	{
		p.SetState(1626)

		var _x = p.DataType()

		localctx.(*RipAddrXContext).datatype = _x
	}

	return localctx
}

// IRipAddrYContext is an interface to support dynamic dispatch.
type IRipAddrYContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPosition returns the position rule contexts.
	GetPosition() IIntegerValueContext

	// GetDatatype returns the datatype rule contexts.
	GetDatatype() IDataTypeContext

	// SetPosition sets the position rule contexts.
	SetPosition(IIntegerValueContext)

	// SetDatatype sets the datatype rule contexts.
	SetDatatype(IDataTypeContext)

	// Getter signatures
	IntegerValue() IIntegerValueContext
	DataType() IDataTypeContext

	// IsRipAddrYContext differentiates from other interfaces.
	IsRipAddrYContext()
}

type RipAddrYContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	position IIntegerValueContext
	datatype IDataTypeContext
}

func NewEmptyRipAddrYContext() *RipAddrYContext {
	var p = new(RipAddrYContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_ripAddrY
	return p
}

func (*RipAddrYContext) IsRipAddrYContext() {}

func NewRipAddrYContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RipAddrYContext {
	var p = new(RipAddrYContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_ripAddrY

	return p
}

func (s *RipAddrYContext) GetParser() antlr.Parser { return s.parser }

func (s *RipAddrYContext) GetPosition() IIntegerValueContext { return s.position }

func (s *RipAddrYContext) GetDatatype() IDataTypeContext { return s.datatype }

func (s *RipAddrYContext) SetPosition(v IIntegerValueContext) { s.position = v }

func (s *RipAddrYContext) SetDatatype(v IDataTypeContext) { s.datatype = v }

func (s *RipAddrYContext) IntegerValue() IIntegerValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *RipAddrYContext) DataType() IDataTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDataTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDataTypeContext)
}

func (s *RipAddrYContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RipAddrYContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RipAddrYContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterRipAddrY(s)
	}
}

func (s *RipAddrYContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitRipAddrY(s)
	}
}

func (s *RipAddrYContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitRipAddrY(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) RipAddrY() (localctx IRipAddrYContext) {
	this := p
	_ = this

	localctx = NewRipAddrYContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 306, A2LParserRULE_ripAddrY)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1628)
		p.Match(A2LParserT__208)
	}
	{
		p.SetState(1629)

		var _x = p.IntegerValue()

		localctx.(*RipAddrYContext).position = _x
	}
	{
		p.SetState(1630)

		var _x = p.DataType()

		localctx.(*RipAddrYContext).datatype = _x
	}

	return localctx
}

// IRipAddrZContext is an interface to support dynamic dispatch.
type IRipAddrZContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPosition returns the position rule contexts.
	GetPosition() IIntegerValueContext

	// GetDatatype returns the datatype rule contexts.
	GetDatatype() IDataTypeContext

	// SetPosition sets the position rule contexts.
	SetPosition(IIntegerValueContext)

	// SetDatatype sets the datatype rule contexts.
	SetDatatype(IDataTypeContext)

	// Getter signatures
	IntegerValue() IIntegerValueContext
	DataType() IDataTypeContext

	// IsRipAddrZContext differentiates from other interfaces.
	IsRipAddrZContext()
}

type RipAddrZContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	position IIntegerValueContext
	datatype IDataTypeContext
}

func NewEmptyRipAddrZContext() *RipAddrZContext {
	var p = new(RipAddrZContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_ripAddrZ
	return p
}

func (*RipAddrZContext) IsRipAddrZContext() {}

func NewRipAddrZContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RipAddrZContext {
	var p = new(RipAddrZContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_ripAddrZ

	return p
}

func (s *RipAddrZContext) GetParser() antlr.Parser { return s.parser }

func (s *RipAddrZContext) GetPosition() IIntegerValueContext { return s.position }

func (s *RipAddrZContext) GetDatatype() IDataTypeContext { return s.datatype }

func (s *RipAddrZContext) SetPosition(v IIntegerValueContext) { s.position = v }

func (s *RipAddrZContext) SetDatatype(v IDataTypeContext) { s.datatype = v }

func (s *RipAddrZContext) IntegerValue() IIntegerValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *RipAddrZContext) DataType() IDataTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDataTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDataTypeContext)
}

func (s *RipAddrZContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RipAddrZContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RipAddrZContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterRipAddrZ(s)
	}
}

func (s *RipAddrZContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitRipAddrZ(s)
	}
}

func (s *RipAddrZContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitRipAddrZ(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) RipAddrZ() (localctx IRipAddrZContext) {
	this := p
	_ = this

	localctx = NewRipAddrZContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 308, A2LParserRULE_ripAddrZ)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1632)
		p.Match(A2LParserT__209)
	}
	{
		p.SetState(1633)

		var _x = p.IntegerValue()

		localctx.(*RipAddrZContext).position = _x
	}
	{
		p.SetState(1634)

		var _x = p.DataType()

		localctx.(*RipAddrZContext).datatype = _x
	}

	return localctx
}

// IRipAddr4Context is an interface to support dynamic dispatch.
type IRipAddr4Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPosition returns the position rule contexts.
	GetPosition() IIntegerValueContext

	// GetDatatype returns the datatype rule contexts.
	GetDatatype() IDataTypeContext

	// SetPosition sets the position rule contexts.
	SetPosition(IIntegerValueContext)

	// SetDatatype sets the datatype rule contexts.
	SetDatatype(IDataTypeContext)

	// Getter signatures
	IntegerValue() IIntegerValueContext
	DataType() IDataTypeContext

	// IsRipAddr4Context differentiates from other interfaces.
	IsRipAddr4Context()
}

type RipAddr4Context struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	position IIntegerValueContext
	datatype IDataTypeContext
}

func NewEmptyRipAddr4Context() *RipAddr4Context {
	var p = new(RipAddr4Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_ripAddr4
	return p
}

func (*RipAddr4Context) IsRipAddr4Context() {}

func NewRipAddr4Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RipAddr4Context {
	var p = new(RipAddr4Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_ripAddr4

	return p
}

func (s *RipAddr4Context) GetParser() antlr.Parser { return s.parser }

func (s *RipAddr4Context) GetPosition() IIntegerValueContext { return s.position }

func (s *RipAddr4Context) GetDatatype() IDataTypeContext { return s.datatype }

func (s *RipAddr4Context) SetPosition(v IIntegerValueContext) { s.position = v }

func (s *RipAddr4Context) SetDatatype(v IDataTypeContext) { s.datatype = v }

func (s *RipAddr4Context) IntegerValue() IIntegerValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *RipAddr4Context) DataType() IDataTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDataTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDataTypeContext)
}

func (s *RipAddr4Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RipAddr4Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RipAddr4Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterRipAddr4(s)
	}
}

func (s *RipAddr4Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitRipAddr4(s)
	}
}

func (s *RipAddr4Context) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitRipAddr4(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) RipAddr4() (localctx IRipAddr4Context) {
	this := p
	_ = this

	localctx = NewRipAddr4Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 310, A2LParserRULE_ripAddr4)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1636)
		p.Match(A2LParserT__210)
	}
	{
		p.SetState(1637)

		var _x = p.IntegerValue()

		localctx.(*RipAddr4Context).position = _x
	}
	{
		p.SetState(1638)

		var _x = p.DataType()

		localctx.(*RipAddr4Context).datatype = _x
	}

	return localctx
}

// IRipAddr5Context is an interface to support dynamic dispatch.
type IRipAddr5Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPosition returns the position rule contexts.
	GetPosition() IIntegerValueContext

	// GetDatatype returns the datatype rule contexts.
	GetDatatype() IDataTypeContext

	// SetPosition sets the position rule contexts.
	SetPosition(IIntegerValueContext)

	// SetDatatype sets the datatype rule contexts.
	SetDatatype(IDataTypeContext)

	// Getter signatures
	IntegerValue() IIntegerValueContext
	DataType() IDataTypeContext

	// IsRipAddr5Context differentiates from other interfaces.
	IsRipAddr5Context()
}

type RipAddr5Context struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	position IIntegerValueContext
	datatype IDataTypeContext
}

func NewEmptyRipAddr5Context() *RipAddr5Context {
	var p = new(RipAddr5Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_ripAddr5
	return p
}

func (*RipAddr5Context) IsRipAddr5Context() {}

func NewRipAddr5Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RipAddr5Context {
	var p = new(RipAddr5Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_ripAddr5

	return p
}

func (s *RipAddr5Context) GetParser() antlr.Parser { return s.parser }

func (s *RipAddr5Context) GetPosition() IIntegerValueContext { return s.position }

func (s *RipAddr5Context) GetDatatype() IDataTypeContext { return s.datatype }

func (s *RipAddr5Context) SetPosition(v IIntegerValueContext) { s.position = v }

func (s *RipAddr5Context) SetDatatype(v IDataTypeContext) { s.datatype = v }

func (s *RipAddr5Context) IntegerValue() IIntegerValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *RipAddr5Context) DataType() IDataTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDataTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDataTypeContext)
}

func (s *RipAddr5Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RipAddr5Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RipAddr5Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterRipAddr5(s)
	}
}

func (s *RipAddr5Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitRipAddr5(s)
	}
}

func (s *RipAddr5Context) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitRipAddr5(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) RipAddr5() (localctx IRipAddr5Context) {
	this := p
	_ = this

	localctx = NewRipAddr5Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 312, A2LParserRULE_ripAddr5)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1640)
		p.Match(A2LParserT__211)
	}
	{
		p.SetState(1641)

		var _x = p.IntegerValue()

		localctx.(*RipAddr5Context).position = _x
	}
	{
		p.SetState(1642)

		var _x = p.DataType()

		localctx.(*RipAddr5Context).datatype = _x
	}

	return localctx
}

// IShiftOpXContext is an interface to support dynamic dispatch.
type IShiftOpXContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPosition returns the position rule contexts.
	GetPosition() IIntegerValueContext

	// GetDatatype returns the datatype rule contexts.
	GetDatatype() IDataTypeContext

	// SetPosition sets the position rule contexts.
	SetPosition(IIntegerValueContext)

	// SetDatatype sets the datatype rule contexts.
	SetDatatype(IDataTypeContext)

	// Getter signatures
	IntegerValue() IIntegerValueContext
	DataType() IDataTypeContext

	// IsShiftOpXContext differentiates from other interfaces.
	IsShiftOpXContext()
}

type ShiftOpXContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	position IIntegerValueContext
	datatype IDataTypeContext
}

func NewEmptyShiftOpXContext() *ShiftOpXContext {
	var p = new(ShiftOpXContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_shiftOpX
	return p
}

func (*ShiftOpXContext) IsShiftOpXContext() {}

func NewShiftOpXContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShiftOpXContext {
	var p = new(ShiftOpXContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_shiftOpX

	return p
}

func (s *ShiftOpXContext) GetParser() antlr.Parser { return s.parser }

func (s *ShiftOpXContext) GetPosition() IIntegerValueContext { return s.position }

func (s *ShiftOpXContext) GetDatatype() IDataTypeContext { return s.datatype }

func (s *ShiftOpXContext) SetPosition(v IIntegerValueContext) { s.position = v }

func (s *ShiftOpXContext) SetDatatype(v IDataTypeContext) { s.datatype = v }

func (s *ShiftOpXContext) IntegerValue() IIntegerValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *ShiftOpXContext) DataType() IDataTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDataTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDataTypeContext)
}

func (s *ShiftOpXContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShiftOpXContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShiftOpXContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterShiftOpX(s)
	}
}

func (s *ShiftOpXContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitShiftOpX(s)
	}
}

func (s *ShiftOpXContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitShiftOpX(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) ShiftOpX() (localctx IShiftOpXContext) {
	this := p
	_ = this

	localctx = NewShiftOpXContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 314, A2LParserRULE_shiftOpX)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1644)
		p.Match(A2LParserT__212)
	}
	{
		p.SetState(1645)

		var _x = p.IntegerValue()

		localctx.(*ShiftOpXContext).position = _x
	}
	{
		p.SetState(1646)

		var _x = p.DataType()

		localctx.(*ShiftOpXContext).datatype = _x
	}

	return localctx
}

// IShiftOpYContext is an interface to support dynamic dispatch.
type IShiftOpYContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPosition returns the position rule contexts.
	GetPosition() IIntegerValueContext

	// GetDatatype returns the datatype rule contexts.
	GetDatatype() IDataTypeContext

	// SetPosition sets the position rule contexts.
	SetPosition(IIntegerValueContext)

	// SetDatatype sets the datatype rule contexts.
	SetDatatype(IDataTypeContext)

	// Getter signatures
	IntegerValue() IIntegerValueContext
	DataType() IDataTypeContext

	// IsShiftOpYContext differentiates from other interfaces.
	IsShiftOpYContext()
}

type ShiftOpYContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	position IIntegerValueContext
	datatype IDataTypeContext
}

func NewEmptyShiftOpYContext() *ShiftOpYContext {
	var p = new(ShiftOpYContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_shiftOpY
	return p
}

func (*ShiftOpYContext) IsShiftOpYContext() {}

func NewShiftOpYContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShiftOpYContext {
	var p = new(ShiftOpYContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_shiftOpY

	return p
}

func (s *ShiftOpYContext) GetParser() antlr.Parser { return s.parser }

func (s *ShiftOpYContext) GetPosition() IIntegerValueContext { return s.position }

func (s *ShiftOpYContext) GetDatatype() IDataTypeContext { return s.datatype }

func (s *ShiftOpYContext) SetPosition(v IIntegerValueContext) { s.position = v }

func (s *ShiftOpYContext) SetDatatype(v IDataTypeContext) { s.datatype = v }

func (s *ShiftOpYContext) IntegerValue() IIntegerValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *ShiftOpYContext) DataType() IDataTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDataTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDataTypeContext)
}

func (s *ShiftOpYContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShiftOpYContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShiftOpYContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterShiftOpY(s)
	}
}

func (s *ShiftOpYContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitShiftOpY(s)
	}
}

func (s *ShiftOpYContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitShiftOpY(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) ShiftOpY() (localctx IShiftOpYContext) {
	this := p
	_ = this

	localctx = NewShiftOpYContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 316, A2LParserRULE_shiftOpY)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1648)
		p.Match(A2LParserT__213)
	}
	{
		p.SetState(1649)

		var _x = p.IntegerValue()

		localctx.(*ShiftOpYContext).position = _x
	}
	{
		p.SetState(1650)

		var _x = p.DataType()

		localctx.(*ShiftOpYContext).datatype = _x
	}

	return localctx
}

// IShiftOpZContext is an interface to support dynamic dispatch.
type IShiftOpZContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPosition returns the position rule contexts.
	GetPosition() IIntegerValueContext

	// GetDatatype returns the datatype rule contexts.
	GetDatatype() IDataTypeContext

	// SetPosition sets the position rule contexts.
	SetPosition(IIntegerValueContext)

	// SetDatatype sets the datatype rule contexts.
	SetDatatype(IDataTypeContext)

	// Getter signatures
	IntegerValue() IIntegerValueContext
	DataType() IDataTypeContext

	// IsShiftOpZContext differentiates from other interfaces.
	IsShiftOpZContext()
}

type ShiftOpZContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	position IIntegerValueContext
	datatype IDataTypeContext
}

func NewEmptyShiftOpZContext() *ShiftOpZContext {
	var p = new(ShiftOpZContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_shiftOpZ
	return p
}

func (*ShiftOpZContext) IsShiftOpZContext() {}

func NewShiftOpZContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShiftOpZContext {
	var p = new(ShiftOpZContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_shiftOpZ

	return p
}

func (s *ShiftOpZContext) GetParser() antlr.Parser { return s.parser }

func (s *ShiftOpZContext) GetPosition() IIntegerValueContext { return s.position }

func (s *ShiftOpZContext) GetDatatype() IDataTypeContext { return s.datatype }

func (s *ShiftOpZContext) SetPosition(v IIntegerValueContext) { s.position = v }

func (s *ShiftOpZContext) SetDatatype(v IDataTypeContext) { s.datatype = v }

func (s *ShiftOpZContext) IntegerValue() IIntegerValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *ShiftOpZContext) DataType() IDataTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDataTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDataTypeContext)
}

func (s *ShiftOpZContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShiftOpZContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShiftOpZContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterShiftOpZ(s)
	}
}

func (s *ShiftOpZContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitShiftOpZ(s)
	}
}

func (s *ShiftOpZContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitShiftOpZ(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) ShiftOpZ() (localctx IShiftOpZContext) {
	this := p
	_ = this

	localctx = NewShiftOpZContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 318, A2LParserRULE_shiftOpZ)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1652)
		p.Match(A2LParserT__214)
	}
	{
		p.SetState(1653)

		var _x = p.IntegerValue()

		localctx.(*ShiftOpZContext).position = _x
	}
	{
		p.SetState(1654)

		var _x = p.DataType()

		localctx.(*ShiftOpZContext).datatype = _x
	}

	return localctx
}

// IShiftOp4Context is an interface to support dynamic dispatch.
type IShiftOp4Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPosition returns the position rule contexts.
	GetPosition() IIntegerValueContext

	// GetDatatype returns the datatype rule contexts.
	GetDatatype() IDataTypeContext

	// SetPosition sets the position rule contexts.
	SetPosition(IIntegerValueContext)

	// SetDatatype sets the datatype rule contexts.
	SetDatatype(IDataTypeContext)

	// Getter signatures
	IntegerValue() IIntegerValueContext
	DataType() IDataTypeContext

	// IsShiftOp4Context differentiates from other interfaces.
	IsShiftOp4Context()
}

type ShiftOp4Context struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	position IIntegerValueContext
	datatype IDataTypeContext
}

func NewEmptyShiftOp4Context() *ShiftOp4Context {
	var p = new(ShiftOp4Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_shiftOp4
	return p
}

func (*ShiftOp4Context) IsShiftOp4Context() {}

func NewShiftOp4Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShiftOp4Context {
	var p = new(ShiftOp4Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_shiftOp4

	return p
}

func (s *ShiftOp4Context) GetParser() antlr.Parser { return s.parser }

func (s *ShiftOp4Context) GetPosition() IIntegerValueContext { return s.position }

func (s *ShiftOp4Context) GetDatatype() IDataTypeContext { return s.datatype }

func (s *ShiftOp4Context) SetPosition(v IIntegerValueContext) { s.position = v }

func (s *ShiftOp4Context) SetDatatype(v IDataTypeContext) { s.datatype = v }

func (s *ShiftOp4Context) IntegerValue() IIntegerValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *ShiftOp4Context) DataType() IDataTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDataTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDataTypeContext)
}

func (s *ShiftOp4Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShiftOp4Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShiftOp4Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterShiftOp4(s)
	}
}

func (s *ShiftOp4Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitShiftOp4(s)
	}
}

func (s *ShiftOp4Context) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitShiftOp4(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) ShiftOp4() (localctx IShiftOp4Context) {
	this := p
	_ = this

	localctx = NewShiftOp4Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 320, A2LParserRULE_shiftOp4)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1656)
		p.Match(A2LParserT__215)
	}
	{
		p.SetState(1657)

		var _x = p.IntegerValue()

		localctx.(*ShiftOp4Context).position = _x
	}
	{
		p.SetState(1658)

		var _x = p.DataType()

		localctx.(*ShiftOp4Context).datatype = _x
	}

	return localctx
}

// IShiftOp5Context is an interface to support dynamic dispatch.
type IShiftOp5Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPosition returns the position rule contexts.
	GetPosition() IIntegerValueContext

	// GetDatatype returns the datatype rule contexts.
	GetDatatype() IDataTypeContext

	// SetPosition sets the position rule contexts.
	SetPosition(IIntegerValueContext)

	// SetDatatype sets the datatype rule contexts.
	SetDatatype(IDataTypeContext)

	// Getter signatures
	IntegerValue() IIntegerValueContext
	DataType() IDataTypeContext

	// IsShiftOp5Context differentiates from other interfaces.
	IsShiftOp5Context()
}

type ShiftOp5Context struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	position IIntegerValueContext
	datatype IDataTypeContext
}

func NewEmptyShiftOp5Context() *ShiftOp5Context {
	var p = new(ShiftOp5Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_shiftOp5
	return p
}

func (*ShiftOp5Context) IsShiftOp5Context() {}

func NewShiftOp5Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShiftOp5Context {
	var p = new(ShiftOp5Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_shiftOp5

	return p
}

func (s *ShiftOp5Context) GetParser() antlr.Parser { return s.parser }

func (s *ShiftOp5Context) GetPosition() IIntegerValueContext { return s.position }

func (s *ShiftOp5Context) GetDatatype() IDataTypeContext { return s.datatype }

func (s *ShiftOp5Context) SetPosition(v IIntegerValueContext) { s.position = v }

func (s *ShiftOp5Context) SetDatatype(v IDataTypeContext) { s.datatype = v }

func (s *ShiftOp5Context) IntegerValue() IIntegerValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *ShiftOp5Context) DataType() IDataTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDataTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDataTypeContext)
}

func (s *ShiftOp5Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShiftOp5Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShiftOp5Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterShiftOp5(s)
	}
}

func (s *ShiftOp5Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitShiftOp5(s)
	}
}

func (s *ShiftOp5Context) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitShiftOp5(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) ShiftOp5() (localctx IShiftOp5Context) {
	this := p
	_ = this

	localctx = NewShiftOp5Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 322, A2LParserRULE_shiftOp5)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1660)
		p.Match(A2LParserT__216)
	}
	{
		p.SetState(1661)

		var _x = p.IntegerValue()

		localctx.(*ShiftOp5Context).position = _x
	}
	{
		p.SetState(1662)

		var _x = p.DataType()

		localctx.(*ShiftOp5Context).datatype = _x
	}

	return localctx
}

// ISrcAddrXContext is an interface to support dynamic dispatch.
type ISrcAddrXContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPosition returns the position rule contexts.
	GetPosition() IIntegerValueContext

	// GetDatatype returns the datatype rule contexts.
	GetDatatype() IDataTypeContext

	// SetPosition sets the position rule contexts.
	SetPosition(IIntegerValueContext)

	// SetDatatype sets the datatype rule contexts.
	SetDatatype(IDataTypeContext)

	// Getter signatures
	IntegerValue() IIntegerValueContext
	DataType() IDataTypeContext

	// IsSrcAddrXContext differentiates from other interfaces.
	IsSrcAddrXContext()
}

type SrcAddrXContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	position IIntegerValueContext
	datatype IDataTypeContext
}

func NewEmptySrcAddrXContext() *SrcAddrXContext {
	var p = new(SrcAddrXContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_srcAddrX
	return p
}

func (*SrcAddrXContext) IsSrcAddrXContext() {}

func NewSrcAddrXContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SrcAddrXContext {
	var p = new(SrcAddrXContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_srcAddrX

	return p
}

func (s *SrcAddrXContext) GetParser() antlr.Parser { return s.parser }

func (s *SrcAddrXContext) GetPosition() IIntegerValueContext { return s.position }

func (s *SrcAddrXContext) GetDatatype() IDataTypeContext { return s.datatype }

func (s *SrcAddrXContext) SetPosition(v IIntegerValueContext) { s.position = v }

func (s *SrcAddrXContext) SetDatatype(v IDataTypeContext) { s.datatype = v }

func (s *SrcAddrXContext) IntegerValue() IIntegerValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *SrcAddrXContext) DataType() IDataTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDataTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDataTypeContext)
}

func (s *SrcAddrXContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SrcAddrXContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SrcAddrXContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterSrcAddrX(s)
	}
}

func (s *SrcAddrXContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitSrcAddrX(s)
	}
}

func (s *SrcAddrXContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitSrcAddrX(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) SrcAddrX() (localctx ISrcAddrXContext) {
	this := p
	_ = this

	localctx = NewSrcAddrXContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 324, A2LParserRULE_srcAddrX)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1664)
		p.Match(A2LParserT__217)
	}
	{
		p.SetState(1665)

		var _x = p.IntegerValue()

		localctx.(*SrcAddrXContext).position = _x
	}
	{
		p.SetState(1666)

		var _x = p.DataType()

		localctx.(*SrcAddrXContext).datatype = _x
	}

	return localctx
}

// ISrcAddrYContext is an interface to support dynamic dispatch.
type ISrcAddrYContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPosition returns the position rule contexts.
	GetPosition() IIntegerValueContext

	// GetDatatype returns the datatype rule contexts.
	GetDatatype() IDataTypeContext

	// SetPosition sets the position rule contexts.
	SetPosition(IIntegerValueContext)

	// SetDatatype sets the datatype rule contexts.
	SetDatatype(IDataTypeContext)

	// Getter signatures
	IntegerValue() IIntegerValueContext
	DataType() IDataTypeContext

	// IsSrcAddrYContext differentiates from other interfaces.
	IsSrcAddrYContext()
}

type SrcAddrYContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	position IIntegerValueContext
	datatype IDataTypeContext
}

func NewEmptySrcAddrYContext() *SrcAddrYContext {
	var p = new(SrcAddrYContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_srcAddrY
	return p
}

func (*SrcAddrYContext) IsSrcAddrYContext() {}

func NewSrcAddrYContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SrcAddrYContext {
	var p = new(SrcAddrYContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_srcAddrY

	return p
}

func (s *SrcAddrYContext) GetParser() antlr.Parser { return s.parser }

func (s *SrcAddrYContext) GetPosition() IIntegerValueContext { return s.position }

func (s *SrcAddrYContext) GetDatatype() IDataTypeContext { return s.datatype }

func (s *SrcAddrYContext) SetPosition(v IIntegerValueContext) { s.position = v }

func (s *SrcAddrYContext) SetDatatype(v IDataTypeContext) { s.datatype = v }

func (s *SrcAddrYContext) IntegerValue() IIntegerValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *SrcAddrYContext) DataType() IDataTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDataTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDataTypeContext)
}

func (s *SrcAddrYContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SrcAddrYContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SrcAddrYContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterSrcAddrY(s)
	}
}

func (s *SrcAddrYContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitSrcAddrY(s)
	}
}

func (s *SrcAddrYContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitSrcAddrY(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) SrcAddrY() (localctx ISrcAddrYContext) {
	this := p
	_ = this

	localctx = NewSrcAddrYContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 326, A2LParserRULE_srcAddrY)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1668)
		p.Match(A2LParserT__218)
	}
	{
		p.SetState(1669)

		var _x = p.IntegerValue()

		localctx.(*SrcAddrYContext).position = _x
	}
	{
		p.SetState(1670)

		var _x = p.DataType()

		localctx.(*SrcAddrYContext).datatype = _x
	}

	return localctx
}

// ISrcAddrZContext is an interface to support dynamic dispatch.
type ISrcAddrZContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPosition returns the position rule contexts.
	GetPosition() IIntegerValueContext

	// GetDatatype returns the datatype rule contexts.
	GetDatatype() IDataTypeContext

	// SetPosition sets the position rule contexts.
	SetPosition(IIntegerValueContext)

	// SetDatatype sets the datatype rule contexts.
	SetDatatype(IDataTypeContext)

	// Getter signatures
	IntegerValue() IIntegerValueContext
	DataType() IDataTypeContext

	// IsSrcAddrZContext differentiates from other interfaces.
	IsSrcAddrZContext()
}

type SrcAddrZContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	position IIntegerValueContext
	datatype IDataTypeContext
}

func NewEmptySrcAddrZContext() *SrcAddrZContext {
	var p = new(SrcAddrZContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_srcAddrZ
	return p
}

func (*SrcAddrZContext) IsSrcAddrZContext() {}

func NewSrcAddrZContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SrcAddrZContext {
	var p = new(SrcAddrZContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_srcAddrZ

	return p
}

func (s *SrcAddrZContext) GetParser() antlr.Parser { return s.parser }

func (s *SrcAddrZContext) GetPosition() IIntegerValueContext { return s.position }

func (s *SrcAddrZContext) GetDatatype() IDataTypeContext { return s.datatype }

func (s *SrcAddrZContext) SetPosition(v IIntegerValueContext) { s.position = v }

func (s *SrcAddrZContext) SetDatatype(v IDataTypeContext) { s.datatype = v }

func (s *SrcAddrZContext) IntegerValue() IIntegerValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *SrcAddrZContext) DataType() IDataTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDataTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDataTypeContext)
}

func (s *SrcAddrZContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SrcAddrZContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SrcAddrZContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterSrcAddrZ(s)
	}
}

func (s *SrcAddrZContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitSrcAddrZ(s)
	}
}

func (s *SrcAddrZContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitSrcAddrZ(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) SrcAddrZ() (localctx ISrcAddrZContext) {
	this := p
	_ = this

	localctx = NewSrcAddrZContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 328, A2LParserRULE_srcAddrZ)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1672)
		p.Match(A2LParserT__219)
	}
	{
		p.SetState(1673)

		var _x = p.IntegerValue()

		localctx.(*SrcAddrZContext).position = _x
	}
	{
		p.SetState(1674)

		var _x = p.DataType()

		localctx.(*SrcAddrZContext).datatype = _x
	}

	return localctx
}

// ISrcAddr4Context is an interface to support dynamic dispatch.
type ISrcAddr4Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPosition returns the position rule contexts.
	GetPosition() IIntegerValueContext

	// GetDatatype returns the datatype rule contexts.
	GetDatatype() IDataTypeContext

	// SetPosition sets the position rule contexts.
	SetPosition(IIntegerValueContext)

	// SetDatatype sets the datatype rule contexts.
	SetDatatype(IDataTypeContext)

	// Getter signatures
	IntegerValue() IIntegerValueContext
	DataType() IDataTypeContext

	// IsSrcAddr4Context differentiates from other interfaces.
	IsSrcAddr4Context()
}

type SrcAddr4Context struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	position IIntegerValueContext
	datatype IDataTypeContext
}

func NewEmptySrcAddr4Context() *SrcAddr4Context {
	var p = new(SrcAddr4Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_srcAddr4
	return p
}

func (*SrcAddr4Context) IsSrcAddr4Context() {}

func NewSrcAddr4Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SrcAddr4Context {
	var p = new(SrcAddr4Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_srcAddr4

	return p
}

func (s *SrcAddr4Context) GetParser() antlr.Parser { return s.parser }

func (s *SrcAddr4Context) GetPosition() IIntegerValueContext { return s.position }

func (s *SrcAddr4Context) GetDatatype() IDataTypeContext { return s.datatype }

func (s *SrcAddr4Context) SetPosition(v IIntegerValueContext) { s.position = v }

func (s *SrcAddr4Context) SetDatatype(v IDataTypeContext) { s.datatype = v }

func (s *SrcAddr4Context) IntegerValue() IIntegerValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *SrcAddr4Context) DataType() IDataTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDataTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDataTypeContext)
}

func (s *SrcAddr4Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SrcAddr4Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SrcAddr4Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterSrcAddr4(s)
	}
}

func (s *SrcAddr4Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitSrcAddr4(s)
	}
}

func (s *SrcAddr4Context) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitSrcAddr4(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) SrcAddr4() (localctx ISrcAddr4Context) {
	this := p
	_ = this

	localctx = NewSrcAddr4Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 330, A2LParserRULE_srcAddr4)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1676)
		p.Match(A2LParserT__220)
	}
	{
		p.SetState(1677)

		var _x = p.IntegerValue()

		localctx.(*SrcAddr4Context).position = _x
	}
	{
		p.SetState(1678)

		var _x = p.DataType()

		localctx.(*SrcAddr4Context).datatype = _x
	}

	return localctx
}

// ISrcAddr5Context is an interface to support dynamic dispatch.
type ISrcAddr5Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPosition returns the position rule contexts.
	GetPosition() IIntegerValueContext

	// GetDatatype returns the datatype rule contexts.
	GetDatatype() IDataTypeContext

	// SetPosition sets the position rule contexts.
	SetPosition(IIntegerValueContext)

	// SetDatatype sets the datatype rule contexts.
	SetDatatype(IDataTypeContext)

	// Getter signatures
	IntegerValue() IIntegerValueContext
	DataType() IDataTypeContext

	// IsSrcAddr5Context differentiates from other interfaces.
	IsSrcAddr5Context()
}

type SrcAddr5Context struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	position IIntegerValueContext
	datatype IDataTypeContext
}

func NewEmptySrcAddr5Context() *SrcAddr5Context {
	var p = new(SrcAddr5Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_srcAddr5
	return p
}

func (*SrcAddr5Context) IsSrcAddr5Context() {}

func NewSrcAddr5Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SrcAddr5Context {
	var p = new(SrcAddr5Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_srcAddr5

	return p
}

func (s *SrcAddr5Context) GetParser() antlr.Parser { return s.parser }

func (s *SrcAddr5Context) GetPosition() IIntegerValueContext { return s.position }

func (s *SrcAddr5Context) GetDatatype() IDataTypeContext { return s.datatype }

func (s *SrcAddr5Context) SetPosition(v IIntegerValueContext) { s.position = v }

func (s *SrcAddr5Context) SetDatatype(v IDataTypeContext) { s.datatype = v }

func (s *SrcAddr5Context) IntegerValue() IIntegerValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *SrcAddr5Context) DataType() IDataTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDataTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDataTypeContext)
}

func (s *SrcAddr5Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SrcAddr5Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SrcAddr5Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterSrcAddr5(s)
	}
}

func (s *SrcAddr5Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitSrcAddr5(s)
	}
}

func (s *SrcAddr5Context) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitSrcAddr5(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) SrcAddr5() (localctx ISrcAddr5Context) {
	this := p
	_ = this

	localctx = NewSrcAddr5Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 332, A2LParserRULE_srcAddr5)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1680)
		p.Match(A2LParserT__221)
	}
	{
		p.SetState(1681)

		var _x = p.IntegerValue()

		localctx.(*SrcAddr5Context).position = _x
	}
	{
		p.SetState(1682)

		var _x = p.DataType()

		localctx.(*SrcAddr5Context).datatype = _x
	}

	return localctx
}

// ITypedefCharacteristicContext is an interface to support dynamic dispatch.
type ITypedefCharacteristicContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetType_ returns the type_ token.
	GetType_() antlr.Token

	// SetType_ sets the type_ token.
	SetType_(antlr.Token)

	// GetName returns the name rule contexts.
	GetName() IIdentifierValueContext

	// GetLongIdentifier returns the longIdentifier rule contexts.
	GetLongIdentifier() IStringValueContext

	// GetDeposit_ returns the deposit_ rule contexts.
	GetDeposit_() IIdentifierValueContext

	// GetMaxDiff returns the maxDiff rule contexts.
	GetMaxDiff() INumericValueContext

	// GetConversion returns the conversion rule contexts.
	GetConversion() IIdentifierValueContext

	// GetLowerLimit returns the lowerLimit rule contexts.
	GetLowerLimit() INumericValueContext

	// GetUpperLimit returns the upperLimit rule contexts.
	GetUpperLimit() INumericValueContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierValueContext)

	// SetLongIdentifier sets the longIdentifier rule contexts.
	SetLongIdentifier(IStringValueContext)

	// SetDeposit_ sets the deposit_ rule contexts.
	SetDeposit_(IIdentifierValueContext)

	// SetMaxDiff sets the maxDiff rule contexts.
	SetMaxDiff(INumericValueContext)

	// SetConversion sets the conversion rule contexts.
	SetConversion(IIdentifierValueContext)

	// SetLowerLimit sets the lowerLimit rule contexts.
	SetLowerLimit(INumericValueContext)

	// SetUpperLimit sets the upperLimit rule contexts.
	SetUpperLimit(INumericValueContext)

	// Getter signatures
	BEGIN() antlr.TerminalNode
	END() antlr.TerminalNode
	AllIdentifierValue() []IIdentifierValueContext
	IdentifierValue(i int) IIdentifierValueContext
	StringValue() IStringValueContext
	AllNumericValue() []INumericValueContext
	NumericValue(i int) INumericValueContext

	// IsTypedefCharacteristicContext differentiates from other interfaces.
	IsTypedefCharacteristicContext()
}

type TypedefCharacteristicContext struct {
	*antlr.BaseParserRuleContext
	parser         antlr.Parser
	name           IIdentifierValueContext
	longIdentifier IStringValueContext
	type_          antlr.Token
	deposit_       IIdentifierValueContext
	maxDiff        INumericValueContext
	conversion     IIdentifierValueContext
	lowerLimit     INumericValueContext
	upperLimit     INumericValueContext
}

func NewEmptyTypedefCharacteristicContext() *TypedefCharacteristicContext {
	var p = new(TypedefCharacteristicContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_typedefCharacteristic
	return p
}

func (*TypedefCharacteristicContext) IsTypedefCharacteristicContext() {}

func NewTypedefCharacteristicContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypedefCharacteristicContext {
	var p = new(TypedefCharacteristicContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_typedefCharacteristic

	return p
}

func (s *TypedefCharacteristicContext) GetParser() antlr.Parser { return s.parser }

func (s *TypedefCharacteristicContext) GetType_() antlr.Token { return s.type_ }

func (s *TypedefCharacteristicContext) SetType_(v antlr.Token) { s.type_ = v }

func (s *TypedefCharacteristicContext) GetName() IIdentifierValueContext { return s.name }

func (s *TypedefCharacteristicContext) GetLongIdentifier() IStringValueContext {
	return s.longIdentifier
}

func (s *TypedefCharacteristicContext) GetDeposit_() IIdentifierValueContext { return s.deposit_ }

func (s *TypedefCharacteristicContext) GetMaxDiff() INumericValueContext { return s.maxDiff }

func (s *TypedefCharacteristicContext) GetConversion() IIdentifierValueContext { return s.conversion }

func (s *TypedefCharacteristicContext) GetLowerLimit() INumericValueContext { return s.lowerLimit }

func (s *TypedefCharacteristicContext) GetUpperLimit() INumericValueContext { return s.upperLimit }

func (s *TypedefCharacteristicContext) SetName(v IIdentifierValueContext) { s.name = v }

func (s *TypedefCharacteristicContext) SetLongIdentifier(v IStringValueContext) { s.longIdentifier = v }

func (s *TypedefCharacteristicContext) SetDeposit_(v IIdentifierValueContext) { s.deposit_ = v }

func (s *TypedefCharacteristicContext) SetMaxDiff(v INumericValueContext) { s.maxDiff = v }

func (s *TypedefCharacteristicContext) SetConversion(v IIdentifierValueContext) { s.conversion = v }

func (s *TypedefCharacteristicContext) SetLowerLimit(v INumericValueContext) { s.lowerLimit = v }

func (s *TypedefCharacteristicContext) SetUpperLimit(v INumericValueContext) { s.upperLimit = v }

func (s *TypedefCharacteristicContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(A2LParserBEGIN, 0)
}

func (s *TypedefCharacteristicContext) END() antlr.TerminalNode {
	return s.GetToken(A2LParserEND, 0)
}

func (s *TypedefCharacteristicContext) AllIdentifierValue() []IIdentifierValueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierValueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierValueContext); ok {
			tst[i] = t.(IIdentifierValueContext)
			i++
		}
	}

	return tst
}

func (s *TypedefCharacteristicContext) IdentifierValue(i int) IIdentifierValueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierValueContext)
}

func (s *TypedefCharacteristicContext) StringValue() IStringValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringValueContext)
}

func (s *TypedefCharacteristicContext) AllNumericValue() []INumericValueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INumericValueContext); ok {
			len++
		}
	}

	tst := make([]INumericValueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INumericValueContext); ok {
			tst[i] = t.(INumericValueContext)
			i++
		}
	}

	return tst
}

func (s *TypedefCharacteristicContext) NumericValue(i int) INumericValueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumericValueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumericValueContext)
}

func (s *TypedefCharacteristicContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypedefCharacteristicContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypedefCharacteristicContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterTypedefCharacteristic(s)
	}
}

func (s *TypedefCharacteristicContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitTypedefCharacteristic(s)
	}
}

func (s *TypedefCharacteristicContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitTypedefCharacteristic(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) TypedefCharacteristic() (localctx ITypedefCharacteristicContext) {
	this := p
	_ = this

	localctx = NewTypedefCharacteristicContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 334, A2LParserRULE_typedefCharacteristic)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1684)
		p.Match(A2LParserBEGIN)
	}
	{
		p.SetState(1685)
		p.Match(A2LParserT__222)
	}
	{
		p.SetState(1686)

		var _x = p.IdentifierValue()

		localctx.(*TypedefCharacteristicContext).name = _x
	}
	{
		p.SetState(1687)

		var _x = p.StringValue()

		localctx.(*TypedefCharacteristicContext).longIdentifier = _x
	}
	{
		p.SetState(1688)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*TypedefCharacteristicContext).type_ = _lt

		_la = p.GetTokenStream().LA(1)

		if !((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-72057594037927936) != 0) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*TypedefCharacteristicContext).type_ = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(1689)

		var _x = p.IdentifierValue()

		localctx.(*TypedefCharacteristicContext).deposit_ = _x
	}
	{
		p.SetState(1690)

		var _x = p.NumericValue()

		localctx.(*TypedefCharacteristicContext).maxDiff = _x
	}
	{
		p.SetState(1691)

		var _x = p.IdentifierValue()

		localctx.(*TypedefCharacteristicContext).conversion = _x
	}
	{
		p.SetState(1692)

		var _x = p.NumericValue()

		localctx.(*TypedefCharacteristicContext).lowerLimit = _x
	}
	{
		p.SetState(1693)

		var _x = p.NumericValue()

		localctx.(*TypedefCharacteristicContext).upperLimit = _x
	}
	{
		p.SetState(1694)
		p.Match(A2LParserEND)
	}
	{
		p.SetState(1695)
		p.Match(A2LParserT__222)
	}

	return localctx
}

// ITypedefMeasurementContext is an interface to support dynamic dispatch.
type ITypedefMeasurementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierValueContext

	// GetLongIdentifier returns the longIdentifier rule contexts.
	GetLongIdentifier() IStringValueContext

	// GetDatatype returns the datatype rule contexts.
	GetDatatype() IDataTypeContext

	// GetConversion returns the conversion rule contexts.
	GetConversion() IIdentifierValueContext

	// GetResolution returns the resolution rule contexts.
	GetResolution() IIntegerValueContext

	// GetAccuracy returns the accuracy rule contexts.
	GetAccuracy() INumericValueContext

	// GetLowerLimit returns the lowerLimit rule contexts.
	GetLowerLimit() INumericValueContext

	// GetUpperLimit returns the upperLimit rule contexts.
	GetUpperLimit() INumericValueContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierValueContext)

	// SetLongIdentifier sets the longIdentifier rule contexts.
	SetLongIdentifier(IStringValueContext)

	// SetDatatype sets the datatype rule contexts.
	SetDatatype(IDataTypeContext)

	// SetConversion sets the conversion rule contexts.
	SetConversion(IIdentifierValueContext)

	// SetResolution sets the resolution rule contexts.
	SetResolution(IIntegerValueContext)

	// SetAccuracy sets the accuracy rule contexts.
	SetAccuracy(INumericValueContext)

	// SetLowerLimit sets the lowerLimit rule contexts.
	SetLowerLimit(INumericValueContext)

	// SetUpperLimit sets the upperLimit rule contexts.
	SetUpperLimit(INumericValueContext)

	// Getter signatures
	BEGIN() antlr.TerminalNode
	END() antlr.TerminalNode
	AllIdentifierValue() []IIdentifierValueContext
	IdentifierValue(i int) IIdentifierValueContext
	StringValue() IStringValueContext
	DataType() IDataTypeContext
	IntegerValue() IIntegerValueContext
	AllNumericValue() []INumericValueContext
	NumericValue(i int) INumericValueContext

	// IsTypedefMeasurementContext differentiates from other interfaces.
	IsTypedefMeasurementContext()
}

type TypedefMeasurementContext struct {
	*antlr.BaseParserRuleContext
	parser         antlr.Parser
	name           IIdentifierValueContext
	longIdentifier IStringValueContext
	datatype       IDataTypeContext
	conversion     IIdentifierValueContext
	resolution     IIntegerValueContext
	accuracy       INumericValueContext
	lowerLimit     INumericValueContext
	upperLimit     INumericValueContext
}

func NewEmptyTypedefMeasurementContext() *TypedefMeasurementContext {
	var p = new(TypedefMeasurementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_typedefMeasurement
	return p
}

func (*TypedefMeasurementContext) IsTypedefMeasurementContext() {}

func NewTypedefMeasurementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypedefMeasurementContext {
	var p = new(TypedefMeasurementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_typedefMeasurement

	return p
}

func (s *TypedefMeasurementContext) GetParser() antlr.Parser { return s.parser }

func (s *TypedefMeasurementContext) GetName() IIdentifierValueContext { return s.name }

func (s *TypedefMeasurementContext) GetLongIdentifier() IStringValueContext { return s.longIdentifier }

func (s *TypedefMeasurementContext) GetDatatype() IDataTypeContext { return s.datatype }

func (s *TypedefMeasurementContext) GetConversion() IIdentifierValueContext { return s.conversion }

func (s *TypedefMeasurementContext) GetResolution() IIntegerValueContext { return s.resolution }

func (s *TypedefMeasurementContext) GetAccuracy() INumericValueContext { return s.accuracy }

func (s *TypedefMeasurementContext) GetLowerLimit() INumericValueContext { return s.lowerLimit }

func (s *TypedefMeasurementContext) GetUpperLimit() INumericValueContext { return s.upperLimit }

func (s *TypedefMeasurementContext) SetName(v IIdentifierValueContext) { s.name = v }

func (s *TypedefMeasurementContext) SetLongIdentifier(v IStringValueContext) { s.longIdentifier = v }

func (s *TypedefMeasurementContext) SetDatatype(v IDataTypeContext) { s.datatype = v }

func (s *TypedefMeasurementContext) SetConversion(v IIdentifierValueContext) { s.conversion = v }

func (s *TypedefMeasurementContext) SetResolution(v IIntegerValueContext) { s.resolution = v }

func (s *TypedefMeasurementContext) SetAccuracy(v INumericValueContext) { s.accuracy = v }

func (s *TypedefMeasurementContext) SetLowerLimit(v INumericValueContext) { s.lowerLimit = v }

func (s *TypedefMeasurementContext) SetUpperLimit(v INumericValueContext) { s.upperLimit = v }

func (s *TypedefMeasurementContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(A2LParserBEGIN, 0)
}

func (s *TypedefMeasurementContext) END() antlr.TerminalNode {
	return s.GetToken(A2LParserEND, 0)
}

func (s *TypedefMeasurementContext) AllIdentifierValue() []IIdentifierValueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierValueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierValueContext); ok {
			tst[i] = t.(IIdentifierValueContext)
			i++
		}
	}

	return tst
}

func (s *TypedefMeasurementContext) IdentifierValue(i int) IIdentifierValueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierValueContext)
}

func (s *TypedefMeasurementContext) StringValue() IStringValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringValueContext)
}

func (s *TypedefMeasurementContext) DataType() IDataTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDataTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDataTypeContext)
}

func (s *TypedefMeasurementContext) IntegerValue() IIntegerValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *TypedefMeasurementContext) AllNumericValue() []INumericValueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INumericValueContext); ok {
			len++
		}
	}

	tst := make([]INumericValueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INumericValueContext); ok {
			tst[i] = t.(INumericValueContext)
			i++
		}
	}

	return tst
}

func (s *TypedefMeasurementContext) NumericValue(i int) INumericValueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumericValueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumericValueContext)
}

func (s *TypedefMeasurementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypedefMeasurementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypedefMeasurementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterTypedefMeasurement(s)
	}
}

func (s *TypedefMeasurementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitTypedefMeasurement(s)
	}
}

func (s *TypedefMeasurementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitTypedefMeasurement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) TypedefMeasurement() (localctx ITypedefMeasurementContext) {
	this := p
	_ = this

	localctx = NewTypedefMeasurementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 336, A2LParserRULE_typedefMeasurement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1697)
		p.Match(A2LParserBEGIN)
	}
	{
		p.SetState(1698)
		p.Match(A2LParserT__223)
	}
	{
		p.SetState(1699)

		var _x = p.IdentifierValue()

		localctx.(*TypedefMeasurementContext).name = _x
	}
	{
		p.SetState(1700)

		var _x = p.StringValue()

		localctx.(*TypedefMeasurementContext).longIdentifier = _x
	}
	{
		p.SetState(1701)

		var _x = p.DataType()

		localctx.(*TypedefMeasurementContext).datatype = _x
	}
	{
		p.SetState(1702)

		var _x = p.IdentifierValue()

		localctx.(*TypedefMeasurementContext).conversion = _x
	}
	{
		p.SetState(1703)

		var _x = p.IntegerValue()

		localctx.(*TypedefMeasurementContext).resolution = _x
	}
	{
		p.SetState(1704)

		var _x = p.NumericValue()

		localctx.(*TypedefMeasurementContext).accuracy = _x
	}
	{
		p.SetState(1705)

		var _x = p.NumericValue()

		localctx.(*TypedefMeasurementContext).lowerLimit = _x
	}
	{
		p.SetState(1706)

		var _x = p.NumericValue()

		localctx.(*TypedefMeasurementContext).upperLimit = _x
	}
	{
		p.SetState(1707)
		p.Match(A2LParserEND)
	}
	{
		p.SetState(1708)
		p.Match(A2LParserT__223)
	}

	return localctx
}

// ITypedefStructureContext is an interface to support dynamic dispatch.
type ITypedefStructureContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierValueContext

	// GetLongIdentifier returns the longIdentifier rule contexts.
	GetLongIdentifier() IStringValueContext

	// GetSize returns the size rule contexts.
	GetSize() IIntegerValueContext

	// GetLink returns the link rule contexts.
	GetLink() ILinkTypeContext

	// GetSymbol returns the symbol rule contexts.
	GetSymbol() IStringValueContext

	// Get_structureComponent returns the _structureComponent rule contexts.
	Get_structureComponent() IStructureComponentContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierValueContext)

	// SetLongIdentifier sets the longIdentifier rule contexts.
	SetLongIdentifier(IStringValueContext)

	// SetSize sets the size rule contexts.
	SetSize(IIntegerValueContext)

	// SetLink sets the link rule contexts.
	SetLink(ILinkTypeContext)

	// SetSymbol sets the symbol rule contexts.
	SetSymbol(IStringValueContext)

	// Set_structureComponent sets the _structureComponent rule contexts.
	Set_structureComponent(IStructureComponentContext)

	// GetV_structureComponent returns the v_structureComponent rule context list.
	GetV_structureComponent() []IStructureComponentContext

	// SetV_structureComponent sets the v_structureComponent rule context list.
	SetV_structureComponent([]IStructureComponentContext)

	// Getter signatures
	BEGIN() antlr.TerminalNode
	END() antlr.TerminalNode
	IdentifierValue() IIdentifierValueContext
	AllStringValue() []IStringValueContext
	StringValue(i int) IStringValueContext
	IntegerValue() IIntegerValueContext
	LinkType() ILinkTypeContext
	AllStructureComponent() []IStructureComponentContext
	StructureComponent(i int) IStructureComponentContext

	// IsTypedefStructureContext differentiates from other interfaces.
	IsTypedefStructureContext()
}

type TypedefStructureContext struct {
	*antlr.BaseParserRuleContext
	parser               antlr.Parser
	name                 IIdentifierValueContext
	longIdentifier       IStringValueContext
	size                 IIntegerValueContext
	link                 ILinkTypeContext
	symbol               IStringValueContext
	_structureComponent  IStructureComponentContext
	v_structureComponent []IStructureComponentContext
}

func NewEmptyTypedefStructureContext() *TypedefStructureContext {
	var p = new(TypedefStructureContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_typedefStructure
	return p
}

func (*TypedefStructureContext) IsTypedefStructureContext() {}

func NewTypedefStructureContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypedefStructureContext {
	var p = new(TypedefStructureContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_typedefStructure

	return p
}

func (s *TypedefStructureContext) GetParser() antlr.Parser { return s.parser }

func (s *TypedefStructureContext) GetName() IIdentifierValueContext { return s.name }

func (s *TypedefStructureContext) GetLongIdentifier() IStringValueContext { return s.longIdentifier }

func (s *TypedefStructureContext) GetSize() IIntegerValueContext { return s.size }

func (s *TypedefStructureContext) GetLink() ILinkTypeContext { return s.link }

func (s *TypedefStructureContext) GetSymbol() IStringValueContext { return s.symbol }

func (s *TypedefStructureContext) Get_structureComponent() IStructureComponentContext {
	return s._structureComponent
}

func (s *TypedefStructureContext) SetName(v IIdentifierValueContext) { s.name = v }

func (s *TypedefStructureContext) SetLongIdentifier(v IStringValueContext) { s.longIdentifier = v }

func (s *TypedefStructureContext) SetSize(v IIntegerValueContext) { s.size = v }

func (s *TypedefStructureContext) SetLink(v ILinkTypeContext) { s.link = v }

func (s *TypedefStructureContext) SetSymbol(v IStringValueContext) { s.symbol = v }

func (s *TypedefStructureContext) Set_structureComponent(v IStructureComponentContext) {
	s._structureComponent = v
}

func (s *TypedefStructureContext) GetV_structureComponent() []IStructureComponentContext {
	return s.v_structureComponent
}

func (s *TypedefStructureContext) SetV_structureComponent(v []IStructureComponentContext) {
	s.v_structureComponent = v
}

func (s *TypedefStructureContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(A2LParserBEGIN, 0)
}

func (s *TypedefStructureContext) END() antlr.TerminalNode {
	return s.GetToken(A2LParserEND, 0)
}

func (s *TypedefStructureContext) IdentifierValue() IIdentifierValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierValueContext)
}

func (s *TypedefStructureContext) AllStringValue() []IStringValueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStringValueContext); ok {
			len++
		}
	}

	tst := make([]IStringValueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStringValueContext); ok {
			tst[i] = t.(IStringValueContext)
			i++
		}
	}

	return tst
}

func (s *TypedefStructureContext) StringValue(i int) IStringValueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringValueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringValueContext)
}

func (s *TypedefStructureContext) IntegerValue() IIntegerValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *TypedefStructureContext) LinkType() ILinkTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILinkTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILinkTypeContext)
}

func (s *TypedefStructureContext) AllStructureComponent() []IStructureComponentContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStructureComponentContext); ok {
			len++
		}
	}

	tst := make([]IStructureComponentContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStructureComponentContext); ok {
			tst[i] = t.(IStructureComponentContext)
			i++
		}
	}

	return tst
}

func (s *TypedefStructureContext) StructureComponent(i int) IStructureComponentContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStructureComponentContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStructureComponentContext)
}

func (s *TypedefStructureContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypedefStructureContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypedefStructureContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterTypedefStructure(s)
	}
}

func (s *TypedefStructureContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitTypedefStructure(s)
	}
}

func (s *TypedefStructureContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitTypedefStructure(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) TypedefStructure() (localctx ITypedefStructureContext) {
	this := p
	_ = this

	localctx = NewTypedefStructureContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 338, A2LParserRULE_typedefStructure)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1710)
		p.Match(A2LParserBEGIN)
	}
	{
		p.SetState(1711)
		p.Match(A2LParserT__224)
	}
	{
		p.SetState(1712)

		var _x = p.IdentifierValue()

		localctx.(*TypedefStructureContext).name = _x
	}
	{
		p.SetState(1713)

		var _x = p.StringValue()

		localctx.(*TypedefStructureContext).longIdentifier = _x
	}
	{
		p.SetState(1714)

		var _x = p.IntegerValue()

		localctx.(*TypedefStructureContext).size = _x
	}
	{
		p.SetState(1715)

		var _x = p.LinkType()

		localctx.(*TypedefStructureContext).link = _x
	}
	{
		p.SetState(1716)

		var _x = p.StringValue()

		localctx.(*TypedefStructureContext).symbol = _x
	}
	p.SetState(1720)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == A2LParserBEGIN {
		{
			p.SetState(1717)

			var _x = p.StructureComponent()

			localctx.(*TypedefStructureContext)._structureComponent = _x
		}
		localctx.(*TypedefStructureContext).v_structureComponent = append(localctx.(*TypedefStructureContext).v_structureComponent, localctx.(*TypedefStructureContext)._structureComponent)

		p.SetState(1722)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1723)
		p.Match(A2LParserEND)
	}
	{
		p.SetState(1724)
		p.Match(A2LParserT__224)
	}

	return localctx
}

// IStructureComponentContext is an interface to support dynamic dispatch.
type IStructureComponentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierValueContext

	// GetDeposit_ returns the deposit_ rule contexts.
	GetDeposit_() IIdentifierValueContext

	// GetOffset returns the offset rule contexts.
	GetOffset() IIntegerValueContext

	// GetLink returns the link rule contexts.
	GetLink() ILinkTypeContext

	// GetSymbol returns the symbol rule contexts.
	GetSymbol() IStringValueContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierValueContext)

	// SetDeposit_ sets the deposit_ rule contexts.
	SetDeposit_(IIdentifierValueContext)

	// SetOffset sets the offset rule contexts.
	SetOffset(IIntegerValueContext)

	// SetLink sets the link rule contexts.
	SetLink(ILinkTypeContext)

	// SetSymbol sets the symbol rule contexts.
	SetSymbol(IStringValueContext)

	// Getter signatures
	BEGIN() antlr.TerminalNode
	END() antlr.TerminalNode
	AllIdentifierValue() []IIdentifierValueContext
	IdentifierValue(i int) IIdentifierValueContext
	IntegerValue() IIntegerValueContext
	LinkType() ILinkTypeContext
	StringValue() IStringValueContext

	// IsStructureComponentContext differentiates from other interfaces.
	IsStructureComponentContext()
}

type StructureComponentContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	name     IIdentifierValueContext
	deposit_ IIdentifierValueContext
	offset   IIntegerValueContext
	link     ILinkTypeContext
	symbol   IStringValueContext
}

func NewEmptyStructureComponentContext() *StructureComponentContext {
	var p = new(StructureComponentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_structureComponent
	return p
}

func (*StructureComponentContext) IsStructureComponentContext() {}

func NewStructureComponentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StructureComponentContext {
	var p = new(StructureComponentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_structureComponent

	return p
}

func (s *StructureComponentContext) GetParser() antlr.Parser { return s.parser }

func (s *StructureComponentContext) GetName() IIdentifierValueContext { return s.name }

func (s *StructureComponentContext) GetDeposit_() IIdentifierValueContext { return s.deposit_ }

func (s *StructureComponentContext) GetOffset() IIntegerValueContext { return s.offset }

func (s *StructureComponentContext) GetLink() ILinkTypeContext { return s.link }

func (s *StructureComponentContext) GetSymbol() IStringValueContext { return s.symbol }

func (s *StructureComponentContext) SetName(v IIdentifierValueContext) { s.name = v }

func (s *StructureComponentContext) SetDeposit_(v IIdentifierValueContext) { s.deposit_ = v }

func (s *StructureComponentContext) SetOffset(v IIntegerValueContext) { s.offset = v }

func (s *StructureComponentContext) SetLink(v ILinkTypeContext) { s.link = v }

func (s *StructureComponentContext) SetSymbol(v IStringValueContext) { s.symbol = v }

func (s *StructureComponentContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(A2LParserBEGIN, 0)
}

func (s *StructureComponentContext) END() antlr.TerminalNode {
	return s.GetToken(A2LParserEND, 0)
}

func (s *StructureComponentContext) AllIdentifierValue() []IIdentifierValueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierValueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierValueContext); ok {
			tst[i] = t.(IIdentifierValueContext)
			i++
		}
	}

	return tst
}

func (s *StructureComponentContext) IdentifierValue(i int) IIdentifierValueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierValueContext)
}

func (s *StructureComponentContext) IntegerValue() IIntegerValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *StructureComponentContext) LinkType() ILinkTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILinkTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILinkTypeContext)
}

func (s *StructureComponentContext) StringValue() IStringValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringValueContext)
}

func (s *StructureComponentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StructureComponentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StructureComponentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterStructureComponent(s)
	}
}

func (s *StructureComponentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitStructureComponent(s)
	}
}

func (s *StructureComponentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitStructureComponent(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) StructureComponent() (localctx IStructureComponentContext) {
	this := p
	_ = this

	localctx = NewStructureComponentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 340, A2LParserRULE_structureComponent)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1726)
		p.Match(A2LParserBEGIN)
	}
	{
		p.SetState(1727)
		p.Match(A2LParserT__225)
	}
	{
		p.SetState(1728)

		var _x = p.IdentifierValue()

		localctx.(*StructureComponentContext).name = _x
	}
	{
		p.SetState(1729)

		var _x = p.IdentifierValue()

		localctx.(*StructureComponentContext).deposit_ = _x
	}
	{
		p.SetState(1730)

		var _x = p.IntegerValue()

		localctx.(*StructureComponentContext).offset = _x
	}
	{
		p.SetState(1731)

		var _x = p.LinkType()

		localctx.(*StructureComponentContext).link = _x
	}
	{
		p.SetState(1732)

		var _x = p.StringValue()

		localctx.(*StructureComponentContext).symbol = _x
	}
	{
		p.SetState(1733)
		p.Match(A2LParserEND)
	}
	{
		p.SetState(1734)
		p.Match(A2LParserT__225)
	}

	return localctx
}

// IUnitContext is an interface to support dynamic dispatch.
type IUnitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetType_ returns the type_ token.
	GetType_() antlr.Token

	// SetType_ sets the type_ token.
	SetType_(antlr.Token)

	// GetName returns the name rule contexts.
	GetName() IIdentifierValueContext

	// GetLongIdentifier returns the longIdentifier rule contexts.
	GetLongIdentifier() IStringValueContext

	// GetDisplay returns the display rule contexts.
	GetDisplay() IStringValueContext

	// GetVSiExponents returns the vSiExponents rule contexts.
	GetVSiExponents() ISiExponentsContext

	// GetVRefUnit returns the vRefUnit rule contexts.
	GetVRefUnit() IRefUnitContext

	// GetVUnitConversion returns the vUnitConversion rule contexts.
	GetVUnitConversion() IUnitConversionContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierValueContext)

	// SetLongIdentifier sets the longIdentifier rule contexts.
	SetLongIdentifier(IStringValueContext)

	// SetDisplay sets the display rule contexts.
	SetDisplay(IStringValueContext)

	// SetVSiExponents sets the vSiExponents rule contexts.
	SetVSiExponents(ISiExponentsContext)

	// SetVRefUnit sets the vRefUnit rule contexts.
	SetVRefUnit(IRefUnitContext)

	// SetVUnitConversion sets the vUnitConversion rule contexts.
	SetVUnitConversion(IUnitConversionContext)

	// Getter signatures
	BEGIN() antlr.TerminalNode
	END() antlr.TerminalNode
	IdentifierValue() IIdentifierValueContext
	AllStringValue() []IStringValueContext
	StringValue(i int) IStringValueContext
	AllSiExponents() []ISiExponentsContext
	SiExponents(i int) ISiExponentsContext
	AllRefUnit() []IRefUnitContext
	RefUnit(i int) IRefUnitContext
	AllUnitConversion() []IUnitConversionContext
	UnitConversion(i int) IUnitConversionContext

	// IsUnitContext differentiates from other interfaces.
	IsUnitContext()
}

type UnitContext struct {
	*antlr.BaseParserRuleContext
	parser          antlr.Parser
	name            IIdentifierValueContext
	longIdentifier  IStringValueContext
	display         IStringValueContext
	type_           antlr.Token
	vSiExponents    ISiExponentsContext
	vRefUnit        IRefUnitContext
	vUnitConversion IUnitConversionContext
}

func NewEmptyUnitContext() *UnitContext {
	var p = new(UnitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_unit
	return p
}

func (*UnitContext) IsUnitContext() {}

func NewUnitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UnitContext {
	var p = new(UnitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_unit

	return p
}

func (s *UnitContext) GetParser() antlr.Parser { return s.parser }

func (s *UnitContext) GetType_() antlr.Token { return s.type_ }

func (s *UnitContext) SetType_(v antlr.Token) { s.type_ = v }

func (s *UnitContext) GetName() IIdentifierValueContext { return s.name }

func (s *UnitContext) GetLongIdentifier() IStringValueContext { return s.longIdentifier }

func (s *UnitContext) GetDisplay() IStringValueContext { return s.display }

func (s *UnitContext) GetVSiExponents() ISiExponentsContext { return s.vSiExponents }

func (s *UnitContext) GetVRefUnit() IRefUnitContext { return s.vRefUnit }

func (s *UnitContext) GetVUnitConversion() IUnitConversionContext { return s.vUnitConversion }

func (s *UnitContext) SetName(v IIdentifierValueContext) { s.name = v }

func (s *UnitContext) SetLongIdentifier(v IStringValueContext) { s.longIdentifier = v }

func (s *UnitContext) SetDisplay(v IStringValueContext) { s.display = v }

func (s *UnitContext) SetVSiExponents(v ISiExponentsContext) { s.vSiExponents = v }

func (s *UnitContext) SetVRefUnit(v IRefUnitContext) { s.vRefUnit = v }

func (s *UnitContext) SetVUnitConversion(v IUnitConversionContext) { s.vUnitConversion = v }

func (s *UnitContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(A2LParserBEGIN, 0)
}

func (s *UnitContext) END() antlr.TerminalNode {
	return s.GetToken(A2LParserEND, 0)
}

func (s *UnitContext) IdentifierValue() IIdentifierValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierValueContext)
}

func (s *UnitContext) AllStringValue() []IStringValueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStringValueContext); ok {
			len++
		}
	}

	tst := make([]IStringValueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStringValueContext); ok {
			tst[i] = t.(IStringValueContext)
			i++
		}
	}

	return tst
}

func (s *UnitContext) StringValue(i int) IStringValueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringValueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringValueContext)
}

func (s *UnitContext) AllSiExponents() []ISiExponentsContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISiExponentsContext); ok {
			len++
		}
	}

	tst := make([]ISiExponentsContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISiExponentsContext); ok {
			tst[i] = t.(ISiExponentsContext)
			i++
		}
	}

	return tst
}

func (s *UnitContext) SiExponents(i int) ISiExponentsContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISiExponentsContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISiExponentsContext)
}

func (s *UnitContext) AllRefUnit() []IRefUnitContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IRefUnitContext); ok {
			len++
		}
	}

	tst := make([]IRefUnitContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IRefUnitContext); ok {
			tst[i] = t.(IRefUnitContext)
			i++
		}
	}

	return tst
}

func (s *UnitContext) RefUnit(i int) IRefUnitContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRefUnitContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRefUnitContext)
}

func (s *UnitContext) AllUnitConversion() []IUnitConversionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IUnitConversionContext); ok {
			len++
		}
	}

	tst := make([]IUnitConversionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IUnitConversionContext); ok {
			tst[i] = t.(IUnitConversionContext)
			i++
		}
	}

	return tst
}

func (s *UnitContext) UnitConversion(i int) IUnitConversionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnitConversionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnitConversionContext)
}

func (s *UnitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UnitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterUnit(s)
	}
}

func (s *UnitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitUnit(s)
	}
}

func (s *UnitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitUnit(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) Unit() (localctx IUnitContext) {
	this := p
	_ = this

	localctx = NewUnitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 342, A2LParserRULE_unit)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1736)
		p.Match(A2LParserBEGIN)
	}
	{
		p.SetState(1737)
		p.Match(A2LParserT__226)
	}
	{
		p.SetState(1738)

		var _x = p.IdentifierValue()

		localctx.(*UnitContext).name = _x
	}
	{
		p.SetState(1739)

		var _x = p.StringValue()

		localctx.(*UnitContext).longIdentifier = _x
	}
	{
		p.SetState(1740)

		var _x = p.StringValue()

		localctx.(*UnitContext).display = _x
	}
	{
		p.SetState(1741)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*UnitContext).type_ = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == A2LParserT__227 || _la == A2LParserT__228) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*UnitContext).type_ = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(1747)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == A2LParserT__43 || _la == A2LParserT__229 || _la == A2LParserT__230 {
		p.SetState(1745)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case A2LParserT__229:
			{
				p.SetState(1742)

				var _x = p.SiExponents()

				localctx.(*UnitContext).vSiExponents = _x
			}

		case A2LParserT__43:
			{
				p.SetState(1743)

				var _x = p.RefUnit()

				localctx.(*UnitContext).vRefUnit = _x
			}

		case A2LParserT__230:
			{
				p.SetState(1744)

				var _x = p.UnitConversion()

				localctx.(*UnitContext).vUnitConversion = _x
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(1749)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1750)
		p.Match(A2LParserEND)
	}
	{
		p.SetState(1751)
		p.Match(A2LParserT__226)
	}

	return localctx
}

// ISiExponentsContext is an interface to support dynamic dispatch.
type ISiExponentsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetLength returns the length rule contexts.
	GetLength() IIntegerValueContext

	// GetMass returns the mass rule contexts.
	GetMass() IIntegerValueContext

	// GetTime returns the time rule contexts.
	GetTime() IIntegerValueContext

	// GetElectricCurrent returns the electricCurrent rule contexts.
	GetElectricCurrent() IIntegerValueContext

	// GetTemperature returns the temperature rule contexts.
	GetTemperature() IIntegerValueContext

	// GetAmountOfSubstance returns the amountOfSubstance rule contexts.
	GetAmountOfSubstance() IIntegerValueContext

	// GetLuminousIntensity returns the luminousIntensity rule contexts.
	GetLuminousIntensity() IIntegerValueContext

	// SetLength sets the length rule contexts.
	SetLength(IIntegerValueContext)

	// SetMass sets the mass rule contexts.
	SetMass(IIntegerValueContext)

	// SetTime sets the time rule contexts.
	SetTime(IIntegerValueContext)

	// SetElectricCurrent sets the electricCurrent rule contexts.
	SetElectricCurrent(IIntegerValueContext)

	// SetTemperature sets the temperature rule contexts.
	SetTemperature(IIntegerValueContext)

	// SetAmountOfSubstance sets the amountOfSubstance rule contexts.
	SetAmountOfSubstance(IIntegerValueContext)

	// SetLuminousIntensity sets the luminousIntensity rule contexts.
	SetLuminousIntensity(IIntegerValueContext)

	// Getter signatures
	AllIntegerValue() []IIntegerValueContext
	IntegerValue(i int) IIntegerValueContext

	// IsSiExponentsContext differentiates from other interfaces.
	IsSiExponentsContext()
}

type SiExponentsContext struct {
	*antlr.BaseParserRuleContext
	parser            antlr.Parser
	length            IIntegerValueContext
	mass              IIntegerValueContext
	time              IIntegerValueContext
	electricCurrent   IIntegerValueContext
	temperature       IIntegerValueContext
	amountOfSubstance IIntegerValueContext
	luminousIntensity IIntegerValueContext
}

func NewEmptySiExponentsContext() *SiExponentsContext {
	var p = new(SiExponentsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_siExponents
	return p
}

func (*SiExponentsContext) IsSiExponentsContext() {}

func NewSiExponentsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SiExponentsContext {
	var p = new(SiExponentsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_siExponents

	return p
}

func (s *SiExponentsContext) GetParser() antlr.Parser { return s.parser }

func (s *SiExponentsContext) GetLength() IIntegerValueContext { return s.length }

func (s *SiExponentsContext) GetMass() IIntegerValueContext { return s.mass }

func (s *SiExponentsContext) GetTime() IIntegerValueContext { return s.time }

func (s *SiExponentsContext) GetElectricCurrent() IIntegerValueContext { return s.electricCurrent }

func (s *SiExponentsContext) GetTemperature() IIntegerValueContext { return s.temperature }

func (s *SiExponentsContext) GetAmountOfSubstance() IIntegerValueContext { return s.amountOfSubstance }

func (s *SiExponentsContext) GetLuminousIntensity() IIntegerValueContext { return s.luminousIntensity }

func (s *SiExponentsContext) SetLength(v IIntegerValueContext) { s.length = v }

func (s *SiExponentsContext) SetMass(v IIntegerValueContext) { s.mass = v }

func (s *SiExponentsContext) SetTime(v IIntegerValueContext) { s.time = v }

func (s *SiExponentsContext) SetElectricCurrent(v IIntegerValueContext) { s.electricCurrent = v }

func (s *SiExponentsContext) SetTemperature(v IIntegerValueContext) { s.temperature = v }

func (s *SiExponentsContext) SetAmountOfSubstance(v IIntegerValueContext) { s.amountOfSubstance = v }

func (s *SiExponentsContext) SetLuminousIntensity(v IIntegerValueContext) { s.luminousIntensity = v }

func (s *SiExponentsContext) AllIntegerValue() []IIntegerValueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIntegerValueContext); ok {
			len++
		}
	}

	tst := make([]IIntegerValueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIntegerValueContext); ok {
			tst[i] = t.(IIntegerValueContext)
			i++
		}
	}

	return tst
}

func (s *SiExponentsContext) IntegerValue(i int) IIntegerValueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *SiExponentsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SiExponentsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SiExponentsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterSiExponents(s)
	}
}

func (s *SiExponentsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitSiExponents(s)
	}
}

func (s *SiExponentsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitSiExponents(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) SiExponents() (localctx ISiExponentsContext) {
	this := p
	_ = this

	localctx = NewSiExponentsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 344, A2LParserRULE_siExponents)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1753)
		p.Match(A2LParserT__229)
	}
	{
		p.SetState(1754)

		var _x = p.IntegerValue()

		localctx.(*SiExponentsContext).length = _x
	}
	{
		p.SetState(1755)

		var _x = p.IntegerValue()

		localctx.(*SiExponentsContext).mass = _x
	}
	{
		p.SetState(1756)

		var _x = p.IntegerValue()

		localctx.(*SiExponentsContext).time = _x
	}
	{
		p.SetState(1757)

		var _x = p.IntegerValue()

		localctx.(*SiExponentsContext).electricCurrent = _x
	}
	{
		p.SetState(1758)

		var _x = p.IntegerValue()

		localctx.(*SiExponentsContext).temperature = _x
	}
	{
		p.SetState(1759)

		var _x = p.IntegerValue()

		localctx.(*SiExponentsContext).amountOfSubstance = _x
	}
	{
		p.SetState(1760)

		var _x = p.IntegerValue()

		localctx.(*SiExponentsContext).luminousIntensity = _x
	}

	return localctx
}

// IUnitConversionContext is an interface to support dynamic dispatch.
type IUnitConversionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetGradient returns the gradient rule contexts.
	GetGradient() INumericValueContext

	// GetOffset returns the offset rule contexts.
	GetOffset() INumericValueContext

	// SetGradient sets the gradient rule contexts.
	SetGradient(INumericValueContext)

	// SetOffset sets the offset rule contexts.
	SetOffset(INumericValueContext)

	// Getter signatures
	AllNumericValue() []INumericValueContext
	NumericValue(i int) INumericValueContext

	// IsUnitConversionContext differentiates from other interfaces.
	IsUnitConversionContext()
}

type UnitConversionContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	gradient INumericValueContext
	offset   INumericValueContext
}

func NewEmptyUnitConversionContext() *UnitConversionContext {
	var p = new(UnitConversionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_unitConversion
	return p
}

func (*UnitConversionContext) IsUnitConversionContext() {}

func NewUnitConversionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UnitConversionContext {
	var p = new(UnitConversionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_unitConversion

	return p
}

func (s *UnitConversionContext) GetParser() antlr.Parser { return s.parser }

func (s *UnitConversionContext) GetGradient() INumericValueContext { return s.gradient }

func (s *UnitConversionContext) GetOffset() INumericValueContext { return s.offset }

func (s *UnitConversionContext) SetGradient(v INumericValueContext) { s.gradient = v }

func (s *UnitConversionContext) SetOffset(v INumericValueContext) { s.offset = v }

func (s *UnitConversionContext) AllNumericValue() []INumericValueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INumericValueContext); ok {
			len++
		}
	}

	tst := make([]INumericValueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INumericValueContext); ok {
			tst[i] = t.(INumericValueContext)
			i++
		}
	}

	return tst
}

func (s *UnitConversionContext) NumericValue(i int) INumericValueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumericValueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumericValueContext)
}

func (s *UnitConversionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnitConversionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UnitConversionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterUnitConversion(s)
	}
}

func (s *UnitConversionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitUnitConversion(s)
	}
}

func (s *UnitConversionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitUnitConversion(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) UnitConversion() (localctx IUnitConversionContext) {
	this := p
	_ = this

	localctx = NewUnitConversionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 346, A2LParserRULE_unitConversion)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1762)
		p.Match(A2LParserT__230)
	}
	{
		p.SetState(1763)

		var _x = p.NumericValue()

		localctx.(*UnitConversionContext).gradient = _x
	}
	{
		p.SetState(1764)

		var _x = p.NumericValue()

		localctx.(*UnitConversionContext).offset = _x
	}

	return localctx
}

// IUserRightsContext is an interface to support dynamic dispatch.
type IUserRightsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetUserLevelId returns the userLevelId rule contexts.
	GetUserLevelId() IIdentifierValueContext

	// Get_readOnly returns the _readOnly rule contexts.
	Get_readOnly() IReadOnlyContext

	// Get_refGroup returns the _refGroup rule contexts.
	Get_refGroup() IRefGroupContext

	// SetUserLevelId sets the userLevelId rule contexts.
	SetUserLevelId(IIdentifierValueContext)

	// Set_readOnly sets the _readOnly rule contexts.
	Set_readOnly(IReadOnlyContext)

	// Set_refGroup sets the _refGroup rule contexts.
	Set_refGroup(IRefGroupContext)

	// GetV_readOnly returns the v_readOnly rule context list.
	GetV_readOnly() []IReadOnlyContext

	// GetV_refGroup returns the v_refGroup rule context list.
	GetV_refGroup() []IRefGroupContext

	// SetV_readOnly sets the v_readOnly rule context list.
	SetV_readOnly([]IReadOnlyContext)

	// SetV_refGroup sets the v_refGroup rule context list.
	SetV_refGroup([]IRefGroupContext)

	// Getter signatures
	BEGIN() antlr.TerminalNode
	END() antlr.TerminalNode
	IdentifierValue() IIdentifierValueContext
	AllReadOnly() []IReadOnlyContext
	ReadOnly(i int) IReadOnlyContext
	AllRefGroup() []IRefGroupContext
	RefGroup(i int) IRefGroupContext

	// IsUserRightsContext differentiates from other interfaces.
	IsUserRightsContext()
}

type UserRightsContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	userLevelId IIdentifierValueContext
	_readOnly   IReadOnlyContext
	v_readOnly  []IReadOnlyContext
	_refGroup   IRefGroupContext
	v_refGroup  []IRefGroupContext
}

func NewEmptyUserRightsContext() *UserRightsContext {
	var p = new(UserRightsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_userRights
	return p
}

func (*UserRightsContext) IsUserRightsContext() {}

func NewUserRightsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UserRightsContext {
	var p = new(UserRightsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_userRights

	return p
}

func (s *UserRightsContext) GetParser() antlr.Parser { return s.parser }

func (s *UserRightsContext) GetUserLevelId() IIdentifierValueContext { return s.userLevelId }

func (s *UserRightsContext) Get_readOnly() IReadOnlyContext { return s._readOnly }

func (s *UserRightsContext) Get_refGroup() IRefGroupContext { return s._refGroup }

func (s *UserRightsContext) SetUserLevelId(v IIdentifierValueContext) { s.userLevelId = v }

func (s *UserRightsContext) Set_readOnly(v IReadOnlyContext) { s._readOnly = v }

func (s *UserRightsContext) Set_refGroup(v IRefGroupContext) { s._refGroup = v }

func (s *UserRightsContext) GetV_readOnly() []IReadOnlyContext { return s.v_readOnly }

func (s *UserRightsContext) GetV_refGroup() []IRefGroupContext { return s.v_refGroup }

func (s *UserRightsContext) SetV_readOnly(v []IReadOnlyContext) { s.v_readOnly = v }

func (s *UserRightsContext) SetV_refGroup(v []IRefGroupContext) { s.v_refGroup = v }

func (s *UserRightsContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(A2LParserBEGIN, 0)
}

func (s *UserRightsContext) END() antlr.TerminalNode {
	return s.GetToken(A2LParserEND, 0)
}

func (s *UserRightsContext) IdentifierValue() IIdentifierValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierValueContext)
}

func (s *UserRightsContext) AllReadOnly() []IReadOnlyContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IReadOnlyContext); ok {
			len++
		}
	}

	tst := make([]IReadOnlyContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IReadOnlyContext); ok {
			tst[i] = t.(IReadOnlyContext)
			i++
		}
	}

	return tst
}

func (s *UserRightsContext) ReadOnly(i int) IReadOnlyContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IReadOnlyContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IReadOnlyContext)
}

func (s *UserRightsContext) AllRefGroup() []IRefGroupContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IRefGroupContext); ok {
			len++
		}
	}

	tst := make([]IRefGroupContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IRefGroupContext); ok {
			tst[i] = t.(IRefGroupContext)
			i++
		}
	}

	return tst
}

func (s *UserRightsContext) RefGroup(i int) IRefGroupContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRefGroupContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRefGroupContext)
}

func (s *UserRightsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UserRightsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UserRightsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterUserRights(s)
	}
}

func (s *UserRightsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitUserRights(s)
	}
}

func (s *UserRightsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitUserRights(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) UserRights() (localctx IUserRightsContext) {
	this := p
	_ = this

	localctx = NewUserRightsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 348, A2LParserRULE_userRights)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1766)
		p.Match(A2LParserBEGIN)
	}
	{
		p.SetState(1767)
		p.Match(A2LParserT__231)
	}
	{
		p.SetState(1768)

		var _x = p.IdentifierValue()

		localctx.(*UserRightsContext).userLevelId = _x
	}
	p.SetState(1773)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == A2LParserT__40 || _la == A2LParserBEGIN {
		p.SetState(1771)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case A2LParserT__40:
			{
				p.SetState(1769)

				var _x = p.ReadOnly()

				localctx.(*UserRightsContext)._readOnly = _x
			}
			localctx.(*UserRightsContext).v_readOnly = append(localctx.(*UserRightsContext).v_readOnly, localctx.(*UserRightsContext)._readOnly)

		case A2LParserBEGIN:
			{
				p.SetState(1770)

				var _x = p.RefGroup()

				localctx.(*UserRightsContext)._refGroup = _x
			}
			localctx.(*UserRightsContext).v_refGroup = append(localctx.(*UserRightsContext).v_refGroup, localctx.(*UserRightsContext)._refGroup)

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(1775)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1776)
		p.Match(A2LParserEND)
	}
	{
		p.SetState(1777)
		p.Match(A2LParserT__231)
	}

	return localctx
}

// IRefGroupContext is an interface to support dynamic dispatch.
type IRefGroupContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_identifierValue returns the _identifierValue rule contexts.
	Get_identifierValue() IIdentifierValueContext

	// Set_identifierValue sets the _identifierValue rule contexts.
	Set_identifierValue(IIdentifierValueContext)

	// GetIdentifier returns the identifier rule context list.
	GetIdentifier() []IIdentifierValueContext

	// SetIdentifier sets the identifier rule context list.
	SetIdentifier([]IIdentifierValueContext)

	// Getter signatures
	BEGIN() antlr.TerminalNode
	END() antlr.TerminalNode
	AllIdentifierValue() []IIdentifierValueContext
	IdentifierValue(i int) IIdentifierValueContext

	// IsRefGroupContext differentiates from other interfaces.
	IsRefGroupContext()
}

type RefGroupContext struct {
	*antlr.BaseParserRuleContext
	parser           antlr.Parser
	_identifierValue IIdentifierValueContext
	identifier       []IIdentifierValueContext
}

func NewEmptyRefGroupContext() *RefGroupContext {
	var p = new(RefGroupContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_refGroup
	return p
}

func (*RefGroupContext) IsRefGroupContext() {}

func NewRefGroupContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RefGroupContext {
	var p = new(RefGroupContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_refGroup

	return p
}

func (s *RefGroupContext) GetParser() antlr.Parser { return s.parser }

func (s *RefGroupContext) Get_identifierValue() IIdentifierValueContext { return s._identifierValue }

func (s *RefGroupContext) Set_identifierValue(v IIdentifierValueContext) { s._identifierValue = v }

func (s *RefGroupContext) GetIdentifier() []IIdentifierValueContext { return s.identifier }

func (s *RefGroupContext) SetIdentifier(v []IIdentifierValueContext) { s.identifier = v }

func (s *RefGroupContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(A2LParserBEGIN, 0)
}

func (s *RefGroupContext) END() antlr.TerminalNode {
	return s.GetToken(A2LParserEND, 0)
}

func (s *RefGroupContext) AllIdentifierValue() []IIdentifierValueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierValueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierValueContext); ok {
			tst[i] = t.(IIdentifierValueContext)
			i++
		}
	}

	return tst
}

func (s *RefGroupContext) IdentifierValue(i int) IIdentifierValueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierValueContext)
}

func (s *RefGroupContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RefGroupContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RefGroupContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterRefGroup(s)
	}
}

func (s *RefGroupContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitRefGroup(s)
	}
}

func (s *RefGroupContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitRefGroup(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) RefGroup() (localctx IRefGroupContext) {
	this := p
	_ = this

	localctx = NewRefGroupContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 350, A2LParserRULE_refGroup)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1779)
		p.Match(A2LParserBEGIN)
	}
	{
		p.SetState(1780)
		p.Match(A2LParserT__232)
	}
	p.SetState(1784)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == A2LParserIDENT {
		{
			p.SetState(1781)

			var _x = p.IdentifierValue()

			localctx.(*RefGroupContext)._identifierValue = _x
		}
		localctx.(*RefGroupContext).identifier = append(localctx.(*RefGroupContext).identifier, localctx.(*RefGroupContext)._identifierValue)

		p.SetState(1786)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1787)
		p.Match(A2LParserEND)
	}
	{
		p.SetState(1788)
		p.Match(A2LParserT__232)
	}

	return localctx
}

// IVariantCodingContext is an interface to support dynamic dispatch.
type IVariantCodingContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_varCharacteristic returns the _varCharacteristic rule contexts.
	Get_varCharacteristic() IVarCharacteristicContext

	// Get_varCriterion returns the _varCriterion rule contexts.
	Get_varCriterion() IVarCriterionContext

	// Get_varForbiddenComb returns the _varForbiddenComb rule contexts.
	Get_varForbiddenComb() IVarForbiddenCombContext

	// Get_varNaming returns the _varNaming rule contexts.
	Get_varNaming() IVarNamingContext

	// Get_varSeparator returns the _varSeparator rule contexts.
	Get_varSeparator() IVarSeparatorContext

	// Set_varCharacteristic sets the _varCharacteristic rule contexts.
	Set_varCharacteristic(IVarCharacteristicContext)

	// Set_varCriterion sets the _varCriterion rule contexts.
	Set_varCriterion(IVarCriterionContext)

	// Set_varForbiddenComb sets the _varForbiddenComb rule contexts.
	Set_varForbiddenComb(IVarForbiddenCombContext)

	// Set_varNaming sets the _varNaming rule contexts.
	Set_varNaming(IVarNamingContext)

	// Set_varSeparator sets the _varSeparator rule contexts.
	Set_varSeparator(IVarSeparatorContext)

	// GetV_varCharacteristic returns the v_varCharacteristic rule context list.
	GetV_varCharacteristic() []IVarCharacteristicContext

	// GetV_varCriterion returns the v_varCriterion rule context list.
	GetV_varCriterion() []IVarCriterionContext

	// GetV_varForbiddenComb returns the v_varForbiddenComb rule context list.
	GetV_varForbiddenComb() []IVarForbiddenCombContext

	// GetV_varNaming returns the v_varNaming rule context list.
	GetV_varNaming() []IVarNamingContext

	// GetV_varSeparator returns the v_varSeparator rule context list.
	GetV_varSeparator() []IVarSeparatorContext

	// SetV_varCharacteristic sets the v_varCharacteristic rule context list.
	SetV_varCharacteristic([]IVarCharacteristicContext)

	// SetV_varCriterion sets the v_varCriterion rule context list.
	SetV_varCriterion([]IVarCriterionContext)

	// SetV_varForbiddenComb sets the v_varForbiddenComb rule context list.
	SetV_varForbiddenComb([]IVarForbiddenCombContext)

	// SetV_varNaming sets the v_varNaming rule context list.
	SetV_varNaming([]IVarNamingContext)

	// SetV_varSeparator sets the v_varSeparator rule context list.
	SetV_varSeparator([]IVarSeparatorContext)

	// Getter signatures
	BEGIN() antlr.TerminalNode
	END() antlr.TerminalNode
	AllVarCharacteristic() []IVarCharacteristicContext
	VarCharacteristic(i int) IVarCharacteristicContext
	AllVarCriterion() []IVarCriterionContext
	VarCriterion(i int) IVarCriterionContext
	AllVarForbiddenComb() []IVarForbiddenCombContext
	VarForbiddenComb(i int) IVarForbiddenCombContext
	AllVarNaming() []IVarNamingContext
	VarNaming(i int) IVarNamingContext
	AllVarSeparator() []IVarSeparatorContext
	VarSeparator(i int) IVarSeparatorContext

	// IsVariantCodingContext differentiates from other interfaces.
	IsVariantCodingContext()
}

type VariantCodingContext struct {
	*antlr.BaseParserRuleContext
	parser              antlr.Parser
	_varCharacteristic  IVarCharacteristicContext
	v_varCharacteristic []IVarCharacteristicContext
	_varCriterion       IVarCriterionContext
	v_varCriterion      []IVarCriterionContext
	_varForbiddenComb   IVarForbiddenCombContext
	v_varForbiddenComb  []IVarForbiddenCombContext
	_varNaming          IVarNamingContext
	v_varNaming         []IVarNamingContext
	_varSeparator       IVarSeparatorContext
	v_varSeparator      []IVarSeparatorContext
}

func NewEmptyVariantCodingContext() *VariantCodingContext {
	var p = new(VariantCodingContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_variantCoding
	return p
}

func (*VariantCodingContext) IsVariantCodingContext() {}

func NewVariantCodingContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VariantCodingContext {
	var p = new(VariantCodingContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_variantCoding

	return p
}

func (s *VariantCodingContext) GetParser() antlr.Parser { return s.parser }

func (s *VariantCodingContext) Get_varCharacteristic() IVarCharacteristicContext {
	return s._varCharacteristic
}

func (s *VariantCodingContext) Get_varCriterion() IVarCriterionContext { return s._varCriterion }

func (s *VariantCodingContext) Get_varForbiddenComb() IVarForbiddenCombContext {
	return s._varForbiddenComb
}

func (s *VariantCodingContext) Get_varNaming() IVarNamingContext { return s._varNaming }

func (s *VariantCodingContext) Get_varSeparator() IVarSeparatorContext { return s._varSeparator }

func (s *VariantCodingContext) Set_varCharacteristic(v IVarCharacteristicContext) {
	s._varCharacteristic = v
}

func (s *VariantCodingContext) Set_varCriterion(v IVarCriterionContext) { s._varCriterion = v }

func (s *VariantCodingContext) Set_varForbiddenComb(v IVarForbiddenCombContext) {
	s._varForbiddenComb = v
}

func (s *VariantCodingContext) Set_varNaming(v IVarNamingContext) { s._varNaming = v }

func (s *VariantCodingContext) Set_varSeparator(v IVarSeparatorContext) { s._varSeparator = v }

func (s *VariantCodingContext) GetV_varCharacteristic() []IVarCharacteristicContext {
	return s.v_varCharacteristic
}

func (s *VariantCodingContext) GetV_varCriterion() []IVarCriterionContext { return s.v_varCriterion }

func (s *VariantCodingContext) GetV_varForbiddenComb() []IVarForbiddenCombContext {
	return s.v_varForbiddenComb
}

func (s *VariantCodingContext) GetV_varNaming() []IVarNamingContext { return s.v_varNaming }

func (s *VariantCodingContext) GetV_varSeparator() []IVarSeparatorContext { return s.v_varSeparator }

func (s *VariantCodingContext) SetV_varCharacteristic(v []IVarCharacteristicContext) {
	s.v_varCharacteristic = v
}

func (s *VariantCodingContext) SetV_varCriterion(v []IVarCriterionContext) { s.v_varCriterion = v }

func (s *VariantCodingContext) SetV_varForbiddenComb(v []IVarForbiddenCombContext) {
	s.v_varForbiddenComb = v
}

func (s *VariantCodingContext) SetV_varNaming(v []IVarNamingContext) { s.v_varNaming = v }

func (s *VariantCodingContext) SetV_varSeparator(v []IVarSeparatorContext) { s.v_varSeparator = v }

func (s *VariantCodingContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(A2LParserBEGIN, 0)
}

func (s *VariantCodingContext) END() antlr.TerminalNode {
	return s.GetToken(A2LParserEND, 0)
}

func (s *VariantCodingContext) AllVarCharacteristic() []IVarCharacteristicContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IVarCharacteristicContext); ok {
			len++
		}
	}

	tst := make([]IVarCharacteristicContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IVarCharacteristicContext); ok {
			tst[i] = t.(IVarCharacteristicContext)
			i++
		}
	}

	return tst
}

func (s *VariantCodingContext) VarCharacteristic(i int) IVarCharacteristicContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVarCharacteristicContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVarCharacteristicContext)
}

func (s *VariantCodingContext) AllVarCriterion() []IVarCriterionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IVarCriterionContext); ok {
			len++
		}
	}

	tst := make([]IVarCriterionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IVarCriterionContext); ok {
			tst[i] = t.(IVarCriterionContext)
			i++
		}
	}

	return tst
}

func (s *VariantCodingContext) VarCriterion(i int) IVarCriterionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVarCriterionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVarCriterionContext)
}

func (s *VariantCodingContext) AllVarForbiddenComb() []IVarForbiddenCombContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IVarForbiddenCombContext); ok {
			len++
		}
	}

	tst := make([]IVarForbiddenCombContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IVarForbiddenCombContext); ok {
			tst[i] = t.(IVarForbiddenCombContext)
			i++
		}
	}

	return tst
}

func (s *VariantCodingContext) VarForbiddenComb(i int) IVarForbiddenCombContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVarForbiddenCombContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVarForbiddenCombContext)
}

func (s *VariantCodingContext) AllVarNaming() []IVarNamingContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IVarNamingContext); ok {
			len++
		}
	}

	tst := make([]IVarNamingContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IVarNamingContext); ok {
			tst[i] = t.(IVarNamingContext)
			i++
		}
	}

	return tst
}

func (s *VariantCodingContext) VarNaming(i int) IVarNamingContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVarNamingContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVarNamingContext)
}

func (s *VariantCodingContext) AllVarSeparator() []IVarSeparatorContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IVarSeparatorContext); ok {
			len++
		}
	}

	tst := make([]IVarSeparatorContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IVarSeparatorContext); ok {
			tst[i] = t.(IVarSeparatorContext)
			i++
		}
	}

	return tst
}

func (s *VariantCodingContext) VarSeparator(i int) IVarSeparatorContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVarSeparatorContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVarSeparatorContext)
}

func (s *VariantCodingContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VariantCodingContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VariantCodingContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterVariantCoding(s)
	}
}

func (s *VariantCodingContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitVariantCoding(s)
	}
}

func (s *VariantCodingContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitVariantCoding(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) VariantCoding() (localctx IVariantCodingContext) {
	this := p
	_ = this

	localctx = NewVariantCodingContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 352, A2LParserRULE_variantCoding)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1790)
		p.Match(A2LParserBEGIN)
	}
	{
		p.SetState(1791)
		p.Match(A2LParserT__233)
	}
	p.SetState(1799)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (int64((_la-241)) & ^0x3f) == 0 && ((int64(1)<<(_la-241))&144115188075855881) != 0 {
		p.SetState(1797)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 71, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(1792)

				var _x = p.VarCharacteristic()

				localctx.(*VariantCodingContext)._varCharacteristic = _x
			}
			localctx.(*VariantCodingContext).v_varCharacteristic = append(localctx.(*VariantCodingContext).v_varCharacteristic, localctx.(*VariantCodingContext)._varCharacteristic)

		case 2:
			{
				p.SetState(1793)

				var _x = p.VarCriterion()

				localctx.(*VariantCodingContext)._varCriterion = _x
			}
			localctx.(*VariantCodingContext).v_varCriterion = append(localctx.(*VariantCodingContext).v_varCriterion, localctx.(*VariantCodingContext)._varCriterion)

		case 3:
			{
				p.SetState(1794)

				var _x = p.VarForbiddenComb()

				localctx.(*VariantCodingContext)._varForbiddenComb = _x
			}
			localctx.(*VariantCodingContext).v_varForbiddenComb = append(localctx.(*VariantCodingContext).v_varForbiddenComb, localctx.(*VariantCodingContext)._varForbiddenComb)

		case 4:
			{
				p.SetState(1795)

				var _x = p.VarNaming()

				localctx.(*VariantCodingContext)._varNaming = _x
			}
			localctx.(*VariantCodingContext).v_varNaming = append(localctx.(*VariantCodingContext).v_varNaming, localctx.(*VariantCodingContext)._varNaming)

		case 5:
			{
				p.SetState(1796)

				var _x = p.VarSeparator()

				localctx.(*VariantCodingContext)._varSeparator = _x
			}
			localctx.(*VariantCodingContext).v_varSeparator = append(localctx.(*VariantCodingContext).v_varSeparator, localctx.(*VariantCodingContext)._varSeparator)

		}

		p.SetState(1801)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1802)
		p.Match(A2LParserEND)
	}
	{
		p.SetState(1803)
		p.Match(A2LParserT__233)
	}

	return localctx
}

// IVarCharacteristicContext is an interface to support dynamic dispatch.
type IVarCharacteristicContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierValueContext

	// Get_identifierValue returns the _identifierValue rule contexts.
	Get_identifierValue() IIdentifierValueContext

	// Get_varAddress returns the _varAddress rule contexts.
	Get_varAddress() IVarAddressContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierValueContext)

	// Set_identifierValue sets the _identifierValue rule contexts.
	Set_identifierValue(IIdentifierValueContext)

	// Set_varAddress sets the _varAddress rule contexts.
	Set_varAddress(IVarAddressContext)

	// GetCriterionName returns the criterionName rule context list.
	GetCriterionName() []IIdentifierValueContext

	// GetV_varAddress returns the v_varAddress rule context list.
	GetV_varAddress() []IVarAddressContext

	// SetCriterionName sets the criterionName rule context list.
	SetCriterionName([]IIdentifierValueContext)

	// SetV_varAddress sets the v_varAddress rule context list.
	SetV_varAddress([]IVarAddressContext)

	// Getter signatures
	BEGIN() antlr.TerminalNode
	END() antlr.TerminalNode
	AllIdentifierValue() []IIdentifierValueContext
	IdentifierValue(i int) IIdentifierValueContext
	AllVarAddress() []IVarAddressContext
	VarAddress(i int) IVarAddressContext

	// IsVarCharacteristicContext differentiates from other interfaces.
	IsVarCharacteristicContext()
}

type VarCharacteristicContext struct {
	*antlr.BaseParserRuleContext
	parser           antlr.Parser
	name             IIdentifierValueContext
	_identifierValue IIdentifierValueContext
	criterionName    []IIdentifierValueContext
	_varAddress      IVarAddressContext
	v_varAddress     []IVarAddressContext
}

func NewEmptyVarCharacteristicContext() *VarCharacteristicContext {
	var p = new(VarCharacteristicContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_varCharacteristic
	return p
}

func (*VarCharacteristicContext) IsVarCharacteristicContext() {}

func NewVarCharacteristicContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VarCharacteristicContext {
	var p = new(VarCharacteristicContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_varCharacteristic

	return p
}

func (s *VarCharacteristicContext) GetParser() antlr.Parser { return s.parser }

func (s *VarCharacteristicContext) GetName() IIdentifierValueContext { return s.name }

func (s *VarCharacteristicContext) Get_identifierValue() IIdentifierValueContext {
	return s._identifierValue
}

func (s *VarCharacteristicContext) Get_varAddress() IVarAddressContext { return s._varAddress }

func (s *VarCharacteristicContext) SetName(v IIdentifierValueContext) { s.name = v }

func (s *VarCharacteristicContext) Set_identifierValue(v IIdentifierValueContext) {
	s._identifierValue = v
}

func (s *VarCharacteristicContext) Set_varAddress(v IVarAddressContext) { s._varAddress = v }

func (s *VarCharacteristicContext) GetCriterionName() []IIdentifierValueContext {
	return s.criterionName
}

func (s *VarCharacteristicContext) GetV_varAddress() []IVarAddressContext { return s.v_varAddress }

func (s *VarCharacteristicContext) SetCriterionName(v []IIdentifierValueContext) { s.criterionName = v }

func (s *VarCharacteristicContext) SetV_varAddress(v []IVarAddressContext) { s.v_varAddress = v }

func (s *VarCharacteristicContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(A2LParserBEGIN, 0)
}

func (s *VarCharacteristicContext) END() antlr.TerminalNode {
	return s.GetToken(A2LParserEND, 0)
}

func (s *VarCharacteristicContext) AllIdentifierValue() []IIdentifierValueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierValueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierValueContext); ok {
			tst[i] = t.(IIdentifierValueContext)
			i++
		}
	}

	return tst
}

func (s *VarCharacteristicContext) IdentifierValue(i int) IIdentifierValueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierValueContext)
}

func (s *VarCharacteristicContext) AllVarAddress() []IVarAddressContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IVarAddressContext); ok {
			len++
		}
	}

	tst := make([]IVarAddressContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IVarAddressContext); ok {
			tst[i] = t.(IVarAddressContext)
			i++
		}
	}

	return tst
}

func (s *VarCharacteristicContext) VarAddress(i int) IVarAddressContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVarAddressContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVarAddressContext)
}

func (s *VarCharacteristicContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VarCharacteristicContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VarCharacteristicContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterVarCharacteristic(s)
	}
}

func (s *VarCharacteristicContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitVarCharacteristic(s)
	}
}

func (s *VarCharacteristicContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitVarCharacteristic(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) VarCharacteristic() (localctx IVarCharacteristicContext) {
	this := p
	_ = this

	localctx = NewVarCharacteristicContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 354, A2LParserRULE_varCharacteristic)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1805)
		p.Match(A2LParserBEGIN)
	}
	{
		p.SetState(1806)
		p.Match(A2LParserT__234)
	}
	{
		p.SetState(1807)

		var _x = p.IdentifierValue()

		localctx.(*VarCharacteristicContext).name = _x
	}
	p.SetState(1811)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == A2LParserIDENT {
		{
			p.SetState(1808)

			var _x = p.IdentifierValue()

			localctx.(*VarCharacteristicContext)._identifierValue = _x
		}
		localctx.(*VarCharacteristicContext).criterionName = append(localctx.(*VarCharacteristicContext).criterionName, localctx.(*VarCharacteristicContext)._identifierValue)

		p.SetState(1813)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(1817)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == A2LParserBEGIN {
		{
			p.SetState(1814)

			var _x = p.VarAddress()

			localctx.(*VarCharacteristicContext)._varAddress = _x
		}
		localctx.(*VarCharacteristicContext).v_varAddress = append(localctx.(*VarCharacteristicContext).v_varAddress, localctx.(*VarCharacteristicContext)._varAddress)

		p.SetState(1819)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1820)
		p.Match(A2LParserEND)
	}
	{
		p.SetState(1821)
		p.Match(A2LParserT__234)
	}

	return localctx
}

// IVarAddressContext is an interface to support dynamic dispatch.
type IVarAddressContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_integerValue returns the _integerValue rule contexts.
	Get_integerValue() IIntegerValueContext

	// Set_integerValue sets the _integerValue rule contexts.
	Set_integerValue(IIntegerValueContext)

	// GetAddress returns the address rule context list.
	GetAddress() []IIntegerValueContext

	// SetAddress sets the address rule context list.
	SetAddress([]IIntegerValueContext)

	// Getter signatures
	BEGIN() antlr.TerminalNode
	END() antlr.TerminalNode
	AllIntegerValue() []IIntegerValueContext
	IntegerValue(i int) IIntegerValueContext

	// IsVarAddressContext differentiates from other interfaces.
	IsVarAddressContext()
}

type VarAddressContext struct {
	*antlr.BaseParserRuleContext
	parser        antlr.Parser
	_integerValue IIntegerValueContext
	address       []IIntegerValueContext
}

func NewEmptyVarAddressContext() *VarAddressContext {
	var p = new(VarAddressContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_varAddress
	return p
}

func (*VarAddressContext) IsVarAddressContext() {}

func NewVarAddressContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VarAddressContext {
	var p = new(VarAddressContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_varAddress

	return p
}

func (s *VarAddressContext) GetParser() antlr.Parser { return s.parser }

func (s *VarAddressContext) Get_integerValue() IIntegerValueContext { return s._integerValue }

func (s *VarAddressContext) Set_integerValue(v IIntegerValueContext) { s._integerValue = v }

func (s *VarAddressContext) GetAddress() []IIntegerValueContext { return s.address }

func (s *VarAddressContext) SetAddress(v []IIntegerValueContext) { s.address = v }

func (s *VarAddressContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(A2LParserBEGIN, 0)
}

func (s *VarAddressContext) END() antlr.TerminalNode {
	return s.GetToken(A2LParserEND, 0)
}

func (s *VarAddressContext) AllIntegerValue() []IIntegerValueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIntegerValueContext); ok {
			len++
		}
	}

	tst := make([]IIntegerValueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIntegerValueContext); ok {
			tst[i] = t.(IIntegerValueContext)
			i++
		}
	}

	return tst
}

func (s *VarAddressContext) IntegerValue(i int) IIntegerValueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerValueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerValueContext)
}

func (s *VarAddressContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VarAddressContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VarAddressContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterVarAddress(s)
	}
}

func (s *VarAddressContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitVarAddress(s)
	}
}

func (s *VarAddressContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitVarAddress(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) VarAddress() (localctx IVarAddressContext) {
	this := p
	_ = this

	localctx = NewVarAddressContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 356, A2LParserRULE_varAddress)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1823)
		p.Match(A2LParserBEGIN)
	}
	{
		p.SetState(1824)
		p.Match(A2LParserT__235)
	}
	p.SetState(1828)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == A2LParserINT || _la == A2LParserHEX {
		{
			p.SetState(1825)

			var _x = p.IntegerValue()

			localctx.(*VarAddressContext)._integerValue = _x
		}
		localctx.(*VarAddressContext).address = append(localctx.(*VarAddressContext).address, localctx.(*VarAddressContext)._integerValue)

		p.SetState(1830)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1831)
		p.Match(A2LParserEND)
	}
	{
		p.SetState(1832)
		p.Match(A2LParserT__235)
	}

	return localctx
}

// IVarCriterionContext is an interface to support dynamic dispatch.
type IVarCriterionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierValueContext

	// GetLongIdentifier returns the longIdentifier rule contexts.
	GetLongIdentifier() IStringValueContext

	// Get_identifierValue returns the _identifierValue rule contexts.
	Get_identifierValue() IIdentifierValueContext

	// Get_varMeasurement returns the _varMeasurement rule contexts.
	Get_varMeasurement() IVarMeasurementContext

	// Get_varSelectionCharacteristic returns the _varSelectionCharacteristic rule contexts.
	Get_varSelectionCharacteristic() IVarSelectionCharacteristicContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierValueContext)

	// SetLongIdentifier sets the longIdentifier rule contexts.
	SetLongIdentifier(IStringValueContext)

	// Set_identifierValue sets the _identifierValue rule contexts.
	Set_identifierValue(IIdentifierValueContext)

	// Set_varMeasurement sets the _varMeasurement rule contexts.
	Set_varMeasurement(IVarMeasurementContext)

	// Set_varSelectionCharacteristic sets the _varSelectionCharacteristic rule contexts.
	Set_varSelectionCharacteristic(IVarSelectionCharacteristicContext)

	// GetValue_ returns the value_ rule context list.
	GetValue_() []IIdentifierValueContext

	// GetV_varMeasurement returns the v_varMeasurement rule context list.
	GetV_varMeasurement() []IVarMeasurementContext

	// GetV_varSelectionCharacteristic returns the v_varSelectionCharacteristic rule context list.
	GetV_varSelectionCharacteristic() []IVarSelectionCharacteristicContext

	// SetValue_ sets the value_ rule context list.
	SetValue_([]IIdentifierValueContext)

	// SetV_varMeasurement sets the v_varMeasurement rule context list.
	SetV_varMeasurement([]IVarMeasurementContext)

	// SetV_varSelectionCharacteristic sets the v_varSelectionCharacteristic rule context list.
	SetV_varSelectionCharacteristic([]IVarSelectionCharacteristicContext)

	// Getter signatures
	BEGIN() antlr.TerminalNode
	END() antlr.TerminalNode
	AllIdentifierValue() []IIdentifierValueContext
	IdentifierValue(i int) IIdentifierValueContext
	StringValue() IStringValueContext
	AllVarMeasurement() []IVarMeasurementContext
	VarMeasurement(i int) IVarMeasurementContext
	AllVarSelectionCharacteristic() []IVarSelectionCharacteristicContext
	VarSelectionCharacteristic(i int) IVarSelectionCharacteristicContext

	// IsVarCriterionContext differentiates from other interfaces.
	IsVarCriterionContext()
}

type VarCriterionContext struct {
	*antlr.BaseParserRuleContext
	parser                       antlr.Parser
	name                         IIdentifierValueContext
	longIdentifier               IStringValueContext
	_identifierValue             IIdentifierValueContext
	value_                       []IIdentifierValueContext
	_varMeasurement              IVarMeasurementContext
	v_varMeasurement             []IVarMeasurementContext
	_varSelectionCharacteristic  IVarSelectionCharacteristicContext
	v_varSelectionCharacteristic []IVarSelectionCharacteristicContext
}

func NewEmptyVarCriterionContext() *VarCriterionContext {
	var p = new(VarCriterionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_varCriterion
	return p
}

func (*VarCriterionContext) IsVarCriterionContext() {}

func NewVarCriterionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VarCriterionContext {
	var p = new(VarCriterionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_varCriterion

	return p
}

func (s *VarCriterionContext) GetParser() antlr.Parser { return s.parser }

func (s *VarCriterionContext) GetName() IIdentifierValueContext { return s.name }

func (s *VarCriterionContext) GetLongIdentifier() IStringValueContext { return s.longIdentifier }

func (s *VarCriterionContext) Get_identifierValue() IIdentifierValueContext {
	return s._identifierValue
}

func (s *VarCriterionContext) Get_varMeasurement() IVarMeasurementContext { return s._varMeasurement }

func (s *VarCriterionContext) Get_varSelectionCharacteristic() IVarSelectionCharacteristicContext {
	return s._varSelectionCharacteristic
}

func (s *VarCriterionContext) SetName(v IIdentifierValueContext) { s.name = v }

func (s *VarCriterionContext) SetLongIdentifier(v IStringValueContext) { s.longIdentifier = v }

func (s *VarCriterionContext) Set_identifierValue(v IIdentifierValueContext) { s._identifierValue = v }

func (s *VarCriterionContext) Set_varMeasurement(v IVarMeasurementContext) { s._varMeasurement = v }

func (s *VarCriterionContext) Set_varSelectionCharacteristic(v IVarSelectionCharacteristicContext) {
	s._varSelectionCharacteristic = v
}

func (s *VarCriterionContext) GetValue_() []IIdentifierValueContext { return s.value_ }

func (s *VarCriterionContext) GetV_varMeasurement() []IVarMeasurementContext {
	return s.v_varMeasurement
}

func (s *VarCriterionContext) GetV_varSelectionCharacteristic() []IVarSelectionCharacteristicContext {
	return s.v_varSelectionCharacteristic
}

func (s *VarCriterionContext) SetValue_(v []IIdentifierValueContext) { s.value_ = v }

func (s *VarCriterionContext) SetV_varMeasurement(v []IVarMeasurementContext) { s.v_varMeasurement = v }

func (s *VarCriterionContext) SetV_varSelectionCharacteristic(v []IVarSelectionCharacteristicContext) {
	s.v_varSelectionCharacteristic = v
}

func (s *VarCriterionContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(A2LParserBEGIN, 0)
}

func (s *VarCriterionContext) END() antlr.TerminalNode {
	return s.GetToken(A2LParserEND, 0)
}

func (s *VarCriterionContext) AllIdentifierValue() []IIdentifierValueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierValueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierValueContext); ok {
			tst[i] = t.(IIdentifierValueContext)
			i++
		}
	}

	return tst
}

func (s *VarCriterionContext) IdentifierValue(i int) IIdentifierValueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierValueContext)
}

func (s *VarCriterionContext) StringValue() IStringValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringValueContext)
}

func (s *VarCriterionContext) AllVarMeasurement() []IVarMeasurementContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IVarMeasurementContext); ok {
			len++
		}
	}

	tst := make([]IVarMeasurementContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IVarMeasurementContext); ok {
			tst[i] = t.(IVarMeasurementContext)
			i++
		}
	}

	return tst
}

func (s *VarCriterionContext) VarMeasurement(i int) IVarMeasurementContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVarMeasurementContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVarMeasurementContext)
}

func (s *VarCriterionContext) AllVarSelectionCharacteristic() []IVarSelectionCharacteristicContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IVarSelectionCharacteristicContext); ok {
			len++
		}
	}

	tst := make([]IVarSelectionCharacteristicContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IVarSelectionCharacteristicContext); ok {
			tst[i] = t.(IVarSelectionCharacteristicContext)
			i++
		}
	}

	return tst
}

func (s *VarCriterionContext) VarSelectionCharacteristic(i int) IVarSelectionCharacteristicContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVarSelectionCharacteristicContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVarSelectionCharacteristicContext)
}

func (s *VarCriterionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VarCriterionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VarCriterionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterVarCriterion(s)
	}
}

func (s *VarCriterionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitVarCriterion(s)
	}
}

func (s *VarCriterionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitVarCriterion(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) VarCriterion() (localctx IVarCriterionContext) {
	this := p
	_ = this

	localctx = NewVarCriterionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 358, A2LParserRULE_varCriterion)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1834)
		p.Match(A2LParserBEGIN)
	}
	{
		p.SetState(1835)
		p.Match(A2LParserT__236)
	}
	{
		p.SetState(1836)

		var _x = p.IdentifierValue()

		localctx.(*VarCriterionContext).name = _x
	}
	{
		p.SetState(1837)

		var _x = p.StringValue()

		localctx.(*VarCriterionContext).longIdentifier = _x
	}
	p.SetState(1841)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == A2LParserIDENT {
		{
			p.SetState(1838)

			var _x = p.IdentifierValue()

			localctx.(*VarCriterionContext)._identifierValue = _x
		}
		localctx.(*VarCriterionContext).value_ = append(localctx.(*VarCriterionContext).value_, localctx.(*VarCriterionContext)._identifierValue)

		p.SetState(1843)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(1848)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == A2LParserT__237 || _la == A2LParserT__238 {
		p.SetState(1846)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case A2LParserT__237:
			{
				p.SetState(1844)

				var _x = p.VarMeasurement()

				localctx.(*VarCriterionContext)._varMeasurement = _x
			}
			localctx.(*VarCriterionContext).v_varMeasurement = append(localctx.(*VarCriterionContext).v_varMeasurement, localctx.(*VarCriterionContext)._varMeasurement)

		case A2LParserT__238:
			{
				p.SetState(1845)

				var _x = p.VarSelectionCharacteristic()

				localctx.(*VarCriterionContext)._varSelectionCharacteristic = _x
			}
			localctx.(*VarCriterionContext).v_varSelectionCharacteristic = append(localctx.(*VarCriterionContext).v_varSelectionCharacteristic, localctx.(*VarCriterionContext)._varSelectionCharacteristic)

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(1850)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1851)
		p.Match(A2LParserEND)
	}
	{
		p.SetState(1852)
		p.Match(A2LParserT__236)
	}

	return localctx
}

// IVarMeasurementContext is an interface to support dynamic dispatch.
type IVarMeasurementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierValueContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierValueContext)

	// Getter signatures
	IdentifierValue() IIdentifierValueContext

	// IsVarMeasurementContext differentiates from other interfaces.
	IsVarMeasurementContext()
}

type VarMeasurementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name   IIdentifierValueContext
}

func NewEmptyVarMeasurementContext() *VarMeasurementContext {
	var p = new(VarMeasurementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_varMeasurement
	return p
}

func (*VarMeasurementContext) IsVarMeasurementContext() {}

func NewVarMeasurementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VarMeasurementContext {
	var p = new(VarMeasurementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_varMeasurement

	return p
}

func (s *VarMeasurementContext) GetParser() antlr.Parser { return s.parser }

func (s *VarMeasurementContext) GetName() IIdentifierValueContext { return s.name }

func (s *VarMeasurementContext) SetName(v IIdentifierValueContext) { s.name = v }

func (s *VarMeasurementContext) IdentifierValue() IIdentifierValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierValueContext)
}

func (s *VarMeasurementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VarMeasurementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VarMeasurementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterVarMeasurement(s)
	}
}

func (s *VarMeasurementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitVarMeasurement(s)
	}
}

func (s *VarMeasurementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitVarMeasurement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) VarMeasurement() (localctx IVarMeasurementContext) {
	this := p
	_ = this

	localctx = NewVarMeasurementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 360, A2LParserRULE_varMeasurement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1854)
		p.Match(A2LParserT__237)
	}
	{
		p.SetState(1855)

		var _x = p.IdentifierValue()

		localctx.(*VarMeasurementContext).name = _x
	}

	return localctx
}

// IVarSelectionCharacteristicContext is an interface to support dynamic dispatch.
type IVarSelectionCharacteristicContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierValueContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierValueContext)

	// Getter signatures
	IdentifierValue() IIdentifierValueContext

	// IsVarSelectionCharacteristicContext differentiates from other interfaces.
	IsVarSelectionCharacteristicContext()
}

type VarSelectionCharacteristicContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name   IIdentifierValueContext
}

func NewEmptyVarSelectionCharacteristicContext() *VarSelectionCharacteristicContext {
	var p = new(VarSelectionCharacteristicContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_varSelectionCharacteristic
	return p
}

func (*VarSelectionCharacteristicContext) IsVarSelectionCharacteristicContext() {}

func NewVarSelectionCharacteristicContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VarSelectionCharacteristicContext {
	var p = new(VarSelectionCharacteristicContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_varSelectionCharacteristic

	return p
}

func (s *VarSelectionCharacteristicContext) GetParser() antlr.Parser { return s.parser }

func (s *VarSelectionCharacteristicContext) GetName() IIdentifierValueContext { return s.name }

func (s *VarSelectionCharacteristicContext) SetName(v IIdentifierValueContext) { s.name = v }

func (s *VarSelectionCharacteristicContext) IdentifierValue() IIdentifierValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierValueContext)
}

func (s *VarSelectionCharacteristicContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VarSelectionCharacteristicContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VarSelectionCharacteristicContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterVarSelectionCharacteristic(s)
	}
}

func (s *VarSelectionCharacteristicContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitVarSelectionCharacteristic(s)
	}
}

func (s *VarSelectionCharacteristicContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitVarSelectionCharacteristic(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) VarSelectionCharacteristic() (localctx IVarSelectionCharacteristicContext) {
	this := p
	_ = this

	localctx = NewVarSelectionCharacteristicContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 362, A2LParserRULE_varSelectionCharacteristic)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1857)
		p.Match(A2LParserT__238)
	}
	{
		p.SetState(1858)

		var _x = p.IdentifierValue()

		localctx.(*VarSelectionCharacteristicContext).name = _x
	}

	return localctx
}

// IVarForbiddenCombContext is an interface to support dynamic dispatch.
type IVarForbiddenCombContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_identifierValue returns the _identifierValue rule contexts.
	Get_identifierValue() IIdentifierValueContext

	// Set_identifierValue sets the _identifierValue rule contexts.
	Set_identifierValue(IIdentifierValueContext)

	// GetCriterionName returns the criterionName rule context list.
	GetCriterionName() []IIdentifierValueContext

	// GetCriterionValue returns the criterionValue rule context list.
	GetCriterionValue() []IIdentifierValueContext

	// SetCriterionName sets the criterionName rule context list.
	SetCriterionName([]IIdentifierValueContext)

	// SetCriterionValue sets the criterionValue rule context list.
	SetCriterionValue([]IIdentifierValueContext)

	// Getter signatures
	BEGIN() antlr.TerminalNode
	END() antlr.TerminalNode
	AllIdentifierValue() []IIdentifierValueContext
	IdentifierValue(i int) IIdentifierValueContext

	// IsVarForbiddenCombContext differentiates from other interfaces.
	IsVarForbiddenCombContext()
}

type VarForbiddenCombContext struct {
	*antlr.BaseParserRuleContext
	parser           antlr.Parser
	_identifierValue IIdentifierValueContext
	criterionName    []IIdentifierValueContext
	criterionValue   []IIdentifierValueContext
}

func NewEmptyVarForbiddenCombContext() *VarForbiddenCombContext {
	var p = new(VarForbiddenCombContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_varForbiddenComb
	return p
}

func (*VarForbiddenCombContext) IsVarForbiddenCombContext() {}

func NewVarForbiddenCombContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VarForbiddenCombContext {
	var p = new(VarForbiddenCombContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_varForbiddenComb

	return p
}

func (s *VarForbiddenCombContext) GetParser() antlr.Parser { return s.parser }

func (s *VarForbiddenCombContext) Get_identifierValue() IIdentifierValueContext {
	return s._identifierValue
}

func (s *VarForbiddenCombContext) Set_identifierValue(v IIdentifierValueContext) {
	s._identifierValue = v
}

func (s *VarForbiddenCombContext) GetCriterionName() []IIdentifierValueContext {
	return s.criterionName
}

func (s *VarForbiddenCombContext) GetCriterionValue() []IIdentifierValueContext {
	return s.criterionValue
}

func (s *VarForbiddenCombContext) SetCriterionName(v []IIdentifierValueContext) { s.criterionName = v }

func (s *VarForbiddenCombContext) SetCriterionValue(v []IIdentifierValueContext) {
	s.criterionValue = v
}

func (s *VarForbiddenCombContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(A2LParserBEGIN, 0)
}

func (s *VarForbiddenCombContext) END() antlr.TerminalNode {
	return s.GetToken(A2LParserEND, 0)
}

func (s *VarForbiddenCombContext) AllIdentifierValue() []IIdentifierValueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierValueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierValueContext); ok {
			tst[i] = t.(IIdentifierValueContext)
			i++
		}
	}

	return tst
}

func (s *VarForbiddenCombContext) IdentifierValue(i int) IIdentifierValueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierValueContext)
}

func (s *VarForbiddenCombContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VarForbiddenCombContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VarForbiddenCombContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterVarForbiddenComb(s)
	}
}

func (s *VarForbiddenCombContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitVarForbiddenComb(s)
	}
}

func (s *VarForbiddenCombContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitVarForbiddenComb(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) VarForbiddenComb() (localctx IVarForbiddenCombContext) {
	this := p
	_ = this

	localctx = NewVarForbiddenCombContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 364, A2LParserRULE_varForbiddenComb)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1860)
		p.Match(A2LParserBEGIN)
	}
	{
		p.SetState(1861)
		p.Match(A2LParserT__239)
	}
	p.SetState(1867)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == A2LParserIDENT {
		{
			p.SetState(1862)

			var _x = p.IdentifierValue()

			localctx.(*VarForbiddenCombContext)._identifierValue = _x
		}
		localctx.(*VarForbiddenCombContext).criterionName = append(localctx.(*VarForbiddenCombContext).criterionName, localctx.(*VarForbiddenCombContext)._identifierValue)
		{
			p.SetState(1863)

			var _x = p.IdentifierValue()

			localctx.(*VarForbiddenCombContext)._identifierValue = _x
		}
		localctx.(*VarForbiddenCombContext).criterionValue = append(localctx.(*VarForbiddenCombContext).criterionValue, localctx.(*VarForbiddenCombContext)._identifierValue)

		p.SetState(1869)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1870)
		p.Match(A2LParserEND)
	}
	{
		p.SetState(1871)
		p.Match(A2LParserT__239)
	}

	return localctx
}

// IVarNamingContext is an interface to support dynamic dispatch.
type IVarNamingContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetTag returns the tag token.
	GetTag() antlr.Token

	// SetTag sets the tag token.
	SetTag(antlr.Token)

	// IsVarNamingContext differentiates from other interfaces.
	IsVarNamingContext()
}

type VarNamingContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	tag    antlr.Token
}

func NewEmptyVarNamingContext() *VarNamingContext {
	var p = new(VarNamingContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_varNaming
	return p
}

func (*VarNamingContext) IsVarNamingContext() {}

func NewVarNamingContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VarNamingContext {
	var p = new(VarNamingContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_varNaming

	return p
}

func (s *VarNamingContext) GetParser() antlr.Parser { return s.parser }

func (s *VarNamingContext) GetTag() antlr.Token { return s.tag }

func (s *VarNamingContext) SetTag(v antlr.Token) { s.tag = v }

func (s *VarNamingContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VarNamingContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VarNamingContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterVarNaming(s)
	}
}

func (s *VarNamingContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitVarNaming(s)
	}
}

func (s *VarNamingContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitVarNaming(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) VarNaming() (localctx IVarNamingContext) {
	this := p
	_ = this

	localctx = NewVarNamingContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 366, A2LParserRULE_varNaming)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1873)
		p.Match(A2LParserT__240)
	}
	{
		p.SetState(1874)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*VarNamingContext).tag = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == A2LParserT__241 || _la == A2LParserT__242) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*VarNamingContext).tag = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IVarSeparatorContext is an interface to support dynamic dispatch.
type IVarSeparatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetSeparator returns the separator rule contexts.
	GetSeparator() IStringValueContext

	// SetSeparator sets the separator rule contexts.
	SetSeparator(IStringValueContext)

	// Getter signatures
	StringValue() IStringValueContext

	// IsVarSeparatorContext differentiates from other interfaces.
	IsVarSeparatorContext()
}

type VarSeparatorContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	separator IStringValueContext
}

func NewEmptyVarSeparatorContext() *VarSeparatorContext {
	var p = new(VarSeparatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_varSeparator
	return p
}

func (*VarSeparatorContext) IsVarSeparatorContext() {}

func NewVarSeparatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VarSeparatorContext {
	var p = new(VarSeparatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_varSeparator

	return p
}

func (s *VarSeparatorContext) GetParser() antlr.Parser { return s.parser }

func (s *VarSeparatorContext) GetSeparator() IStringValueContext { return s.separator }

func (s *VarSeparatorContext) SetSeparator(v IStringValueContext) { s.separator = v }

func (s *VarSeparatorContext) StringValue() IStringValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringValueContext)
}

func (s *VarSeparatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VarSeparatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VarSeparatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterVarSeparator(s)
	}
}

func (s *VarSeparatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitVarSeparator(s)
	}
}

func (s *VarSeparatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitVarSeparator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) VarSeparator() (localctx IVarSeparatorContext) {
	this := p
	_ = this

	localctx = NewVarSeparatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 368, A2LParserRULE_varSeparator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1876)
		p.Match(A2LParserT__243)
	}
	{
		p.SetState(1877)

		var _x = p.StringValue()

		localctx.(*VarSeparatorContext).separator = _x
	}

	return localctx
}

// IIntegerValueContext is an interface to support dynamic dispatch.
type IIntegerValueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetH returns the h token.
	GetH() antlr.Token

	// GetI returns the i token.
	GetI() antlr.Token

	// SetH sets the h token.
	SetH(antlr.Token)

	// SetI sets the i token.
	SetI(antlr.Token)

	// Getter signatures
	HEX() antlr.TerminalNode
	INT() antlr.TerminalNode

	// IsIntegerValueContext differentiates from other interfaces.
	IsIntegerValueContext()
}

type IntegerValueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	h      antlr.Token
	i      antlr.Token
}

func NewEmptyIntegerValueContext() *IntegerValueContext {
	var p = new(IntegerValueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_integerValue
	return p
}

func (*IntegerValueContext) IsIntegerValueContext() {}

func NewIntegerValueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IntegerValueContext {
	var p = new(IntegerValueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_integerValue

	return p
}

func (s *IntegerValueContext) GetParser() antlr.Parser { return s.parser }

func (s *IntegerValueContext) GetH() antlr.Token { return s.h }

func (s *IntegerValueContext) GetI() antlr.Token { return s.i }

func (s *IntegerValueContext) SetH(v antlr.Token) { s.h = v }

func (s *IntegerValueContext) SetI(v antlr.Token) { s.i = v }

func (s *IntegerValueContext) HEX() antlr.TerminalNode {
	return s.GetToken(A2LParserHEX, 0)
}

func (s *IntegerValueContext) INT() antlr.TerminalNode {
	return s.GetToken(A2LParserINT, 0)
}

func (s *IntegerValueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IntegerValueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IntegerValueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterIntegerValue(s)
	}
}

func (s *IntegerValueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitIntegerValue(s)
	}
}

func (s *IntegerValueContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitIntegerValue(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) IntegerValue() (localctx IIntegerValueContext) {
	this := p
	_ = this

	localctx = NewIntegerValueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 370, A2LParserRULE_integerValue)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1881)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case A2LParserHEX:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1879)

			var _m = p.Match(A2LParserHEX)

			localctx.(*IntegerValueContext).h = _m
		}

	case A2LParserINT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1880)

			var _m = p.Match(A2LParserINT)

			localctx.(*IntegerValueContext).i = _m
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// INumericValueContext is an interface to support dynamic dispatch.
type INumericValueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetF returns the f token.
	GetF() antlr.Token

	// GetI returns the i token.
	GetI() antlr.Token

	// GetH returns the h token.
	GetH() antlr.Token

	// SetF sets the f token.
	SetF(antlr.Token)

	// SetI sets the i token.
	SetI(antlr.Token)

	// SetH sets the h token.
	SetH(antlr.Token)

	// Getter signatures
	FLOAT() antlr.TerminalNode
	INT() antlr.TerminalNode
	HEX() antlr.TerminalNode

	// IsNumericValueContext differentiates from other interfaces.
	IsNumericValueContext()
}

type NumericValueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	f      antlr.Token
	i      antlr.Token
	h      antlr.Token
}

func NewEmptyNumericValueContext() *NumericValueContext {
	var p = new(NumericValueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_numericValue
	return p
}

func (*NumericValueContext) IsNumericValueContext() {}

func NewNumericValueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NumericValueContext {
	var p = new(NumericValueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_numericValue

	return p
}

func (s *NumericValueContext) GetParser() antlr.Parser { return s.parser }

func (s *NumericValueContext) GetF() antlr.Token { return s.f }

func (s *NumericValueContext) GetI() antlr.Token { return s.i }

func (s *NumericValueContext) GetH() antlr.Token { return s.h }

func (s *NumericValueContext) SetF(v antlr.Token) { s.f = v }

func (s *NumericValueContext) SetI(v antlr.Token) { s.i = v }

func (s *NumericValueContext) SetH(v antlr.Token) { s.h = v }

func (s *NumericValueContext) FLOAT() antlr.TerminalNode {
	return s.GetToken(A2LParserFLOAT, 0)
}

func (s *NumericValueContext) INT() antlr.TerminalNode {
	return s.GetToken(A2LParserINT, 0)
}

func (s *NumericValueContext) HEX() antlr.TerminalNode {
	return s.GetToken(A2LParserHEX, 0)
}

func (s *NumericValueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NumericValueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NumericValueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterNumericValue(s)
	}
}

func (s *NumericValueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitNumericValue(s)
	}
}

func (s *NumericValueContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitNumericValue(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) NumericValue() (localctx INumericValueContext) {
	this := p
	_ = this

	localctx = NewNumericValueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 372, A2LParserRULE_numericValue)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1886)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case A2LParserFLOAT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1883)

			var _m = p.Match(A2LParserFLOAT)

			localctx.(*NumericValueContext).f = _m
		}

	case A2LParserINT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1884)

			var _m = p.Match(A2LParserINT)

			localctx.(*NumericValueContext).i = _m
		}

	case A2LParserHEX:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1885)

			var _m = p.Match(A2LParserHEX)

			localctx.(*NumericValueContext).h = _m
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IStringValueContext is an interface to support dynamic dispatch.
type IStringValueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetS returns the s token.
	GetS() antlr.Token

	// SetS sets the s token.
	SetS(antlr.Token)

	// Getter signatures
	STRING() antlr.TerminalNode

	// IsStringValueContext differentiates from other interfaces.
	IsStringValueContext()
}

type StringValueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	s      antlr.Token
}

func NewEmptyStringValueContext() *StringValueContext {
	var p = new(StringValueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_stringValue
	return p
}

func (*StringValueContext) IsStringValueContext() {}

func NewStringValueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StringValueContext {
	var p = new(StringValueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_stringValue

	return p
}

func (s *StringValueContext) GetParser() antlr.Parser { return s.parser }

func (s *StringValueContext) GetS() antlr.Token { return s.s }

func (s *StringValueContext) SetS(v antlr.Token) { s.s = v }

func (s *StringValueContext) STRING() antlr.TerminalNode {
	return s.GetToken(A2LParserSTRING, 0)
}

func (s *StringValueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StringValueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StringValueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterStringValue(s)
	}
}

func (s *StringValueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitStringValue(s)
	}
}

func (s *StringValueContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitStringValue(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) StringValue() (localctx IStringValueContext) {
	this := p
	_ = this

	localctx = NewStringValueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 374, A2LParserRULE_stringValue)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1888)

		var _m = p.Match(A2LParserSTRING)

		localctx.(*StringValueContext).s = _m
	}

	return localctx
}

// IIdentifierValueContext is an interface to support dynamic dispatch.
type IIdentifierValueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_partialIdentifier returns the _partialIdentifier rule contexts.
	Get_partialIdentifier() IPartialIdentifierContext

	// Set_partialIdentifier sets the _partialIdentifier rule contexts.
	Set_partialIdentifier(IPartialIdentifierContext)

	// GetI returns the i rule context list.
	GetI() []IPartialIdentifierContext

	// SetI sets the i rule context list.
	SetI([]IPartialIdentifierContext)

	// Getter signatures
	AllPartialIdentifier() []IPartialIdentifierContext
	PartialIdentifier(i int) IPartialIdentifierContext

	// IsIdentifierValueContext differentiates from other interfaces.
	IsIdentifierValueContext()
}

type IdentifierValueContext struct {
	*antlr.BaseParserRuleContext
	parser             antlr.Parser
	_partialIdentifier IPartialIdentifierContext
	i                  []IPartialIdentifierContext
}

func NewEmptyIdentifierValueContext() *IdentifierValueContext {
	var p = new(IdentifierValueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_identifierValue
	return p
}

func (*IdentifierValueContext) IsIdentifierValueContext() {}

func NewIdentifierValueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdentifierValueContext {
	var p = new(IdentifierValueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_identifierValue

	return p
}

func (s *IdentifierValueContext) GetParser() antlr.Parser { return s.parser }

func (s *IdentifierValueContext) Get_partialIdentifier() IPartialIdentifierContext {
	return s._partialIdentifier
}

func (s *IdentifierValueContext) Set_partialIdentifier(v IPartialIdentifierContext) {
	s._partialIdentifier = v
}

func (s *IdentifierValueContext) GetI() []IPartialIdentifierContext { return s.i }

func (s *IdentifierValueContext) SetI(v []IPartialIdentifierContext) { s.i = v }

func (s *IdentifierValueContext) AllPartialIdentifier() []IPartialIdentifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IPartialIdentifierContext); ok {
			len++
		}
	}

	tst := make([]IPartialIdentifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IPartialIdentifierContext); ok {
			tst[i] = t.(IPartialIdentifierContext)
			i++
		}
	}

	return tst
}

func (s *IdentifierValueContext) PartialIdentifier(i int) IPartialIdentifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPartialIdentifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPartialIdentifierContext)
}

func (s *IdentifierValueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdentifierValueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IdentifierValueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterIdentifierValue(s)
	}
}

func (s *IdentifierValueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitIdentifierValue(s)
	}
}

func (s *IdentifierValueContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitIdentifierValue(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) IdentifierValue() (localctx IIdentifierValueContext) {
	this := p
	_ = this

	localctx = NewIdentifierValueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 376, A2LParserRULE_identifierValue)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1890)

		var _x = p.PartialIdentifier()

		localctx.(*IdentifierValueContext)._partialIdentifier = _x
	}
	localctx.(*IdentifierValueContext).i = append(localctx.(*IdentifierValueContext).i, localctx.(*IdentifierValueContext)._partialIdentifier)
	p.SetState(1895)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == A2LParserT__244 {
		{
			p.SetState(1891)
			p.Match(A2LParserT__244)
		}
		{
			p.SetState(1892)

			var _x = p.PartialIdentifier()

			localctx.(*IdentifierValueContext)._partialIdentifier = _x
		}
		localctx.(*IdentifierValueContext).i = append(localctx.(*IdentifierValueContext).i, localctx.(*IdentifierValueContext)._partialIdentifier)

		p.SetState(1897)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IPartialIdentifierContext is an interface to support dynamic dispatch.
type IPartialIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetI returns the i token.
	GetI() antlr.Token

	// SetI sets the i token.
	SetI(antlr.Token)

	// Get_arraySpecifier returns the _arraySpecifier rule contexts.
	Get_arraySpecifier() IArraySpecifierContext

	// Set_arraySpecifier sets the _arraySpecifier rule contexts.
	Set_arraySpecifier(IArraySpecifierContext)

	// GetA returns the a rule context list.
	GetA() []IArraySpecifierContext

	// SetA sets the a rule context list.
	SetA([]IArraySpecifierContext)

	// Getter signatures
	IDENT() antlr.TerminalNode
	AllArraySpecifier() []IArraySpecifierContext
	ArraySpecifier(i int) IArraySpecifierContext

	// IsPartialIdentifierContext differentiates from other interfaces.
	IsPartialIdentifierContext()
}

type PartialIdentifierContext struct {
	*antlr.BaseParserRuleContext
	parser          antlr.Parser
	i               antlr.Token
	_arraySpecifier IArraySpecifierContext
	a               []IArraySpecifierContext
}

func NewEmptyPartialIdentifierContext() *PartialIdentifierContext {
	var p = new(PartialIdentifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_partialIdentifier
	return p
}

func (*PartialIdentifierContext) IsPartialIdentifierContext() {}

func NewPartialIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PartialIdentifierContext {
	var p = new(PartialIdentifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_partialIdentifier

	return p
}

func (s *PartialIdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *PartialIdentifierContext) GetI() antlr.Token { return s.i }

func (s *PartialIdentifierContext) SetI(v antlr.Token) { s.i = v }

func (s *PartialIdentifierContext) Get_arraySpecifier() IArraySpecifierContext {
	return s._arraySpecifier
}

func (s *PartialIdentifierContext) Set_arraySpecifier(v IArraySpecifierContext) {
	s._arraySpecifier = v
}

func (s *PartialIdentifierContext) GetA() []IArraySpecifierContext { return s.a }

func (s *PartialIdentifierContext) SetA(v []IArraySpecifierContext) { s.a = v }

func (s *PartialIdentifierContext) IDENT() antlr.TerminalNode {
	return s.GetToken(A2LParserIDENT, 0)
}

func (s *PartialIdentifierContext) AllArraySpecifier() []IArraySpecifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IArraySpecifierContext); ok {
			len++
		}
	}

	tst := make([]IArraySpecifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IArraySpecifierContext); ok {
			tst[i] = t.(IArraySpecifierContext)
			i++
		}
	}

	return tst
}

func (s *PartialIdentifierContext) ArraySpecifier(i int) IArraySpecifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArraySpecifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArraySpecifierContext)
}

func (s *PartialIdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PartialIdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PartialIdentifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterPartialIdentifier(s)
	}
}

func (s *PartialIdentifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitPartialIdentifier(s)
	}
}

func (s *PartialIdentifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitPartialIdentifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) PartialIdentifier() (localctx IPartialIdentifierContext) {
	this := p
	_ = this

	localctx = NewPartialIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 378, A2LParserRULE_partialIdentifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1898)

		var _m = p.Match(A2LParserIDENT)

		localctx.(*PartialIdentifierContext).i = _m
	}
	p.SetState(1902)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 83, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1899)

				var _x = p.ArraySpecifier()

				localctx.(*PartialIdentifierContext)._arraySpecifier = _x
			}
			localctx.(*PartialIdentifierContext).a = append(localctx.(*PartialIdentifierContext).a, localctx.(*PartialIdentifierContext)._arraySpecifier)

		}
		p.SetState(1904)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 83, p.GetParserRuleContext())
	}

	return localctx
}

// IArraySpecifierContext is an interface to support dynamic dispatch.
type IArraySpecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetI returns the i token.
	GetI() antlr.Token

	// GetN returns the n token.
	GetN() antlr.Token

	// SetI sets the i token.
	SetI(antlr.Token)

	// SetN sets the n token.
	SetN(antlr.Token)

	// Getter signatures
	INT() antlr.TerminalNode
	IDENT() antlr.TerminalNode

	// IsArraySpecifierContext differentiates from other interfaces.
	IsArraySpecifierContext()
}

type ArraySpecifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	i      antlr.Token
	n      antlr.Token
}

func NewEmptyArraySpecifierContext() *ArraySpecifierContext {
	var p = new(ArraySpecifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_arraySpecifier
	return p
}

func (*ArraySpecifierContext) IsArraySpecifierContext() {}

func NewArraySpecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArraySpecifierContext {
	var p = new(ArraySpecifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_arraySpecifier

	return p
}

func (s *ArraySpecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *ArraySpecifierContext) GetI() antlr.Token { return s.i }

func (s *ArraySpecifierContext) GetN() antlr.Token { return s.n }

func (s *ArraySpecifierContext) SetI(v antlr.Token) { s.i = v }

func (s *ArraySpecifierContext) SetN(v antlr.Token) { s.n = v }

func (s *ArraySpecifierContext) INT() antlr.TerminalNode {
	return s.GetToken(A2LParserINT, 0)
}

func (s *ArraySpecifierContext) IDENT() antlr.TerminalNode {
	return s.GetToken(A2LParserIDENT, 0)
}

func (s *ArraySpecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArraySpecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArraySpecifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterArraySpecifier(s)
	}
}

func (s *ArraySpecifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitArraySpecifier(s)
	}
}

func (s *ArraySpecifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitArraySpecifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) ArraySpecifier() (localctx IArraySpecifierContext) {
	this := p
	_ = this

	localctx = NewArraySpecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 380, A2LParserRULE_arraySpecifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1905)
		p.Match(A2LParserT__245)
	}
	p.SetState(1908)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case A2LParserINT:
		{
			p.SetState(1906)

			var _m = p.Match(A2LParserINT)

			localctx.(*ArraySpecifierContext).i = _m
		}

	case A2LParserIDENT:
		{
			p.SetState(1907)

			var _m = p.Match(A2LParserIDENT)

			localctx.(*ArraySpecifierContext).n = _m
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(1910)
		p.Match(A2LParserT__246)
	}

	return localctx
}

// IDataTypeContext is an interface to support dynamic dispatch.
type IDataTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetV returns the v token.
	GetV() antlr.Token

	// SetV sets the v token.
	SetV(antlr.Token)

	// IsDataTypeContext differentiates from other interfaces.
	IsDataTypeContext()
}

type DataTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	v      antlr.Token
}

func NewEmptyDataTypeContext() *DataTypeContext {
	var p = new(DataTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_dataType
	return p
}

func (*DataTypeContext) IsDataTypeContext() {}

func NewDataTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DataTypeContext {
	var p = new(DataTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_dataType

	return p
}

func (s *DataTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *DataTypeContext) GetV() antlr.Token { return s.v }

func (s *DataTypeContext) SetV(v antlr.Token) { s.v = v }

func (s *DataTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DataTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DataTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterDataType(s)
	}
}

func (s *DataTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitDataType(s)
	}
}

func (s *DataTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitDataType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) DataType() (localctx IDataTypeContext) {
	this := p
	_ = this

	localctx = NewDataTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 382, A2LParserRULE_dataType)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1912)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*DataTypeContext).v = _lt

		_la = p.GetTokenStream().LA(1)

		if !((int64((_la-248)) & ^0x3f) == 0 && ((int64(1)<<(_la-248))&2047) != 0) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*DataTypeContext).v = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IDatasizeContext is an interface to support dynamic dispatch.
type IDatasizeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetV returns the v token.
	GetV() antlr.Token

	// SetV sets the v token.
	SetV(antlr.Token)

	// IsDatasizeContext differentiates from other interfaces.
	IsDatasizeContext()
}

type DatasizeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	v      antlr.Token
}

func NewEmptyDatasizeContext() *DatasizeContext {
	var p = new(DatasizeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_datasize
	return p
}

func (*DatasizeContext) IsDatasizeContext() {}

func NewDatasizeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DatasizeContext {
	var p = new(DatasizeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_datasize

	return p
}

func (s *DatasizeContext) GetParser() antlr.Parser { return s.parser }

func (s *DatasizeContext) GetV() antlr.Token { return s.v }

func (s *DatasizeContext) SetV(v antlr.Token) { s.v = v }

func (s *DatasizeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DatasizeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DatasizeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterDatasize(s)
	}
}

func (s *DatasizeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitDatasize(s)
	}
}

func (s *DatasizeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitDatasize(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) Datasize() (localctx IDatasizeContext) {
	this := p
	_ = this

	localctx = NewDatasizeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 384, A2LParserRULE_datasize)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1914)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*DatasizeContext).v = _lt

		_la = p.GetTokenStream().LA(1)

		if !((int64((_la-259)) & ^0x3f) == 0 && ((int64(1)<<(_la-259))&7) != 0) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*DatasizeContext).v = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IAddrtypeContext is an interface to support dynamic dispatch.
type IAddrtypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetV returns the v token.
	GetV() antlr.Token

	// SetV sets the v token.
	SetV(antlr.Token)

	// IsAddrtypeContext differentiates from other interfaces.
	IsAddrtypeContext()
}

type AddrtypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	v      antlr.Token
}

func NewEmptyAddrtypeContext() *AddrtypeContext {
	var p = new(AddrtypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_addrtype
	return p
}

func (*AddrtypeContext) IsAddrtypeContext() {}

func NewAddrtypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AddrtypeContext {
	var p = new(AddrtypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_addrtype

	return p
}

func (s *AddrtypeContext) GetParser() antlr.Parser { return s.parser }

func (s *AddrtypeContext) GetV() antlr.Token { return s.v }

func (s *AddrtypeContext) SetV(v antlr.Token) { s.v = v }

func (s *AddrtypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AddrtypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AddrtypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterAddrtype(s)
	}
}

func (s *AddrtypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitAddrtype(s)
	}
}

func (s *AddrtypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitAddrtype(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) Addrtype() (localctx IAddrtypeContext) {
	this := p
	_ = this

	localctx = NewAddrtypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 386, A2LParserRULE_addrtype)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1916)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*AddrtypeContext).v = _lt

		_la = p.GetTokenStream().LA(1)

		if !((int64((_la-262)) & ^0x3f) == 0 && ((int64(1)<<(_la-262))&15) != 0) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*AddrtypeContext).v = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IByteOrderValueContext is an interface to support dynamic dispatch.
type IByteOrderValueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetV returns the v token.
	GetV() antlr.Token

	// SetV sets the v token.
	SetV(antlr.Token)

	// IsByteOrderValueContext differentiates from other interfaces.
	IsByteOrderValueContext()
}

type ByteOrderValueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	v      antlr.Token
}

func NewEmptyByteOrderValueContext() *ByteOrderValueContext {
	var p = new(ByteOrderValueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_byteOrderValue
	return p
}

func (*ByteOrderValueContext) IsByteOrderValueContext() {}

func NewByteOrderValueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ByteOrderValueContext {
	var p = new(ByteOrderValueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_byteOrderValue

	return p
}

func (s *ByteOrderValueContext) GetParser() antlr.Parser { return s.parser }

func (s *ByteOrderValueContext) GetV() antlr.Token { return s.v }

func (s *ByteOrderValueContext) SetV(v antlr.Token) { s.v = v }

func (s *ByteOrderValueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ByteOrderValueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ByteOrderValueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterByteOrderValue(s)
	}
}

func (s *ByteOrderValueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitByteOrderValue(s)
	}
}

func (s *ByteOrderValueContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitByteOrderValue(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) ByteOrderValue() (localctx IByteOrderValueContext) {
	this := p
	_ = this

	localctx = NewByteOrderValueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 388, A2LParserRULE_byteOrderValue)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1918)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*ByteOrderValueContext).v = _lt

		_la = p.GetTokenStream().LA(1)

		if !((int64((_la-266)) & ^0x3f) == 0 && ((int64(1)<<(_la-266))&15) != 0) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*ByteOrderValueContext).v = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IIndexorderContext is an interface to support dynamic dispatch.
type IIndexorderContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetV returns the v token.
	GetV() antlr.Token

	// SetV sets the v token.
	SetV(antlr.Token)

	// IsIndexorderContext differentiates from other interfaces.
	IsIndexorderContext()
}

type IndexorderContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	v      antlr.Token
}

func NewEmptyIndexorderContext() *IndexorderContext {
	var p = new(IndexorderContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_indexorder
	return p
}

func (*IndexorderContext) IsIndexorderContext() {}

func NewIndexorderContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IndexorderContext {
	var p = new(IndexorderContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_indexorder

	return p
}

func (s *IndexorderContext) GetParser() antlr.Parser { return s.parser }

func (s *IndexorderContext) GetV() antlr.Token { return s.v }

func (s *IndexorderContext) SetV(v antlr.Token) { s.v = v }

func (s *IndexorderContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IndexorderContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IndexorderContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterIndexorder(s)
	}
}

func (s *IndexorderContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitIndexorder(s)
	}
}

func (s *IndexorderContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitIndexorder(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) Indexorder() (localctx IIndexorderContext) {
	this := p
	_ = this

	localctx = NewIndexorderContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 390, A2LParserRULE_indexorder)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1920)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*IndexorderContext).v = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == A2LParserT__269 || _la == A2LParserT__270) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*IndexorderContext).v = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// ILinkTypeContext is an interface to support dynamic dispatch.
type ILinkTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetV returns the v token.
	GetV() antlr.Token

	// SetV sets the v token.
	SetV(antlr.Token)

	// IsLinkTypeContext differentiates from other interfaces.
	IsLinkTypeContext()
}

type LinkTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	v      antlr.Token
}

func NewEmptyLinkTypeContext() *LinkTypeContext {
	var p = new(LinkTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_linkType
	return p
}

func (*LinkTypeContext) IsLinkTypeContext() {}

func NewLinkTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LinkTypeContext {
	var p = new(LinkTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_linkType

	return p
}

func (s *LinkTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *LinkTypeContext) GetV() antlr.Token { return s.v }

func (s *LinkTypeContext) SetV(v antlr.Token) { s.v = v }

func (s *LinkTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LinkTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LinkTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterLinkType(s)
	}
}

func (s *LinkTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitLinkType(s)
	}
}

func (s *LinkTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitLinkType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) LinkType() (localctx ILinkTypeContext) {
	this := p
	_ = this

	localctx = NewLinkTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 392, A2LParserRULE_linkType)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1922)

		var _m = p.Match(A2LParserT__271)

		localctx.(*LinkTypeContext).v = _m
	}

	return localctx
}

// IA2mlContext is an interface to support dynamic dispatch.
type IA2mlContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_declaration returns the _declaration rule contexts.
	Get_declaration() IDeclarationContext

	// Set_declaration sets the _declaration rule contexts.
	Set_declaration(IDeclarationContext)

	// GetD returns the d rule context list.
	GetD() []IDeclarationContext

	// SetD sets the d rule context list.
	SetD([]IDeclarationContext)

	// Getter signatures
	BEGIN() antlr.TerminalNode
	END() antlr.TerminalNode
	AllDeclaration() []IDeclarationContext
	Declaration(i int) IDeclarationContext

	// IsA2mlContext differentiates from other interfaces.
	IsA2mlContext()
}

type A2mlContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	_declaration IDeclarationContext
	d            []IDeclarationContext
}

func NewEmptyA2mlContext() *A2mlContext {
	var p = new(A2mlContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_a2ml
	return p
}

func (*A2mlContext) IsA2mlContext() {}

func NewA2mlContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *A2mlContext {
	var p = new(A2mlContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_a2ml

	return p
}

func (s *A2mlContext) GetParser() antlr.Parser { return s.parser }

func (s *A2mlContext) Get_declaration() IDeclarationContext { return s._declaration }

func (s *A2mlContext) Set_declaration(v IDeclarationContext) { s._declaration = v }

func (s *A2mlContext) GetD() []IDeclarationContext { return s.d }

func (s *A2mlContext) SetD(v []IDeclarationContext) { s.d = v }

func (s *A2mlContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(A2LParserBEGIN, 0)
}

func (s *A2mlContext) END() antlr.TerminalNode {
	return s.GetToken(A2LParserEND, 0)
}

func (s *A2mlContext) AllDeclaration() []IDeclarationContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDeclarationContext); ok {
			len++
		}
	}

	tst := make([]IDeclarationContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDeclarationContext); ok {
			tst[i] = t.(IDeclarationContext)
			i++
		}
	}

	return tst
}

func (s *A2mlContext) Declaration(i int) IDeclarationContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDeclarationContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDeclarationContext)
}

func (s *A2mlContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *A2mlContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *A2mlContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterA2ml(s)
	}
}

func (s *A2mlContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitA2ml(s)
	}
}

func (s *A2mlContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitA2ml(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) A2ml() (localctx IA2mlContext) {
	this := p
	_ = this

	localctx = NewA2mlContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 394, A2LParserRULE_a2ml)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1924)
		p.Match(A2LParserBEGIN)
	}
	{
		p.SetState(1925)
		p.Match(A2LParserT__272)
	}
	p.SetState(1929)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (int64((_la-275)) & ^0x3f) == 0 && ((int64(1)<<(_la-275))&3688447) != 0 {
		{
			p.SetState(1926)

			var _x = p.Declaration()

			localctx.(*A2mlContext)._declaration = _x
		}
		localctx.(*A2mlContext).d = append(localctx.(*A2mlContext).d, localctx.(*A2mlContext)._declaration)

		p.SetState(1931)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1932)
		p.Match(A2LParserEND)
	}
	{
		p.SetState(1933)
		p.Match(A2LParserT__272)
	}

	return localctx
}

// IDeclarationContext is an interface to support dynamic dispatch.
type IDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetT returns the t rule contexts.
	GetT() ITypeDefinitionContext

	// GetB returns the b rule contexts.
	GetB() IBlockDefinitionContext

	// SetT sets the t rule contexts.
	SetT(ITypeDefinitionContext)

	// SetB sets the b rule contexts.
	SetB(IBlockDefinitionContext)

	// Getter signatures
	TypeDefinition() ITypeDefinitionContext
	BlockDefinition() IBlockDefinitionContext

	// IsDeclarationContext differentiates from other interfaces.
	IsDeclarationContext()
}

type DeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	t      ITypeDefinitionContext
	b      IBlockDefinitionContext
}

func NewEmptyDeclarationContext() *DeclarationContext {
	var p = new(DeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_declaration
	return p
}

func (*DeclarationContext) IsDeclarationContext() {}

func NewDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeclarationContext {
	var p = new(DeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_declaration

	return p
}

func (s *DeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *DeclarationContext) GetT() ITypeDefinitionContext { return s.t }

func (s *DeclarationContext) GetB() IBlockDefinitionContext { return s.b }

func (s *DeclarationContext) SetT(v ITypeDefinitionContext) { s.t = v }

func (s *DeclarationContext) SetB(v IBlockDefinitionContext) { s.b = v }

func (s *DeclarationContext) TypeDefinition() ITypeDefinitionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeDefinitionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeDefinitionContext)
}

func (s *DeclarationContext) BlockDefinition() IBlockDefinitionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockDefinitionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockDefinitionContext)
}

func (s *DeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterDeclaration(s)
	}
}

func (s *DeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitDeclaration(s)
	}
}

func (s *DeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) Declaration() (localctx IDeclarationContext) {
	this := p
	_ = this

	localctx = NewDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 396, A2LParserRULE_declaration)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1937)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case A2LParserT__274, A2LParserT__275, A2LParserT__276, A2LParserT__277, A2LParserT__278, A2LParserT__279, A2LParserT__280, A2LParserT__281, A2LParserT__282, A2LParserT__283, A2LParserT__288, A2LParserT__293, A2LParserT__294, A2LParserT__295:
		{
			p.SetState(1935)

			var _x = p.TypeDefinition()

			localctx.(*DeclarationContext).t = _x
		}

	case A2LParserT__284:
		{
			p.SetState(1936)

			var _x = p.BlockDefinition()

			localctx.(*DeclarationContext).b = _x
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(1939)
		p.Match(A2LParserT__273)
	}

	return localctx
}

// ITypeDefinitionContext is an interface to support dynamic dispatch.
type ITypeDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	A2mlTypeName() IA2mlTypeNameContext

	// IsTypeDefinitionContext differentiates from other interfaces.
	IsTypeDefinitionContext()
}

type TypeDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeDefinitionContext() *TypeDefinitionContext {
	var p = new(TypeDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_typeDefinition
	return p
}

func (*TypeDefinitionContext) IsTypeDefinitionContext() {}

func NewTypeDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeDefinitionContext {
	var p = new(TypeDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_typeDefinition

	return p
}

func (s *TypeDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeDefinitionContext) A2mlTypeName() IA2mlTypeNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IA2mlTypeNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IA2mlTypeNameContext)
}

func (s *TypeDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterTypeDefinition(s)
	}
}

func (s *TypeDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitTypeDefinition(s)
	}
}

func (s *TypeDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitTypeDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) TypeDefinition() (localctx ITypeDefinitionContext) {
	this := p
	_ = this

	localctx = NewTypeDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 398, A2LParserRULE_typeDefinition)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1941)
		p.A2mlTypeName()
	}

	return localctx
}

// IA2mlTypeNameContext is an interface to support dynamic dispatch.
type IA2mlTypeNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPr returns the pr rule contexts.
	GetPr() IPredefinedTypeNameContext

	// GetSt returns the st rule contexts.
	GetSt() IStructTypeNameContext

	// GetTs returns the ts rule contexts.
	GetTs() ITaggedStructTypeNameContext

	// GetTu returns the tu rule contexts.
	GetTu() ITaggedUnionTypeNameContext

	// GetEn returns the en rule contexts.
	GetEn() IEnumTypeNameContext

	// SetPr sets the pr rule contexts.
	SetPr(IPredefinedTypeNameContext)

	// SetSt sets the st rule contexts.
	SetSt(IStructTypeNameContext)

	// SetTs sets the ts rule contexts.
	SetTs(ITaggedStructTypeNameContext)

	// SetTu sets the tu rule contexts.
	SetTu(ITaggedUnionTypeNameContext)

	// SetEn sets the en rule contexts.
	SetEn(IEnumTypeNameContext)

	// Getter signatures
	PredefinedTypeName() IPredefinedTypeNameContext
	StructTypeName() IStructTypeNameContext
	TaggedStructTypeName() ITaggedStructTypeNameContext
	TaggedUnionTypeName() ITaggedUnionTypeNameContext
	EnumTypeName() IEnumTypeNameContext

	// IsA2mlTypeNameContext differentiates from other interfaces.
	IsA2mlTypeNameContext()
}

type A2mlTypeNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	pr     IPredefinedTypeNameContext
	st     IStructTypeNameContext
	ts     ITaggedStructTypeNameContext
	tu     ITaggedUnionTypeNameContext
	en     IEnumTypeNameContext
}

func NewEmptyA2mlTypeNameContext() *A2mlTypeNameContext {
	var p = new(A2mlTypeNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_a2mlTypeName
	return p
}

func (*A2mlTypeNameContext) IsA2mlTypeNameContext() {}

func NewA2mlTypeNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *A2mlTypeNameContext {
	var p = new(A2mlTypeNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_a2mlTypeName

	return p
}

func (s *A2mlTypeNameContext) GetParser() antlr.Parser { return s.parser }

func (s *A2mlTypeNameContext) GetPr() IPredefinedTypeNameContext { return s.pr }

func (s *A2mlTypeNameContext) GetSt() IStructTypeNameContext { return s.st }

func (s *A2mlTypeNameContext) GetTs() ITaggedStructTypeNameContext { return s.ts }

func (s *A2mlTypeNameContext) GetTu() ITaggedUnionTypeNameContext { return s.tu }

func (s *A2mlTypeNameContext) GetEn() IEnumTypeNameContext { return s.en }

func (s *A2mlTypeNameContext) SetPr(v IPredefinedTypeNameContext) { s.pr = v }

func (s *A2mlTypeNameContext) SetSt(v IStructTypeNameContext) { s.st = v }

func (s *A2mlTypeNameContext) SetTs(v ITaggedStructTypeNameContext) { s.ts = v }

func (s *A2mlTypeNameContext) SetTu(v ITaggedUnionTypeNameContext) { s.tu = v }

func (s *A2mlTypeNameContext) SetEn(v IEnumTypeNameContext) { s.en = v }

func (s *A2mlTypeNameContext) PredefinedTypeName() IPredefinedTypeNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPredefinedTypeNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPredefinedTypeNameContext)
}

func (s *A2mlTypeNameContext) StructTypeName() IStructTypeNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStructTypeNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStructTypeNameContext)
}

func (s *A2mlTypeNameContext) TaggedStructTypeName() ITaggedStructTypeNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITaggedStructTypeNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITaggedStructTypeNameContext)
}

func (s *A2mlTypeNameContext) TaggedUnionTypeName() ITaggedUnionTypeNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITaggedUnionTypeNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITaggedUnionTypeNameContext)
}

func (s *A2mlTypeNameContext) EnumTypeName() IEnumTypeNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEnumTypeNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEnumTypeNameContext)
}

func (s *A2mlTypeNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *A2mlTypeNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *A2mlTypeNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterA2mlTypeName(s)
	}
}

func (s *A2mlTypeNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitA2mlTypeName(s)
	}
}

func (s *A2mlTypeNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitA2mlTypeName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) A2mlTypeName() (localctx IA2mlTypeNameContext) {
	this := p
	_ = this

	localctx = NewA2mlTypeNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 400, A2LParserRULE_a2mlTypeName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1948)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case A2LParserT__274, A2LParserT__275, A2LParserT__276, A2LParserT__277, A2LParserT__278, A2LParserT__279, A2LParserT__280, A2LParserT__281, A2LParserT__282, A2LParserT__283:
		{
			p.SetState(1943)

			var _x = p.PredefinedTypeName()

			localctx.(*A2mlTypeNameContext).pr = _x
		}

	case A2LParserT__293:
		{
			p.SetState(1944)

			var _x = p.StructTypeName()

			localctx.(*A2mlTypeNameContext).st = _x
		}

	case A2LParserT__294:
		{
			p.SetState(1945)

			var _x = p.TaggedStructTypeName()

			localctx.(*A2mlTypeNameContext).ts = _x
		}

	case A2LParserT__295:
		{
			p.SetState(1946)

			var _x = p.TaggedUnionTypeName()

			localctx.(*A2mlTypeNameContext).tu = _x
		}

	case A2LParserT__288:
		{
			p.SetState(1947)

			var _x = p.EnumTypeName()

			localctx.(*A2mlTypeNameContext).en = _x
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IPredefinedTypeNameContext is an interface to support dynamic dispatch.
type IPredefinedTypeNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name token.
	GetName() antlr.Token

	// SetName sets the name token.
	SetName(antlr.Token)

	// IsPredefinedTypeNameContext differentiates from other interfaces.
	IsPredefinedTypeNameContext()
}

type PredefinedTypeNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name   antlr.Token
}

func NewEmptyPredefinedTypeNameContext() *PredefinedTypeNameContext {
	var p = new(PredefinedTypeNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_predefinedTypeName
	return p
}

func (*PredefinedTypeNameContext) IsPredefinedTypeNameContext() {}

func NewPredefinedTypeNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PredefinedTypeNameContext {
	var p = new(PredefinedTypeNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_predefinedTypeName

	return p
}

func (s *PredefinedTypeNameContext) GetParser() antlr.Parser { return s.parser }

func (s *PredefinedTypeNameContext) GetName() antlr.Token { return s.name }

func (s *PredefinedTypeNameContext) SetName(v antlr.Token) { s.name = v }

func (s *PredefinedTypeNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PredefinedTypeNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PredefinedTypeNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterPredefinedTypeName(s)
	}
}

func (s *PredefinedTypeNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitPredefinedTypeName(s)
	}
}

func (s *PredefinedTypeNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitPredefinedTypeName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) PredefinedTypeName() (localctx IPredefinedTypeNameContext) {
	this := p
	_ = this

	localctx = NewPredefinedTypeNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 402, A2LParserRULE_predefinedTypeName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1960)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case A2LParserT__274:
		{
			p.SetState(1950)

			var _m = p.Match(A2LParserT__274)

			localctx.(*PredefinedTypeNameContext).name = _m
		}

	case A2LParserT__275:
		{
			p.SetState(1951)

			var _m = p.Match(A2LParserT__275)

			localctx.(*PredefinedTypeNameContext).name = _m
		}

	case A2LParserT__276:
		{
			p.SetState(1952)

			var _m = p.Match(A2LParserT__276)

			localctx.(*PredefinedTypeNameContext).name = _m
		}

	case A2LParserT__277:
		{
			p.SetState(1953)

			var _m = p.Match(A2LParserT__277)

			localctx.(*PredefinedTypeNameContext).name = _m
		}

	case A2LParserT__278:
		{
			p.SetState(1954)

			var _m = p.Match(A2LParserT__278)

			localctx.(*PredefinedTypeNameContext).name = _m
		}

	case A2LParserT__279:
		{
			p.SetState(1955)

			var _m = p.Match(A2LParserT__279)

			localctx.(*PredefinedTypeNameContext).name = _m
		}

	case A2LParserT__280:
		{
			p.SetState(1956)

			var _m = p.Match(A2LParserT__280)

			localctx.(*PredefinedTypeNameContext).name = _m
		}

	case A2LParserT__281:
		{
			p.SetState(1957)

			var _m = p.Match(A2LParserT__281)

			localctx.(*PredefinedTypeNameContext).name = _m
		}

	case A2LParserT__282:
		{
			p.SetState(1958)

			var _m = p.Match(A2LParserT__282)

			localctx.(*PredefinedTypeNameContext).name = _m
		}

	case A2LParserT__283:
		{
			p.SetState(1959)

			var _m = p.Match(A2LParserT__283)

			localctx.(*PredefinedTypeNameContext).name = _m
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IBlockDefinitionContext is an interface to support dynamic dispatch.
type IBlockDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetMult returns the mult token.
	GetMult() antlr.Token

	// SetMult sets the mult token.
	SetMult(antlr.Token)

	// GetTag0 returns the tag0 rule contexts.
	GetTag0() ITagValueContext

	// GetTn returns the tn rule contexts.
	GetTn() IA2mlTypeNameContext

	// GetTag1 returns the tag1 rule contexts.
	GetTag1() IStringValueContext

	// GetMem returns the mem rule contexts.
	GetMem() IMemberContext

	// SetTag0 sets the tag0 rule contexts.
	SetTag0(ITagValueContext)

	// SetTn sets the tn rule contexts.
	SetTn(IA2mlTypeNameContext)

	// SetTag1 sets the tag1 rule contexts.
	SetTag1(IStringValueContext)

	// SetMem sets the mem rule contexts.
	SetMem(IMemberContext)

	// Getter signatures
	TagValue() ITagValueContext
	A2mlTypeName() IA2mlTypeNameContext
	StringValue() IStringValueContext
	Member() IMemberContext

	// IsBlockDefinitionContext differentiates from other interfaces.
	IsBlockDefinitionContext()
}

type BlockDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	tag0   ITagValueContext
	tn     IA2mlTypeNameContext
	tag1   IStringValueContext
	mem    IMemberContext
	mult   antlr.Token
}

func NewEmptyBlockDefinitionContext() *BlockDefinitionContext {
	var p = new(BlockDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_blockDefinition
	return p
}

func (*BlockDefinitionContext) IsBlockDefinitionContext() {}

func NewBlockDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BlockDefinitionContext {
	var p = new(BlockDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_blockDefinition

	return p
}

func (s *BlockDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *BlockDefinitionContext) GetMult() antlr.Token { return s.mult }

func (s *BlockDefinitionContext) SetMult(v antlr.Token) { s.mult = v }

func (s *BlockDefinitionContext) GetTag0() ITagValueContext { return s.tag0 }

func (s *BlockDefinitionContext) GetTn() IA2mlTypeNameContext { return s.tn }

func (s *BlockDefinitionContext) GetTag1() IStringValueContext { return s.tag1 }

func (s *BlockDefinitionContext) GetMem() IMemberContext { return s.mem }

func (s *BlockDefinitionContext) SetTag0(v ITagValueContext) { s.tag0 = v }

func (s *BlockDefinitionContext) SetTn(v IA2mlTypeNameContext) { s.tn = v }

func (s *BlockDefinitionContext) SetTag1(v IStringValueContext) { s.tag1 = v }

func (s *BlockDefinitionContext) SetMem(v IMemberContext) { s.mem = v }

func (s *BlockDefinitionContext) TagValue() ITagValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITagValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITagValueContext)
}

func (s *BlockDefinitionContext) A2mlTypeName() IA2mlTypeNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IA2mlTypeNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IA2mlTypeNameContext)
}

func (s *BlockDefinitionContext) StringValue() IStringValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringValueContext)
}

func (s *BlockDefinitionContext) Member() IMemberContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMemberContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMemberContext)
}

func (s *BlockDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BlockDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BlockDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterBlockDefinition(s)
	}
}

func (s *BlockDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitBlockDefinition(s)
	}
}

func (s *BlockDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitBlockDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) BlockDefinition() (localctx IBlockDefinitionContext) {
	this := p
	_ = this

	localctx = NewBlockDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 404, A2LParserRULE_blockDefinition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1978)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 90, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1962)
			p.Match(A2LParserT__284)
		}
		{
			p.SetState(1963)

			var _x = p.TagValue()

			localctx.(*BlockDefinitionContext).tag0 = _x
		}
		{
			p.SetState(1964)

			var _x = p.A2mlTypeName()

			localctx.(*BlockDefinitionContext).tn = _x
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1966)
			p.Match(A2LParserT__284)
		}
		{
			p.SetState(1967)

			var _x = p.StringValue()

			localctx.(*BlockDefinitionContext).tag1 = _x
		}
		{
			p.SetState(1968)

			var _x = p.A2mlTypeName()

			localctx.(*BlockDefinitionContext).tn = _x
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1970)
			p.Match(A2LParserT__284)
		}
		{
			p.SetState(1971)

			var _x = p.StringValue()

			localctx.(*BlockDefinitionContext).tag1 = _x
		}
		{
			p.SetState(1972)
			p.Match(A2LParserT__285)
		}
		{
			p.SetState(1973)

			var _x = p.Member()

			localctx.(*BlockDefinitionContext).mem = _x
		}
		{
			p.SetState(1974)
			p.Match(A2LParserT__286)
		}
		p.SetState(1976)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == A2LParserT__287 {
			{
				p.SetState(1975)

				var _m = p.Match(A2LParserT__287)

				localctx.(*BlockDefinitionContext).mult = _m
			}

		}

	}

	return localctx
}

// IEnumTypeNameContext is an interface to support dynamic dispatch.
type IEnumTypeNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetIdentifier returns the identifier rule contexts.
	GetIdentifier() IIdentifierValueContext

	// GetEnumerators returns the enumerators rule contexts.
	GetEnumerators() IEnumeratorListContext

	// SetIdentifier sets the identifier rule contexts.
	SetIdentifier(IIdentifierValueContext)

	// SetEnumerators sets the enumerators rule contexts.
	SetEnumerators(IEnumeratorListContext)

	// Getter signatures
	EnumeratorList() IEnumeratorListContext
	IdentifierValue() IIdentifierValueContext

	// IsEnumTypeNameContext differentiates from other interfaces.
	IsEnumTypeNameContext()
}

type EnumTypeNameContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	identifier  IIdentifierValueContext
	enumerators IEnumeratorListContext
}

func NewEmptyEnumTypeNameContext() *EnumTypeNameContext {
	var p = new(EnumTypeNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_enumTypeName
	return p
}

func (*EnumTypeNameContext) IsEnumTypeNameContext() {}

func NewEnumTypeNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumTypeNameContext {
	var p = new(EnumTypeNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_enumTypeName

	return p
}

func (s *EnumTypeNameContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumTypeNameContext) GetIdentifier() IIdentifierValueContext { return s.identifier }

func (s *EnumTypeNameContext) GetEnumerators() IEnumeratorListContext { return s.enumerators }

func (s *EnumTypeNameContext) SetIdentifier(v IIdentifierValueContext) { s.identifier = v }

func (s *EnumTypeNameContext) SetEnumerators(v IEnumeratorListContext) { s.enumerators = v }

func (s *EnumTypeNameContext) EnumeratorList() IEnumeratorListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEnumeratorListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEnumeratorListContext)
}

func (s *EnumTypeNameContext) IdentifierValue() IIdentifierValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierValueContext)
}

func (s *EnumTypeNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumTypeNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnumTypeNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterEnumTypeName(s)
	}
}

func (s *EnumTypeNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitEnumTypeName(s)
	}
}

func (s *EnumTypeNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitEnumTypeName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) EnumTypeName() (localctx IEnumTypeNameContext) {
	this := p
	_ = this

	localctx = NewEnumTypeNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 406, A2LParserRULE_enumTypeName)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1990)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 92, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1980)
			p.Match(A2LParserT__288)
		}
		p.SetState(1982)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == A2LParserIDENT {
			{
				p.SetState(1981)

				var _x = p.IdentifierValue()

				localctx.(*EnumTypeNameContext).identifier = _x
			}

		}
		{
			p.SetState(1984)
			p.Match(A2LParserT__289)
		}
		{
			p.SetState(1985)

			var _x = p.EnumeratorList()

			localctx.(*EnumTypeNameContext).enumerators = _x
		}
		{
			p.SetState(1986)
			p.Match(A2LParserT__290)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1988)
			p.Match(A2LParserT__288)
		}
		{
			p.SetState(1989)

			var _x = p.IdentifierValue()

			localctx.(*EnumTypeNameContext).identifier = _x
		}

	}

	return localctx
}

// IEnumeratorListContext is an interface to support dynamic dispatch.
type IEnumeratorListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_enumerator returns the _enumerator rule contexts.
	Get_enumerator() IEnumeratorContext

	// Set_enumerator sets the _enumerator rule contexts.
	Set_enumerator(IEnumeratorContext)

	// GetIds returns the ids rule context list.
	GetIds() []IEnumeratorContext

	// SetIds sets the ids rule context list.
	SetIds([]IEnumeratorContext)

	// Getter signatures
	AllEnumerator() []IEnumeratorContext
	Enumerator(i int) IEnumeratorContext

	// IsEnumeratorListContext differentiates from other interfaces.
	IsEnumeratorListContext()
}

type EnumeratorListContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	_enumerator IEnumeratorContext
	ids         []IEnumeratorContext
}

func NewEmptyEnumeratorListContext() *EnumeratorListContext {
	var p = new(EnumeratorListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_enumeratorList
	return p
}

func (*EnumeratorListContext) IsEnumeratorListContext() {}

func NewEnumeratorListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumeratorListContext {
	var p = new(EnumeratorListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_enumeratorList

	return p
}

func (s *EnumeratorListContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumeratorListContext) Get_enumerator() IEnumeratorContext { return s._enumerator }

func (s *EnumeratorListContext) Set_enumerator(v IEnumeratorContext) { s._enumerator = v }

func (s *EnumeratorListContext) GetIds() []IEnumeratorContext { return s.ids }

func (s *EnumeratorListContext) SetIds(v []IEnumeratorContext) { s.ids = v }

func (s *EnumeratorListContext) AllEnumerator() []IEnumeratorContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IEnumeratorContext); ok {
			len++
		}
	}

	tst := make([]IEnumeratorContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IEnumeratorContext); ok {
			tst[i] = t.(IEnumeratorContext)
			i++
		}
	}

	return tst
}

func (s *EnumeratorListContext) Enumerator(i int) IEnumeratorContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEnumeratorContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEnumeratorContext)
}

func (s *EnumeratorListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumeratorListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnumeratorListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterEnumeratorList(s)
	}
}

func (s *EnumeratorListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitEnumeratorList(s)
	}
}

func (s *EnumeratorListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitEnumeratorList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) EnumeratorList() (localctx IEnumeratorListContext) {
	this := p
	_ = this

	localctx = NewEnumeratorListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 408, A2LParserRULE_enumeratorList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1992)

		var _x = p.Enumerator()

		localctx.(*EnumeratorListContext)._enumerator = _x
	}
	localctx.(*EnumeratorListContext).ids = append(localctx.(*EnumeratorListContext).ids, localctx.(*EnumeratorListContext)._enumerator)
	p.SetState(1997)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == A2LParserT__291 {
		{
			p.SetState(1993)
			p.Match(A2LParserT__291)
		}
		{
			p.SetState(1994)

			var _x = p.Enumerator()

			localctx.(*EnumeratorListContext)._enumerator = _x
		}
		localctx.(*EnumeratorListContext).ids = append(localctx.(*EnumeratorListContext).ids, localctx.(*EnumeratorListContext)._enumerator)

		p.SetState(1999)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IEnumeratorContext is an interface to support dynamic dispatch.
type IEnumeratorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetTag0 returns the tag0 rule contexts.
	GetTag0() ITagValueContext

	// GetConstant returns the constant rule contexts.
	GetConstant() INumericValueContext

	// GetTag1 returns the tag1 rule contexts.
	GetTag1() IStringValueContext

	// SetTag0 sets the tag0 rule contexts.
	SetTag0(ITagValueContext)

	// SetConstant sets the constant rule contexts.
	SetConstant(INumericValueContext)

	// SetTag1 sets the tag1 rule contexts.
	SetTag1(IStringValueContext)

	// Getter signatures
	TagValue() ITagValueContext
	NumericValue() INumericValueContext
	StringValue() IStringValueContext

	// IsEnumeratorContext differentiates from other interfaces.
	IsEnumeratorContext()
}

type EnumeratorContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	tag0     ITagValueContext
	constant INumericValueContext
	tag1     IStringValueContext
}

func NewEmptyEnumeratorContext() *EnumeratorContext {
	var p = new(EnumeratorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_enumerator
	return p
}

func (*EnumeratorContext) IsEnumeratorContext() {}

func NewEnumeratorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumeratorContext {
	var p = new(EnumeratorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_enumerator

	return p
}

func (s *EnumeratorContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumeratorContext) GetTag0() ITagValueContext { return s.tag0 }

func (s *EnumeratorContext) GetConstant() INumericValueContext { return s.constant }

func (s *EnumeratorContext) GetTag1() IStringValueContext { return s.tag1 }

func (s *EnumeratorContext) SetTag0(v ITagValueContext) { s.tag0 = v }

func (s *EnumeratorContext) SetConstant(v INumericValueContext) { s.constant = v }

func (s *EnumeratorContext) SetTag1(v IStringValueContext) { s.tag1 = v }

func (s *EnumeratorContext) TagValue() ITagValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITagValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITagValueContext)
}

func (s *EnumeratorContext) NumericValue() INumericValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumericValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumericValueContext)
}

func (s *EnumeratorContext) StringValue() IStringValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringValueContext)
}

func (s *EnumeratorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumeratorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnumeratorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterEnumerator(s)
	}
}

func (s *EnumeratorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitEnumerator(s)
	}
}

func (s *EnumeratorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitEnumerator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) Enumerator() (localctx IEnumeratorContext) {
	this := p
	_ = this

	localctx = NewEnumeratorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 410, A2LParserRULE_enumerator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2010)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case A2LParserTAG:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2000)

			var _x = p.TagValue()

			localctx.(*EnumeratorContext).tag0 = _x
		}
		p.SetState(2003)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == A2LParserT__292 {
			{
				p.SetState(2001)
				p.Match(A2LParserT__292)
			}
			{
				p.SetState(2002)

				var _x = p.NumericValue()

				localctx.(*EnumeratorContext).constant = _x
			}

		}

	case A2LParserSTRING:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2005)

			var _x = p.StringValue()

			localctx.(*EnumeratorContext).tag1 = _x
		}
		p.SetState(2008)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == A2LParserT__292 {
			{
				p.SetState(2006)
				p.Match(A2LParserT__292)
			}
			{
				p.SetState(2007)

				var _x = p.NumericValue()

				localctx.(*EnumeratorContext).constant = _x
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IStructTypeNameContext is an interface to support dynamic dispatch.
type IStructTypeNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetIdentifier returns the identifier rule contexts.
	GetIdentifier() IIdentifierValueContext

	// Get_structMember returns the _structMember rule contexts.
	Get_structMember() IStructMemberContext

	// SetIdentifier sets the identifier rule contexts.
	SetIdentifier(IIdentifierValueContext)

	// Set_structMember sets the _structMember rule contexts.
	Set_structMember(IStructMemberContext)

	// GetMembers returns the members rule context list.
	GetMembers() []IStructMemberContext

	// SetMembers sets the members rule context list.
	SetMembers([]IStructMemberContext)

	// Getter signatures
	IdentifierValue() IIdentifierValueContext
	AllStructMember() []IStructMemberContext
	StructMember(i int) IStructMemberContext

	// IsStructTypeNameContext differentiates from other interfaces.
	IsStructTypeNameContext()
}

type StructTypeNameContext struct {
	*antlr.BaseParserRuleContext
	parser        antlr.Parser
	identifier    IIdentifierValueContext
	_structMember IStructMemberContext
	members       []IStructMemberContext
}

func NewEmptyStructTypeNameContext() *StructTypeNameContext {
	var p = new(StructTypeNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_structTypeName
	return p
}

func (*StructTypeNameContext) IsStructTypeNameContext() {}

func NewStructTypeNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StructTypeNameContext {
	var p = new(StructTypeNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_structTypeName

	return p
}

func (s *StructTypeNameContext) GetParser() antlr.Parser { return s.parser }

func (s *StructTypeNameContext) GetIdentifier() IIdentifierValueContext { return s.identifier }

func (s *StructTypeNameContext) Get_structMember() IStructMemberContext { return s._structMember }

func (s *StructTypeNameContext) SetIdentifier(v IIdentifierValueContext) { s.identifier = v }

func (s *StructTypeNameContext) Set_structMember(v IStructMemberContext) { s._structMember = v }

func (s *StructTypeNameContext) GetMembers() []IStructMemberContext { return s.members }

func (s *StructTypeNameContext) SetMembers(v []IStructMemberContext) { s.members = v }

func (s *StructTypeNameContext) IdentifierValue() IIdentifierValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierValueContext)
}

func (s *StructTypeNameContext) AllStructMember() []IStructMemberContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStructMemberContext); ok {
			len++
		}
	}

	tst := make([]IStructMemberContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStructMemberContext); ok {
			tst[i] = t.(IStructMemberContext)
			i++
		}
	}

	return tst
}

func (s *StructTypeNameContext) StructMember(i int) IStructMemberContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStructMemberContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStructMemberContext)
}

func (s *StructTypeNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StructTypeNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StructTypeNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterStructTypeName(s)
	}
}

func (s *StructTypeNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitStructTypeName(s)
	}
}

func (s *StructTypeNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitStructTypeName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) StructTypeName() (localctx IStructTypeNameContext) {
	this := p
	_ = this

	localctx = NewStructTypeNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 412, A2LParserRULE_structTypeName)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2026)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 99, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2012)
			p.Match(A2LParserT__293)
		}
		p.SetState(2014)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == A2LParserIDENT {
			{
				p.SetState(2013)

				var _x = p.IdentifierValue()

				localctx.(*StructTypeNameContext).identifier = _x
			}

		}
		{
			p.SetState(2016)
			p.Match(A2LParserT__289)
		}
		p.SetState(2020)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for (int64((_la-275)) & ^0x3f) == 0 && ((int64(1)<<(_la-275))&3689471) != 0 {
			{
				p.SetState(2017)

				var _x = p.StructMember()

				localctx.(*StructTypeNameContext)._structMember = _x
			}
			localctx.(*StructTypeNameContext).members = append(localctx.(*StructTypeNameContext).members, localctx.(*StructTypeNameContext)._structMember)

			p.SetState(2022)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(2023)
			p.Match(A2LParserT__290)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2024)
			p.Match(A2LParserT__293)
		}
		{
			p.SetState(2025)

			var _x = p.IdentifierValue()

			localctx.(*StructTypeNameContext).identifier = _x
		}

	}

	return localctx
}

// IStructMemberContext is an interface to support dynamic dispatch.
type IStructMemberContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetM0 returns the m0 token.
	GetM0() antlr.Token

	// SetM0 sets the m0 token.
	SetM0(antlr.Token)

	// GetM returns the m rule contexts.
	GetM() IMemberContext

	// GetMstar returns the mstar rule contexts.
	GetMstar() IMemberContext

	// SetM sets the m rule contexts.
	SetM(IMemberContext)

	// SetMstar sets the mstar rule contexts.
	SetMstar(IMemberContext)

	// Getter signatures
	Member() IMemberContext

	// IsStructMemberContext differentiates from other interfaces.
	IsStructMemberContext()
}

type StructMemberContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	m      IMemberContext
	mstar  IMemberContext
	m0     antlr.Token
}

func NewEmptyStructMemberContext() *StructMemberContext {
	var p = new(StructMemberContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_structMember
	return p
}

func (*StructMemberContext) IsStructMemberContext() {}

func NewStructMemberContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StructMemberContext {
	var p = new(StructMemberContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_structMember

	return p
}

func (s *StructMemberContext) GetParser() antlr.Parser { return s.parser }

func (s *StructMemberContext) GetM0() antlr.Token { return s.m0 }

func (s *StructMemberContext) SetM0(v antlr.Token) { s.m0 = v }

func (s *StructMemberContext) GetM() IMemberContext { return s.m }

func (s *StructMemberContext) GetMstar() IMemberContext { return s.mstar }

func (s *StructMemberContext) SetM(v IMemberContext) { s.m = v }

func (s *StructMemberContext) SetMstar(v IMemberContext) { s.mstar = v }

func (s *StructMemberContext) Member() IMemberContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMemberContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMemberContext)
}

func (s *StructMemberContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StructMemberContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StructMemberContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterStructMember(s)
	}
}

func (s *StructMemberContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitStructMember(s)
	}
}

func (s *StructMemberContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitStructMember(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) StructMember() (localctx IStructMemberContext) {
	this := p
	_ = this

	localctx = NewStructMemberContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 414, A2LParserRULE_structMember)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2039)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case A2LParserT__274, A2LParserT__275, A2LParserT__276, A2LParserT__277, A2LParserT__278, A2LParserT__279, A2LParserT__280, A2LParserT__281, A2LParserT__282, A2LParserT__283, A2LParserT__288, A2LParserT__293, A2LParserT__294, A2LParserT__295:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2028)

			var _x = p.Member()

			localctx.(*StructMemberContext).m = _x
		}
		{
			p.SetState(2029)
			p.Match(A2LParserT__273)
		}

	case A2LParserT__285:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2031)
			p.Match(A2LParserT__285)
		}
		{
			p.SetState(2032)

			var _x = p.Member()

			localctx.(*StructMemberContext).mstar = _x
		}
		{
			p.SetState(2033)
			p.Match(A2LParserT__286)
		}
		p.SetState(2035)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == A2LParserT__287 {
			{
				p.SetState(2034)

				var _m = p.Match(A2LParserT__287)

				localctx.(*StructMemberContext).m0 = _m
			}

		}
		{
			p.SetState(2037)
			p.Match(A2LParserT__273)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IMemberContext is an interface to support dynamic dispatch.
type IMemberContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetTypeName returns the typeName rule contexts.
	GetTypeName() IA2mlTypeNameContext

	// Get_arraySpecifier returns the _arraySpecifier rule contexts.
	Get_arraySpecifier() IArraySpecifierContext

	// SetTypeName sets the typeName rule contexts.
	SetTypeName(IA2mlTypeNameContext)

	// Set_arraySpecifier sets the _arraySpecifier rule contexts.
	Set_arraySpecifier(IArraySpecifierContext)

	// GetDimension returns the dimension rule context list.
	GetDimension() []IArraySpecifierContext

	// SetDimension sets the dimension rule context list.
	SetDimension([]IArraySpecifierContext)

	// Getter signatures
	A2mlTypeName() IA2mlTypeNameContext
	AllArraySpecifier() []IArraySpecifierContext
	ArraySpecifier(i int) IArraySpecifierContext

	// IsMemberContext differentiates from other interfaces.
	IsMemberContext()
}

type MemberContext struct {
	*antlr.BaseParserRuleContext
	parser          antlr.Parser
	typeName        IA2mlTypeNameContext
	_arraySpecifier IArraySpecifierContext
	dimension       []IArraySpecifierContext
}

func NewEmptyMemberContext() *MemberContext {
	var p = new(MemberContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_member
	return p
}

func (*MemberContext) IsMemberContext() {}

func NewMemberContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MemberContext {
	var p = new(MemberContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_member

	return p
}

func (s *MemberContext) GetParser() antlr.Parser { return s.parser }

func (s *MemberContext) GetTypeName() IA2mlTypeNameContext { return s.typeName }

func (s *MemberContext) Get_arraySpecifier() IArraySpecifierContext { return s._arraySpecifier }

func (s *MemberContext) SetTypeName(v IA2mlTypeNameContext) { s.typeName = v }

func (s *MemberContext) Set_arraySpecifier(v IArraySpecifierContext) { s._arraySpecifier = v }

func (s *MemberContext) GetDimension() []IArraySpecifierContext { return s.dimension }

func (s *MemberContext) SetDimension(v []IArraySpecifierContext) { s.dimension = v }

func (s *MemberContext) A2mlTypeName() IA2mlTypeNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IA2mlTypeNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IA2mlTypeNameContext)
}

func (s *MemberContext) AllArraySpecifier() []IArraySpecifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IArraySpecifierContext); ok {
			len++
		}
	}

	tst := make([]IArraySpecifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IArraySpecifierContext); ok {
			tst[i] = t.(IArraySpecifierContext)
			i++
		}
	}

	return tst
}

func (s *MemberContext) ArraySpecifier(i int) IArraySpecifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArraySpecifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArraySpecifierContext)
}

func (s *MemberContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MemberContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MemberContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterMember(s)
	}
}

func (s *MemberContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitMember(s)
	}
}

func (s *MemberContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitMember(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) Member() (localctx IMemberContext) {
	this := p
	_ = this

	localctx = NewMemberContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 416, A2LParserRULE_member)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2041)

		var _x = p.A2mlTypeName()

		localctx.(*MemberContext).typeName = _x
	}
	p.SetState(2045)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == A2LParserT__245 {
		{
			p.SetState(2042)

			var _x = p.ArraySpecifier()

			localctx.(*MemberContext)._arraySpecifier = _x
		}
		localctx.(*MemberContext).dimension = append(localctx.(*MemberContext).dimension, localctx.(*MemberContext)._arraySpecifier)

		p.SetState(2047)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ITaggedStructTypeNameContext is an interface to support dynamic dispatch.
type ITaggedStructTypeNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetIdentifier returns the identifier rule contexts.
	GetIdentifier() IIdentifierValueContext

	// Get_taggedStructMember returns the _taggedStructMember rule contexts.
	Get_taggedStructMember() ITaggedStructMemberContext

	// SetIdentifier sets the identifier rule contexts.
	SetIdentifier(IIdentifierValueContext)

	// Set_taggedStructMember sets the _taggedStructMember rule contexts.
	Set_taggedStructMember(ITaggedStructMemberContext)

	// GetMembers returns the members rule context list.
	GetMembers() []ITaggedStructMemberContext

	// SetMembers sets the members rule context list.
	SetMembers([]ITaggedStructMemberContext)

	// Getter signatures
	IdentifierValue() IIdentifierValueContext
	AllTaggedStructMember() []ITaggedStructMemberContext
	TaggedStructMember(i int) ITaggedStructMemberContext

	// IsTaggedStructTypeNameContext differentiates from other interfaces.
	IsTaggedStructTypeNameContext()
}

type TaggedStructTypeNameContext struct {
	*antlr.BaseParserRuleContext
	parser              antlr.Parser
	identifier          IIdentifierValueContext
	_taggedStructMember ITaggedStructMemberContext
	members             []ITaggedStructMemberContext
}

func NewEmptyTaggedStructTypeNameContext() *TaggedStructTypeNameContext {
	var p = new(TaggedStructTypeNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_taggedStructTypeName
	return p
}

func (*TaggedStructTypeNameContext) IsTaggedStructTypeNameContext() {}

func NewTaggedStructTypeNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TaggedStructTypeNameContext {
	var p = new(TaggedStructTypeNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_taggedStructTypeName

	return p
}

func (s *TaggedStructTypeNameContext) GetParser() antlr.Parser { return s.parser }

func (s *TaggedStructTypeNameContext) GetIdentifier() IIdentifierValueContext { return s.identifier }

func (s *TaggedStructTypeNameContext) Get_taggedStructMember() ITaggedStructMemberContext {
	return s._taggedStructMember
}

func (s *TaggedStructTypeNameContext) SetIdentifier(v IIdentifierValueContext) { s.identifier = v }

func (s *TaggedStructTypeNameContext) Set_taggedStructMember(v ITaggedStructMemberContext) {
	s._taggedStructMember = v
}

func (s *TaggedStructTypeNameContext) GetMembers() []ITaggedStructMemberContext { return s.members }

func (s *TaggedStructTypeNameContext) SetMembers(v []ITaggedStructMemberContext) { s.members = v }

func (s *TaggedStructTypeNameContext) IdentifierValue() IIdentifierValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierValueContext)
}

func (s *TaggedStructTypeNameContext) AllTaggedStructMember() []ITaggedStructMemberContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITaggedStructMemberContext); ok {
			len++
		}
	}

	tst := make([]ITaggedStructMemberContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITaggedStructMemberContext); ok {
			tst[i] = t.(ITaggedStructMemberContext)
			i++
		}
	}

	return tst
}

func (s *TaggedStructTypeNameContext) TaggedStructMember(i int) ITaggedStructMemberContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITaggedStructMemberContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITaggedStructMemberContext)
}

func (s *TaggedStructTypeNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TaggedStructTypeNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TaggedStructTypeNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterTaggedStructTypeName(s)
	}
}

func (s *TaggedStructTypeNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitTaggedStructTypeName(s)
	}
}

func (s *TaggedStructTypeNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitTaggedStructTypeName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) TaggedStructTypeName() (localctx ITaggedStructTypeNameContext) {
	this := p
	_ = this

	localctx = NewTaggedStructTypeNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 418, A2LParserRULE_taggedStructTypeName)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2048)
		p.Match(A2LParserT__294)
	}
	p.SetState(2050)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == A2LParserIDENT {
		{
			p.SetState(2049)

			var _x = p.IdentifierValue()

			localctx.(*TaggedStructTypeNameContext).identifier = _x
		}

	}
	p.SetState(2066)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case A2LParserT__289:
		{
			p.SetState(2052)
			p.Match(A2LParserT__289)
		}
		p.SetState(2056)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for (int64((_la-274)) & ^0x3f) == 0 && ((int64(1)<<(_la-274))&21482217471) != 0 {
			{
				p.SetState(2053)

				var _x = p.TaggedStructMember()

				localctx.(*TaggedStructTypeNameContext)._taggedStructMember = _x
			}
			localctx.(*TaggedStructTypeNameContext).members = append(localctx.(*TaggedStructTypeNameContext).members, localctx.(*TaggedStructTypeNameContext)._taggedStructMember)

			p.SetState(2058)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(2059)
			p.Match(A2LParserT__290)
		}

	case A2LParserT__245, A2LParserT__273, A2LParserT__274, A2LParserT__275, A2LParserT__276, A2LParserT__277, A2LParserT__278, A2LParserT__279, A2LParserT__280, A2LParserT__281, A2LParserT__282, A2LParserT__283, A2LParserT__284, A2LParserT__285, A2LParserT__286, A2LParserT__288, A2LParserT__293, A2LParserT__294, A2LParserT__295, A2LParserSTRING, A2LParserTAG:
		p.SetState(2063)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 105, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(2060)

					var _x = p.TaggedStructMember()

					localctx.(*TaggedStructTypeNameContext)._taggedStructMember = _x
				}
				localctx.(*TaggedStructTypeNameContext).members = append(localctx.(*TaggedStructTypeNameContext).members, localctx.(*TaggedStructTypeNameContext)._taggedStructMember)

			}
			p.SetState(2065)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 105, p.GetParserRuleContext())
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITaggedStructMemberContext is an interface to support dynamic dispatch.
type ITaggedStructMemberContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetTs0 returns the ts0 rule contexts.
	GetTs0() ITaggedStructDefinitionContext

	// GetBl0 returns the bl0 rule contexts.
	GetBl0() IBlockDefinitionContext

	// GetTs1 returns the ts1 rule contexts.
	GetTs1() ITaggedStructDefinitionContext

	// GetBl1 returns the bl1 rule contexts.
	GetBl1() IBlockDefinitionContext

	// SetTs0 sets the ts0 rule contexts.
	SetTs0(ITaggedStructDefinitionContext)

	// SetBl0 sets the bl0 rule contexts.
	SetBl0(IBlockDefinitionContext)

	// SetTs1 sets the ts1 rule contexts.
	SetTs1(ITaggedStructDefinitionContext)

	// SetBl1 sets the bl1 rule contexts.
	SetBl1(IBlockDefinitionContext)

	// Getter signatures
	TaggedStructDefinition() ITaggedStructDefinitionContext
	BlockDefinition() IBlockDefinitionContext

	// IsTaggedStructMemberContext differentiates from other interfaces.
	IsTaggedStructMemberContext()
}

type TaggedStructMemberContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	ts0    ITaggedStructDefinitionContext
	bl0    IBlockDefinitionContext
	ts1    ITaggedStructDefinitionContext
	bl1    IBlockDefinitionContext
}

func NewEmptyTaggedStructMemberContext() *TaggedStructMemberContext {
	var p = new(TaggedStructMemberContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_taggedStructMember
	return p
}

func (*TaggedStructMemberContext) IsTaggedStructMemberContext() {}

func NewTaggedStructMemberContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TaggedStructMemberContext {
	var p = new(TaggedStructMemberContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_taggedStructMember

	return p
}

func (s *TaggedStructMemberContext) GetParser() antlr.Parser { return s.parser }

func (s *TaggedStructMemberContext) GetTs0() ITaggedStructDefinitionContext { return s.ts0 }

func (s *TaggedStructMemberContext) GetBl0() IBlockDefinitionContext { return s.bl0 }

func (s *TaggedStructMemberContext) GetTs1() ITaggedStructDefinitionContext { return s.ts1 }

func (s *TaggedStructMemberContext) GetBl1() IBlockDefinitionContext { return s.bl1 }

func (s *TaggedStructMemberContext) SetTs0(v ITaggedStructDefinitionContext) { s.ts0 = v }

func (s *TaggedStructMemberContext) SetBl0(v IBlockDefinitionContext) { s.bl0 = v }

func (s *TaggedStructMemberContext) SetTs1(v ITaggedStructDefinitionContext) { s.ts1 = v }

func (s *TaggedStructMemberContext) SetBl1(v IBlockDefinitionContext) { s.bl1 = v }

func (s *TaggedStructMemberContext) TaggedStructDefinition() ITaggedStructDefinitionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITaggedStructDefinitionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITaggedStructDefinitionContext)
}

func (s *TaggedStructMemberContext) BlockDefinition() IBlockDefinitionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockDefinitionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockDefinitionContext)
}

func (s *TaggedStructMemberContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TaggedStructMemberContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TaggedStructMemberContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterTaggedStructMember(s)
	}
}

func (s *TaggedStructMemberContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitTaggedStructMember(s)
	}
}

func (s *TaggedStructMemberContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitTaggedStructMember(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) TaggedStructMember() (localctx ITaggedStructMemberContext) {
	this := p
	_ = this

	localctx = NewTaggedStructMemberContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 420, A2LParserRULE_taggedStructMember)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2092)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 109, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2068)
			p.Match(A2LParserT__285)
		}
		{
			p.SetState(2069)

			var _x = p.TaggedStructDefinition()

			localctx.(*TaggedStructMemberContext).ts0 = _x
		}
		p.SetState(2071)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == A2LParserT__273 {
			{
				p.SetState(2070)
				p.Match(A2LParserT__273)
			}

		}
		{
			p.SetState(2073)
			p.Match(A2LParserT__286)
		}
		{
			p.SetState(2074)
			p.Match(A2LParserT__287)
		}
		{
			p.SetState(2075)
			p.Match(A2LParserT__273)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2077)
			p.Match(A2LParserT__285)
		}
		{
			p.SetState(2078)

			var _x = p.BlockDefinition()

			localctx.(*TaggedStructMemberContext).bl0 = _x
		}
		p.SetState(2080)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == A2LParserT__273 {
			{
				p.SetState(2079)
				p.Match(A2LParserT__273)
			}

		}
		{
			p.SetState(2082)
			p.Match(A2LParserT__286)
		}
		{
			p.SetState(2083)
			p.Match(A2LParserT__287)
		}
		{
			p.SetState(2084)
			p.Match(A2LParserT__273)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2086)

			var _x = p.TaggedStructDefinition()

			localctx.(*TaggedStructMemberContext).ts1 = _x
		}
		{
			p.SetState(2087)
			p.Match(A2LParserT__273)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2089)

			var _x = p.BlockDefinition()

			localctx.(*TaggedStructMemberContext).bl1 = _x
		}
		{
			p.SetState(2090)
			p.Match(A2LParserT__273)
		}

	}

	return localctx
}

// ITaggedStructDefinitionContext is an interface to support dynamic dispatch.
type ITaggedStructDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetTag0 returns the tag0 rule contexts.
	GetTag0() ITagValueContext

	// GetMem returns the mem rule contexts.
	GetMem() IMemberContext

	// GetTag1 returns the tag1 rule contexts.
	GetTag1() ITagValueContext

	// GetTag2 returns the tag2 rule contexts.
	GetTag2() IStringValueContext

	// SetTag0 sets the tag0 rule contexts.
	SetTag0(ITagValueContext)

	// SetMem sets the mem rule contexts.
	SetMem(IMemberContext)

	// SetTag1 sets the tag1 rule contexts.
	SetTag1(ITagValueContext)

	// SetTag2 sets the tag2 rule contexts.
	SetTag2(IStringValueContext)

	// Getter signatures
	TagValue() ITagValueContext
	Member() IMemberContext
	StringValue() IStringValueContext

	// IsTaggedStructDefinitionContext differentiates from other interfaces.
	IsTaggedStructDefinitionContext()
}

type TaggedStructDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	tag0   ITagValueContext
	mem    IMemberContext
	tag1   ITagValueContext
	tag2   IStringValueContext
}

func NewEmptyTaggedStructDefinitionContext() *TaggedStructDefinitionContext {
	var p = new(TaggedStructDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_taggedStructDefinition
	return p
}

func (*TaggedStructDefinitionContext) IsTaggedStructDefinitionContext() {}

func NewTaggedStructDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TaggedStructDefinitionContext {
	var p = new(TaggedStructDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_taggedStructDefinition

	return p
}

func (s *TaggedStructDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *TaggedStructDefinitionContext) GetTag0() ITagValueContext { return s.tag0 }

func (s *TaggedStructDefinitionContext) GetMem() IMemberContext { return s.mem }

func (s *TaggedStructDefinitionContext) GetTag1() ITagValueContext { return s.tag1 }

func (s *TaggedStructDefinitionContext) GetTag2() IStringValueContext { return s.tag2 }

func (s *TaggedStructDefinitionContext) SetTag0(v ITagValueContext) { s.tag0 = v }

func (s *TaggedStructDefinitionContext) SetMem(v IMemberContext) { s.mem = v }

func (s *TaggedStructDefinitionContext) SetTag1(v ITagValueContext) { s.tag1 = v }

func (s *TaggedStructDefinitionContext) SetTag2(v IStringValueContext) { s.tag2 = v }

func (s *TaggedStructDefinitionContext) TagValue() ITagValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITagValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITagValueContext)
}

func (s *TaggedStructDefinitionContext) Member() IMemberContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMemberContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMemberContext)
}

func (s *TaggedStructDefinitionContext) StringValue() IStringValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringValueContext)
}

func (s *TaggedStructDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TaggedStructDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TaggedStructDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterTaggedStructDefinition(s)
	}
}

func (s *TaggedStructDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitTaggedStructDefinition(s)
	}
}

func (s *TaggedStructDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitTaggedStructDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) TaggedStructDefinition() (localctx ITaggedStructDefinitionContext) {
	this := p
	_ = this

	localctx = NewTaggedStructDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 422, A2LParserRULE_taggedStructDefinition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2114)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 115, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(2095)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == A2LParserTAG {
			{
				p.SetState(2094)

				var _x = p.TagValue()

				localctx.(*TaggedStructDefinitionContext).tag0 = _x
			}

		}
		p.SetState(2098)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (int64((_la-275)) & ^0x3f) == 0 && ((int64(1)<<(_la-275))&3687423) != 0 {
			{
				p.SetState(2097)

				var _x = p.Member()

				localctx.(*TaggedStructDefinitionContext).mem = _x
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(2101)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == A2LParserTAG {
			{
				p.SetState(2100)

				var _x = p.TagValue()

				localctx.(*TaggedStructDefinitionContext).tag1 = _x
			}

		}
		{
			p.SetState(2103)
			p.Match(A2LParserT__285)
		}
		{
			p.SetState(2104)

			var _x = p.Member()

			localctx.(*TaggedStructDefinitionContext).mem = _x
		}
		{
			p.SetState(2105)
			p.Match(A2LParserT__286)
		}
		{
			p.SetState(2106)
			p.Match(A2LParserT__287)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		p.SetState(2109)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == A2LParserSTRING {
			{
				p.SetState(2108)

				var _x = p.StringValue()

				localctx.(*TaggedStructDefinitionContext).tag2 = _x
			}

		}
		p.SetState(2112)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (int64((_la-275)) & ^0x3f) == 0 && ((int64(1)<<(_la-275))&3687423) != 0 {
			{
				p.SetState(2111)

				var _x = p.Member()

				localctx.(*TaggedStructDefinitionContext).mem = _x
			}

		}

	}

	return localctx
}

// ITaggedUnionTypeNameContext is an interface to support dynamic dispatch.
type ITaggedUnionTypeNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetIdentifier returns the identifier rule contexts.
	GetIdentifier() IIdentifierValueContext

	// Get_taggedUnionMember returns the _taggedUnionMember rule contexts.
	Get_taggedUnionMember() ITaggedUnionMemberContext

	// SetIdentifier sets the identifier rule contexts.
	SetIdentifier(IIdentifierValueContext)

	// Set_taggedUnionMember sets the _taggedUnionMember rule contexts.
	Set_taggedUnionMember(ITaggedUnionMemberContext)

	// GetMembers returns the members rule context list.
	GetMembers() []ITaggedUnionMemberContext

	// SetMembers sets the members rule context list.
	SetMembers([]ITaggedUnionMemberContext)

	// Getter signatures
	IdentifierValue() IIdentifierValueContext
	AllTaggedUnionMember() []ITaggedUnionMemberContext
	TaggedUnionMember(i int) ITaggedUnionMemberContext

	// IsTaggedUnionTypeNameContext differentiates from other interfaces.
	IsTaggedUnionTypeNameContext()
}

type TaggedUnionTypeNameContext struct {
	*antlr.BaseParserRuleContext
	parser             antlr.Parser
	identifier         IIdentifierValueContext
	_taggedUnionMember ITaggedUnionMemberContext
	members            []ITaggedUnionMemberContext
}

func NewEmptyTaggedUnionTypeNameContext() *TaggedUnionTypeNameContext {
	var p = new(TaggedUnionTypeNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_taggedUnionTypeName
	return p
}

func (*TaggedUnionTypeNameContext) IsTaggedUnionTypeNameContext() {}

func NewTaggedUnionTypeNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TaggedUnionTypeNameContext {
	var p = new(TaggedUnionTypeNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_taggedUnionTypeName

	return p
}

func (s *TaggedUnionTypeNameContext) GetParser() antlr.Parser { return s.parser }

func (s *TaggedUnionTypeNameContext) GetIdentifier() IIdentifierValueContext { return s.identifier }

func (s *TaggedUnionTypeNameContext) Get_taggedUnionMember() ITaggedUnionMemberContext {
	return s._taggedUnionMember
}

func (s *TaggedUnionTypeNameContext) SetIdentifier(v IIdentifierValueContext) { s.identifier = v }

func (s *TaggedUnionTypeNameContext) Set_taggedUnionMember(v ITaggedUnionMemberContext) {
	s._taggedUnionMember = v
}

func (s *TaggedUnionTypeNameContext) GetMembers() []ITaggedUnionMemberContext { return s.members }

func (s *TaggedUnionTypeNameContext) SetMembers(v []ITaggedUnionMemberContext) { s.members = v }

func (s *TaggedUnionTypeNameContext) IdentifierValue() IIdentifierValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierValueContext)
}

func (s *TaggedUnionTypeNameContext) AllTaggedUnionMember() []ITaggedUnionMemberContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITaggedUnionMemberContext); ok {
			len++
		}
	}

	tst := make([]ITaggedUnionMemberContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITaggedUnionMemberContext); ok {
			tst[i] = t.(ITaggedUnionMemberContext)
			i++
		}
	}

	return tst
}

func (s *TaggedUnionTypeNameContext) TaggedUnionMember(i int) ITaggedUnionMemberContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITaggedUnionMemberContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITaggedUnionMemberContext)
}

func (s *TaggedUnionTypeNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TaggedUnionTypeNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TaggedUnionTypeNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterTaggedUnionTypeName(s)
	}
}

func (s *TaggedUnionTypeNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitTaggedUnionTypeName(s)
	}
}

func (s *TaggedUnionTypeNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitTaggedUnionTypeName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) TaggedUnionTypeName() (localctx ITaggedUnionTypeNameContext) {
	this := p
	_ = this

	localctx = NewTaggedUnionTypeNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 424, A2LParserRULE_taggedUnionTypeName)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2130)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 118, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(2116)
			p.Match(A2LParserT__295)
		}
		p.SetState(2118)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == A2LParserIDENT {
			{
				p.SetState(2117)

				var _x = p.IdentifierValue()

				localctx.(*TaggedUnionTypeNameContext).identifier = _x
			}

		}
		{
			p.SetState(2120)
			p.Match(A2LParserT__289)
		}
		p.SetState(2124)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for (int64((_la-285)) & ^0x3f) == 0 && ((int64(1)<<(_la-285))&10485761) != 0 {
			{
				p.SetState(2121)

				var _x = p.TaggedUnionMember()

				localctx.(*TaggedUnionTypeNameContext)._taggedUnionMember = _x
			}
			localctx.(*TaggedUnionTypeNameContext).members = append(localctx.(*TaggedUnionTypeNameContext).members, localctx.(*TaggedUnionTypeNameContext)._taggedUnionMember)

			p.SetState(2126)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(2127)
			p.Match(A2LParserT__290)
		}

	case 2:
		{
			p.SetState(2128)
			p.Match(A2LParserT__295)
		}
		{
			p.SetState(2129)

			var _x = p.IdentifierValue()

			localctx.(*TaggedUnionTypeNameContext).identifier = _x
		}

	}

	return localctx
}

// ITaggedUnionMemberContext is an interface to support dynamic dispatch.
type ITaggedUnionMemberContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetTag0 returns the tag0 rule contexts.
	GetTag0() ITagValueContext

	// GetM returns the m rule contexts.
	GetM() IMemberContext

	// GetTag1 returns the tag1 rule contexts.
	GetTag1() IStringValueContext

	// GetBlock returns the block rule contexts.
	GetBlock() IBlockDefinitionContext

	// SetTag0 sets the tag0 rule contexts.
	SetTag0(ITagValueContext)

	// SetM sets the m rule contexts.
	SetM(IMemberContext)

	// SetTag1 sets the tag1 rule contexts.
	SetTag1(IStringValueContext)

	// SetBlock sets the block rule contexts.
	SetBlock(IBlockDefinitionContext)

	// Getter signatures
	TagValue() ITagValueContext
	StringValue() IStringValueContext
	BlockDefinition() IBlockDefinitionContext
	Member() IMemberContext

	// IsTaggedUnionMemberContext differentiates from other interfaces.
	IsTaggedUnionMemberContext()
}

type TaggedUnionMemberContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	tag0   ITagValueContext
	m      IMemberContext
	tag1   IStringValueContext
	block  IBlockDefinitionContext
}

func NewEmptyTaggedUnionMemberContext() *TaggedUnionMemberContext {
	var p = new(TaggedUnionMemberContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_taggedUnionMember
	return p
}

func (*TaggedUnionMemberContext) IsTaggedUnionMemberContext() {}

func NewTaggedUnionMemberContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TaggedUnionMemberContext {
	var p = new(TaggedUnionMemberContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_taggedUnionMember

	return p
}

func (s *TaggedUnionMemberContext) GetParser() antlr.Parser { return s.parser }

func (s *TaggedUnionMemberContext) GetTag0() ITagValueContext { return s.tag0 }

func (s *TaggedUnionMemberContext) GetM() IMemberContext { return s.m }

func (s *TaggedUnionMemberContext) GetTag1() IStringValueContext { return s.tag1 }

func (s *TaggedUnionMemberContext) GetBlock() IBlockDefinitionContext { return s.block }

func (s *TaggedUnionMemberContext) SetTag0(v ITagValueContext) { s.tag0 = v }

func (s *TaggedUnionMemberContext) SetM(v IMemberContext) { s.m = v }

func (s *TaggedUnionMemberContext) SetTag1(v IStringValueContext) { s.tag1 = v }

func (s *TaggedUnionMemberContext) SetBlock(v IBlockDefinitionContext) { s.block = v }

func (s *TaggedUnionMemberContext) TagValue() ITagValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITagValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITagValueContext)
}

func (s *TaggedUnionMemberContext) StringValue() IStringValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringValueContext)
}

func (s *TaggedUnionMemberContext) BlockDefinition() IBlockDefinitionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockDefinitionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockDefinitionContext)
}

func (s *TaggedUnionMemberContext) Member() IMemberContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMemberContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMemberContext)
}

func (s *TaggedUnionMemberContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TaggedUnionMemberContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TaggedUnionMemberContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterTaggedUnionMember(s)
	}
}

func (s *TaggedUnionMemberContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitTaggedUnionMember(s)
	}
}

func (s *TaggedUnionMemberContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitTaggedUnionMember(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) TaggedUnionMember() (localctx ITaggedUnionMemberContext) {
	this := p
	_ = this

	localctx = NewTaggedUnionMemberContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 426, A2LParserRULE_taggedUnionMember)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2147)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case A2LParserTAG:
		{
			p.SetState(2132)

			var _x = p.TagValue()

			localctx.(*TaggedUnionMemberContext).tag0 = _x
		}
		p.SetState(2134)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (int64((_la-275)) & ^0x3f) == 0 && ((int64(1)<<(_la-275))&3687423) != 0 {
			{
				p.SetState(2133)

				var _x = p.Member()

				localctx.(*TaggedUnionMemberContext).m = _x
			}

		}
		{
			p.SetState(2136)
			p.Match(A2LParserT__273)
		}

	case A2LParserSTRING:
		{
			p.SetState(2138)

			var _x = p.StringValue()

			localctx.(*TaggedUnionMemberContext).tag1 = _x
		}
		p.SetState(2140)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (int64((_la-275)) & ^0x3f) == 0 && ((int64(1)<<(_la-275))&3687423) != 0 {
			{
				p.SetState(2139)

				var _x = p.Member()

				localctx.(*TaggedUnionMemberContext).m = _x
			}

		}
		{
			p.SetState(2142)
			p.Match(A2LParserT__273)
		}

	case A2LParserT__284:
		{
			p.SetState(2144)

			var _x = p.BlockDefinition()

			localctx.(*TaggedUnionMemberContext).block = _x
		}
		{
			p.SetState(2145)
			p.Match(A2LParserT__273)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITagValueContext is an interface to support dynamic dispatch.
type ITagValueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetS returns the s token.
	GetS() antlr.Token

	// SetS sets the s token.
	SetS(antlr.Token)

	// Getter signatures
	TAG() antlr.TerminalNode

	// IsTagValueContext differentiates from other interfaces.
	IsTagValueContext()
}

type TagValueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	s      antlr.Token
}

func NewEmptyTagValueContext() *TagValueContext {
	var p = new(TagValueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_tagValue
	return p
}

func (*TagValueContext) IsTagValueContext() {}

func NewTagValueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TagValueContext {
	var p = new(TagValueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_tagValue

	return p
}

func (s *TagValueContext) GetParser() antlr.Parser { return s.parser }

func (s *TagValueContext) GetS() antlr.Token { return s.s }

func (s *TagValueContext) SetS(v antlr.Token) { s.s = v }

func (s *TagValueContext) TAG() antlr.TerminalNode {
	return s.GetToken(A2LParserTAG, 0)
}

func (s *TagValueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TagValueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TagValueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterTagValue(s)
	}
}

func (s *TagValueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitTagValue(s)
	}
}

func (s *TagValueContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitTagValue(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) TagValue() (localctx ITagValueContext) {
	this := p
	_ = this

	localctx = NewTagValueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 428, A2LParserRULE_tagValue)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2149)

		var _m = p.Match(A2LParserTAG)

		localctx.(*TagValueContext).s = _m
	}

	return localctx
}

// IIfDataContext is an interface to support dynamic dispatch.
type IIfDataContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierValueContext

	// Get_genericParameter returns the _genericParameter rule contexts.
	Get_genericParameter() IGenericParameterContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierValueContext)

	// Set_genericParameter sets the _genericParameter rule contexts.
	Set_genericParameter(IGenericParameterContext)

	// GetBlob returns the blob rule context list.
	GetBlob() []IGenericParameterContext

	// SetBlob sets the blob rule context list.
	SetBlob([]IGenericParameterContext)

	// Getter signatures
	BEGIN() antlr.TerminalNode
	END() antlr.TerminalNode
	IdentifierValue() IIdentifierValueContext
	AllGenericParameter() []IGenericParameterContext
	GenericParameter(i int) IGenericParameterContext

	// IsIfDataContext differentiates from other interfaces.
	IsIfDataContext()
}

type IfDataContext struct {
	*antlr.BaseParserRuleContext
	parser            antlr.Parser
	name              IIdentifierValueContext
	_genericParameter IGenericParameterContext
	blob              []IGenericParameterContext
}

func NewEmptyIfDataContext() *IfDataContext {
	var p = new(IfDataContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_ifData
	return p
}

func (*IfDataContext) IsIfDataContext() {}

func NewIfDataContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IfDataContext {
	var p = new(IfDataContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_ifData

	return p
}

func (s *IfDataContext) GetParser() antlr.Parser { return s.parser }

func (s *IfDataContext) GetName() IIdentifierValueContext { return s.name }

func (s *IfDataContext) Get_genericParameter() IGenericParameterContext { return s._genericParameter }

func (s *IfDataContext) SetName(v IIdentifierValueContext) { s.name = v }

func (s *IfDataContext) Set_genericParameter(v IGenericParameterContext) { s._genericParameter = v }

func (s *IfDataContext) GetBlob() []IGenericParameterContext { return s.blob }

func (s *IfDataContext) SetBlob(v []IGenericParameterContext) { s.blob = v }

func (s *IfDataContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(A2LParserBEGIN, 0)
}

func (s *IfDataContext) END() antlr.TerminalNode {
	return s.GetToken(A2LParserEND, 0)
}

func (s *IfDataContext) IdentifierValue() IIdentifierValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierValueContext)
}

func (s *IfDataContext) AllGenericParameter() []IGenericParameterContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IGenericParameterContext); ok {
			len++
		}
	}

	tst := make([]IGenericParameterContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IGenericParameterContext); ok {
			tst[i] = t.(IGenericParameterContext)
			i++
		}
	}

	return tst
}

func (s *IfDataContext) GenericParameter(i int) IGenericParameterContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGenericParameterContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGenericParameterContext)
}

func (s *IfDataContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IfDataContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IfDataContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterIfData(s)
	}
}

func (s *IfDataContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitIfData(s)
	}
}

func (s *IfDataContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitIfData(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) IfData() (localctx IIfDataContext) {
	this := p
	_ = this

	localctx = NewIfDataContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 430, A2LParserRULE_ifData)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2151)
		p.Match(A2LParserBEGIN)
	}
	{
		p.SetState(2152)
		p.Match(A2LParserT__296)
	}
	{
		p.SetState(2153)

		var _x = p.IdentifierValue()

		localctx.(*IfDataContext).name = _x
	}
	p.SetState(2157)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (int64((_la-298)) & ^0x3f) == 0 && ((int64(1)<<(_la-298))&1341) != 0 {
		{
			p.SetState(2154)

			var _x = p.GenericParameter()

			localctx.(*IfDataContext)._genericParameter = _x
		}
		localctx.(*IfDataContext).blob = append(localctx.(*IfDataContext).blob, localctx.(*IfDataContext)._genericParameter)

		p.SetState(2159)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(2160)
		p.Match(A2LParserEND)
	}
	{
		p.SetState(2161)
		p.Match(A2LParserT__296)
	}

	return localctx
}

// IGenericParameterContext is an interface to support dynamic dispatch.
type IGenericParameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetTag returns the tag rule contexts.
	GetTag() ITagValueContext

	// GetSting returns the sting rule contexts.
	GetSting() IStringValueContext

	// GetNumeric returns the numeric rule contexts.
	GetNumeric() INumericValueContext

	// GetGeneric returns the generic rule contexts.
	GetGeneric() IGenericNodeContext

	// GetIdentifier returns the identifier rule contexts.
	GetIdentifier() IIdentifierValueContext

	// SetTag sets the tag rule contexts.
	SetTag(ITagValueContext)

	// SetSting sets the sting rule contexts.
	SetSting(IStringValueContext)

	// SetNumeric sets the numeric rule contexts.
	SetNumeric(INumericValueContext)

	// SetGeneric sets the generic rule contexts.
	SetGeneric(IGenericNodeContext)

	// SetIdentifier sets the identifier rule contexts.
	SetIdentifier(IIdentifierValueContext)

	// Getter signatures
	TagValue() ITagValueContext
	StringValue() IStringValueContext
	NumericValue() INumericValueContext
	GenericNode() IGenericNodeContext
	IdentifierValue() IIdentifierValueContext

	// IsGenericParameterContext differentiates from other interfaces.
	IsGenericParameterContext()
}

type GenericParameterContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	tag        ITagValueContext
	sting      IStringValueContext
	numeric    INumericValueContext
	generic    IGenericNodeContext
	identifier IIdentifierValueContext
}

func NewEmptyGenericParameterContext() *GenericParameterContext {
	var p = new(GenericParameterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_genericParameter
	return p
}

func (*GenericParameterContext) IsGenericParameterContext() {}

func NewGenericParameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GenericParameterContext {
	var p = new(GenericParameterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_genericParameter

	return p
}

func (s *GenericParameterContext) GetParser() antlr.Parser { return s.parser }

func (s *GenericParameterContext) GetTag() ITagValueContext { return s.tag }

func (s *GenericParameterContext) GetSting() IStringValueContext { return s.sting }

func (s *GenericParameterContext) GetNumeric() INumericValueContext { return s.numeric }

func (s *GenericParameterContext) GetGeneric() IGenericNodeContext { return s.generic }

func (s *GenericParameterContext) GetIdentifier() IIdentifierValueContext { return s.identifier }

func (s *GenericParameterContext) SetTag(v ITagValueContext) { s.tag = v }

func (s *GenericParameterContext) SetSting(v IStringValueContext) { s.sting = v }

func (s *GenericParameterContext) SetNumeric(v INumericValueContext) { s.numeric = v }

func (s *GenericParameterContext) SetGeneric(v IGenericNodeContext) { s.generic = v }

func (s *GenericParameterContext) SetIdentifier(v IIdentifierValueContext) { s.identifier = v }

func (s *GenericParameterContext) TagValue() ITagValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITagValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITagValueContext)
}

func (s *GenericParameterContext) StringValue() IStringValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringValueContext)
}

func (s *GenericParameterContext) NumericValue() INumericValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumericValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumericValueContext)
}

func (s *GenericParameterContext) GenericNode() IGenericNodeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGenericNodeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGenericNodeContext)
}

func (s *GenericParameterContext) IdentifierValue() IIdentifierValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierValueContext)
}

func (s *GenericParameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GenericParameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GenericParameterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterGenericParameter(s)
	}
}

func (s *GenericParameterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitGenericParameter(s)
	}
}

func (s *GenericParameterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitGenericParameter(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) GenericParameter() (localctx IGenericParameterContext) {
	this := p
	_ = this

	localctx = NewGenericParameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 432, A2LParserRULE_genericParameter)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2168)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case A2LParserTAG:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2163)

			var _x = p.TagValue()

			localctx.(*GenericParameterContext).tag = _x
		}

	case A2LParserSTRING:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2164)

			var _x = p.StringValue()

			localctx.(*GenericParameterContext).sting = _x
		}

	case A2LParserFLOAT, A2LParserINT, A2LParserHEX:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2165)

			var _x = p.NumericValue()

			localctx.(*GenericParameterContext).numeric = _x
		}

	case A2LParserBEGIN:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2166)

			var _x = p.GenericNode()

			localctx.(*GenericParameterContext).generic = _x
		}

	case A2LParserIDENT:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2167)

			var _x = p.IdentifierValue()

			localctx.(*GenericParameterContext).identifier = _x
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IGenericNodeContext is an interface to support dynamic dispatch.
type IGenericNodeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierValueContext

	// Get_genericParameter returns the _genericParameter rule contexts.
	Get_genericParameter() IGenericParameterContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierValueContext)

	// Set_genericParameter sets the _genericParameter rule contexts.
	Set_genericParameter(IGenericParameterContext)

	// GetElement returns the element rule context list.
	GetElement() []IGenericParameterContext

	// SetElement sets the element rule context list.
	SetElement([]IGenericParameterContext)

	// Getter signatures
	BEGIN() antlr.TerminalNode
	END() antlr.TerminalNode
	AllIdentifierValue() []IIdentifierValueContext
	IdentifierValue(i int) IIdentifierValueContext
	AllGenericParameter() []IGenericParameterContext
	GenericParameter(i int) IGenericParameterContext

	// IsGenericNodeContext differentiates from other interfaces.
	IsGenericNodeContext()
}

type GenericNodeContext struct {
	*antlr.BaseParserRuleContext
	parser            antlr.Parser
	name              IIdentifierValueContext
	_genericParameter IGenericParameterContext
	element           []IGenericParameterContext
}

func NewEmptyGenericNodeContext() *GenericNodeContext {
	var p = new(GenericNodeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = A2LParserRULE_genericNode
	return p
}

func (*GenericNodeContext) IsGenericNodeContext() {}

func NewGenericNodeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GenericNodeContext {
	var p = new(GenericNodeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = A2LParserRULE_genericNode

	return p
}

func (s *GenericNodeContext) GetParser() antlr.Parser { return s.parser }

func (s *GenericNodeContext) GetName() IIdentifierValueContext { return s.name }

func (s *GenericNodeContext) Get_genericParameter() IGenericParameterContext {
	return s._genericParameter
}

func (s *GenericNodeContext) SetName(v IIdentifierValueContext) { s.name = v }

func (s *GenericNodeContext) Set_genericParameter(v IGenericParameterContext) {
	s._genericParameter = v
}

func (s *GenericNodeContext) GetElement() []IGenericParameterContext { return s.element }

func (s *GenericNodeContext) SetElement(v []IGenericParameterContext) { s.element = v }

func (s *GenericNodeContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(A2LParserBEGIN, 0)
}

func (s *GenericNodeContext) END() antlr.TerminalNode {
	return s.GetToken(A2LParserEND, 0)
}

func (s *GenericNodeContext) AllIdentifierValue() []IIdentifierValueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierValueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierValueContext); ok {
			tst[i] = t.(IIdentifierValueContext)
			i++
		}
	}

	return tst
}

func (s *GenericNodeContext) IdentifierValue(i int) IIdentifierValueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierValueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierValueContext)
}

func (s *GenericNodeContext) AllGenericParameter() []IGenericParameterContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IGenericParameterContext); ok {
			len++
		}
	}

	tst := make([]IGenericParameterContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IGenericParameterContext); ok {
			tst[i] = t.(IGenericParameterContext)
			i++
		}
	}

	return tst
}

func (s *GenericNodeContext) GenericParameter(i int) IGenericParameterContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGenericParameterContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGenericParameterContext)
}

func (s *GenericNodeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GenericNodeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GenericNodeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.EnterGenericNode(s)
	}
}

func (s *GenericNodeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(A2LListener); ok {
		listenerT.ExitGenericNode(s)
	}
}

func (s *GenericNodeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case A2LVisitor:
		return t.VisitGenericNode(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *A2LParser) GenericNode() (localctx IGenericNodeContext) {
	this := p
	_ = this

	localctx = NewGenericNodeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 434, A2LParserRULE_genericNode)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2170)
		p.Match(A2LParserBEGIN)
	}
	{
		p.SetState(2171)

		var _x = p.IdentifierValue()

		localctx.(*GenericNodeContext).name = _x
	}
	p.SetState(2175)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (int64((_la-298)) & ^0x3f) == 0 && ((int64(1)<<(_la-298))&1341) != 0 {
		{
			p.SetState(2172)

			var _x = p.GenericParameter()

			localctx.(*GenericNodeContext)._genericParameter = _x
		}
		localctx.(*GenericNodeContext).element = append(localctx.(*GenericNodeContext).element, localctx.(*GenericNodeContext)._genericParameter)

		p.SetState(2177)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(2178)
		p.Match(A2LParserEND)
	}
	{
		p.SetState(2179)
		p.IdentifierValue()
	}

	return localctx
}
